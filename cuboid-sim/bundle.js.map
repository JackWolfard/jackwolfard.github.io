{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/three/build/three.js","src/main.ts","src/webgl-checker.ts"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","global","factory","this","EventDispatcher","undefined","Number","EPSILON","Math","pow","isInteger","value","isFinite","floor","sign","x","Function","prototype","Object","defineProperty","get","toString","match","assign","target","TypeError","output","index","arguments","source","nextKey","hasOwnProperty","addEventListener","type","listener","_listeners","listeners","indexOf","push","hasEventListener","removeEventListener","listenerArray","splice","dispatchEvent","event","array","slice","l","_lut","_canvas","MathUtils","DEG2RAD","PI","RAD2DEG","generateUUID","d0","random","d1","d2","d3","toUpperCase","clamp","min","max","euclideanModulo","m","mapLinear","a1","a2","b1","b2","lerp","y","smoothstep","smootherstep","randInt","low","high","randFloat","randFloatSpread","range","degToRad","degrees","radToDeg","radians","isPowerOfTwo","ceilPowerOfTwo","ceil","log","LN2","floorPowerOfTwo","setQuaternionFromProperEuler","q","b","order","cos","sin","c2","s2","c13","s13","c1_3","s1_3","c3_1","s3_1","set","console","warn","Vector2","Matrix3","elements","error","defineProperties","width","height","isVector2","setScalar","scalar","setX","setY","setComponent","getComponent","clone","constructor","copy","v","add","w","addVectors","addScalar","s","addScaledVector","sub","subVectors","subScalar","multiply","multiplyScalar","divide","divideScalar","applyMatrix3","clampScalar","minVal","maxVal","clampLength","round","roundToZero","negate","dot","cross","lengthSq","sqrt","manhattanLength","abs","normalize","angle","atan2","distanceTo","distanceToSquared","dx","dy","manhattanDistanceTo","setLength","alpha","lerpVectors","v1","v2","equals","fromArray","offset","toArray","fromBufferAttribute","attribute","getX","getY","rotateAround","center","isMatrix3","n11","n12","n13","n21","n22","n23","n31","n32","n33","te","identity","me","setFromMatrix4","multiplyMatrices","premultiply","ae","be","a11","a12","a13","a21","a22","a23","a31","a32","a33","b11","b12","b13","b21","b22","b23","b31","b32","b33","determinant","d","g","h","getInverse","matrix","throwOnDegenerate","isMatrix4","t11","t12","t13","det","msg","detInv","transpose","tmp","getNormalMatrix","matrix4","transposeIntoArray","setUvTransform","tx","ty","sx","sy","rotation","cx","cy","scale","rotate","theta","translate","ImageUtils","getDataURL","image","canvas","HTMLCanvasElement","src","document","createElementNS","context","getContext","ImageData","putImageData","drawImage","toDataURL","textureId","Texture","mapping","wrapS","wrapT","magFilter","minFilter","format","anisotropy","encoding","uuid","name","DEFAULT_IMAGE","mipmaps","DEFAULT_MAPPING","internalFormat","repeat","matrixAutoUpdate","generateMipmaps","premultiplyAlpha","flipY","unpackAlignment","version","onUpdate","Vector4","z","WebGLRenderTarget","options","scissor","scissorTest","viewport","texture","depthBuffer","stencilBuffer","depthTexture","WebGLMultisampleRenderTarget","samples","Quaternion","_x","_y","_z","_w","create","isTexture","updateMatrix","toJSON","meta","isRootObject","textures","metadata","generator","wrap","images","url","Array","isArray","dispose","transformUv","uv","isVector4","setZ","setW","applyMatrix4","setAxisAngleFromQuaternion","acos","setAxisAngleFromRotationMatrix","m11","m12","m13","m21","m22","m23","m31","m32","m33","xx","yy","zz","xy","xz","yz","getZ","getW","isWebGLRenderTarget","setSize","isWebGLMultisampleRenderTarget","slerp","qa","qb","qm","slerpFlat","dst","dstOffset","src0","srcOffset0","src1","srcOffset1","x0","y0","z0","w0","x1","y1","z1","w1","dir","sqrSin","len","tDir","_onChangeCallback","isQuaternion","quaternion","setFromEuler","euler","update","isEuler","c1","c3","s1","s3","setFromAxisAngle","axis","halfAngle","setFromRotationMatrix","trace","setFromUnitVectors","vFrom","vTo","angleTo","rotateTowards","step","inverse","conjugate","multiplyQuaternions","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","cosHalfTheta","sqrSinHalfTheta","sinHalfTheta","halfTheta","ratioA","ratioB","_onChange","callback","_vector","Vector3","_quaternion","isVector3","multiplyVectors","applyEuler","applyQuaternion","applyAxisAngle","applyNormalMatrix","qx","qy","qz","qw","ix","iy","iz","iw","project","camera","matrixWorldInverse","projectionMatrix","unproject","projectionMatrixInverse","matrixWorld","transformDirection","crossVectors","ax","ay","az","bx","by","bz","projectOnVector","denominator","projectOnPlane","planeNormal","reflect","normal","dz","setFromSpherical","setFromSphericalCoords","radius","phi","sinPhiRadius","setFromCylindrical","setFromCylindricalCoords","setFromMatrixPosition","setFromMatrixScale","setFromMatrixColumn","sz","setFromMatrix3Column","_v1","_m1","Matrix4","_zero","_one","n14","n24","n34","n41","n42","n43","n44","copyPosition","extractBasis","xAxis","yAxis","zAxis","makeBasis","extractRotation","scaleX","scaleY","scaleZ","makeRotationFromEuler","af","bf","ce","cf","de","df","ac","ad","bc","bd","makeRotationFromQuaternion","compose","lookAt","eye","up","a14","a24","a34","a41","a42","a43","a44","b14","b24","b34","b41","b42","b43","b44","setPosition","t14","getMaxScaleOnAxis","scaleXSq","scaleYSq","scaleZSq","makeTranslation","makeRotationX","makeRotationY","makeRotationZ","makeRotationAxis","makeScale","makeShear","position","x2","y2","z2","wx","wy","wz","decompose","invSX","invSY","invSZ","makePerspective","left","right","top","bottom","near","far","makeOrthographic","_matrix","_quaternion$1","Euler","_order","DefaultOrder","Layers","mask","RotationOrders","asin","setFromQuaternion","setFromVector3","reorder","newOrder","toVector3","optionalResult","channel","enable","enableAll","toggle","disable","disableAll","test","layers","_object3DId","_v1$1","_q1","_m1$1","_target","_position","_scale","_quaternion$2","_xAxis","_yAxis","_zAxis","_addedEvent","_removedEvent","Object3D","parent","children","DefaultUp","configurable","enumerable","modelViewMatrix","normalMatrix","DefaultMatrixAutoUpdate","matrixWorldNeedsUpdate","visible","castShadow","receiveShadow","frustumCulled","renderOrder","userData","Scene","background","environment","fog","overrideMaterial","autoUpdate","__THREE_DEVTOOLS__","CustomEvent","detail","isObject3D","onBeforeRender","onAfterRender","setRotationFromAxisAngle","setRotationFromEuler","setRotationFromMatrix","setRotationFromQuaternion","rotateOnAxis","rotateOnWorldAxis","rotateX","rotateY","rotateZ","translateOnAxis","distance","translateX","translateY","translateZ","localToWorld","vector","worldToLocal","updateWorldMatrix","isCamera","isLight","object","remove","attach","getObjectById","id","getObjectByProperty","getObjectByName","getWorldPosition","updateMatrixWorld","getWorldQuaternion","getWorldScale","getWorldDirection","raycast","traverse","traverseVisible","traverseAncestors","force","updateParents","updateChildren","geometries","materials","shapes","serialize","library","element","JSON","stringify","isInstancedMesh","count","instanceMatrix","isMesh","isLine","isPoints","geometry","parameters","shape","material","uuids","extractFromCache","cache","values","key","data","recursive","parse","child","isScene","_points","_vector$1","_box","Box3","_v0","_v1$2","_v2","_f0","_f1","_f2","_center","_extents","_triangleNormal","_testAxis","satForAxes","axes","v0","extents","j","p0","p1","p2","isBox3","setFromArray","minX","minY","minZ","maxX","maxY","maxZ","setFromBufferAttribute","setFromPoints","points","makeEmpty","il","expandByPoint","setFromCenterAndSize","size","halfSize","setFromObject","expandByObject","box","isEmpty","getCenter","getSize","point","expandByVector","expandByScalar","boundingBox","computeBoundingBox","containsPoint","containsBox","getParameter","intersectsBox","intersectsSphere","sphere","clampPoint","intersectsPlane","plane","constant","intersectsTriangle","triangle","distanceToPoint","getBoundingSphere","intersect","union","_box$1","Sphere","optionalCenter","maxRadiusSq","empty","radiusSum","deltaLengthSq","getBoundingBox","_vector$2","_segCenter","_segDir","_diff","_edge1","_edge2","_normal","Ray","origin","direction","ray","at","recast","closestPointToPoint","directionDistance","distanceSqToPoint","distanceSqToSegment","optionalPointOnRay","optionalPointOnSegment","s0","sqrDist","extDet","segExtent","a01","b0","invDet","intersectSphere","tca","radius2","thc","t0","t1","distanceToPlane","intersectPlane","distToPoint","intersectBox","tmin","tmax","tymin","tymax","tzmin","tzmax","invdirx","invdiry","invdirz","intersectTriangle","backfaceCulling","DdN","DdQxE2","DdE1xQ","QdN","_vector1","_vector2","_normalMatrix","Plane","isPlane","setComponents","setFromNormalAndCoplanarPoint","setFromCoplanarPoints","inverseNormalLength","distanceToSphere","projectPoint","intersectLine","line","delta","start","intersectsLine","startSign","endSign","end","coplanarPoint","optionalNormalMatrix","referencePoint","_v0$1","_v1$3","_v2$1","_v3","_vab","_vac","_vbc","_vap","_vbp","_vcp","Triangle","getNormal","targetLengthSq","getBarycoord","dot00","dot01","dot02","dot11","dot12","denom","invDenom","getUV","p3","uv1","uv2","uv3","isFrontFacing","setFromPointsAndIndices","i0","i1","i2","getArea","getMidpoint","getPlane","d4","vc","d5","d6","vb","va","_colorKeywords","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","_hslA","_hslB","Color","setRGB","hue2rgb","SRGBToLinear","LinearToSRGB","Face3","color","materialIndex","vertexNormals","isColor","vertexColors","setHex","setStyle","hex","setHSL","style","handleAlpha","string","parseFloat","exec","components","parseInt","charAt","setColorName","copyGammaToLinear","gammaFactor","copyLinearToGamma","safeInverse","convertGammaToLinear","convertLinearToGamma","copySRGBToLinear","copyLinearToSRGB","convertSRGBToLinear","convertLinearToSRGB","getHex","getHexString","getHSL","hue","saturation","lightness","getStyle","offsetHSL","addColors","color1","color2","lerpHSL","NAMES","materialId","Material","blending","side","flatShading","vertexTangents","opacity","transparent","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","depthFunc","depthTest","depthWrite","stencilWriteMask","stencilFunc","stencilRef","stencilFuncMask","stencilFail","stencilZFail","stencilZPass","stencilWrite","clippingPlanes","clipIntersection","clipShadows","shadowSide","colorWrite","precision","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","dithering","alphaTest","premultipliedAlpha","toneMapped","MeshBasicMaterial","map","lightMap","lightMapIntensity","aoMap","aoMapIntensity","specularMap","alphaMap","envMap","combine","reflectivity","refractionRatio","wireframe","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","skinning","morphTargets","setValues","isMaterial","onBeforeCompile","newValue","currentValue","isRoot","roughness","metalness","sheen","emissive","emissiveIntensity","specular","shininess","clearcoat","clearcoatRoughness","clearcoatNormalMap","clearcoatNormalScale","matcap","bumpMap","bumpScale","normalMap","normalMapType","normalScale","displacementMap","displacementScale","displacementBias","roughnessMap","metalnessMap","emissiveMap","envMapIntensity","gradientMap","sizeAttenuation","linewidth","dashSize","gapSize","morphNormals","srcPlanes","dstPlanes","isMeshBasicMaterial","_vector$3","BufferAttribute","itemSize","normalized","usage","updateRange","Int8BufferAttribute","Int8Array","Uint8BufferAttribute","Uint8Array","Uint8ClampedBufferAttribute","Uint8ClampedArray","Int16BufferAttribute","Int16Array","Uint16BufferAttribute","Uint16Array","Int32BufferAttribute","Int32Array","Uint32BufferAttribute","Uint32Array","Float32BufferAttribute","Float32Array","Float64BufferAttribute","Float64Array","DirectGeometry","vertices","normals","colors","uvs","uvs2","groups","skinWeights","skinIndices","boundingSphere","verticesNeedUpdate","normalsNeedUpdate","colorsNeedUpdate","uvsNeedUpdate","groupsNeedUpdate","arrayMax","isBufferAttribute","onUploadCallback","setUsage","copyAt","index1","index2","copyArray","copyColorsArray","copyVector2sArray","vectors","copyVector3sArray","copyVector4sArray","setXYZ","setXY","setXYZW","onUpload","computeGroups","group","faces","face","fromGeometry","morphTargetsPosition","faceVertexUvs","hasFaceVertexUv","hasFaceVertexUv2","morphTargetsLength","morphTargetsNormal","morphNormalsLength","hasSkinIndices","hasSkinWeights","vertexUvs","morphTarget","morphNormal","_bufferGeometryId","_m1$2","_obj","_offset","_box$2","_boxMorphTargets","_vector$4","BufferGeometry","attributes","morphAttributes","morphTargetsRelative","drawRange","Infinity","isBufferGeometry","getIndex","setIndex","getAttribute","setAttribute","deleteAttribute","addGroup","clearGroups","setDrawRange","needsUpdate","tangent","computeBoundingSphere","positions","lineDistances","isGeometry","updateFromObject","direct","__directGeometry","elementsNeedUpdate","lineDistancesNeedUpdate","lineDistance","fromDirectGeometry","morphAttributesPosition","morphAttribute","isNaN","jl","computeFaceNormals","computeVertexNormals","vA","vB","vC","pA","pB","pC","cb","ab","indices","normalizeNormals","merge","attributeArray1","attribute2","attributeArray2","attributeOffset","toNonIndexed","convertBufferAttribute","array2","geometry2","newAttribute","morphArray","keys","attributeData","hasMorphAttributes","attributeArray","_inverseMatrix","_ray","_sphere","_vA","_vB","_vC","_tempA","_tempB","_tempC","_morphA","_morphB","_morphC","_uvA","_uvB","_uvC","_intersectionPoint","_intersectionPointWorld","Mesh","updateMorphTargets","checkIntersection","raycaster","checkBufferGeometryIntersection","morphPosition","morphInfluences","morphTargetInfluences","influence","intersection","morphTargetDictionary","ml","String","intersects","groupMaterial","faceIndex","fvA","fvB","fvC","isMultiMaterial","fl","faceMaterial","uvs_f","_geometryId","_m1$3","_obj$1","_offset$1","Geometry","fromBufferGeometry","scope","addFace","areaWeighted","vl","computeFlatVertexNormals","computeMorphNormals","__originalFaceNormal","__originalVertexNormals","tmpGeo","faceNormals","dstNormalsFace","dstNormalsVertex","faceNormal","materialIndexOffset","vertexOffset","vertices1","vertices2","faces1","faces2","colors1","colors2","vertexCopy","faceCopy","faceVertexNormals","faceVertexColors","faceVertexUvs2","uvsCopy","k","kl","mergeMesh","mesh","mergeVertices","verticesMap","unique","changes","faceIndicesToRemove","idx","diff","sortFacesByMaterialIndex","_id","sort","newUvs1","newUvs2","uvs1","vertex","normalsHash","colorsHash","uvsHash","hasFaceNormal","hasFaceVertexNormal","hasFaceColor","hasFaceVertexColor","faceType","setBit","getUvIndex","getNormalIndex","getColorIndex","enabled","hash","srcVertexNormal","destVertexNormal","BoxGeometry","depth","widthSegments","heightSegments","depthSegments","BoxBufferGeometry","__proto__","numberOfVertices","groupStart","buildPlane","udir","vdir","gridX","gridY","segmentWidth","segmentHeight","widthHalf","heightHalf","depthHalf","gridX1","gridY1","vertexCounter","groupCount","cloneUniforms","property","mergeUniforms","uniforms","merged","UniformsUtils","ShaderMaterial","defines","vertexShader","fragmentShader","lights","clipping","extensions","derivatives","fragDepth","drawBuffers","shaderTextureLOD","defaultAttributeValues","index0AttributeName","uniformsNeedUpdate","Camera","PerspectiveCamera","fov","aspect","zoom","focus","view","filmGauge","filmOffset","updateProjectionMatrix","CubeCamera","cubeResolution","cameraPX","cameraNX","cameraPY","cameraNY","cameraPZ","cameraNZ","renderTarget","WebGLCubeRenderTarget","renderer","scene","currentRenderTarget","getRenderTarget","setRenderTarget","render","clear","stencil","dummy","DataTexture","isShaderMaterial","isPerspectiveCamera","setFocalLength","focalLength","vExtentSlope","getFilmHeight","atan","getFocalLength","getEffectiveFOV","getFilmWidth","setViewOffset","fullWidth","fullHeight","offsetX","offsetY","clearViewOffset","skew","isWebGLCubeRenderTarget","fromEquirectangularTexture","shader","tEquirect","join","isDataTexture","_sphere$1","_vector$5","Frustum","p4","p5","planes","frustum","setFromProjectionMatrix","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","intersectsObject","intersectsSprite","sprite","negRadius","UniformsLib","common","diffuse","uvTransform","uv2Transform","specularmap","envmap","flipEnvMap","maxMipLevel","aomap","lightmap","emissivemap","bumpmap","normalmap","displacementmap","roughnessmap","metalnessmap","gradientmap","fogDensity","fogNear","fogFar","fogColor","ambientLightColor","lightProbe","directionalLights","properties","shadow","shadowBias","shadowRadius","shadowMapSize","directionalShadowMap","directionalShadowMatrix","spotLights","coneCos","penumbraCos","decay","spotShadowMap","spotShadowMatrix","pointLights","shadowCameraNear","shadowCameraFar","pointShadowMap","pointShadowMatrix","hemisphereLights","skyColor","groundColor","rectAreaLights","WebGLAnimation","isAnimating","animationLoop","onAnimationFrame","time","frame","requestAnimationFrame","stop","setAnimationLoop","setContext","WebGLAttributes","gl","capabilities","isWebGL2","buffers","WeakMap","isInterleavedBufferAttribute","deleteBuffer","buffer","delete","bufferType","createBuffer","bindBuffer","bufferData","bytesPerElement","BYTES_PER_ELEMENT","bufferSubData","subarray","updateBuffer","PlaneGeometry","PlaneBufferGeometry","width_half","height_half","segment_width","segment_height","ShaderChunk","alphamap_fragment","alphamap_pars_fragment","alphatest_fragment","aomap_fragment","aomap_pars_fragment","begin_vertex","beginnormal_vertex","bsdfs","bumpmap_pars_fragment","clipping_planes_fragment","clipping_planes_pars_fragment","clipping_planes_pars_vertex","clipping_planes_vertex","color_fragment","color_pars_fragment","color_pars_vertex","color_vertex","cube_uv_reflection_fragment","defaultnormal_vertex","displacementmap_pars_vertex","displacementmap_vertex","emissivemap_fragment","emissivemap_pars_fragment","encodings_fragment","encodings_pars_fragment","envmap_fragment","envmap_common_pars_fragment","envmap_pars_fragment","envmap_pars_vertex","envmap_physical_pars_fragment","envmap_vertex","fog_vertex","fog_pars_vertex","fog_fragment","fog_pars_fragment","gradientmap_pars_fragment","lightmap_fragment","lightmap_pars_fragment","lights_lambert_vertex","lights_pars_begin","lights_toon_fragment","lights_toon_pars_fragment","lights_phong_fragment","lights_phong_pars_fragment","lights_physical_fragment","lights_physical_pars_fragment","lights_fragment_begin","lights_fragment_maps","lights_fragment_end","logdepthbuf_fragment","logdepthbuf_pars_fragment","logdepthbuf_pars_vertex","logdepthbuf_vertex","map_fragment","map_pars_fragment","map_particle_fragment","map_particle_pars_fragment","metalnessmap_fragment","metalnessmap_pars_fragment","morphnormal_vertex","morphtarget_pars_vertex","morphtarget_vertex","normal_fragment_begin","normal_fragment_maps","normalmap_pars_fragment","clearcoat_normal_fragment_begin","clearcoat_normal_fragment_maps","clearcoat_normalmap_pars_fragment","packing","premultiplied_alpha_fragment","project_vertex","dithering_fragment","dithering_pars_fragment","roughnessmap_fragment","roughnessmap_pars_fragment","shadowmap_pars_fragment","shadowmap_pars_vertex","shadowmap_vertex","shadowmask_pars_fragment","skinbase_vertex","skinning_pars_vertex","skinning_vertex","skinnormal_vertex","specularmap_fragment","specularmap_pars_fragment","tonemapping_fragment","tonemapping_pars_fragment","uv_pars_fragment","uv_pars_vertex","uv_vertex","uv2_pars_fragment","uv2_pars_vertex","uv2_vertex","worldpos_vertex","background_frag","background_vert","cube_frag","cube_vert","depth_frag","depth_vert","distanceRGBA_frag","distanceRGBA_vert","equirect_frag","equirect_vert","linedashed_frag","linedashed_vert","meshbasic_frag","meshbasic_vert","meshlambert_frag","meshlambert_vert","meshmatcap_frag","meshmatcap_vert","meshtoon_frag","meshtoon_vert","meshphong_frag","meshphong_vert","meshphysical_frag","meshphysical_vert","normal_frag","normal_vert","points_frag","points_vert","shadow_frag","shadow_vert","sprite_frag","sprite_vert","ShaderLib","basic","lambert","phong","standard","toon","dashed","totalSize","t2D","cube","equirect","distanceRGBA","referencePosition","nearDistance","farDistance","WebGLBackground","state","objects","planeMesh","boxMesh","clearColor","clearAlpha","currentBackground","currentBackgroundVersion","currentTonemapping","setClear","getClearColor","setClearColor","getClearAlpha","setClearAlpha","renderList","forceClear","xr","session","getSession","environmentBlendMode","autoClear","autoClearColor","autoClearDepth","autoClearStencil","isCubeTexture","toneMapping","unshift","WebGLBufferRenderer","info","mode","setMode","drawArrays","renderInstances","primcount","extension","methodName","WebGLCapabilities","maxAnisotropy","getMaxPrecision","getShaderPrecisionFormat","WebGL2RenderingContext","WebGL2ComputeRenderingContext","maxPrecision","logarithmicDepthBuffer","maxTextures","maxVertexTextures","maxTextureSize","maxCubemapSize","maxAttributes","maxVertexUniforms","maxVaryings","maxFragmentUniforms","vertexTextures","floatFragmentTextures","getMaxAnisotropy","MAX_TEXTURE_MAX_ANISOTROPY_EXT","floatVertexTextures","maxSamples","WebGLClipping","globalState","numGlobalPlanes","localClippingEnabled","renderingShadows","viewNormalMatrix","uniform","resetGlobalState","numPlanes","numIntersection","projectPlanes","skipTransform","nPlanes","dstArray","flatSize","viewMatrix","i4","init","enableLocalClipping","beginShadows","endShadows","setState","fromCache","nGlobal","lGlobal","clippingState","WebGLExtensions","getExtension","WebGLGeometries","wireframeAttributes","onGeometryDispose","buffergeometry","memory","updateWireframeAttribute","geometryIndex","geometryPosition","previousAttribute","_bufferGeometry","geometryAttributes","getWireframeAttribute","currentAttribute","WebGLIndexedBufferRenderer","drawElements","WebGLInfo","calls","triangles","lines","programs","autoReset","reset","instanceCount","absNumericalSort","WebGLMorphtargets","influencesList","program","objectInfluences","influences","morphInfluencesSum","morphBaseInfluence","getUniforms","setValue","WebGLObjects","updateList","CubeTexture","DataTexture2DArray","wrapR","DataTexture3D","physical","transparency","isDataTexture2DArray","isDataTexture3D","emptyTexture","emptyTexture2dArray","emptyTexture3d","emptyCubeTexture","arrayCacheF32","arrayCacheI32","mat4array","mat3array","mat2array","flatten","nBlocks","blockSize","firstElem","arraysEqual","allocTexUnits","allocateTextureUnit","setValueV1f","uniform1f","addr","setValueV2f","uniform2f","uniform2fv","setValueV3f","uniform3f","uniform3fv","setValueV4f","uniform4f","uniform4fv","setValueM2","uniformMatrix2fv","setValueM3","uniformMatrix3fv","setValueM4","uniformMatrix4fv","setValueT1","unit","uniform1i","safeSetTexture2D","setValueT2DArray1","setTexture2DArray","setValueT3D1","setTexture3D","setValueT6","safeSetTextureCube","setValueV1i","setValueV2i","uniform2iv","setValueV3i","uniform3iv","setValueV4i","uniform4iv","setValueV1ui","uniform1ui","setValueV1fArray","uniform1fv","setValueV1iArray","uniform1iv","setValueV2iArray","setValueV3iArray","setValueV4iArray","setValueV2fArray","setValueV3fArray","setValueV4fArray","setValueM2Array","setValueM3Array","setValueM4Array","setValueT1Array","units","setValueT6Array","SingleUniform","activeInfo","getSingularSetter","PureArrayUniform","getPureArraySetter","StructuredUniform","seq","updateCache","RePathPart","addUniform","container","uniformObject","parseUniform","path","pathLength","lastIndex","matchEnd","idIsIndex","subscript","next","WebGLUniforms","getProgramParameter","getActiveUniform","getUniformLocation","WebGLShader","createShader","shaderSource","compileShader","setOptional","upload","seqWithValue","programIdCount","getEncodingComponents","getShaderErrors","status","getShaderParameter","getShaderInfoLog","trim","split","addLineNumbers","getShaderSource","getTexelDecodingFunction","functionName","getToneMappingFunction","toneMappingName","filterEmptyLine","replaceLightNums","replace","numDirLights","numSpotLights","numRectAreaLights","numPointLights","numHemiLights","numDirLightShadows","numSpotLightShadows","numPointLightShadows","replaceClippingPlaneNums","numClippingPlanes","numClipIntersection","includePattern","resolveIncludes","includeReplacer","include","loopPattern","unrollLoops","loopReplacer","snippet","generatePrecision","precisionstring","WebGLProgram","cacheKey","prefixVertex","prefixFragment","shadowMapTypeDefine","shadowMapType","generateShadowMapTypeDefine","envMapTypeDefine","envMapMode","generateEnvMapTypeDefine","envMapModeDefine","generateEnvMapModeDefine","envMapBlendingDefine","generateEnvMapBlendingDefine","gammaFactorDefine","customExtensions","extensionDerivatives","envMapCubeUV","tangentSpaceNormalMap","shaderID","extensionFragDepth","rendererExtensionFragDepth","extensionDrawBuffers","rendererExtensionDrawBuffers","extensionShaderTextureLOD","rendererExtensionShaderTextureLod","filter","generateExtensions","customDefines","chunks","generateDefines","createProgram","numMultiviewViews","isRawShaderMaterial","shaderName","instancing","supportsVertexTextures","maxBones","useFog","fogExp2","objectSpaceNormalMap","uvsVertexOnly","useVertexTexture","doubleSided","flipSided","shadowMapEnabled","physicallyCorrectLights","outputEncoding","mapEncoding","matcapEncoding","envMapEncoding","emissiveMapEncoding","lightMapEncoding","depthPacking","isGLSL3ShaderMaterial","versionRegex","cachedUniforms","cachedAttributes","fragmentGlsl","glVertexShader","glFragmentShader","attachShader","bindAttribLocation","linkProgram","debug","checkShaderErrors","programLog","getProgramInfoLog","vertexLog","fragmentLog","runnable","haveDiagnostics","vertexErrors","fragmentErrors","getError","diagnostics","prefix","deleteShader","getAttributes","getActiveAttrib","getAttribLocation","fetchAttributeLocations","destroy","deleteProgram","usedTimes","WebGLPrograms","shaderIDs","MeshDepthMaterial","MeshDistanceMaterial","MeshNormalMaterial","MeshLambertMaterial","MeshPhongMaterial","MeshToonMaterial","MeshStandardMaterial","MeshPhysicalMaterial","MeshMatcapMaterial","LineBasicMaterial","LineDashedMaterial","PointsMaterial","ShadowMaterial","SpriteMaterial","parameterNames","getTextureEncodingFromMap","getParameters","shadows","nClipPlanes","nClipIntersection","isMeshStandardMaterial","isSkinnedMesh","bones","skeleton","nVertexUniforms","nVertexMatrices","allocateBones","shaderobject","getShaderObject","isWebGLMultiviewRenderTarget","numViews","isFogExp2","maxMorphTargets","maxMorphNormals","directional","spot","rectArea","hemi","shadowMap","frawbuffers","extensionDrawbuffers","drawbuffers","getProgramCacheKey","acquireProgram","pl","preexistingProgram","releaseProgram","pop","WebGLProperties","painterSortStable","groupOrder","reversePainterSortStable","WebGLRenderList","renderItems","renderItemsIndex","opaque","defaultProgram","getNextRenderItem","renderItem","customOpaqueSort","customTransparentSort","WebGLRenderLists","lists","onSceneDispose","list","cameras","UniformsCache","light","halfWidth","halfHeight","nextVersion","shadowCastingLightsFirst","lightA","lightB","WebGLLights","directionalLength","pointLength","spotLength","rectAreaLength","hemiLength","numDirectionalShadows","numPointShadows","numSpotShadows","ambient","probe","vector3","matrix42","setup","intensity","isAmbientLight","isLightProbe","sh","coefficients","isDirectionalLight","bias","mapSize","isSpotLight","penumbra","isRectAreaLight","isPointLight","isHemisphereLight","WebGLRenderState","lightsArray","shadowsArray","setupLights","pushLight","pushShadow","shadowLight","WebGLRenderStates","renderStates","renderState","has","WebGLShadowMap","_renderer","_objects","_frustum","_shadowMapSize","_viewportSize","_viewport","_depthMaterials","_distanceMaterials","_materialCache","0","2","shadowMaterialVertical","SAMPLE_RATE","HALF_SAMPLE_RATE","shadow_pass","resolution","shadowMaterialHorizonal","HORIZONAL_PASS","fullScreenTri","fullScreenMesh","VSMPass","mapPass","renderBufferDirect","getDepthMaterialVariant","useMorphing","useSkinning","useInstancing","getDistanceMaterialVariant","getDepthMaterial","result","getMaterialVariant","customMaterial","customDepthMaterial","customDistanceMaterial","keyA","keyB","materialsForVariant","cachedMaterial","isMeshDistanceMaterial","renderObject","shadowCamera","depthMaterial","activeCubeFace","getActiveCubeFace","activeMipmapLevel","getActiveMipmapLevel","_state","setBlending","setTest","setScissorTest","shadowFrameExtents","getFrameExtents","isPointLightShadow","pars","viewportCount","getViewportCount","vp","getViewport","updateMatrices","getFrustum","WebGLState","colorBuffer","locked","currentColorMask","currentColorClear","setMask","colorMask","setLocked","lock","currentDepthMask","currentDepthFunc","currentDepthClear","depthMask","setFunc","clearDepth","currentStencilMask","currentStencilFunc","currentStencilRef","currentStencilFuncMask","currentStencilFail","currentStencilZFail","currentStencilZPass","currentStencilClear","stencilTest","stencilMask","setOp","stencilOp","clearStencil","maxVertexAttributes","newAttributes","enabledAttributes","attributeDivisors","enabledCapabilities","currentProgram","currentBlendingEnabled","currentBlending","currentBlendEquation","currentBlendSrc","currentBlendDst","currentBlendEquationAlpha","currentBlendSrcAlpha","currentBlendDstAlpha","currentPremultipledAlpha","currentFlipSided","currentCullFace","currentLineWidth","currentPolygonOffsetFactor","currentPolygonOffsetUnits","lineWidthAvailable","glVersion","currentTextureSlot","currentBoundTextures","currentScissor","currentViewport","createTexture","bindTexture","texParameteri","texImage2D","emptyTextures","enableAttributeAndDivisor","meshPerAttribute","enableVertexAttribArray","setFlipSided","setCullFace","equationToGL","100","101","102","MIN_EXT","MAX_EXT","factorToGL","blendEquationSeparate","blendFuncSeparate","blendFunc","frontFace","cullFace","setPolygonOffset","factor","activeTexture","webglSlot","initAttributes","enableAttribute","disableUnusedAttributes","disableVertexAttribArray","useProgram","setMaterial","frontFaceCW","setLineWidth","lineWidth","webglType","webglTexture","boundTexture","unbindTexture","compressedTexImage2D","apply","texImage3D","WebGLTextures","_gl","utils","_videoTextures","useOffscreenCanvas","OffscreenCanvas","err","createCanvas","resizeImage","needsPowerOfTwo","needsNewCanvas","maxSize","HTMLImageElement","ImageBitmap","textureNeedsGenerateMipmaps","supportsMips","generateMipmap","__maxMipLevel","LOG2E","getInternalFormat","internalFormatName","glFormat","glType","filterFallback","onTextureDispose","textureProperties","__webglInit","deleteTexture","__webglTexture","deallocateTexture","isVideoTexture","onRenderTargetDispose","renderTargetProperties","deleteFramebuffer","__webglFramebuffer","__webglDepthbuffer","deleteRenderbuffer","__webglColorTexture","__webglDepthStencilTexture","__webglViewFramebuffers","deallocateRenderTarget","textureUnits","setTexture2D","slot","updateVideoTexture","__version","complete","uploadTexture","setTextureCube","initTexture","pixelStorei","isCompressed","isCompressedTexture","cubeImage","convert","glInternalFormat","setTextureParameters","mipmap","mipmapImage","setTextureCubeDynamic","wrappingToGL","1000","1001","1002","filterToGL","textureType","__currentAnisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","textureNeedsPowerOfTwo","isDepthTexture","setupFrameBufferTexture","framebuffer","attachment","textureTarget","bindFramebuffer","framebufferTexture2D","setupRenderBufferStorage","renderbuffer","isMultisample","bindRenderbuffer","getRenderTargetSamples","renderbufferStorageMultisample","renderbufferStorage","framebufferRenderbuffer","setupDepthRenderbuffer","isCube","webglDepthTexture","setupDepthTexture","createRenderbuffer","warnedTexture2D","warnedTextureCube","textureUnit","resetTextureUnits","setupRenderTarget","isMultiview","createFramebuffer","__webglMultisampledFramebuffer","__webglColorRenderbuffer","__webglDepthRenderbuffer","ext","colorTexture","framebufferTextureMultiviewOVR","depthStencilTexture","viewFramebuffers","framebufferTextureLayer","updateRenderTargetMipmap","updateMultisampleRenderTarget","blitFramebuffer","WebGLUtils","HALF_FLOAT_OES","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","COMPRESSED_RGB_ETC1_WEBGL","UNSIGNED_INT_24_8_WEBGL","WebGLMultiviewRenderTarget","WebGLMultiview","mat3","mat4","cameraArray","renderSize","available","maxNumViews","getCameraArray","isArrayCamera","isAvailable","getContextAttributes","antialias","MAX_VIEWS_OVR","attachCamera","isMultiviewCompatible","getDrawingBufferSize","setNumViews","resizeRenderTarget","detachCamera","srcRenderTarget","srcFramebuffers","viewWidth","viewHeight","flush","updateCameraProjectionMatricesUniform","updateCameraViewMatricesUniform","updateObjectMatricesUniforms","ArrayCamera","Group","WebXRManager","referenceSpace","referenceSpaceType","pose","controllers","inputSourcesMap","Map","cameraL","cameraR","cameraVR","_currentDepthNear","_currentDepthFar","onSessionEvent","controller","inputSource","targetRay","grip","onSessionEnd","forEach","setFramebuffer","animation","isPresenting","onRequestReferenceSpace","updateInputSources","inputSources","removed","added","getController","getControllerGrip","setFramebufferScaleFactor","setReferenceSpaceType","getReferenceSpace","setSession","layerInit","baseLayer","XRWebGLLayer","updateRenderState","requestReferenceSpace","then","cameraLPos","cameraRPos","updateCamera","getCamera","depthNear","depthFar","ipd","projL","projR","topFov","bottomFov","leftFov","rightFov","zOffset","xOffset","near2","far2","left2","right2","top2","bottom2","setProjectionFromUnion","onAnimationFrameCallback","getViewerPose","views","transform","inputPose","gripPose","getPose","targetRaySpace","gripSpace","WebGLRenderer","_context","_alpha","_depth","_stencil","_antialias","_premultipliedAlpha","_preserveDrawingBuffer","preserveDrawingBuffer","_powerPreference","powerPreference","_failIfMajorPerformanceCaveat","failIfMajorPerformanceCaveat","currentRenderList","currentRenderState","domElement","sortObjects","toneMappingExposure","toneMappingWhitePoint","programCache","renderLists","morphtargets","bufferRenderer","indexedBufferRenderer","_this","_isContextLost","_framebuffer","_currentActiveCubeFace","_currentActiveMipmapLevel","_currentRenderTarget","_currentFramebuffer","_currentMaterialId","_currentGeometryProgram","_currentCamera","_currentArrayCamera","_currentViewport","_currentScissor","_currentScissorTest","_width","_height","_pixelRatio","_opaqueSort","_transparentSort","_scissor","_scissorTest","_clipping","_clippingEnabled","_localClippingEnabled","_projScreenMatrix","_vector3","getTargetPixelRatio","contextAttributes","xrCompatible","onContextLost","onContextRestore","rangeMin","rangeMax","message","initGLContext","multiview","preventDefault","onMaterialDispose","releaseMaterialProgramReference","deallocateMaterial","programInfo","forceContextLoss","loseContext","forceContextRestore","restoreContext","getPixelRatio","setPixelRatio","updateStyle","setViewport","setDrawingBufferSize","pixelRatio","getCurrentViewport","getScissor","setScissor","getScissorTest","boolean","setOpaqueSort","method","setTransparentSort","bits","renderBufferImmediate","hasPositions","hasNormals","hasUvs","hasColors","programAttributes","positionArray","vertexAttribPointer","normalArray","uvArray","colorArray","tempScene","setProgram","updateBuffers","rangeFactor","isInstancedBufferGeometry","materialDefaultAttributeValues","programAttribute","geometryAttribute","stride","isInstancedInterleavedBuffer","maxInstancedCount","isInstancedBufferAttribute","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttrib1fv","setupVertexAttributes","dataCount","rangeStart","rangeCount","drawStart","drawEnd","drawCount","isLineSegments","isLineLoop","isSprite","compile","compiled","initMaterial","projectObject","isGroup","isLOD","isImmediateRenderObject","renderObjects","camera2","renderObjectImmediate","materialProperties","lightsStateVersion","programCacheKey","programChange","numSupportedMorphTargets","numSupportedMorphNormals","needsLights","isMeshLambertMaterial","isMeshToonMaterial","isMeshPhongMaterial","isShadowMaterial","materialNeedsLights","progUniforms","uniformsList","useCache","refreshProgram","refreshMaterial","refreshLights","p_uniforms","m_uniforms","uCamPos","cameraPosition","isOrthographicCamera","boneTexture","boneMatrices","boneTextureSize","isFog","density","refreshUniformsFog","refreshUniformsCommon","refreshUniformsLambert","refreshUniformsToon","refreshUniformsPhong","isMeshPhysicalMaterial","refreshUniformsStandard","refreshUniformsPhysical","isMeshMatcapMaterial","refreshUniformsMatcap","isMeshDepthMaterial","refreshUniformsDepth","refreshUniformsDistance","isMeshNormalMaterial","refreshUniformsNormal","isLineBasicMaterial","refreshUniformsLine","isLineDashedMaterial","refreshUniformsDash","isPointsMaterial","uvScaleMap","refreshUniformsPoints","isSpriteMaterial","refreshUniformsSprites","ltc_1","LTC_1","ltc_2","LTC_2","uv2ScaleMap","window","opaqueObjects","transparentObjects","readRenderTargetPixels","activeCubeFaceIndex","restore","textureFormat","checkFramebufferStatus","readPixels","copyFramebufferToTexture","level","levelScale","copyTexImage2D","copyTextureToTexture","srcTexture","dstTexture","texSubImage2D","FogExp2","Fog","InterleavedBuffer","isInterleavedBuffer","_geometry","_vector$6","InterleavedBufferAttribute","interleavedBuffer","_intersectPoint","_worldScale","_mvPosition","_alignedPosition","_rotatedPosition","_viewWorldMatrix","_vA$1","_vB$1","_vC$1","_uvA$1","_uvB$1","_uvC$1","Sprite","transformVertex","vertexPosition","mvPosition","_v1$4","_v2$2","LOD","levels","SkinnedMesh","bindMode","bindMatrix","bindMatrixInverse","addLevel","getObjectForDistance","bind","calculateInverses","normalizeSkinWeights","skinWeight","_offsetMatrix","_identityMatrix","Skeleton","boneInverses","Bone","bone","isBone","getBoneByName","_instanceLocalMatrix","_instanceWorldMatrix","_instanceIntersects","_mesh","InstancedMesh","linecap","linejoin","getMatrixAt","raycastTimes","instanceId","setMatrixAt","_start","_end","_inverseMatrix$1","_ray$1","_sphere$2","Line","computeLineDistances","positionAttribute","linePrecision","localPrecision","localPrecisionSq","vStart","vEnd","interSegment","interRay","nbVertices","_start$1","_end$1","LineSegments","LineLoop","_inverseMatrix$2","_ray$2","_sphere$3","_position$1","Points","testPoint","localThresholdSq","rayPointDistanceSq","intersectPoint","distanceToRay","VideoTexture","video","CompressedTexture","CanvasTexture","DepthTexture","WireframeGeometry","ol","edge1","edge2","edge","edges","ParametricGeometry","func","slices","stacks","ParametricBufferGeometry","pu","pv","sliceCount","PolyhedronGeometry","PolyhedronBufferGeometry","vertexBuffer","uvBuffer","subdivideFace","cols","aj","bj","rows","pushVertex","getVertexByIndex","correctUV","azimuth","subdivide","applyRadius","centroid","uvA","uvB","uvC","azi","correctUVs","correctSeam","generateUVs","TetrahedronGeometry","TetrahedronBufferGeometry","OctahedronGeometry","OctahedronBufferGeometry","IcosahedronGeometry","IcosahedronBufferGeometry","DodecahedronGeometry","DodecahedronBufferGeometry","TubeGeometry","tubularSegments","radialSegments","closed","taper","bufferGeometry","TubeBufferGeometry","tangents","binormals","frames","computeFrenetFrames","P","generateSegment","getPointAt","N","B","generateIndices","generateBufferData","TorusKnotGeometry","tube","heightScale","TorusKnotBufferGeometry","P1","P2","T","calculatePositionOnCurve","cu","su","quOverP","cs","TorusGeometry","arc","TorusBufferGeometry","threshold","params","localThreshold","readyState","HAVE_CURRENT_DATA","isCanvasTexture","Earcut","holeIndices","dim","invSize","hasHoles","outerLen","outerNode","linkedList","prev","queue","steiner","getLeftmost","compareX","eliminateHole","filterPoints","eliminateHoles","earcutLinked","clockwise","last","sum","signedArea","insertNode","removeNode","again","area","ear","pass","zOrder","prevZ","nextZ","tail","numMerges","pSize","qSize","inSize","sortLinked","indexCurve","isEarHashed","isEar","cureLocalIntersections","splitEarcut","pointInTriangle","minTX","minTY","maxTX","maxTY","locallyInside","isValidDiagonal","splitPolygon","hole","hx","hy","mx","my","tanMin","findHoleBridge","leftmost","px","py","intersectsPolygon","inside","middleInside","q1","q2","Node","an","bp","ShapeUtils","contour","isClockWise","pts","triangulateShape","holes","removeDupEndPts","addContour","holeIndex","ExtrudeGeometry","ExtrudeBufferGeometry","verticesArray","addShape","placeholder","curveSegments","steps","bevelEnabled","bevelThickness","bevelSize","bevelOffset","bevelSegments","extrudePath","uvgen","UVGenerator","WorldUVGenerator","amount","extrudePts","splineTube","binormal","position2","ahole","hl","extrudeByPath","getSpacedPoints","shapePoints","extractPoints","reverse","concat","scalePt2","pt","vec","bs","vert","vlen","flen","getBevelVec","inPt","inPrev","inNext","v_trans_x","v_trans_y","shrink_by","v_prev_x","v_prev_y","v_next_x","v_next_y","v_prev_lensq","collinear0","v_prev_len","v_next_len","ptPrevShift_x","ptPrevShift_y","sf","v_trans_lensq","direction_eq","contourMovements","oneHoleMovements","holesMovements","verticesMovements","sidewalls","layeroffset","sl","slen1","slen2","f4","f3","addVertex","nextIndex","generateTopUV","addUV","generateSideWallUV","vector2","layer","buildLidFaces","buildSideFaces","indexA","indexB","indexC","a_x","a_y","b_x","b_y","c_x","c_y","indexD","a_z","b_z","c_z","d_x","d_y","d_z","TextGeometry","text","TextBufferGeometry","font","isFont","generateShapes","SphereGeometry","phiStart","phiLength","thetaStart","thetaLength","SphereBufferGeometry","thetaEnd","grid","verticesRow","uOffset","RingGeometry","innerRadius","outerRadius","thetaSegments","phiSegments","RingBufferGeometry","segment","radiusStep","thetaSegmentLevel","LatheGeometry","segments","LatheBufferGeometry","base","inverseSegments","n1","n2","ShapeGeometry","ShapeBufferGeometry","shapeHole","indexOffset","shapeVertices","shapeHoles","toJSON$1","EdgesGeometry","thresholdAngle","thresholdDot","sourceVertices","face1","face2","CylinderGeometry","radiusTop","radiusBottom","openEnded","CylinderBufferGeometry","indexArray","generateCap","centerIndexStart","centerIndexEnd","cosTheta","sinTheta","slope","indexRow","generateTorso","ConeGeometry","ConeBufferGeometry","CircleGeometry","CircleBufferGeometry","Geometries","freeze","RawShaderMaterial","STANDARD","PHYSICAL","TOON","MATCAP","Materials","AnimationUtils","arraySlice","from","to","isTypedArray","convertArray","forceClone","ArrayBuffer","isView","DataView","getKeyframeOrder","times","sortedArray","nValues","srcOffset","flattenJSON","jsonKeys","valuePropertyName","subclip","sourceClip","startFrame","endFrame","fps","clip","tracks","track","valueSize","getValueSize","minStartTime","shift","resetDuration","Interpolant","parameterPositions","sampleValues","sampleSize","resultBuffer","_cachedIndex","CubicInterpolant","_weightPrev","_offsetPrev","_weightNext","_offsetNext","LinearInterpolant","DiscreteInterpolant","KeyframeTrack","interpolation","TimeBufferType","ValueBufferType","setInterpolation","DefaultInterpolation","BooleanKeyframeTrack","ColorKeyframeTrack","NumberKeyframeTrack","QuaternionLinearInterpolant","QuaternionKeyframeTrack","StringKeyframeTrack","VectorKeyframeTrack","AnimationClip","duration","parseKeyframeTrack","json","trackType","typeName","toLowerCase","getTrackTypeForValueTypeName","evaluate","pp","validate_interval","seek","linear_scan","forward_scan","giveUpAt","afterEnd_","t1global","beforeStart_","mid","intervalChanged_","interpolate_","settings","DefaultSettings_","getSettings_","copySampleValue_","endingStart","endingEnd","iPrev","iNext","tPrev","tNext","halfDt","o1","o0","oP","oN","wP","wN","ppp","sP","sN","offset1","offset0","weight1","weight0","getInterpolation","ValueTypeName","InterpolantFactoryMethodDiscrete","InterpolantFactoryMethodLinear","InterpolantFactoryMethodSmooth","factoryMethod","createInterpolant","timeOffset","timeScale","startTime","endTime","nKeys","validate","valid","prevTime","currTime","optimize","smoothInterpolation","writeIndex","keep","offsetP","offsetN","readOffset","writeOffset","TypedKeyframeTrack","jsonTracks","frameTime","clipTracks","CreateFromMorphTargetSequence","morphTargetSequence","noLoop","numMorphTargets","findByName","objectOrClipArray","clipArray","animations","CreateClipsFromMorphTargetSequences","animationToMorphTargets","pattern","parts","animationMorphTargets","clips","parseAnimation","addNonemptyTrack","trackName","animationKeys","propertyName","destTracks","clipName","hierarchyTracks","hierarchy","morphTargetNames","morphTargetName","animationKey","boneName","Cache","files","file","LoadingManager","onLoad","onProgress","onError","isLoading","itemsLoaded","itemsTotal","urlModifier","handlers","onStart","itemStart","itemEnd","itemError","resolveURL","setURLModifier","addHandler","regex","loader","removeHandler","getHandler","DefaultLoadingManager","Loader","manager","crossOrigin","resourcePath","load","setCrossOrigin","setPath","setResourcePath","loading","FileLoader","AnimationLoader","CompressedTextureLoader","DataTextureLoader","ImageLoader","CubeTextureLoader","TextureLoader","Curve","arcLengthDivisions","EllipseCurve","aX","aY","xRadius","yRadius","aStartAngle","aEndAngle","aClockwise","aRotation","ArcCurve","aRadius","CubicPoly","c0","initCatmullRom","x3","tension","initNonuniformCatmullRom","dt0","dt1","dt2","t2","calc","cached","setTimeout","dataUriRegexResult","mimeType","isBase64","decodeURIComponent","atob","response","responseType","charCodeAt","Blob","parser","DOMParser","parseFromString","request","XMLHttpRequest","header","open","callbacks","withCredentials","overrideMimeType","requestHeader","setRequestHeader","send","setResponseType","setWithCredentials","setMimeType","loadTexture","texDatas","loaded","mipmapCount","isCubemap","texData","onImageLoad","onImageError","substr","urls","isJPEG","search","getPoint","optionalTarget","getUtoTmapping","getPoints","divisions","getLength","lengths","getLengths","cacheArcLengths","current","updateArcLengths","targetArcLength","arcLengths","comparison","lengthBefore","getTangent","pt1","getTangentAt","mat","MAX_VALUE","tz","fromJSON","isEllipseCurve","twoPi","deltaAngle","samePoints","isArcCurve","pz","CatmullRomCurve3","curveType","CatmullRom","QuadraticBezier","QuadraticBezierP0","QuadraticBezierP1","QuadraticBezierP2","CubicBezier","CubicBezierP0","CubicBezierP1","CubicBezierP2","CubicBezierP3","CubicBezierCurve","v3","CubicBezierCurve3","LineCurve","LineCurve3","QuadraticBezierCurve","QuadraticBezierCurve3","SplineCurve","isCatmullRomCurve3","intPoint","weight","isCubicBezierCurve","isCubicBezierCurve3","isLineCurve","isLineCurve3","isQuadraticBezierCurve","isQuadraticBezierCurve3","isSplineCurve","Curves","CurvePath","curves","autoClose","Path","currentPoint","Shape","Light","HemisphereLight","LightShadow","_frameExtents","_viewportCount","_viewports","SpotLightShadow","SpotLight","power","PointLightShadow","_cubeDirections","_cubeUps","PointLight","OrthographicCamera","DirectionalLightShadow","DirectionalLight","AmbientLight","RectAreaLight","MaterialLoader","curve","closePath","startPoint","endPoint","curveLengths","getCurveLengths","segmentLength","lens","cacheLengths","sums","moveTo","lineTo","quadraticCurveTo","aCPx","aCPy","bezierCurveTo","aCP1x","aCP1y","aCP2x","aCP2y","splineThru","absarc","absellipse","ellipse","firstPoint","lastPoint","getPointsHoles","holesPts","_lightPositionWorld","_lookTarget","shadowMatrix","projScreenMatrix","lookTarget","lightPositionWorld","viewportIndex","isSpotLightShadow","scaleW","scaleH","isDirectionalLightShadow","getTexture","shading","setTextures","LoaderUtils","decodeText","TextDecoder","decode","fromCharCode","escape","extractUrlBase","lastIndexOf","InstancedBufferGeometry","InstancedBufferAttribute","BufferGeometryLoader","typedArray","TYPED_ARRAYS","bufferAttribute","drawcalls","offsets","ObjectLoader","parseShape","parseGeometries","parseImages","parseTextures","parseMaterials","parseObject","parseAnimations","bufferGeometryLoader","details","geometryShapes","THREE","LegacyJSONLoader","loadImage","currentUrl","parseConstant","TEXTURE_MAPPING","TEXTURE_WRAPPING","TEXTURE_FILTER","getGeometry","getMaterial","UVMapping","CubeReflectionMapping","CubeRefractionMapping","EquirectangularReflectionMapping","EquirectangularRefractionMapping","SphericalReflectionMapping","CubeUVReflectionMapping","CubeUVRefractionMapping","RepeatWrapping","ClampToEdgeWrapping","MirroredRepeatWrapping","NearestFilter","NearestMipmapNearestFilter","NearestMipmapLinearFilter","LinearFilter","LinearMipmapNearestFilter","LinearMipmapLinearFilter","ImageBitmapLoader","createImageBitmap","fetch","ShapePath","subPaths","currentPath","Font","createPath","char","glyph","glyphs","cpx","cpy","cpx1","cpy1","cpx2","cpy2","outline","_cachedOutline","ha","familyName","FontLoader","setOptions","res","blob","imageBitmap","catch","toShapes","isCCW","noHoles","toShapesNoHoles","inSubpaths","tmpPath","tmpShape","isPointInsidePolygon","inPolygon","polyLen","edgeLowPt","edgeHighPt","edgeDx","edgeDy","perpEdge","solid","holesFirst","tmpPoints","tmpHoles","betterShapeHoles","newShapes","newShapeHoles","mainIdx","ambiguous","toChange","sIdx","sLen","sho","hIdx","ho","hole_unassigned","s2Idx","froms","tos","paths","chars","line_height","yMax","yMin","underlineThickness","ret","createPaths","substring","AudioContext","webkitAudioContext","AudioLoader","SphericalHarmonics3","LightProbe","HemisphereLightProbe","sky","ground","AmbientLightProbe","bufferCopy","decodeAudioData","audioBuffer","isSphericalHarmonics3","zero","getAt","coeff","addScale","getIrradianceAt","getBasisAt","shBasis","isHemisphereLightProbe","isAmbientLightProbe","_eyeRight","_eyeLeft","StereoCamera","eyeSep","_cache","Clock","autoStart","oldTime","elapsedTime","running","xmin","xmax","eyeSepHalf","eyeSepOnProjection","ymax","performance","Date","now","getElapsedTime","getDelta","newTime","_position$2","_quaternion$3","_scale$1","_orientation","AudioListener","gain","createGain","connect","destination","timeDelta","_clock","Audio","getInput","autoplay","detune","loop","loopStart","loopEnd","playbackRate","isPlaying","hasPlaybackControl","sourceType","_startedAt","_pausedAt","filters","removeFilter","disconnect","getFilter","setFilter","getMasterVolume","setMasterVolume","setTargetAtTime","currentTime","positionX","linearRampToValueAtTime","positionY","positionZ","forwardX","forwardY","forwardZ","upX","upY","upZ","setOrientation","getOutput","setNodeSource","audioNode","setMediaElementSource","mediaElement","createMediaElementSource","setMediaStreamSource","mediaStream","createMediaStreamSource","setBuffer","play","delay","createBufferSource","onended","onEnded","setDetune","setPlaybackRate","pause","getFilters","setFilters","getDetune","getPlaybackRate","getLoop","setLoop","setLoopStart","setLoopEnd","getVolume","setVolume","_position$3","_quaternion$4","_scale$2","_orientation$1","PositionalAudio","panner","createPanner","panningModel","AudioAnalyser","audio","fftSize","analyser","createAnalyser","frequencyBinCount","PropertyMixer","binding","mixFunction","_slerp","_select","_lerp","_mixBufferRegion","cumulativeWeight","useCount","referenceCount","getRefDistance","refDistance","setRefDistance","getRolloffFactor","rolloffFactor","setRolloffFactor","getDistanceModel","distanceModel","setDistanceModel","getMaxDistance","maxDistance","setMaxDistance","setDirectionalCone","coneInnerAngle","coneOuterAngle","coneOuterGain","orientationX","orientationY","orientationZ","getFrequencyData","getByteFrequencyData","getAverageFrequency","accumulate","accuIndex","currentWeight","mix","originalValueOffset","saveOriginalState","getValue","restoreOriginalState","_reservedRe","RegExp","_wordCharOrDot","_directoryRe","_nodeRe","_objectRe","_propertyRe","_trackRe","_supportedObjectNames","Composite","targetGroup","optionalParsedPath","parsedPath","PropertyBinding","parseTrackName","_targetGroup","_bindings","subscribe_","rootNode","node","findNode","nodeName","AnimationObjectGroup","nCachedObjects_","_indicesByUUID","_paths","_parsedPaths","_bindingsIndicesByPath","stats","total","inUse","bindingsPerObject","AnimationAction","mixer","localRoot","_mixer","_clip","_localRoot","nTracks","interpolants","interpolantSettings","interpolant","_interpolantSettings","_interpolants","_propertyBindings","_cacheIndex","_byClipCacheIndex","_timeScaleInterpolant","_weightInterpolant","_loopCount","_startTime","_effectiveTimeScale","_effectiveWeight","repetitions","paused","clampWhenFinished","zeroSlopeAtStart","zeroSlopeAtEnd","AnimationMixer","root","_root","_initMemoryManager","_accuIndex","Uniform","InstancedInterleavedBuffer","Raycaster","PointCloud","ascSort","intersectObject","Spherical","Cylindrical","firstValidIndex","bindings","unbind","isAnimationObjectGroup","sanitizeNodeName","matches","results","objectName","objectIndex","propertyIndex","lastDot","searchNodeSubtree","childNode","subTreeNode","_getValue_unavailable","_setValue_unavailable","BindingType","Direct","EntireArray","ArrayElement","HasFromToArray","Versioning","None","NeedsUpdate","MatrixWorldNeedsUpdate","GetterByBindingType","resolvedProperty","SetterByBindingTypeAndVersioning","targetObject","dest","targetArray","sourceArray","nodeProperty","versioning","bindingType","_getValue_unbound","_setValue_unbound","nObjects","nCachedObjects","indicesByUUID","parsedPaths","nBindings","knownObject","firstActiveIndex","lastCachedObject","bindingsForPath","lastCached","lastCachedIndex","firstActiveObject","firstActive","uncache","lastObject","indicesByPath","unsubscribe_","lastBindingsIndex","lastBindings","_activateAction","_deactivateAction","stopFading","stopWarping","isRunning","_isActiveAction","isScheduled","startAt","setEffectiveWeight","getEffectiveWeight","fadeIn","_scheduleFading","fadeOut","crossFadeFrom","fadeOutAction","warp","fadeInDuration","fadeOutDuration","startEndRatio","endStartRatio","crossFadeTo","fadeInAction","weightInterpolant","_takeBackControlInterpolant","setEffectiveTimeScale","getEffectiveTimeScale","setDuration","syncWith","action","halt","startTimeScale","endTimeScale","_lendControlInterpolant","timeScaleInterpolant","getMixer","getClip","getRoot","_update","deltaTime","timeDirection","timeRunning","_updateTimeScale","clipTime","_updateTime","_updateWeight","propertyMixers","interpolantValue","loopCount","pingPong","_setEndings","handle_stop","loopDelta","pending","atStart","atEnd","weightNow","weightThen","_bindAction","prototypeAction","rootUuid","bindingsByRoot","_bindingsByRootAndName","bindingsByName","_addInactiveBinding","clipUuid","actionsForClip","_actionsByClip","knownActions","_addInactiveAction","_lendBinding","_lendAction","_takeBackBinding","_takeBackAction","_actions","_nActiveActions","_nActiveBindings","_controlInterpolants","_nActiveControlInterpolants","actions","controlInterpolants","actionsByClip","actionByRoot","_removeInactiveAction","lastInactiveAction","cacheIndex","knownActionsForClip","lastKnownAction","byClipCacheIndex","_removeInactiveBindingsForAction","_removeInactiveBinding","prevIndex","lastActiveIndex","firstInactiveAction","firstInactiveIndex","lastActiveAction","bindingByName","propBinding","lastInactiveBinding","firstInactiveBinding","lastActiveBinding","_controlInterpolantsResultBuffer","__cacheIndex","lastActiveInterpolant","clipAction","optionalRoot","clipObject","existingAction","newAction","stopAllAction","nActions","setTime","timeInSeconds","uncacheClip","actionsToRemove","uncacheRoot","uncacheAction","setFromCamera","coords","intersectObjects","other","makeSafe","setFromCartesianCoords","_vector$7","Box2","_startP","_startEnd","Line3","ImmediateRenderObject","distanceSq","closestPointToPointParameter","clampToLine","startEnd2","_vector$8","SpotLightHelper","cone","coneLength","coneWidth","_vector$9","_boneMatrix","_matrixWorldInv","SkeletonHelper","getBoneList","boneList","PointLightHelper","sphereSize","_vector$a","_color1","_color2","HemisphereLightHelper","GridHelper","PolarGridHelper","radials","circles","_v1$5","_v2$3","_v3$1","DirectionalLightHelper","lightPlane","targetLine","_vector$b","_camera","CameraHelper","pointMap","colorFrustum","colorCone","colorUp","colorTarget","colorCross","addLine","addPoint","setPoint","_box$3","BoxHelper","Box3Helper","PlaneHelper","_lineGeometry","_coneGeometry","_axis","ArrowHelper","headLength","headWidth","setDirection","AxesHelper","setColor","weights","poleAxis","shaderMaterial","SIZE_MAX","EXTRA_LOD_SIGMA","TOTAL_LODS","LOD_MAX","ENCODINGS","3000","3001","3002","3004","3005","3006","3007","_flatCamera","_blurMaterial","latitudinal","dTheta","mipInt","inputEncoding","_equirectShader","_cubemapShader","ref","_lodPlanes","_sizeLods","_sigmas","lod","sizeLod","sigma","texelSize","positionSize","uvSize","faceIndexSize","coordinates","fill","_createPlanes","_pingPongRenderTarget","_oldTarget","PHI","INV_PHI","_axisDirections","PMREMGenerator","_compileMaterial","_allocateTargets","equirectangular","cubeUVRenderTarget","_createRenderTarget","_cleanup","outputTarget","tmpScene","_setViewport","_applyPMREM","_blur","lodIn","lodOut","_halfBlur","targetIn","targetOut","sigmaRadians","blurScene","blurUniforms","pixels","radiansPerPixel","sigmaPixels","exp","outputSize","_getEquirectShader","_getCubemapShader","ClosedSplineCurve3","SplineCurve3","Spline","fromScene","cubeCamera","upSign","forwardSign","maxComponent","fExp","log2","col","_sceneToCubeUV","fromEquirectangular","fromCubemap","cubemap","_textureToCubeUV","compileCubemapShader","compileEquirectangularShader","construct","createPointsGeometry","createGeometry","createSpacedPointsGeometry","fromPoints","initFromArray","getControlPointsArray","reparametrizeByArcLength","setColors","Handlers","setTexturePath","isIntersectionBox","isIntersectionSphere","setFromMatrix","random16","nearestPowerOfTwo","nextPowerOfTwo","flattenToArrayOffset","multiplyVector3","multiplyVector3Array","applyToBufferAttribute","applyToVector3Array","extractPosition","getPosition","multiplyToArray","multiplyVector4","rotateAxis","crossVector","rotateByAxis","makeFrustum","isIntersectionLine","isIntersectionPlane","barycoordFromPoint","midpoint","extractAllPoints","extrude","makeGeometry","fromAttribute","distanceToManhattan","lengthManhattan","setEulerFromRotationMatrix","setEulerFromQuaternion","getPositionFromMatrix","getScaleFromMatrix","getColumnFromMatrix","applyProjection","computeTangents","applyMatrix","getChildByName","renderDepth","getWorldRotation","eulerOrder","useQuaternion","setDrawMode","drawMode","initBones","setLens","onlyShadow","shadowCameraFov","shadowCameraLeft","shadowCameraRight","shadowCameraTop","shadowCameraBottom","shadowCameraVisible","shadowDarkness","shadowMapWidth","shadowMapHeight","dynamic","setDynamic","copyIndicesArray","setArray","addIndex","addAttribute","addDrawCall","clearDrawCalls","computeOffsets","removeAttribute","getArrays","addShapeList","wrapAround","overdraw","wrapRGB","metal","clearTarget","animate","getCurrentRenderTarget","getPrecision","resetGLState","supportsFloatTextures","supportsHalfFloatTextures","supportsStandardDerivatives","supportsCompressedTextureS3TC","supportsCompressedTexturePVRTC","supportsBlendMinMax","supportsInstancedArrays","enableScissorTest","addPrePlugin","addPostPlugin","updateShadowMap","setFaceCulling","allocTextureUnit","setTexture","getActiveMipMapLevel","shadowMapCullFace","vr","gammaInput","gammaOutput","renderReverseSided","renderSingleSided","getData","updateCubeMap","GeometryUtils","geometry1","loadTextureCube","loadCompressedTexture","loadCompressedTextureCube","SceneUtils","createMultiMaterialObject","detach","revision","ACESFilmicToneMapping","AddEquation","AddOperation","AdditiveBlending","AlphaFormat","AlwaysDepth","AlwaysStencilFunc","AxisHelper","BackSide","BasicDepthPacking","BasicShadowMap","BinaryTextureLoader","BoundingBoxHelper","ByteType","CanvasRenderer","CineonToneMapping","CubeGeometry","CullFaceBack","CullFaceFront","CullFaceFrontBack","CullFaceNone","CustomBlending","DecrementStencilOp","DecrementWrapStencilOp","DepthFormat","DepthStencilFormat","DoubleSide","DstAlphaFactor","DstColorFactor","DynamicBufferAttribute","DynamicCopyUsage","DynamicDrawUsage","DynamicReadUsage","EdgesHelper","EqualDepth","EqualStencilFunc","Face4","FaceColors","FlatShading","Float32Attribute","Float64Attribute","FloatType","FrontFaceDirectionCCW","FrontFaceDirectionCW","FrontSide","GammaEncoding","GreaterDepth","GreaterEqualDepth","GreaterEqualStencilFunc","GreaterStencilFunc","HalfFloatType","IncrementStencilOp","IncrementWrapStencilOp","Int16Attribute","Int32Attribute","Int8Attribute","IntType","InterpolateDiscrete","InterpolateLinear","InterpolateSmooth","InvertStencilOp","JSONLoader","KeepStencilOp","LensFlare","LessDepth","LessEqualDepth","LessEqualStencilFunc","LessStencilFunc","LinePieces","LineStrip","LinearEncoding","LinearMipMapLinearFilter","LinearMipMapNearestFilter","LinearToneMapping","LogLuvEncoding","LoopOnce","LoopPingPong","LoopRepeat","LuminanceAlphaFormat","LuminanceFormat","MOUSE","LEFT","MIDDLE","RIGHT","ROTATE","DOLLY","PAN","MaxEquation","MeshFaceMaterial","MinEquation","MixOperation","MultiMaterial","MultiplyBlending","MultiplyOperation","NearestMipMapLinearFilter","NearestMipMapNearestFilter","NeverDepth","NeverStencilFunc","NoBlending","NoColors","NoToneMapping","NormalBlending","NotEqualDepth","NotEqualStencilFunc","ObjectSpaceNormalMap","OneFactor","OneMinusDstAlphaFactor","OneMinusDstColorFactor","OneMinusSrcAlphaFactor","OneMinusSrcColorFactor","PCFShadowMap","PCFSoftShadowMap","Particle","ParticleBasicMaterial","ParticleSystem","ParticleSystemMaterial","PointCloudMaterial","REVISION","RGBADepthPacking","RGBAFormat","RGBAIntegerFormat","RGBA_ASTC_10x10_Format","RGBA_ASTC_10x5_Format","RGBA_ASTC_10x6_Format","RGBA_ASTC_10x8_Format","RGBA_ASTC_12x10_Format","RGBA_ASTC_12x12_Format","RGBA_ASTC_4x4_Format","RGBA_ASTC_5x4_Format","RGBA_ASTC_5x5_Format","RGBA_ASTC_6x5_Format","RGBA_ASTC_6x6_Format","RGBA_ASTC_8x5_Format","RGBA_ASTC_8x6_Format","RGBA_ASTC_8x8_Format","RGBA_PVRTC_2BPPV1_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_S3TC_DXT1_Format","RGBA_S3TC_DXT3_Format","RGBA_S3TC_DXT5_Format","RGBDEncoding","RGBEEncoding","RGBEFormat","RGBFormat","RGBIntegerFormat","RGBM16Encoding","RGBM7Encoding","RGB_ETC1_Format","RGB_PVRTC_2BPPV1_Format","RGB_PVRTC_4BPPV1_Format","RGB_S3TC_DXT1_Format","RGFormat","RGIntegerFormat","RedFormat","RedIntegerFormat","ReinhardToneMapping","ReplaceStencilOp","ReverseSubtractEquation","ShortType","SmoothShading","SrcAlphaFactor","SrcAlphaSaturateFactor","SrcColorFactor","StaticCopyUsage","StaticDrawUsage","StaticReadUsage","StreamCopyUsage","StreamDrawUsage","StreamReadUsage","SubtractEquation","SubtractiveBlending","TOUCH","DOLLY_PAN","DOLLY_ROTATE","TangentSpaceNormalMap","TriangleFanDrawMode","TriangleStripDrawMode","TrianglesDrawMode","Uint16Attribute","Uint32Attribute","Uint8Attribute","Uint8ClampedAttribute","Uncharted2ToneMapping","UnsignedByteType","UnsignedInt248Type","UnsignedIntType","UnsignedShort4444Type","UnsignedShort5551Type","UnsignedShort565Type","UnsignedShortType","VSMShadowMap","Vertex","VertexColors","WebGLRenderTargetCube","WireframeHelper","WrapAroundEnding","XHRLoader","ZeroCurvatureEnding","ZeroFactor","ZeroSlopeEnding","ZeroStencilOp","sRGBEncoding","define","amd","self","three_1","webgl_checker_1","isWebGLAvailable","warning","getWebGLErrorMessage","body","appendChild","innerText","innerWidth","innerHeight","getErrorMessage","WebGLRenderingContext","createElement","fontFamily","fontSize","fontWeight","textAlign","padding","margin","innerHTML","isWebGL2Available","getWebGL2ErrorMessage"],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n\ttypeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t(global = global || self, factory(global.THREE = {}));\n}(this, (function (exports) { 'use strict';\n\n\t// Polyfills\n\n\tif ( Number.EPSILON === undefined ) {\n\n\t\tNumber.EPSILON = Math.pow( 2, - 52 );\n\n\t}\n\n\tif ( Number.isInteger === undefined ) {\n\n\t\t// Missing in IE\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger\n\n\t\tNumber.isInteger = function ( value ) {\n\n\t\t\treturn typeof value === 'number' && isFinite( value ) && Math.floor( value ) === value;\n\n\t\t};\n\n\t}\n\n\t//\n\n\tif ( Math.sign === undefined ) {\n\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\n\n\t\tMath.sign = function ( x ) {\n\n\t\t\treturn ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;\n\n\t\t};\n\n\t}\n\n\tif ( 'name' in Function.prototype === false ) {\n\n\t\t// Missing in IE\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\n\n\t\tObject.defineProperty( Function.prototype, 'name', {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.toString().match( /^\\s*function\\s*([^\\(\\s]*)/ )[ 1 ];\n\n\t\t\t}\n\n\t\t} );\n\n\t}\n\n\tif ( Object.assign === undefined ) {\n\n\t\t// Missing in IE\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n\n\t\tObject.assign = function ( target ) {\n\n\t\t\tif ( target === undefined || target === null ) {\n\n\t\t\t\tthrow new TypeError( 'Cannot convert undefined or null to object' );\n\n\t\t\t}\n\n\t\t\tvar output = Object( target );\n\n\t\t\tfor ( var index = 1; index < arguments.length; index ++ ) {\n\n\t\t\t\tvar source = arguments[ index ];\n\n\t\t\t\tif ( source !== undefined && source !== null ) {\n\n\t\t\t\t\tfor ( var nextKey in source ) {\n\n\t\t\t\t\t\tif ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {\n\n\t\t\t\t\t\t\toutput[ nextKey ] = source[ nextKey ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn output;\n\n\t\t};\n\n\t}\n\n\tvar REVISION = '113';\n\tvar MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 };\n\tvar TOUCH = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 };\n\tvar CullFaceNone = 0;\n\tvar CullFaceBack = 1;\n\tvar CullFaceFront = 2;\n\tvar CullFaceFrontBack = 3;\n\tvar FrontFaceDirectionCW = 0;\n\tvar FrontFaceDirectionCCW = 1;\n\tvar BasicShadowMap = 0;\n\tvar PCFShadowMap = 1;\n\tvar PCFSoftShadowMap = 2;\n\tvar VSMShadowMap = 3;\n\tvar FrontSide = 0;\n\tvar BackSide = 1;\n\tvar DoubleSide = 2;\n\tvar FlatShading = 1;\n\tvar SmoothShading = 2;\n\tvar NoColors = 0;\n\tvar FaceColors = 1;\n\tvar VertexColors = 2;\n\tvar NoBlending = 0;\n\tvar NormalBlending = 1;\n\tvar AdditiveBlending = 2;\n\tvar SubtractiveBlending = 3;\n\tvar MultiplyBlending = 4;\n\tvar CustomBlending = 5;\n\tvar AddEquation = 100;\n\tvar SubtractEquation = 101;\n\tvar ReverseSubtractEquation = 102;\n\tvar MinEquation = 103;\n\tvar MaxEquation = 104;\n\tvar ZeroFactor = 200;\n\tvar OneFactor = 201;\n\tvar SrcColorFactor = 202;\n\tvar OneMinusSrcColorFactor = 203;\n\tvar SrcAlphaFactor = 204;\n\tvar OneMinusSrcAlphaFactor = 205;\n\tvar DstAlphaFactor = 206;\n\tvar OneMinusDstAlphaFactor = 207;\n\tvar DstColorFactor = 208;\n\tvar OneMinusDstColorFactor = 209;\n\tvar SrcAlphaSaturateFactor = 210;\n\tvar NeverDepth = 0;\n\tvar AlwaysDepth = 1;\n\tvar LessDepth = 2;\n\tvar LessEqualDepth = 3;\n\tvar EqualDepth = 4;\n\tvar GreaterEqualDepth = 5;\n\tvar GreaterDepth = 6;\n\tvar NotEqualDepth = 7;\n\tvar MultiplyOperation = 0;\n\tvar MixOperation = 1;\n\tvar AddOperation = 2;\n\tvar NoToneMapping = 0;\n\tvar LinearToneMapping = 1;\n\tvar ReinhardToneMapping = 2;\n\tvar Uncharted2ToneMapping = 3;\n\tvar CineonToneMapping = 4;\n\tvar ACESFilmicToneMapping = 5;\n\n\tvar UVMapping = 300;\n\tvar CubeReflectionMapping = 301;\n\tvar CubeRefractionMapping = 302;\n\tvar EquirectangularReflectionMapping = 303;\n\tvar EquirectangularRefractionMapping = 304;\n\tvar SphericalReflectionMapping = 305;\n\tvar CubeUVReflectionMapping = 306;\n\tvar CubeUVRefractionMapping = 307;\n\tvar RepeatWrapping = 1000;\n\tvar ClampToEdgeWrapping = 1001;\n\tvar MirroredRepeatWrapping = 1002;\n\tvar NearestFilter = 1003;\n\tvar NearestMipmapNearestFilter = 1004;\n\tvar NearestMipMapNearestFilter = 1004;\n\tvar NearestMipmapLinearFilter = 1005;\n\tvar NearestMipMapLinearFilter = 1005;\n\tvar LinearFilter = 1006;\n\tvar LinearMipmapNearestFilter = 1007;\n\tvar LinearMipMapNearestFilter = 1007;\n\tvar LinearMipmapLinearFilter = 1008;\n\tvar LinearMipMapLinearFilter = 1008;\n\tvar UnsignedByteType = 1009;\n\tvar ByteType = 1010;\n\tvar ShortType = 1011;\n\tvar UnsignedShortType = 1012;\n\tvar IntType = 1013;\n\tvar UnsignedIntType = 1014;\n\tvar FloatType = 1015;\n\tvar HalfFloatType = 1016;\n\tvar UnsignedShort4444Type = 1017;\n\tvar UnsignedShort5551Type = 1018;\n\tvar UnsignedShort565Type = 1019;\n\tvar UnsignedInt248Type = 1020;\n\tvar AlphaFormat = 1021;\n\tvar RGBFormat = 1022;\n\tvar RGBAFormat = 1023;\n\tvar LuminanceFormat = 1024;\n\tvar LuminanceAlphaFormat = 1025;\n\tvar RGBEFormat = RGBAFormat;\n\tvar DepthFormat = 1026;\n\tvar DepthStencilFormat = 1027;\n\tvar RedFormat = 1028;\n\tvar RedIntegerFormat = 1029;\n\tvar RGFormat = 1030;\n\tvar RGIntegerFormat = 1031;\n\tvar RGBIntegerFormat = 1032;\n\tvar RGBAIntegerFormat = 1033;\n\n\tvar RGB_S3TC_DXT1_Format = 33776;\n\tvar RGBA_S3TC_DXT1_Format = 33777;\n\tvar RGBA_S3TC_DXT3_Format = 33778;\n\tvar RGBA_S3TC_DXT5_Format = 33779;\n\tvar RGB_PVRTC_4BPPV1_Format = 35840;\n\tvar RGB_PVRTC_2BPPV1_Format = 35841;\n\tvar RGBA_PVRTC_4BPPV1_Format = 35842;\n\tvar RGBA_PVRTC_2BPPV1_Format = 35843;\n\tvar RGB_ETC1_Format = 36196;\n\tvar RGBA_ASTC_4x4_Format = 37808;\n\tvar RGBA_ASTC_5x4_Format = 37809;\n\tvar RGBA_ASTC_5x5_Format = 37810;\n\tvar RGBA_ASTC_6x5_Format = 37811;\n\tvar RGBA_ASTC_6x6_Format = 37812;\n\tvar RGBA_ASTC_8x5_Format = 37813;\n\tvar RGBA_ASTC_8x6_Format = 37814;\n\tvar RGBA_ASTC_8x8_Format = 37815;\n\tvar RGBA_ASTC_10x5_Format = 37816;\n\tvar RGBA_ASTC_10x6_Format = 37817;\n\tvar RGBA_ASTC_10x8_Format = 37818;\n\tvar RGBA_ASTC_10x10_Format = 37819;\n\tvar RGBA_ASTC_12x10_Format = 37820;\n\tvar RGBA_ASTC_12x12_Format = 37821;\n\tvar LoopOnce = 2200;\n\tvar LoopRepeat = 2201;\n\tvar LoopPingPong = 2202;\n\tvar InterpolateDiscrete = 2300;\n\tvar InterpolateLinear = 2301;\n\tvar InterpolateSmooth = 2302;\n\tvar ZeroCurvatureEnding = 2400;\n\tvar ZeroSlopeEnding = 2401;\n\tvar WrapAroundEnding = 2402;\n\tvar TrianglesDrawMode = 0;\n\tvar TriangleStripDrawMode = 1;\n\tvar TriangleFanDrawMode = 2;\n\tvar LinearEncoding = 3000;\n\tvar sRGBEncoding = 3001;\n\tvar GammaEncoding = 3007;\n\tvar RGBEEncoding = 3002;\n\tvar LogLuvEncoding = 3003;\n\tvar RGBM7Encoding = 3004;\n\tvar RGBM16Encoding = 3005;\n\tvar RGBDEncoding = 3006;\n\tvar BasicDepthPacking = 3200;\n\tvar RGBADepthPacking = 3201;\n\tvar TangentSpaceNormalMap = 0;\n\tvar ObjectSpaceNormalMap = 1;\n\n\tvar ZeroStencilOp = 0;\n\tvar KeepStencilOp = 7680;\n\tvar ReplaceStencilOp = 7681;\n\tvar IncrementStencilOp = 7682;\n\tvar DecrementStencilOp = 7683;\n\tvar IncrementWrapStencilOp = 34055;\n\tvar DecrementWrapStencilOp = 34056;\n\tvar InvertStencilOp = 5386;\n\n\tvar NeverStencilFunc = 512;\n\tvar LessStencilFunc = 513;\n\tvar EqualStencilFunc = 514;\n\tvar LessEqualStencilFunc = 515;\n\tvar GreaterStencilFunc = 516;\n\tvar NotEqualStencilFunc = 517;\n\tvar GreaterEqualStencilFunc = 518;\n\tvar AlwaysStencilFunc = 519;\n\n\tvar StaticDrawUsage = 35044;\n\tvar DynamicDrawUsage = 35048;\n\tvar StreamDrawUsage = 35040;\n\tvar StaticReadUsage = 35045;\n\tvar DynamicReadUsage = 35049;\n\tvar StreamReadUsage = 35041;\n\tvar StaticCopyUsage = 35046;\n\tvar DynamicCopyUsage = 35050;\n\tvar StreamCopyUsage = 35042;\n\n\t/**\n\t * https://github.com/mrdoob/eventdispatcher.js/\n\t */\n\n\tfunction EventDispatcher() {}\n\n\tObject.assign( EventDispatcher.prototype, {\n\n\t\taddEventListener: function ( type, listener ) {\n\n\t\t\tif ( this._listeners === undefined ) { this._listeners = {}; }\n\n\t\t\tvar listeners = this._listeners;\n\n\t\t\tif ( listeners[ type ] === undefined ) {\n\n\t\t\t\tlisteners[ type ] = [];\n\n\t\t\t}\n\n\t\t\tif ( listeners[ type ].indexOf( listener ) === - 1 ) {\n\n\t\t\t\tlisteners[ type ].push( listener );\n\n\t\t\t}\n\n\t\t},\n\n\t\thasEventListener: function ( type, listener ) {\n\n\t\t\tif ( this._listeners === undefined ) { return false; }\n\n\t\t\tvar listeners = this._listeners;\n\n\t\t\treturn listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;\n\n\t\t},\n\n\t\tremoveEventListener: function ( type, listener ) {\n\n\t\t\tif ( this._listeners === undefined ) { return; }\n\n\t\t\tvar listeners = this._listeners;\n\t\t\tvar listenerArray = listeners[ type ];\n\n\t\t\tif ( listenerArray !== undefined ) {\n\n\t\t\t\tvar index = listenerArray.indexOf( listener );\n\n\t\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\t\tlistenerArray.splice( index, 1 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tdispatchEvent: function ( event ) {\n\n\t\t\tif ( this._listeners === undefined ) { return; }\n\n\t\t\tvar listeners = this._listeners;\n\t\t\tvar listenerArray = listeners[ event.type ];\n\n\t\t\tif ( listenerArray !== undefined ) {\n\n\t\t\t\tevent.target = this;\n\n\t\t\t\tvar array = listenerArray.slice( 0 );\n\n\t\t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\n\n\t\t\t\t\tarray[ i ].call( this, event );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author thezwap\n\t */\n\n\tvar _lut = [];\n\n\tfor ( var i = 0; i < 256; i ++ ) {\n\n\t\t_lut[ i ] = ( i < 16 ? '0' : '' ) + ( i ).toString( 16 );\n\n\t}\n\n\tvar MathUtils = {\n\n\t\tDEG2RAD: Math.PI / 180,\n\t\tRAD2DEG: 180 / Math.PI,\n\n\t\tgenerateUUID: function () {\n\n\t\t\t// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\n\n\t\t\tvar d0 = Math.random() * 0xffffffff | 0;\n\t\t\tvar d1 = Math.random() * 0xffffffff | 0;\n\t\t\tvar d2 = Math.random() * 0xffffffff | 0;\n\t\t\tvar d3 = Math.random() * 0xffffffff | 0;\n\t\t\tvar uuid = _lut[ d0 & 0xff ] + _lut[ d0 >> 8 & 0xff ] + _lut[ d0 >> 16 & 0xff ] + _lut[ d0 >> 24 & 0xff ] + '-' +\n\t\t\t\t_lut[ d1 & 0xff ] + _lut[ d1 >> 8 & 0xff ] + '-' + _lut[ d1 >> 16 & 0x0f | 0x40 ] + _lut[ d1 >> 24 & 0xff ] + '-' +\n\t\t\t\t_lut[ d2 & 0x3f | 0x80 ] + _lut[ d2 >> 8 & 0xff ] + '-' + _lut[ d2 >> 16 & 0xff ] + _lut[ d2 >> 24 & 0xff ] +\n\t\t\t\t_lut[ d3 & 0xff ] + _lut[ d3 >> 8 & 0xff ] + _lut[ d3 >> 16 & 0xff ] + _lut[ d3 >> 24 & 0xff ];\n\n\t\t\t// .toUpperCase() here flattens concatenated strings to save heap memory space.\n\t\t\treturn uuid.toUpperCase();\n\n\t\t},\n\n\t\tclamp: function ( value, min, max ) {\n\n\t\t\treturn Math.max( min, Math.min( max, value ) );\n\n\t\t},\n\n\t\t// compute euclidian modulo of m % n\n\t\t// https://en.wikipedia.org/wiki/Modulo_operation\n\n\t\teuclideanModulo: function ( n, m ) {\n\n\t\t\treturn ( ( n % m ) + m ) % m;\n\n\t\t},\n\n\t\t// Linear mapping from range <a1, a2> to range <b1, b2>\n\n\t\tmapLinear: function ( x, a1, a2, b1, b2 ) {\n\n\t\t\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\n\n\t\t},\n\n\t\t// https://en.wikipedia.org/wiki/Linear_interpolation\n\n\t\tlerp: function ( x, y, t ) {\n\n\t\t\treturn ( 1 - t ) * x + t * y;\n\n\t\t},\n\n\t\t// http://en.wikipedia.org/wiki/Smoothstep\n\n\t\tsmoothstep: function ( x, min, max ) {\n\n\t\t\tif ( x <= min ) { return 0; }\n\t\t\tif ( x >= max ) { return 1; }\n\n\t\t\tx = ( x - min ) / ( max - min );\n\n\t\t\treturn x * x * ( 3 - 2 * x );\n\n\t\t},\n\n\t\tsmootherstep: function ( x, min, max ) {\n\n\t\t\tif ( x <= min ) { return 0; }\n\t\t\tif ( x >= max ) { return 1; }\n\n\t\t\tx = ( x - min ) / ( max - min );\n\n\t\t\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\n\n\t\t},\n\n\t\t// Random integer from <low, high> interval\n\n\t\trandInt: function ( low, high ) {\n\n\t\t\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\n\n\t\t},\n\n\t\t// Random float from <low, high> interval\n\n\t\trandFloat: function ( low, high ) {\n\n\t\t\treturn low + Math.random() * ( high - low );\n\n\t\t},\n\n\t\t// Random float from <-range/2, range/2> interval\n\n\t\trandFloatSpread: function ( range ) {\n\n\t\t\treturn range * ( 0.5 - Math.random() );\n\n\t\t},\n\n\t\tdegToRad: function ( degrees ) {\n\n\t\t\treturn degrees * MathUtils.DEG2RAD;\n\n\t\t},\n\n\t\tradToDeg: function ( radians ) {\n\n\t\t\treturn radians * MathUtils.RAD2DEG;\n\n\t\t},\n\n\t\tisPowerOfTwo: function ( value ) {\n\n\t\t\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\n\n\t\t},\n\n\t\tceilPowerOfTwo: function ( value ) {\n\n\t\t\treturn Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );\n\n\t\t},\n\n\t\tfloorPowerOfTwo: function ( value ) {\n\n\t\t\treturn Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );\n\n\t\t},\n\n\t\tsetQuaternionFromProperEuler: function ( q, a, b, c, order ) {\n\n\t\t\t// Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles\n\n\t\t\t// rotations are applied to the axes in the order specified by 'order'\n\t\t\t// rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'\n\t\t\t// angles are in radians\n\n\t\t\tvar cos = Math.cos;\n\t\t\tvar sin = Math.sin;\n\n\t\t\tvar c2 = cos( b / 2 );\n\t\t\tvar s2 = sin( b / 2 );\n\n\t\t\tvar c13 = cos( ( a + c ) / 2 );\n\t\t\tvar s13 = sin( ( a + c ) / 2 );\n\n\t\t\tvar c1_3 = cos( ( a - c ) / 2 );\n\t\t\tvar s1_3 = sin( ( a - c ) / 2 );\n\n\t\t\tvar c3_1 = cos( ( c - a ) / 2 );\n\t\t\tvar s3_1 = sin( ( c - a ) / 2 );\n\n\t\t\tif ( order === 'XYX' ) {\n\n\t\t\t\tq.set( c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13 );\n\n\t\t\t} else if ( order === 'YZY' ) {\n\n\t\t\t\tq.set( s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13 );\n\n\t\t\t} else if ( order === 'ZXZ' ) {\n\n\t\t\t\tq.set( s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13 );\n\n\t\t\t} else if ( order === 'XZX' ) {\n\n\t\t\t\tq.set( c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13 );\n\n\t\t\t} else if ( order === 'YXY' ) {\n\n\t\t\t\tq.set( s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13 );\n\n\t\t\t} else if ( order === 'ZYZ' ) {\n\n\t\t\t\tq.set( s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13 );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order.' );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author philogb / http://blog.thejit.org/\n\t * @author egraether / http://egraether.com/\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t */\n\n\tfunction Vector2( x, y ) {\n\n\t\tthis.x = x || 0;\n\t\tthis.y = y || 0;\n\n\t}\n\n\tObject.defineProperties( Vector2.prototype, {\n\n\t\t\"width\": {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.x;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.x = value;\n\n\t\t\t}\n\n\t\t},\n\n\t\t\"height\": {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.y;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.y = value;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Vector2.prototype, {\n\n\t\tisVector2: true,\n\n\t\tset: function ( x, y ) {\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetScalar: function ( scalar ) {\n\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetX: function ( x ) {\n\n\t\t\tthis.x = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetY: function ( y ) {\n\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetComponent: function ( index, value ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: this.x = value; break;\n\t\t\t\tcase 1: this.y = value; break;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetComponent: function ( index ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: return this.x;\n\t\t\t\tcase 1: return this.y;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.x, this.y );\n\n\t\t},\n\n\t\tcopy: function ( v ) {\n\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tadd: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\t\treturn this.addVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScalar: function ( s ) {\n\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScaledVector: function ( v, s ) {\n\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsub: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\t\treturn this.subVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubScalar: function ( s ) {\n\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( v ) {\n\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( scalar ) {\n\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdivide: function ( v ) {\n\n\t\t\tthis.x /= v.x;\n\t\t\tthis.y /= v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdivideScalar: function ( scalar ) {\n\n\t\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t\t},\n\n\t\tapplyMatrix3: function ( m ) {\n\n\t\t\tvar x = this.x, y = this.y;\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];\n\t\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmin: function ( v ) {\n\n\t\t\tthis.x = Math.min( this.x, v.x );\n\t\t\tthis.y = Math.min( this.y, v.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmax: function ( v ) {\n\n\t\t\tthis.x = Math.max( this.x, v.x );\n\t\t\tthis.y = Math.max( this.y, v.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclamp: function ( min, max ) {\n\n\t\t\t// assumes min < max, componentwise\n\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampScalar: function ( minVal, maxVal ) {\n\n\t\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\n\t\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampLength: function ( min, max ) {\n\n\t\t\tvar length = this.length();\n\n\t\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t\t},\n\n\t\tfloor: function () {\n\n\t\t\tthis.x = Math.floor( this.x );\n\t\t\tthis.y = Math.floor( this.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tceil: function () {\n\n\t\t\tthis.x = Math.ceil( this.x );\n\t\t\tthis.y = Math.ceil( this.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tround: function () {\n\n\t\t\tthis.x = Math.round( this.x );\n\t\t\tthis.y = Math.round( this.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\troundToZero: function () {\n\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnegate: function () {\n\n\t\t\tthis.x = - this.x;\n\t\t\tthis.y = - this.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdot: function ( v ) {\n\n\t\t\treturn this.x * v.x + this.y * v.y;\n\n\t\t},\n\n\t\tcross: function ( v ) {\n\n\t\t\treturn this.x * v.y - this.y * v.x;\n\n\t\t},\n\n\t\tlengthSq: function () {\n\n\t\t\treturn this.x * this.x + this.y * this.y;\n\n\t\t},\n\n\t\tlength: function () {\n\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\n\n\t\t},\n\n\t\tmanhattanLength: function () {\n\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y );\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\treturn this.divideScalar( this.length() || 1 );\n\n\t\t},\n\n\t\tangle: function () {\n\n\t\t\t// computes the angle in radians with respect to the positive x-axis\n\n\t\t\tvar angle = Math.atan2( this.y, this.x );\n\n\t\t\tif ( angle < 0 ) { angle += 2 * Math.PI; }\n\n\t\t\treturn angle;\n\n\t\t},\n\n\t\tdistanceTo: function ( v ) {\n\n\t\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t\t},\n\n\t\tdistanceToSquared: function ( v ) {\n\n\t\t\tvar dx = this.x - v.x, dy = this.y - v.y;\n\t\t\treturn dx * dx + dy * dy;\n\n\t\t},\n\n\t\tmanhattanDistanceTo: function ( v ) {\n\n\t\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );\n\n\t\t},\n\n\t\tsetLength: function ( length ) {\n\n\t\t\treturn this.normalize().multiplyScalar( length );\n\n\t\t},\n\n\t\tlerp: function ( v, alpha ) {\n\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t\t},\n\n\t\tequals: function ( v ) {\n\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tthis.x = array[ offset ];\n\t\t\tthis.y = array[ offset + 1 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tarray[ offset ] = this.x;\n\t\t\tarray[ offset + 1 ] = this.y;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tfromBufferAttribute: function ( attribute, index, offset ) {\n\n\t\t\tif ( offset !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector2: offset has been removed from .fromBufferAttribute().' );\n\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX( index );\n\t\t\tthis.y = attribute.getY( index );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateAround: function ( center, angle ) {\n\n\t\t\tvar c = Math.cos( angle ), s = Math.sin( angle );\n\n\t\t\tvar x = this.x - center.x;\n\t\t\tvar y = this.y - center.y;\n\n\t\t\tthis.x = x * c - y * s + center.x;\n\t\t\tthis.y = x * s + y * c + center.y;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author bhouston / http://clara.io\n\t * @author tschw\n\t */\n\n\tfunction Matrix3() {\n\n\t\tthis.elements = [\n\n\t\t\t1, 0, 0,\n\t\t\t0, 1, 0,\n\t\t\t0, 0, 1\n\n\t\t];\n\n\t\tif ( arguments.length > 0 ) {\n\n\t\t\tconsole.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );\n\n\t\t}\n\n\t}\n\n\tObject.assign( Matrix3.prototype, {\n\n\t\tisMatrix3: true,\n\n\t\tset: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;\n\t\t\tte[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;\n\t\t\tte[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tidentity: function () {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0,\n\t\t\t\t0, 1, 0,\n\t\t\t\t0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().fromArray( this.elements );\n\n\t\t},\n\n\t\tcopy: function ( m ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = m.elements;\n\n\t\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];\n\t\t\tte[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];\n\t\t\tte[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrix4: function ( m ) {\n\n\t\t\tvar me = m.elements;\n\n\t\t\tthis.set(\n\n\t\t\t\tme[ 0 ], me[ 4 ], me[ 8 ],\n\t\t\t\tme[ 1 ], me[ 5 ], me[ 9 ],\n\t\t\t\tme[ 2 ], me[ 6 ], me[ 10 ]\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( m ) {\n\n\t\t\treturn this.multiplyMatrices( this, m );\n\n\t\t},\n\n\t\tpremultiply: function ( m ) {\n\n\t\t\treturn this.multiplyMatrices( m, this );\n\n\t\t},\n\n\t\tmultiplyMatrices: function ( a, b ) {\n\n\t\t\tvar ae = a.elements;\n\t\t\tvar be = b.elements;\n\t\t\tvar te = this.elements;\n\n\t\t\tvar a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];\n\t\t\tvar a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];\n\t\t\tvar a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];\n\n\t\t\tvar b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];\n\t\t\tvar b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];\n\t\t\tvar b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];\n\n\t\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;\n\t\t\tte[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;\n\t\t\tte[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;\n\n\t\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;\n\t\t\tte[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;\n\t\t\tte[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;\n\n\t\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;\n\t\t\tte[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;\n\t\t\tte[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( s ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\n\t\t\tte[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\n\t\t\tte[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdeterminant: function () {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\n\t\t\t\td = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\n\t\t\t\tg = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\n\n\t\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n\n\t\t},\n\n\t\tgetInverse: function ( matrix, throwOnDegenerate ) {\n\n\t\t\tif ( matrix && matrix.isMatrix4 ) {\n\n\t\t\t\tconsole.error( \"THREE.Matrix3: .getInverse() no longer takes a Matrix4 argument.\" );\n\n\t\t\t}\n\n\t\t\tvar me = matrix.elements,\n\t\t\t\tte = this.elements,\n\n\t\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],\n\t\t\t\tn12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],\n\t\t\t\tn13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],\n\n\t\t\t\tt11 = n33 * n22 - n32 * n23,\n\t\t\t\tt12 = n32 * n13 - n33 * n12,\n\t\t\t\tt13 = n23 * n12 - n22 * n13,\n\n\t\t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\n\n\t\t\tif ( det === 0 ) {\n\n\t\t\t\tvar msg = \"THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0\";\n\n\t\t\t\tif ( throwOnDegenerate === true ) {\n\n\t\t\t\t\tthrow new Error( msg );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( msg );\n\n\t\t\t\t}\n\n\t\t\t\treturn this.identity();\n\n\t\t\t}\n\n\t\t\tvar detInv = 1 / det;\n\n\t\t\tte[ 0 ] = t11 * detInv;\n\t\t\tte[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;\n\t\t\tte[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;\n\n\t\t\tte[ 3 ] = t12 * detInv;\n\t\t\tte[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;\n\t\t\tte[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;\n\n\t\t\tte[ 6 ] = t13 * detInv;\n\t\t\tte[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;\n\t\t\tte[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranspose: function () {\n\n\t\t\tvar tmp, m = this.elements;\n\n\t\t\ttmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;\n\t\t\ttmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;\n\t\t\ttmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetNormalMatrix: function ( matrix4 ) {\n\n\t\t\treturn this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();\n\n\t\t},\n\n\t\ttransposeIntoArray: function ( r ) {\n\n\t\t\tvar m = this.elements;\n\n\t\t\tr[ 0 ] = m[ 0 ];\n\t\t\tr[ 1 ] = m[ 3 ];\n\t\t\tr[ 2 ] = m[ 6 ];\n\t\t\tr[ 3 ] = m[ 1 ];\n\t\t\tr[ 4 ] = m[ 4 ];\n\t\t\tr[ 5 ] = m[ 7 ];\n\t\t\tr[ 6 ] = m[ 2 ];\n\t\t\tr[ 7 ] = m[ 5 ];\n\t\t\tr[ 8 ] = m[ 8 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetUvTransform: function ( tx, ty, sx, sy, rotation, cx, cy ) {\n\n\t\t\tvar c = Math.cos( rotation );\n\t\t\tvar s = Math.sin( rotation );\n\n\t\t\tthis.set(\n\t\t\t\tsx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,\n\t\t\t\t- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,\n\t\t\t\t0, 0, 1\n\t\t\t);\n\n\t\t},\n\n\t\tscale: function ( sx, sy ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] *= sx; te[ 3 ] *= sx; te[ 6 ] *= sx;\n\t\t\tte[ 1 ] *= sy; te[ 4 ] *= sy; te[ 7 ] *= sy;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotate: function ( theta ) {\n\n\t\t\tvar c = Math.cos( theta );\n\t\t\tvar s = Math.sin( theta );\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar a11 = te[ 0 ], a12 = te[ 3 ], a13 = te[ 6 ];\n\t\t\tvar a21 = te[ 1 ], a22 = te[ 4 ], a23 = te[ 7 ];\n\n\t\t\tte[ 0 ] = c * a11 + s * a21;\n\t\t\tte[ 3 ] = c * a12 + s * a22;\n\t\t\tte[ 6 ] = c * a13 + s * a23;\n\n\t\t\tte[ 1 ] = - s * a11 + c * a21;\n\t\t\tte[ 4 ] = - s * a12 + c * a22;\n\t\t\tte[ 7 ] = - s * a13 + c * a23;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( tx, ty ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] += tx * te[ 2 ]; te[ 3 ] += tx * te[ 5 ]; te[ 6 ] += tx * te[ 8 ];\n\t\t\tte[ 1 ] += ty * te[ 2 ]; te[ 4 ] += ty * te[ 5 ]; te[ 7 ] += ty * te[ 8 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( matrix ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = matrix.elements;\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tif ( te[ i ] !== me[ i ] ) { return false; }\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tthis.elements[ i ] = array[ i + offset ];\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tvar te = this.elements;\n\n\t\t\tarray[ offset ] = te[ 0 ];\n\t\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\t\tarray[ offset + 2 ] = te[ 2 ];\n\n\t\t\tarray[ offset + 3 ] = te[ 3 ];\n\t\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\t\tarray[ offset + 5 ] = te[ 5 ];\n\n\t\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\t\tarray[ offset + 7 ] = te[ 7 ];\n\t\t\tarray[ offset + 8 ] = te[ 8 ];\n\n\t\t\treturn array;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author szimek / https://github.com/szimek/\n\t */\n\n\tvar _canvas;\n\n\tvar ImageUtils = {\n\n\t\tgetDataURL: function ( image ) {\n\n\t\t\tvar canvas;\n\n\t\t\tif ( typeof HTMLCanvasElement == 'undefined' ) {\n\n\t\t\t\treturn image.src;\n\n\t\t\t} else if ( image instanceof HTMLCanvasElement ) {\n\n\t\t\t\tcanvas = image;\n\n\t\t\t} else {\n\n\t\t\t\tif ( _canvas === undefined ) { _canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ); }\n\n\t\t\t\t_canvas.width = image.width;\n\t\t\t\t_canvas.height = image.height;\n\n\t\t\t\tvar context = _canvas.getContext( '2d' );\n\n\t\t\t\tif ( image instanceof ImageData ) {\n\n\t\t\t\t\tcontext.putImageData( image, 0, 0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height );\n\n\t\t\t\t}\n\n\t\t\t\tcanvas = _canvas;\n\n\t\t\t}\n\n\t\t\tif ( canvas.width > 2048 || canvas.height > 2048 ) {\n\n\t\t\t\treturn canvas.toDataURL( 'image/jpeg', 0.6 );\n\n\t\t\t} else {\n\n\t\t\t\treturn canvas.toDataURL( 'image/png' );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author szimek / https://github.com/szimek/\n\t */\n\n\tvar textureId = 0;\n\n\tfunction Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\n\t\tObject.defineProperty( this, 'id', { value: textureId ++ } );\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\tthis.name = '';\n\n\t\tthis.image = image !== undefined ? image : Texture.DEFAULT_IMAGE;\n\t\tthis.mipmaps = [];\n\n\t\tthis.mapping = mapping !== undefined ? mapping : Texture.DEFAULT_MAPPING;\n\n\t\tthis.wrapS = wrapS !== undefined ? wrapS : ClampToEdgeWrapping;\n\t\tthis.wrapT = wrapT !== undefined ? wrapT : ClampToEdgeWrapping;\n\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : LinearMipmapLinearFilter;\n\n\t\tthis.anisotropy = anisotropy !== undefined ? anisotropy : 1;\n\n\t\tthis.format = format !== undefined ? format : RGBAFormat;\n\t\tthis.internalFormat = null;\n\t\tthis.type = type !== undefined ? type : UnsignedByteType;\n\n\t\tthis.offset = new Vector2( 0, 0 );\n\t\tthis.repeat = new Vector2( 1, 1 );\n\t\tthis.center = new Vector2( 0, 0 );\n\t\tthis.rotation = 0;\n\n\t\tthis.matrixAutoUpdate = true;\n\t\tthis.matrix = new Matrix3();\n\n\t\tthis.generateMipmaps = true;\n\t\tthis.premultiplyAlpha = false;\n\t\tthis.flipY = true;\n\t\tthis.unpackAlignment = 4;\t// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n\n\t\t// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\n\t\t//\n\t\t// Also changing the encoding after already used by a Material will not automatically make the Material\n\t\t// update. You need to explicitly call Material.needsUpdate to trigger it to recompile.\n\t\tthis.encoding = encoding !== undefined ? encoding : LinearEncoding;\n\n\t\tthis.version = 0;\n\t\tthis.onUpdate = null;\n\n\t}\n\n\tTexture.DEFAULT_IMAGE = undefined;\n\tTexture.DEFAULT_MAPPING = UVMapping;\n\n\tTexture.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: Texture,\n\n\t\tisTexture: true,\n\n\t\tupdateMatrix: function () {\n\n\t\t\tthis.matrix.setUvTransform( this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.name = source.name;\n\n\t\t\tthis.image = source.image;\n\t\t\tthis.mipmaps = source.mipmaps.slice( 0 );\n\n\t\t\tthis.mapping = source.mapping;\n\n\t\t\tthis.wrapS = source.wrapS;\n\t\t\tthis.wrapT = source.wrapT;\n\n\t\t\tthis.magFilter = source.magFilter;\n\t\t\tthis.minFilter = source.minFilter;\n\n\t\t\tthis.anisotropy = source.anisotropy;\n\n\t\t\tthis.format = source.format;\n\t\t\tthis.internalFormat = source.internalFormat;\n\t\t\tthis.type = source.type;\n\n\t\t\tthis.offset.copy( source.offset );\n\t\t\tthis.repeat.copy( source.repeat );\n\t\t\tthis.center.copy( source.center );\n\t\t\tthis.rotation = source.rotation;\n\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\tthis.matrix.copy( source.matrix );\n\n\t\t\tthis.generateMipmaps = source.generateMipmaps;\n\t\t\tthis.premultiplyAlpha = source.premultiplyAlpha;\n\t\t\tthis.flipY = source.flipY;\n\t\t\tthis.unpackAlignment = source.unpackAlignment;\n\t\t\tthis.encoding = source.encoding;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\t\tif ( ! isRootObject && meta.textures[ this.uuid ] !== undefined ) {\n\n\t\t\t\treturn meta.textures[ this.uuid ];\n\n\t\t\t}\n\n\t\t\tvar output = {\n\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Texture',\n\t\t\t\t\tgenerator: 'Texture.toJSON'\n\t\t\t\t},\n\n\t\t\t\tuuid: this.uuid,\n\t\t\t\tname: this.name,\n\n\t\t\t\tmapping: this.mapping,\n\n\t\t\t\trepeat: [ this.repeat.x, this.repeat.y ],\n\t\t\t\toffset: [ this.offset.x, this.offset.y ],\n\t\t\t\tcenter: [ this.center.x, this.center.y ],\n\t\t\t\trotation: this.rotation,\n\n\t\t\t\twrap: [ this.wrapS, this.wrapT ],\n\n\t\t\t\tformat: this.format,\n\t\t\t\ttype: this.type,\n\t\t\t\tencoding: this.encoding,\n\n\t\t\t\tminFilter: this.minFilter,\n\t\t\t\tmagFilter: this.magFilter,\n\t\t\t\tanisotropy: this.anisotropy,\n\n\t\t\t\tflipY: this.flipY,\n\n\t\t\t\tpremultiplyAlpha: this.premultiplyAlpha,\n\t\t\t\tunpackAlignment: this.unpackAlignment\n\n\t\t\t};\n\n\t\t\tif ( this.image !== undefined ) {\n\n\t\t\t\t// TODO: Move to THREE.Image\n\n\t\t\t\tvar image = this.image;\n\n\t\t\t\tif ( image.uuid === undefined ) {\n\n\t\t\t\t\timage.uuid = MathUtils.generateUUID(); // UGH\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! isRootObject && meta.images[ image.uuid ] === undefined ) {\n\n\t\t\t\t\tvar url;\n\n\t\t\t\t\tif ( Array.isArray( image ) ) {\n\n\t\t\t\t\t\t// process array of images e.g. CubeTexture\n\n\t\t\t\t\t\turl = [];\n\n\t\t\t\t\t\tfor ( var i = 0, l = image.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\turl.push( ImageUtils.getDataURL( image[ i ] ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// process single image\n\n\t\t\t\t\t\turl = ImageUtils.getDataURL( image );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmeta.images[ image.uuid ] = {\n\t\t\t\t\t\tuuid: image.uuid,\n\t\t\t\t\t\turl: url\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t\toutput.image = image.uuid;\n\n\t\t\t}\n\n\t\t\tif ( ! isRootObject ) {\n\n\t\t\t\tmeta.textures[ this.uuid ] = output;\n\n\t\t\t}\n\n\t\t\treturn output;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t},\n\n\t\ttransformUv: function ( uv ) {\n\n\t\t\tif ( this.mapping !== UVMapping ) { return uv; }\n\n\t\t\tuv.applyMatrix3( this.matrix );\n\n\t\t\tif ( uv.x < 0 || uv.x > 1 ) {\n\n\t\t\t\tswitch ( this.wrapS ) {\n\n\t\t\t\t\tcase RepeatWrapping:\n\n\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ClampToEdgeWrapping:\n\n\t\t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MirroredRepeatWrapping:\n\n\t\t\t\t\t\tif ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\t\tuv.x = Math.ceil( uv.x ) - uv.x;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( uv.y < 0 || uv.y > 1 ) {\n\n\t\t\t\tswitch ( this.wrapT ) {\n\n\t\t\t\t\tcase RepeatWrapping:\n\n\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ClampToEdgeWrapping:\n\n\t\t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MirroredRepeatWrapping:\n\n\t\t\t\t\t\tif ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\t\tuv.y = Math.ceil( uv.y ) - uv.y;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.flipY ) {\n\n\t\t\t\tuv.y = 1 - uv.y;\n\n\t\t\t}\n\n\t\t\treturn uv;\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperty( Texture.prototype, \"needsUpdate\", {\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value === true ) { this.version ++; }\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\n\t * @author philogb / http://blog.thejit.org/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author egraether / http://egraether.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction Vector4( x, y, z, w ) {\n\n\t\tthis.x = x || 0;\n\t\tthis.y = y || 0;\n\t\tthis.z = z || 0;\n\t\tthis.w = ( w !== undefined ) ? w : 1;\n\n\t}\n\n\tObject.defineProperties( Vector4.prototype, {\n\n\t\t\"width\": {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.z;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.z = value;\n\n\t\t\t}\n\n\t\t},\n\n\t\t\"height\": {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.w;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.w = value;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Vector4.prototype, {\n\n\t\tisVector4: true,\n\n\t\tset: function ( x, y, z, w ) {\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t\tthis.w = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetScalar: function ( scalar ) {\n\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\tthis.z = scalar;\n\t\t\tthis.w = scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetX: function ( x ) {\n\n\t\t\tthis.x = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetY: function ( y ) {\n\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetZ: function ( z ) {\n\n\t\t\tthis.z = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetW: function ( w ) {\n\n\t\t\tthis.w = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetComponent: function ( index, value ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: this.x = value; break;\n\t\t\t\tcase 1: this.y = value; break;\n\t\t\t\tcase 2: this.z = value; break;\n\t\t\t\tcase 3: this.w = value; break;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetComponent: function ( index ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: return this.x;\n\t\t\t\tcase 1: return this.y;\n\t\t\t\tcase 2: return this.z;\n\t\t\t\tcase 3: return this.w;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.x, this.y, this.z, this.w );\n\n\t\t},\n\n\t\tcopy: function ( v ) {\n\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\tthis.z = v.z;\n\t\t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tadd: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\t\treturn this.addVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\tthis.z += v.z;\n\t\t\tthis.w += v.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScalar: function ( s ) {\n\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\tthis.z += s;\n\t\t\tthis.w += s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\tthis.z = a.z + b.z;\n\t\t\tthis.w = a.w + b.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScaledVector: function ( v, s ) {\n\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\tthis.z += v.z * s;\n\t\t\tthis.w += v.w * s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsub: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\t\treturn this.subVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\tthis.z -= v.z;\n\t\t\tthis.w -= v.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubScalar: function ( s ) {\n\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\tthis.z -= s;\n\t\t\tthis.w -= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\tthis.z = a.z - b.z;\n\t\t\tthis.w = a.w - b.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( scalar ) {\n\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\tthis.z *= scalar;\n\t\t\tthis.w *= scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyMatrix4: function ( m ) {\n\n\t\t\tvar x = this.x, y = this.y, z = this.z, w = this.w;\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\n\t\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\n\t\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\n\t\t\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdivideScalar: function ( scalar ) {\n\n\t\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t\t},\n\n\t\tsetAxisAngleFromQuaternion: function ( q ) {\n\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\n\t\t\t// q is assumed to be normalized\n\n\t\t\tthis.w = 2 * Math.acos( q.w );\n\n\t\t\tvar s = Math.sqrt( 1 - q.w * q.w );\n\n\t\t\tif ( s < 0.0001 ) {\n\n\t\t\t\tthis.x = 1;\n\t\t\t\tthis.y = 0;\n\t\t\t\tthis.z = 0;\n\n\t\t\t} else {\n\n\t\t\t\tthis.x = q.x / s;\n\t\t\t\tthis.y = q.y / s;\n\t\t\t\tthis.z = q.z / s;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetAxisAngleFromRotationMatrix: function ( m ) {\n\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tvar angle, x, y, z,\t\t// variables for result\n\t\t\t\tepsilon = 0.01,\t\t// margin to allow for rounding errors\n\t\t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\n\n\t\t\t\tte = m.elements,\n\n\t\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\t\tif ( ( Math.abs( m12 - m21 ) < epsilon ) &&\n\t\t\t     ( Math.abs( m13 - m31 ) < epsilon ) &&\n\t\t\t     ( Math.abs( m23 - m32 ) < epsilon ) ) {\n\n\t\t\t\t// singularity found\n\t\t\t\t// first check for identity matrix which must have +1 for all terms\n\t\t\t\t// in leading diagonal and zero in other terms\n\n\t\t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&\n\t\t\t\t     ( Math.abs( m13 + m31 ) < epsilon2 ) &&\n\t\t\t\t     ( Math.abs( m23 + m32 ) < epsilon2 ) &&\n\t\t\t\t     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\n\n\t\t\t\t\t// this singularity is identity matrix so angle = 0\n\n\t\t\t\t\tthis.set( 1, 0, 0, 0 );\n\n\t\t\t\t\treturn this; // zero angle, arbitrary axis\n\n\t\t\t\t}\n\n\t\t\t\t// otherwise this singularity is angle = 180\n\n\t\t\t\tangle = Math.PI;\n\n\t\t\t\tvar xx = ( m11 + 1 ) / 2;\n\t\t\t\tvar yy = ( m22 + 1 ) / 2;\n\t\t\t\tvar zz = ( m33 + 1 ) / 2;\n\t\t\t\tvar xy = ( m12 + m21 ) / 4;\n\t\t\t\tvar xz = ( m13 + m31 ) / 4;\n\t\t\t\tvar yz = ( m23 + m32 ) / 4;\n\n\t\t\t\tif ( ( xx > yy ) && ( xx > zz ) ) {\n\n\t\t\t\t\t// m11 is the largest diagonal term\n\n\t\t\t\t\tif ( xx < epsilon ) {\n\n\t\t\t\t\t\tx = 0;\n\t\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tx = Math.sqrt( xx );\n\t\t\t\t\t\ty = xy / x;\n\t\t\t\t\t\tz = xz / x;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( yy > zz ) {\n\n\t\t\t\t\t// m22 is the largest diagonal term\n\n\t\t\t\t\tif ( yy < epsilon ) {\n\n\t\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\t\ty = 0;\n\t\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ty = Math.sqrt( yy );\n\t\t\t\t\t\tx = xy / y;\n\t\t\t\t\t\tz = yz / y;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// m33 is the largest diagonal term so base result on this\n\n\t\t\t\t\tif ( zz < epsilon ) {\n\n\t\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\t\tz = 0;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tz = Math.sqrt( zz );\n\t\t\t\t\t\tx = xz / z;\n\t\t\t\t\t\ty = yz / z;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.set( x, y, z, angle );\n\n\t\t\t\treturn this; // return 180 deg rotation\n\n\t\t\t}\n\n\t\t\t// as we have reached here there are no singularities so we can handle normally\n\n\t\t\tvar s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +\n\t\t\t                   ( m13 - m31 ) * ( m13 - m31 ) +\n\t\t\t                   ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\n\n\t\t\tif ( Math.abs( s ) < 0.001 ) { s = 1; }\n\n\t\t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\n\t\t\t// caught by singularity test above, but I've left it in just in case\n\n\t\t\tthis.x = ( m32 - m23 ) / s;\n\t\t\tthis.y = ( m13 - m31 ) / s;\n\t\t\tthis.z = ( m21 - m12 ) / s;\n\t\t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmin: function ( v ) {\n\n\t\t\tthis.x = Math.min( this.x, v.x );\n\t\t\tthis.y = Math.min( this.y, v.y );\n\t\t\tthis.z = Math.min( this.z, v.z );\n\t\t\tthis.w = Math.min( this.w, v.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmax: function ( v ) {\n\n\t\t\tthis.x = Math.max( this.x, v.x );\n\t\t\tthis.y = Math.max( this.y, v.y );\n\t\t\tthis.z = Math.max( this.z, v.z );\n\t\t\tthis.w = Math.max( this.w, v.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclamp: function ( min, max ) {\n\n\t\t\t// assumes min < max, componentwise\n\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\t\t\tthis.w = Math.max( min.w, Math.min( max.w, this.w ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampScalar: function ( minVal, maxVal ) {\n\n\t\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\n\t\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\n\t\t\tthis.z = Math.max( minVal, Math.min( maxVal, this.z ) );\n\t\t\tthis.w = Math.max( minVal, Math.min( maxVal, this.w ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampLength: function ( min, max ) {\n\n\t\t\tvar length = this.length();\n\n\t\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t\t},\n\n\t\tfloor: function () {\n\n\t\t\tthis.x = Math.floor( this.x );\n\t\t\tthis.y = Math.floor( this.y );\n\t\t\tthis.z = Math.floor( this.z );\n\t\t\tthis.w = Math.floor( this.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tceil: function () {\n\n\t\t\tthis.x = Math.ceil( this.x );\n\t\t\tthis.y = Math.ceil( this.y );\n\t\t\tthis.z = Math.ceil( this.z );\n\t\t\tthis.w = Math.ceil( this.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tround: function () {\n\n\t\t\tthis.x = Math.round( this.x );\n\t\t\tthis.y = Math.round( this.y );\n\t\t\tthis.z = Math.round( this.z );\n\t\t\tthis.w = Math.round( this.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\troundToZero: function () {\n\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\t\t\tthis.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnegate: function () {\n\n\t\t\tthis.x = - this.x;\n\t\t\tthis.y = - this.y;\n\t\t\tthis.z = - this.z;\n\t\t\tthis.w = - this.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdot: function ( v ) {\n\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n\n\t\t},\n\n\t\tlengthSq: function () {\n\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n\n\t\t},\n\n\t\tlength: function () {\n\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\n\n\t\t},\n\n\t\tmanhattanLength: function () {\n\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\treturn this.divideScalar( this.length() || 1 );\n\n\t\t},\n\n\t\tsetLength: function ( length ) {\n\n\t\t\treturn this.normalize().multiplyScalar( length );\n\n\t\t},\n\n\t\tlerp: function ( v, alpha ) {\n\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\t\tthis.z += ( v.z - this.z ) * alpha;\n\t\t\tthis.w += ( v.w - this.w ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t\t},\n\n\t\tequals: function ( v ) {\n\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tthis.x = array[ offset ];\n\t\t\tthis.y = array[ offset + 1 ];\n\t\t\tthis.z = array[ offset + 2 ];\n\t\t\tthis.w = array[ offset + 3 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tarray[ offset ] = this.x;\n\t\t\tarray[ offset + 1 ] = this.y;\n\t\t\tarray[ offset + 2 ] = this.z;\n\t\t\tarray[ offset + 3 ] = this.w;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tfromBufferAttribute: function ( attribute, index, offset ) {\n\n\t\t\tif ( offset !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector4: offset has been removed from .fromBufferAttribute().' );\n\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX( index );\n\t\t\tthis.y = attribute.getY( index );\n\t\t\tthis.z = attribute.getZ( index );\n\t\t\tthis.w = attribute.getW( index );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author szimek / https://github.com/szimek/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author Marius Kintel / https://github.com/kintel\n\t */\n\n\t/*\n\t In options, we can specify:\n\t * Texture parameters for an auto-generated target texture\n\t * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\n\t*/\n\tfunction WebGLRenderTarget( width, height, options ) {\n\n\t\tthis.width = width;\n\t\tthis.height = height;\n\n\t\tthis.scissor = new Vector4( 0, 0, width, height );\n\t\tthis.scissorTest = false;\n\n\t\tthis.viewport = new Vector4( 0, 0, width, height );\n\n\t\toptions = options || {};\n\n\t\tthis.texture = new Texture( undefined, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );\n\n\t\tthis.texture.image = {};\n\t\tthis.texture.image.width = width;\n\t\tthis.texture.image.height = height;\n\n\t\tthis.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;\n\t\tthis.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;\n\n\t\tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\n\t\tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;\n\t\tthis.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;\n\n\t}\n\n\tWebGLRenderTarget.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: WebGLRenderTarget,\n\n\t\tisWebGLRenderTarget: true,\n\n\t\tsetSize: function ( width, height ) {\n\n\t\t\tif ( this.width !== width || this.height !== height ) {\n\n\t\t\t\tthis.width = width;\n\t\t\t\tthis.height = height;\n\n\t\t\t\tthis.texture.image.width = width;\n\t\t\t\tthis.texture.image.height = height;\n\n\t\t\t\tthis.dispose();\n\n\t\t\t}\n\n\t\t\tthis.viewport.set( 0, 0, width, height );\n\t\t\tthis.scissor.set( 0, 0, width, height );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.width = source.width;\n\t\t\tthis.height = source.height;\n\n\t\t\tthis.viewport.copy( source.viewport );\n\n\t\t\tthis.texture = source.texture.clone();\n\n\t\t\tthis.depthBuffer = source.depthBuffer;\n\t\t\tthis.stencilBuffer = source.stencilBuffer;\n\t\t\tthis.depthTexture = source.depthTexture;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t * @author Matt DesLauriers / @mattdesl\n\t */\n\n\tfunction WebGLMultisampleRenderTarget( width, height, options ) {\n\n\t\tWebGLRenderTarget.call( this, width, height, options );\n\n\t\tthis.samples = 4;\n\n\t}\n\n\tWebGLMultisampleRenderTarget.prototype = Object.assign( Object.create( WebGLRenderTarget.prototype ), {\n\n\t\tconstructor: WebGLMultisampleRenderTarget,\n\n\t\tisWebGLMultisampleRenderTarget: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tWebGLRenderTarget.prototype.copy.call( this, source );\n\n\t\t\tthis.samples = source.samples;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author bhouston / http://clara.io\n\t */\n\n\tfunction Quaternion( x, y, z, w ) {\n\n\t\tthis._x = x || 0;\n\t\tthis._y = y || 0;\n\t\tthis._z = z || 0;\n\t\tthis._w = ( w !== undefined ) ? w : 1;\n\n\t}\n\n\tObject.assign( Quaternion, {\n\n\t\tslerp: function ( qa, qb, qm, t ) {\n\n\t\t\treturn qm.copy( qa ).slerp( qb, t );\n\n\t\t},\n\n\t\tslerpFlat: function ( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\n\n\t\t\t// fuzz-free, array-based Quaternion SLERP operation\n\n\t\t\tvar x0 = src0[ srcOffset0 + 0 ],\n\t\t\t\ty0 = src0[ srcOffset0 + 1 ],\n\t\t\t\tz0 = src0[ srcOffset0 + 2 ],\n\t\t\t\tw0 = src0[ srcOffset0 + 3 ],\n\n\t\t\t\tx1 = src1[ srcOffset1 + 0 ],\n\t\t\t\ty1 = src1[ srcOffset1 + 1 ],\n\t\t\t\tz1 = src1[ srcOffset1 + 2 ],\n\t\t\t\tw1 = src1[ srcOffset1 + 3 ];\n\n\t\t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\n\n\t\t\t\tvar s = 1 - t,\n\n\t\t\t\t\tcos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n\n\t\t\t\t\tdir = ( cos >= 0 ? 1 : - 1 ),\n\t\t\t\t\tsqrSin = 1 - cos * cos;\n\n\t\t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\n\t\t\t\tif ( sqrSin > Number.EPSILON ) {\n\n\t\t\t\t\tvar sin = Math.sqrt( sqrSin ),\n\t\t\t\t\t\tlen = Math.atan2( sin, cos * dir );\n\n\t\t\t\t\ts = Math.sin( s * len ) / sin;\n\t\t\t\t\tt = Math.sin( t * len ) / sin;\n\n\t\t\t\t}\n\n\t\t\t\tvar tDir = t * dir;\n\n\t\t\t\tx0 = x0 * s + x1 * tDir;\n\t\t\t\ty0 = y0 * s + y1 * tDir;\n\t\t\t\tz0 = z0 * s + z1 * tDir;\n\t\t\t\tw0 = w0 * s + w1 * tDir;\n\n\t\t\t\t// Normalize in case we just did a lerp:\n\t\t\t\tif ( s === 1 - t ) {\n\n\t\t\t\t\tvar f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\n\n\t\t\t\t\tx0 *= f;\n\t\t\t\t\ty0 *= f;\n\t\t\t\t\tz0 *= f;\n\t\t\t\t\tw0 *= f;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tdst[ dstOffset ] = x0;\n\t\t\tdst[ dstOffset + 1 ] = y0;\n\t\t\tdst[ dstOffset + 2 ] = z0;\n\t\t\tdst[ dstOffset + 3 ] = w0;\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( Quaternion.prototype, {\n\n\t\tx: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._x;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._x = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\ty: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._y;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._y = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\tz: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._z;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._z = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\tw: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._w;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._w = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Quaternion.prototype, {\n\n\t\tisQuaternion: true,\n\n\t\tset: function ( x, y, z, w ) {\n\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._w = w;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this._x, this._y, this._z, this._w );\n\n\t\t},\n\n\t\tcopy: function ( quaternion ) {\n\n\t\t\tthis._x = quaternion.x;\n\t\t\tthis._y = quaternion.y;\n\t\t\tthis._z = quaternion.z;\n\t\t\tthis._w = quaternion.w;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromEuler: function ( euler, update ) {\n\n\t\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\t\tthrow new Error( 'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\n\t\t\t}\n\n\t\t\tvar x = euler._x, y = euler._y, z = euler._z, order = euler.order;\n\n\t\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\n\t\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n\t\t\t//\tcontent/SpinCalc.m\n\n\t\t\tvar cos = Math.cos;\n\t\t\tvar sin = Math.sin;\n\n\t\t\tvar c1 = cos( x / 2 );\n\t\t\tvar c2 = cos( y / 2 );\n\t\t\tvar c3 = cos( z / 2 );\n\n\t\t\tvar s1 = sin( x / 2 );\n\t\t\tvar s2 = sin( y / 2 );\n\t\t\tvar s3 = sin( z / 2 );\n\n\t\t\tif ( order === 'XYZ' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'YXZ' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'ZXY' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'ZYX' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'YZX' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'XZY' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t\t}\n\n\t\t\tif ( update !== false ) { this._onChangeCallback(); }\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromAxisAngle: function ( axis, angle ) {\n\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\n\t\t\t// assumes axis is normalized\n\n\t\t\tvar halfAngle = angle / 2, s = Math.sin( halfAngle );\n\n\t\t\tthis._x = axis.x * s;\n\t\t\tthis._y = axis.y * s;\n\t\t\tthis._z = axis.z * s;\n\t\t\tthis._w = Math.cos( halfAngle );\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromRotationMatrix: function ( m ) {\n\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tvar te = m.elements,\n\n\t\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\n\n\t\t\t\ttrace = m11 + m22 + m33,\n\t\t\t\ts;\n\n\t\t\tif ( trace > 0 ) {\n\n\t\t\t\ts = 0.5 / Math.sqrt( trace + 1.0 );\n\n\t\t\t\tthis._w = 0.25 / s;\n\t\t\t\tthis._x = ( m32 - m23 ) * s;\n\t\t\t\tthis._y = ( m13 - m31 ) * s;\n\t\t\t\tthis._z = ( m21 - m12 ) * s;\n\n\t\t\t} else if ( m11 > m22 && m11 > m33 ) {\n\n\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\n\n\t\t\t\tthis._w = ( m32 - m23 ) / s;\n\t\t\t\tthis._x = 0.25 * s;\n\t\t\t\tthis._y = ( m12 + m21 ) / s;\n\t\t\t\tthis._z = ( m13 + m31 ) / s;\n\n\t\t\t} else if ( m22 > m33 ) {\n\n\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\n\n\t\t\t\tthis._w = ( m13 - m31 ) / s;\n\t\t\t\tthis._x = ( m12 + m21 ) / s;\n\t\t\t\tthis._y = 0.25 * s;\n\t\t\t\tthis._z = ( m23 + m32 ) / s;\n\n\t\t\t} else {\n\n\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\n\n\t\t\t\tthis._w = ( m21 - m12 ) / s;\n\t\t\t\tthis._x = ( m13 + m31 ) / s;\n\t\t\t\tthis._y = ( m23 + m32 ) / s;\n\t\t\t\tthis._z = 0.25 * s;\n\n\t\t\t}\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromUnitVectors: function ( vFrom, vTo ) {\n\n\t\t\t// assumes direction vectors vFrom and vTo are normalized\n\n\t\t\tvar EPS = 0.000001;\n\n\t\t\tvar r = vFrom.dot( vTo ) + 1;\n\n\t\t\tif ( r < EPS ) {\n\n\t\t\t\tr = 0;\n\n\t\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\n\n\t\t\t\t\tthis._x = - vFrom.y;\n\t\t\t\t\tthis._y = vFrom.x;\n\t\t\t\t\tthis._z = 0;\n\t\t\t\t\tthis._w = r;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._y = - vFrom.z;\n\t\t\t\t\tthis._z = vFrom.y;\n\t\t\t\t\tthis._w = r;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\n\n\t\t\t\tthis._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\n\t\t\t\tthis._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\n\t\t\t\tthis._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\n\t\t\t\tthis._w = r;\n\n\t\t\t}\n\n\t\t\treturn this.normalize();\n\n\t\t},\n\n\t\tangleTo: function ( q ) {\n\n\t\t\treturn 2 * Math.acos( Math.abs( MathUtils.clamp( this.dot( q ), - 1, 1 ) ) );\n\n\t\t},\n\n\t\trotateTowards: function ( q, step ) {\n\n\t\t\tvar angle = this.angleTo( q );\n\n\t\t\tif ( angle === 0 ) { return this; }\n\n\t\t\tvar t = Math.min( 1, step / angle );\n\n\t\t\tthis.slerp( q, t );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tinverse: function () {\n\n\t\t\t// quaternion is assumed to have unit length\n\n\t\t\treturn this.conjugate();\n\n\t\t},\n\n\t\tconjugate: function () {\n\n\t\t\tthis._x *= - 1;\n\t\t\tthis._y *= - 1;\n\t\t\tthis._z *= - 1;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdot: function ( v ) {\n\n\t\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\n\t\t},\n\n\t\tlengthSq: function () {\n\n\t\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\n\t\t},\n\n\t\tlength: function () {\n\n\t\t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\tvar l = this.length();\n\n\t\t\tif ( l === 0 ) {\n\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._y = 0;\n\t\t\t\tthis._z = 0;\n\t\t\t\tthis._w = 1;\n\n\t\t\t} else {\n\n\t\t\t\tl = 1 / l;\n\n\t\t\t\tthis._x = this._x * l;\n\t\t\t\tthis._y = this._y * l;\n\t\t\t\tthis._z = this._z * l;\n\t\t\t\tthis._w = this._w * l;\n\n\t\t\t}\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( q, p ) {\n\n\t\t\tif ( p !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\n\t\t\t\treturn this.multiplyQuaternions( q, p );\n\n\t\t\t}\n\n\t\t\treturn this.multiplyQuaternions( this, q );\n\n\t\t},\n\n\t\tpremultiply: function ( q ) {\n\n\t\t\treturn this.multiplyQuaternions( q, this );\n\n\t\t},\n\n\t\tmultiplyQuaternions: function ( a, b ) {\n\n\t\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\n\t\t\tvar qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\n\t\t\tvar qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\n\n\t\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tslerp: function ( qb, t ) {\n\n\t\t\tif ( t === 0 ) { return this; }\n\t\t\tif ( t === 1 ) { return this.copy( qb ); }\n\n\t\t\tvar x = this._x, y = this._y, z = this._z, w = this._w;\n\n\t\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n\t\t\tvar cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n\t\t\tif ( cosHalfTheta < 0 ) {\n\n\t\t\t\tthis._w = - qb._w;\n\t\t\t\tthis._x = - qb._x;\n\t\t\t\tthis._y = - qb._y;\n\t\t\t\tthis._z = - qb._z;\n\n\t\t\t\tcosHalfTheta = - cosHalfTheta;\n\n\t\t\t} else {\n\n\t\t\t\tthis.copy( qb );\n\n\t\t\t}\n\n\t\t\tif ( cosHalfTheta >= 1.0 ) {\n\n\t\t\t\tthis._w = w;\n\t\t\t\tthis._x = x;\n\t\t\t\tthis._y = y;\n\t\t\t\tthis._z = z;\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\n\n\t\t\tif ( sqrSinHalfTheta <= Number.EPSILON ) {\n\n\t\t\t\tvar s = 1 - t;\n\t\t\t\tthis._w = s * w + t * this._w;\n\t\t\t\tthis._x = s * x + t * this._x;\n\t\t\t\tthis._y = s * y + t * this._y;\n\t\t\t\tthis._z = s * z + t * this._z;\n\n\t\t\t\tthis.normalize();\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar sinHalfTheta = Math.sqrt( sqrSinHalfTheta );\n\t\t\tvar halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\n\t\t\tvar ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\n\t\t\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\n\n\t\t\tthis._w = ( w * ratioA + this._w * ratioB );\n\t\t\tthis._x = ( x * ratioA + this._x * ratioB );\n\t\t\tthis._y = ( y * ratioA + this._y * ratioB );\n\t\t\tthis._z = ( z * ratioA + this._z * ratioB );\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( quaternion ) {\n\n\t\t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tthis._x = array[ offset ];\n\t\t\tthis._y = array[ offset + 1 ];\n\t\t\tthis._z = array[ offset + 2 ];\n\t\t\tthis._w = array[ offset + 3 ];\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tarray[ offset ] = this._x;\n\t\t\tarray[ offset + 1 ] = this._y;\n\t\t\tarray[ offset + 2 ] = this._z;\n\t\t\tarray[ offset + 3 ] = this._w;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\t_onChange: function ( callback ) {\n\n\t\t\tthis._onChangeCallback = callback;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t_onChangeCallback: function () {}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author kile / http://kile.stravaganza.org/\n\t * @author philogb / http://blog.thejit.org/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author egraether / http://egraether.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tvar _vector = new Vector3();\n\tvar _quaternion = new Quaternion();\n\n\tfunction Vector3( x, y, z ) {\n\n\t\tthis.x = x || 0;\n\t\tthis.y = y || 0;\n\t\tthis.z = z || 0;\n\n\t}\n\n\tObject.assign( Vector3.prototype, {\n\n\t\tisVector3: true,\n\n\t\tset: function ( x, y, z ) {\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetScalar: function ( scalar ) {\n\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\tthis.z = scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetX: function ( x ) {\n\n\t\t\tthis.x = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetY: function ( y ) {\n\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetZ: function ( z ) {\n\n\t\t\tthis.z = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetComponent: function ( index, value ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: this.x = value; break;\n\t\t\t\tcase 1: this.y = value; break;\n\t\t\t\tcase 2: this.z = value; break;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetComponent: function ( index ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: return this.x;\n\t\t\t\tcase 1: return this.y;\n\t\t\t\tcase 2: return this.z;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.x, this.y, this.z );\n\n\t\t},\n\n\t\tcopy: function ( v ) {\n\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\tthis.z = v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tadd: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\t\treturn this.addVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\tthis.z += v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScalar: function ( s ) {\n\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\tthis.z += s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\tthis.z = a.z + b.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScaledVector: function ( v, s ) {\n\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\tthis.z += v.z * s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsub: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\t\treturn this.subVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\tthis.z -= v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubScalar: function ( s ) {\n\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\tthis.z -= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\tthis.z = a.z - b.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );\n\t\t\t\treturn this.multiplyVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\t\t\tthis.z *= v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( scalar ) {\n\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\tthis.z *= scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x * b.x;\n\t\t\tthis.y = a.y * b.y;\n\t\t\tthis.z = a.z * b.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyEuler: function ( euler ) {\n\n\t\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\t\tconsole.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\n\t\t\t}\n\n\t\t\treturn this.applyQuaternion( _quaternion.setFromEuler( euler ) );\n\n\t\t},\n\n\t\tapplyAxisAngle: function ( axis, angle ) {\n\n\t\t\treturn this.applyQuaternion( _quaternion.setFromAxisAngle( axis, angle ) );\n\n\t\t},\n\n\t\tapplyMatrix3: function ( m ) {\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\n\t\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\n\t\t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyNormalMatrix: function ( m ) {\n\n\t\t\treturn this.applyMatrix3( m ).normalize();\n\n\t\t},\n\n\t\tapplyMatrix4: function ( m ) {\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar e = m.elements;\n\n\t\t\tvar w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );\n\n\t\t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;\n\t\t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;\n\t\t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyQuaternion: function ( q ) {\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar qx = q.x, qy = q.y, qz = q.z, qw = q.w;\n\n\t\t\t// calculate quat * vector\n\n\t\t\tvar ix = qw * x + qy * z - qz * y;\n\t\t\tvar iy = qw * y + qz * x - qx * z;\n\t\t\tvar iz = qw * z + qx * y - qy * x;\n\t\t\tvar iw = - qx * x - qy * y - qz * z;\n\n\t\t\t// calculate result * inverse quat\n\n\t\t\tthis.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\n\t\t\tthis.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\n\t\t\tthis.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tproject: function ( camera ) {\n\n\t\t\treturn this.applyMatrix4( camera.matrixWorldInverse ).applyMatrix4( camera.projectionMatrix );\n\n\t\t},\n\n\t\tunproject: function ( camera ) {\n\n\t\t\treturn this.applyMatrix4( camera.projectionMatrixInverse ).applyMatrix4( camera.matrixWorld );\n\n\t\t},\n\n\t\ttransformDirection: function ( m ) {\n\n\t\t\t// input: THREE.Matrix4 affine matrix\n\t\t\t// vector interpreted as a direction\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;\n\t\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;\n\t\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\n\n\t\t\treturn this.normalize();\n\n\t\t},\n\n\t\tdivide: function ( v ) {\n\n\t\t\tthis.x /= v.x;\n\t\t\tthis.y /= v.y;\n\t\t\tthis.z /= v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdivideScalar: function ( scalar ) {\n\n\t\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t\t},\n\n\t\tmin: function ( v ) {\n\n\t\t\tthis.x = Math.min( this.x, v.x );\n\t\t\tthis.y = Math.min( this.y, v.y );\n\t\t\tthis.z = Math.min( this.z, v.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmax: function ( v ) {\n\n\t\t\tthis.x = Math.max( this.x, v.x );\n\t\t\tthis.y = Math.max( this.y, v.y );\n\t\t\tthis.z = Math.max( this.z, v.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclamp: function ( min, max ) {\n\n\t\t\t// assumes min < max, componentwise\n\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampScalar: function ( minVal, maxVal ) {\n\n\t\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\n\t\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\n\t\t\tthis.z = Math.max( minVal, Math.min( maxVal, this.z ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampLength: function ( min, max ) {\n\n\t\t\tvar length = this.length();\n\n\t\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t\t},\n\n\t\tfloor: function () {\n\n\t\t\tthis.x = Math.floor( this.x );\n\t\t\tthis.y = Math.floor( this.y );\n\t\t\tthis.z = Math.floor( this.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tceil: function () {\n\n\t\t\tthis.x = Math.ceil( this.x );\n\t\t\tthis.y = Math.ceil( this.y );\n\t\t\tthis.z = Math.ceil( this.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tround: function () {\n\n\t\t\tthis.x = Math.round( this.x );\n\t\t\tthis.y = Math.round( this.y );\n\t\t\tthis.z = Math.round( this.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\troundToZero: function () {\n\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnegate: function () {\n\n\t\t\tthis.x = - this.x;\n\t\t\tthis.y = - this.y;\n\t\t\tthis.z = - this.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdot: function ( v ) {\n\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\n\n\t\t},\n\n\t\t// TODO lengthSquared?\n\n\t\tlengthSq: function () {\n\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\n\n\t\t},\n\n\t\tlength: function () {\n\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\n\n\t\t},\n\n\t\tmanhattanLength: function () {\n\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\treturn this.divideScalar( this.length() || 1 );\n\n\t\t},\n\n\t\tsetLength: function ( length ) {\n\n\t\t\treturn this.normalize().multiplyScalar( length );\n\n\t\t},\n\n\t\tlerp: function ( v, alpha ) {\n\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\t\tthis.z += ( v.z - this.z ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t\t},\n\n\t\tcross: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );\n\t\t\t\treturn this.crossVectors( v, w );\n\n\t\t\t}\n\n\t\t\treturn this.crossVectors( this, v );\n\n\t\t},\n\n\t\tcrossVectors: function ( a, b ) {\n\n\t\t\tvar ax = a.x, ay = a.y, az = a.z;\n\t\t\tvar bx = b.x, by = b.y, bz = b.z;\n\n\t\t\tthis.x = ay * bz - az * by;\n\t\t\tthis.y = az * bx - ax * bz;\n\t\t\tthis.z = ax * by - ay * bx;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tprojectOnVector: function ( v ) {\n\n\t\t\tvar denominator = v.lengthSq();\n\n\t\t\tif ( denominator === 0 ) { return this.set( 0, 0, 0 ); }\n\n\t\t\tvar scalar = v.dot( this ) / denominator;\n\n\t\t\treturn this.copy( v ).multiplyScalar( scalar );\n\n\t\t},\n\n\t\tprojectOnPlane: function ( planeNormal ) {\n\n\t\t\t_vector.copy( this ).projectOnVector( planeNormal );\n\n\t\t\treturn this.sub( _vector );\n\n\t\t},\n\n\t\treflect: function ( normal ) {\n\n\t\t\t// reflect incident vector off plane orthogonal to normal\n\t\t\t// normal is assumed to have unit length\n\n\t\t\treturn this.sub( _vector.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\n\n\t\t},\n\n\t\tangleTo: function ( v ) {\n\n\t\t\tvar denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );\n\n\t\t\tif ( denominator === 0 ) { return Math.PI / 2; }\n\n\t\t\tvar theta = this.dot( v ) / denominator;\n\n\t\t\t// clamp, to handle numerical problems\n\n\t\t\treturn Math.acos( MathUtils.clamp( theta, - 1, 1 ) );\n\n\t\t},\n\n\t\tdistanceTo: function ( v ) {\n\n\t\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t\t},\n\n\t\tdistanceToSquared: function ( v ) {\n\n\t\t\tvar dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\n\n\t\t\treturn dx * dx + dy * dy + dz * dz;\n\n\t\t},\n\n\t\tmanhattanDistanceTo: function ( v ) {\n\n\t\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );\n\n\t\t},\n\n\t\tsetFromSpherical: function ( s ) {\n\n\t\t\treturn this.setFromSphericalCoords( s.radius, s.phi, s.theta );\n\n\t\t},\n\n\t\tsetFromSphericalCoords: function ( radius, phi, theta ) {\n\n\t\t\tvar sinPhiRadius = Math.sin( phi ) * radius;\n\n\t\t\tthis.x = sinPhiRadius * Math.sin( theta );\n\t\t\tthis.y = Math.cos( phi ) * radius;\n\t\t\tthis.z = sinPhiRadius * Math.cos( theta );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromCylindrical: function ( c ) {\n\n\t\t\treturn this.setFromCylindricalCoords( c.radius, c.theta, c.y );\n\n\t\t},\n\n\t\tsetFromCylindricalCoords: function ( radius, theta, y ) {\n\n\t\t\tthis.x = radius * Math.sin( theta );\n\t\t\tthis.y = y;\n\t\t\tthis.z = radius * Math.cos( theta );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrixPosition: function ( m ) {\n\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 12 ];\n\t\t\tthis.y = e[ 13 ];\n\t\t\tthis.z = e[ 14 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrixScale: function ( m ) {\n\n\t\t\tvar sx = this.setFromMatrixColumn( m, 0 ).length();\n\t\t\tvar sy = this.setFromMatrixColumn( m, 1 ).length();\n\t\t\tvar sz = this.setFromMatrixColumn( m, 2 ).length();\n\n\t\t\tthis.x = sx;\n\t\t\tthis.y = sy;\n\t\t\tthis.z = sz;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrixColumn: function ( m, index ) {\n\n\t\t\treturn this.fromArray( m.elements, index * 4 );\n\n\t\t},\n\n\t\tsetFromMatrix3Column: function ( m, index ) {\n\n\t\t\treturn this.fromArray( m.elements, index * 3 );\n\n\t\t},\n\n\t\tequals: function ( v ) {\n\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tthis.x = array[ offset ];\n\t\t\tthis.y = array[ offset + 1 ];\n\t\t\tthis.z = array[ offset + 2 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tarray[ offset ] = this.x;\n\t\t\tarray[ offset + 1 ] = this.y;\n\t\t\tarray[ offset + 2 ] = this.z;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tfromBufferAttribute: function ( attribute, index, offset ) {\n\n\t\t\tif ( offset !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: offset has been removed from .fromBufferAttribute().' );\n\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX( index );\n\t\t\tthis.y = attribute.getY( index );\n\t\t\tthis.z = attribute.getZ( index );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\tvar _v1 = new Vector3();\n\tvar _m1 = new Matrix4();\n\tvar _zero = new Vector3( 0, 0, 0 );\n\tvar _one = new Vector3( 1, 1, 1 );\n\tvar _x = new Vector3();\n\tvar _y = new Vector3();\n\tvar _z = new Vector3();\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\n\t * @author philogb / http://blog.thejit.org/\n\t * @author jordi_ros / http://plattsoft.com\n\t * @author D1plo1d / http://github.com/D1plo1d\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author timknip / http://www.floorplanner.com/\n\t * @author bhouston / http://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction Matrix4() {\n\n\t\tthis.elements = [\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, 1, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t];\n\n\t\tif ( arguments.length > 0 ) {\n\n\t\t\tconsole.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );\n\n\t\t}\n\n\t}\n\n\tObject.assign( Matrix4.prototype, {\n\n\t\tisMatrix4: true,\n\n\t\tset: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\n\t\t\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\n\t\t\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\n\t\t\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tidentity: function () {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0, 0,\n\t\t\t\t0, 1, 0, 0,\n\t\t\t\t0, 0, 1, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new Matrix4().fromArray( this.elements );\n\n\t\t},\n\n\t\tcopy: function ( m ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = m.elements;\n\n\t\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];\n\t\t\tte[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];\n\t\t\tte[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];\n\t\t\tte[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyPosition: function ( m ) {\n\n\t\t\tvar te = this.elements, me = m.elements;\n\n\t\t\tte[ 12 ] = me[ 12 ];\n\t\t\tte[ 13 ] = me[ 13 ];\n\t\t\tte[ 14 ] = me[ 14 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\textractBasis: function ( xAxis, yAxis, zAxis ) {\n\n\t\t\txAxis.setFromMatrixColumn( this, 0 );\n\t\t\tyAxis.setFromMatrixColumn( this, 1 );\n\t\t\tzAxis.setFromMatrixColumn( this, 2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeBasis: function ( xAxis, yAxis, zAxis ) {\n\n\t\t\tthis.set(\n\t\t\t\txAxis.x, yAxis.x, zAxis.x, 0,\n\t\t\t\txAxis.y, yAxis.y, zAxis.y, 0,\n\t\t\t\txAxis.z, yAxis.z, zAxis.z, 0,\n\t\t\t\t0, 0, 0, 1\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\textractRotation: function ( m ) {\n\n\t\t\t// this method does not support reflection matrices\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = m.elements;\n\n\t\t\tvar scaleX = 1 / _v1.setFromMatrixColumn( m, 0 ).length();\n\t\t\tvar scaleY = 1 / _v1.setFromMatrixColumn( m, 1 ).length();\n\t\t\tvar scaleZ = 1 / _v1.setFromMatrixColumn( m, 2 ).length();\n\n\t\t\tte[ 0 ] = me[ 0 ] * scaleX;\n\t\t\tte[ 1 ] = me[ 1 ] * scaleX;\n\t\t\tte[ 2 ] = me[ 2 ] * scaleX;\n\t\t\tte[ 3 ] = 0;\n\n\t\t\tte[ 4 ] = me[ 4 ] * scaleY;\n\t\t\tte[ 5 ] = me[ 5 ] * scaleY;\n\t\t\tte[ 6 ] = me[ 6 ] * scaleY;\n\t\t\tte[ 7 ] = 0;\n\n\t\t\tte[ 8 ] = me[ 8 ] * scaleZ;\n\t\t\tte[ 9 ] = me[ 9 ] * scaleZ;\n\t\t\tte[ 10 ] = me[ 10 ] * scaleZ;\n\t\t\tte[ 11 ] = 0;\n\n\t\t\tte[ 12 ] = 0;\n\t\t\tte[ 13 ] = 0;\n\t\t\tte[ 14 ] = 0;\n\t\t\tte[ 15 ] = 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationFromEuler: function ( euler ) {\n\n\t\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\t\tconsole.error( 'THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\n\n\t\t\t}\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar x = euler.x, y = euler.y, z = euler.z;\n\t\t\tvar a = Math.cos( x ), b = Math.sin( x );\n\t\t\tvar c = Math.cos( y ), d = Math.sin( y );\n\t\t\tvar e = Math.cos( z ), f = Math.sin( z );\n\n\t\t\tif ( euler.order === 'XYZ' ) {\n\n\t\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\tte[ 4 ] = - c * f;\n\t\t\t\tte[ 8 ] = d;\n\n\t\t\t\tte[ 1 ] = af + be * d;\n\t\t\t\tte[ 5 ] = ae - bf * d;\n\t\t\t\tte[ 9 ] = - b * c;\n\n\t\t\t\tte[ 2 ] = bf - ae * d;\n\t\t\t\tte[ 6 ] = be + af * d;\n\t\t\t\tte[ 10 ] = a * c;\n\n\t\t\t} else if ( euler.order === 'YXZ' ) {\n\n\t\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\t\tte[ 0 ] = ce + df * b;\n\t\t\t\tte[ 4 ] = de * b - cf;\n\t\t\t\tte[ 8 ] = a * d;\n\n\t\t\t\tte[ 1 ] = a * f;\n\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\tte[ 9 ] = - b;\n\n\t\t\t\tte[ 2 ] = cf * b - de;\n\t\t\t\tte[ 6 ] = df + ce * b;\n\t\t\t\tte[ 10 ] = a * c;\n\n\t\t\t} else if ( euler.order === 'ZXY' ) {\n\n\t\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\t\tte[ 0 ] = ce - df * b;\n\t\t\t\tte[ 4 ] = - a * f;\n\t\t\t\tte[ 8 ] = de + cf * b;\n\n\t\t\t\tte[ 1 ] = cf + de * b;\n\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\tte[ 9 ] = df - ce * b;\n\n\t\t\t\tte[ 2 ] = - a * d;\n\t\t\t\tte[ 6 ] = b;\n\t\t\t\tte[ 10 ] = a * c;\n\n\t\t\t} else if ( euler.order === 'ZYX' ) {\n\n\t\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\tte[ 4 ] = be * d - af;\n\t\t\t\tte[ 8 ] = ae * d + bf;\n\n\t\t\t\tte[ 1 ] = c * f;\n\t\t\t\tte[ 5 ] = bf * d + ae;\n\t\t\t\tte[ 9 ] = af * d - be;\n\n\t\t\t\tte[ 2 ] = - d;\n\t\t\t\tte[ 6 ] = b * c;\n\t\t\t\tte[ 10 ] = a * c;\n\n\t\t\t} else if ( euler.order === 'YZX' ) {\n\n\t\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\tte[ 4 ] = bd - ac * f;\n\t\t\t\tte[ 8 ] = bc * f + ad;\n\n\t\t\t\tte[ 1 ] = f;\n\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\tte[ 9 ] = - b * e;\n\n\t\t\t\tte[ 2 ] = - d * e;\n\t\t\t\tte[ 6 ] = ad * f + bc;\n\t\t\t\tte[ 10 ] = ac - bd * f;\n\n\t\t\t} else if ( euler.order === 'XZY' ) {\n\n\t\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\tte[ 4 ] = - f;\n\t\t\t\tte[ 8 ] = d * e;\n\n\t\t\t\tte[ 1 ] = ac * f + bd;\n\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\tte[ 9 ] = ad * f - bc;\n\n\t\t\t\tte[ 2 ] = bc * f - ad;\n\t\t\t\tte[ 6 ] = b * e;\n\t\t\t\tte[ 10 ] = bd * f + ac;\n\n\t\t\t}\n\n\t\t\t// bottom row\n\t\t\tte[ 3 ] = 0;\n\t\t\tte[ 7 ] = 0;\n\t\t\tte[ 11 ] = 0;\n\n\t\t\t// last column\n\t\t\tte[ 12 ] = 0;\n\t\t\tte[ 13 ] = 0;\n\t\t\tte[ 14 ] = 0;\n\t\t\tte[ 15 ] = 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationFromQuaternion: function ( q ) {\n\n\t\t\treturn this.compose( _zero, q, _one );\n\n\t\t},\n\n\t\tlookAt: function ( eye, target, up ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\t_z.subVectors( eye, target );\n\n\t\t\tif ( _z.lengthSq() === 0 ) {\n\n\t\t\t\t// eye and target are in the same position\n\n\t\t\t\t_z.z = 1;\n\n\t\t\t}\n\n\t\t\t_z.normalize();\n\t\t\t_x.crossVectors( up, _z );\n\n\t\t\tif ( _x.lengthSq() === 0 ) {\n\n\t\t\t\t// up and z are parallel\n\n\t\t\t\tif ( Math.abs( up.z ) === 1 ) {\n\n\t\t\t\t\t_z.x += 0.0001;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_z.z += 0.0001;\n\n\t\t\t\t}\n\n\t\t\t\t_z.normalize();\n\t\t\t\t_x.crossVectors( up, _z );\n\n\t\t\t}\n\n\t\t\t_x.normalize();\n\t\t\t_y.crossVectors( _z, _x );\n\n\t\t\tte[ 0 ] = _x.x; te[ 4 ] = _y.x; te[ 8 ] = _z.x;\n\t\t\tte[ 1 ] = _x.y; te[ 5 ] = _y.y; te[ 9 ] = _z.y;\n\t\t\tte[ 2 ] = _x.z; te[ 6 ] = _y.z; te[ 10 ] = _z.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( m, n ) {\n\n\t\t\tif ( n !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );\n\t\t\t\treturn this.multiplyMatrices( m, n );\n\n\t\t\t}\n\n\t\t\treturn this.multiplyMatrices( this, m );\n\n\t\t},\n\n\t\tpremultiply: function ( m ) {\n\n\t\t\treturn this.multiplyMatrices( m, this );\n\n\t\t},\n\n\t\tmultiplyMatrices: function ( a, b ) {\n\n\t\t\tvar ae = a.elements;\n\t\t\tvar be = b.elements;\n\t\t\tvar te = this.elements;\n\n\t\t\tvar a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\n\t\t\tvar a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\n\t\t\tvar a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\n\t\t\tvar a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\n\n\t\t\tvar b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\n\t\t\tvar b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\n\t\t\tvar b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\n\t\t\tvar b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\n\n\t\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n\t\t\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n\t\t\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n\t\t\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\n\t\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n\t\t\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n\t\t\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n\t\t\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\n\t\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n\t\t\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n\t\t\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n\t\t\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\n\t\t\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n\t\t\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n\t\t\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n\t\t\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( s ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\n\t\t\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\n\t\t\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\n\t\t\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdeterminant: function () {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\n\t\t\tvar n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\n\t\t\tvar n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\n\t\t\tvar n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\n\n\t\t\t//TODO: make this more efficient\n\t\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\n\t\t\treturn (\n\t\t\t\tn41 * (\n\t\t\t\t\t+ n14 * n23 * n32\n\t\t\t\t\t - n13 * n24 * n32\n\t\t\t\t\t - n14 * n22 * n33\n\t\t\t\t\t + n12 * n24 * n33\n\t\t\t\t\t + n13 * n22 * n34\n\t\t\t\t\t - n12 * n23 * n34\n\t\t\t\t) +\n\t\t\t\tn42 * (\n\t\t\t\t\t+ n11 * n23 * n34\n\t\t\t\t\t - n11 * n24 * n33\n\t\t\t\t\t + n14 * n21 * n33\n\t\t\t\t\t - n13 * n21 * n34\n\t\t\t\t\t + n13 * n24 * n31\n\t\t\t\t\t - n14 * n23 * n31\n\t\t\t\t) +\n\t\t\t\tn43 * (\n\t\t\t\t\t+ n11 * n24 * n32\n\t\t\t\t\t - n11 * n22 * n34\n\t\t\t\t\t - n14 * n21 * n32\n\t\t\t\t\t + n12 * n21 * n34\n\t\t\t\t\t + n14 * n22 * n31\n\t\t\t\t\t - n12 * n24 * n31\n\t\t\t\t) +\n\t\t\t\tn44 * (\n\t\t\t\t\t- n13 * n22 * n31\n\t\t\t\t\t - n11 * n23 * n32\n\t\t\t\t\t + n11 * n22 * n33\n\t\t\t\t\t + n13 * n21 * n32\n\t\t\t\t\t - n12 * n21 * n33\n\t\t\t\t\t + n12 * n23 * n31\n\t\t\t\t)\n\n\t\t\t);\n\n\t\t},\n\n\t\ttranspose: function () {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar tmp;\n\n\t\t\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\n\t\t\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\n\t\t\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\n\n\t\t\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\n\t\t\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\n\t\t\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetPosition: function ( x, y, z ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tif ( x.isVector3 ) {\n\n\t\t\t\tte[ 12 ] = x.x;\n\t\t\t\tte[ 13 ] = x.y;\n\t\t\t\tte[ 14 ] = x.z;\n\n\t\t\t} else {\n\n\t\t\t\tte[ 12 ] = x;\n\t\t\t\tte[ 13 ] = y;\n\t\t\t\tte[ 14 ] = z;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetInverse: function ( m, throwOnDegenerate ) {\n\n\t\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n\t\t\tvar te = this.elements,\n\t\t\t\tme = m.elements,\n\n\t\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],\n\t\t\t\tn12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],\n\t\t\t\tn13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],\n\t\t\t\tn14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],\n\n\t\t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n\t\t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n\t\t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n\t\t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n\n\t\t\tvar det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n\n\t\t\tif ( det === 0 ) {\n\n\t\t\t\tvar msg = \"THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0\";\n\n\t\t\t\tif ( throwOnDegenerate === true ) {\n\n\t\t\t\t\tthrow new Error( msg );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( msg );\n\n\t\t\t\t}\n\n\t\t\t\treturn this.identity();\n\n\t\t\t}\n\n\t\t\tvar detInv = 1 / det;\n\n\t\t\tte[ 0 ] = t11 * detInv;\n\t\t\tte[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;\n\t\t\tte[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;\n\t\t\tte[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;\n\n\t\t\tte[ 4 ] = t12 * detInv;\n\t\t\tte[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;\n\t\t\tte[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;\n\t\t\tte[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;\n\n\t\t\tte[ 8 ] = t13 * detInv;\n\t\t\tte[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;\n\t\t\tte[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;\n\t\t\tte[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;\n\n\t\t\tte[ 12 ] = t14 * detInv;\n\t\t\tte[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;\n\t\t\tte[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;\n\t\t\tte[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tscale: function ( v ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar x = v.x, y = v.y, z = v.z;\n\n\t\t\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\n\t\t\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\n\t\t\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\n\t\t\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetMaxScaleOnAxis: function () {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\n\t\t\tvar scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\n\t\t\tvar scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\n\n\t\t\treturn Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\n\n\t\t},\n\n\t\tmakeTranslation: function ( x, y, z ) {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0, x,\n\t\t\t\t0, 1, 0, y,\n\t\t\t\t0, 0, 1, z,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationX: function ( theta ) {\n\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0, 0,\n\t\t\t\t0, c, - s, 0,\n\t\t\t\t0, s, c, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationY: function ( theta ) {\n\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\t\tthis.set(\n\n\t\t\t\t c, 0, s, 0,\n\t\t\t\t 0, 1, 0, 0,\n\t\t\t\t- s, 0, c, 0,\n\t\t\t\t 0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationZ: function ( theta ) {\n\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\t\tthis.set(\n\n\t\t\t\tc, - s, 0, 0,\n\t\t\t\ts, c, 0, 0,\n\t\t\t\t0, 0, 1, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationAxis: function ( axis, angle ) {\n\n\t\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\n\t\t\tvar c = Math.cos( angle );\n\t\t\tvar s = Math.sin( angle );\n\t\t\tvar t = 1 - c;\n\t\t\tvar x = axis.x, y = axis.y, z = axis.z;\n\t\t\tvar tx = t * x, ty = t * y;\n\n\t\t\tthis.set(\n\n\t\t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\n\t\t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\n\t\t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\t return this;\n\n\t\t},\n\n\t\tmakeScale: function ( x, y, z ) {\n\n\t\t\tthis.set(\n\n\t\t\t\tx, 0, 0, 0,\n\t\t\t\t0, y, 0, 0,\n\t\t\t\t0, 0, z, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeShear: function ( x, y, z ) {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, y, z, 0,\n\t\t\t\tx, 1, z, 0,\n\t\t\t\tx, y, 1, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcompose: function ( position, quaternion, scale ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;\n\t\t\tvar x2 = x + x,\ty2 = y + y, z2 = z + z;\n\t\t\tvar xx = x * x2, xy = x * y2, xz = x * z2;\n\t\t\tvar yy = y * y2, yz = y * z2, zz = z * z2;\n\t\t\tvar wx = w * x2, wy = w * y2, wz = w * z2;\n\n\t\t\tvar sx = scale.x, sy = scale.y, sz = scale.z;\n\n\t\t\tte[ 0 ] = ( 1 - ( yy + zz ) ) * sx;\n\t\t\tte[ 1 ] = ( xy + wz ) * sx;\n\t\t\tte[ 2 ] = ( xz - wy ) * sx;\n\t\t\tte[ 3 ] = 0;\n\n\t\t\tte[ 4 ] = ( xy - wz ) * sy;\n\t\t\tte[ 5 ] = ( 1 - ( xx + zz ) ) * sy;\n\t\t\tte[ 6 ] = ( yz + wx ) * sy;\n\t\t\tte[ 7 ] = 0;\n\n\t\t\tte[ 8 ] = ( xz + wy ) * sz;\n\t\t\tte[ 9 ] = ( yz - wx ) * sz;\n\t\t\tte[ 10 ] = ( 1 - ( xx + yy ) ) * sz;\n\t\t\tte[ 11 ] = 0;\n\n\t\t\tte[ 12 ] = position.x;\n\t\t\tte[ 13 ] = position.y;\n\t\t\tte[ 14 ] = position.z;\n\t\t\tte[ 15 ] = 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdecompose: function ( position, quaternion, scale ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar sx = _v1.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\n\t\t\tvar sy = _v1.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\n\t\t\tvar sz = _v1.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\n\n\t\t\t// if determine is negative, we need to invert one scale\n\t\t\tvar det = this.determinant();\n\t\t\tif ( det < 0 ) { sx = - sx; }\n\n\t\t\tposition.x = te[ 12 ];\n\t\t\tposition.y = te[ 13 ];\n\t\t\tposition.z = te[ 14 ];\n\n\t\t\t// scale the rotation part\n\t\t\t_m1.copy( this );\n\n\t\t\tvar invSX = 1 / sx;\n\t\t\tvar invSY = 1 / sy;\n\t\t\tvar invSZ = 1 / sz;\n\n\t\t\t_m1.elements[ 0 ] *= invSX;\n\t\t\t_m1.elements[ 1 ] *= invSX;\n\t\t\t_m1.elements[ 2 ] *= invSX;\n\n\t\t\t_m1.elements[ 4 ] *= invSY;\n\t\t\t_m1.elements[ 5 ] *= invSY;\n\t\t\t_m1.elements[ 6 ] *= invSY;\n\n\t\t\t_m1.elements[ 8 ] *= invSZ;\n\t\t\t_m1.elements[ 9 ] *= invSZ;\n\t\t\t_m1.elements[ 10 ] *= invSZ;\n\n\t\t\tquaternion.setFromRotationMatrix( _m1 );\n\n\t\t\tscale.x = sx;\n\t\t\tscale.y = sy;\n\t\t\tscale.z = sz;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakePerspective: function ( left, right, top, bottom, near, far ) {\n\n\t\t\tif ( far === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.' );\n\n\t\t\t}\n\n\t\t\tvar te = this.elements;\n\t\t\tvar x = 2 * near / ( right - left );\n\t\t\tvar y = 2 * near / ( top - bottom );\n\n\t\t\tvar a = ( right + left ) / ( right - left );\n\t\t\tvar b = ( top + bottom ) / ( top - bottom );\n\t\t\tvar c = - ( far + near ) / ( far - near );\n\t\t\tvar d = - 2 * far * near / ( far - near );\n\n\t\t\tte[ 0 ] = x;\tte[ 4 ] = 0;\tte[ 8 ] = a;\tte[ 12 ] = 0;\n\t\t\tte[ 1 ] = 0;\tte[ 5 ] = y;\tte[ 9 ] = b;\tte[ 13 ] = 0;\n\t\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = c;\tte[ 14 ] = d;\n\t\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = - 1;\tte[ 15 ] = 0;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeOrthographic: function ( left, right, top, bottom, near, far ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar w = 1.0 / ( right - left );\n\t\t\tvar h = 1.0 / ( top - bottom );\n\t\t\tvar p = 1.0 / ( far - near );\n\n\t\t\tvar x = ( right + left ) * w;\n\t\t\tvar y = ( top + bottom ) * h;\n\t\t\tvar z = ( far + near ) * p;\n\n\t\t\tte[ 0 ] = 2 * w;\tte[ 4 ] = 0;\tte[ 8 ] = 0;\tte[ 12 ] = - x;\n\t\t\tte[ 1 ] = 0;\tte[ 5 ] = 2 * h;\tte[ 9 ] = 0;\tte[ 13 ] = - y;\n\t\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = - 2 * p;\tte[ 14 ] = - z;\n\t\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = 0;\tte[ 15 ] = 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( matrix ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = matrix.elements;\n\n\t\t\tfor ( var i = 0; i < 16; i ++ ) {\n\n\t\t\t\tif ( te[ i ] !== me[ i ] ) { return false; }\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tfor ( var i = 0; i < 16; i ++ ) {\n\n\t\t\t\tthis.elements[ i ] = array[ i + offset ];\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tvar te = this.elements;\n\n\t\t\tarray[ offset ] = te[ 0 ];\n\t\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\t\tarray[ offset + 2 ] = te[ 2 ];\n\t\t\tarray[ offset + 3 ] = te[ 3 ];\n\n\t\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\t\tarray[ offset + 5 ] = te[ 5 ];\n\t\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\t\tarray[ offset + 7 ] = te[ 7 ];\n\n\t\t\tarray[ offset + 8 ] = te[ 8 ];\n\t\t\tarray[ offset + 9 ] = te[ 9 ];\n\t\t\tarray[ offset + 10 ] = te[ 10 ];\n\t\t\tarray[ offset + 11 ] = te[ 11 ];\n\n\t\t\tarray[ offset + 12 ] = te[ 12 ];\n\t\t\tarray[ offset + 13 ] = te[ 13 ];\n\t\t\tarray[ offset + 14 ] = te[ 14 ];\n\t\t\tarray[ offset + 15 ] = te[ 15 ];\n\n\t\t\treturn array;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author bhouston / http://clara.io\n\t */\n\n\tvar _matrix = new Matrix4();\n\tvar _quaternion$1 = new Quaternion();\n\n\tfunction Euler( x, y, z, order ) {\n\n\t\tthis._x = x || 0;\n\t\tthis._y = y || 0;\n\t\tthis._z = z || 0;\n\t\tthis._order = order || Euler.DefaultOrder;\n\n\t}\n\n\tEuler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];\n\n\tEuler.DefaultOrder = 'XYZ';\n\n\tObject.defineProperties( Euler.prototype, {\n\n\t\tx: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._x;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._x = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\ty: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._y;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._y = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\tz: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._z;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._z = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\torder: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._order;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._order = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Euler.prototype, {\n\n\t\tisEuler: true,\n\n\t\tset: function ( x, y, z, order ) {\n\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._order = order || this._order;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this._x, this._y, this._z, this._order );\n\n\t\t},\n\n\t\tcopy: function ( euler ) {\n\n\t\t\tthis._x = euler._x;\n\t\t\tthis._y = euler._y;\n\t\t\tthis._z = euler._z;\n\t\t\tthis._order = euler._order;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromRotationMatrix: function ( m, order, update ) {\n\n\t\t\tvar clamp = MathUtils.clamp;\n\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tvar te = m.elements;\n\t\t\tvar m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\n\t\t\tvar m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\n\t\t\tvar m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\t\torder = order || this._order;\n\n\t\t\tif ( order === 'XYZ' ) {\n\n\t\t\t\tthis._y = Math.asin( clamp( m13, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m13 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\t\tthis._z = Math.atan2( - m12, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\t\tthis._z = 0;\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'YXZ' ) {\n\n\t\t\t\tthis._x = Math.asin( - clamp( m23, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m23 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\t\t\t\t\tthis._z = Math.atan2( m21, m22 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\t\t\t\t\tthis._z = 0;\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'ZXY' ) {\n\n\t\t\t\tthis._x = Math.asin( clamp( m32, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m32 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._y = Math.atan2( - m31, m33 );\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._y = 0;\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'ZYX' ) {\n\n\t\t\t\tthis._y = Math.asin( - clamp( m31, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m31 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m33 );\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'YZX' ) {\n\n\t\t\t\tthis._z = Math.asin( clamp( m21, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m21 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m22 );\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'XZY' ) {\n\n\t\t\t\tthis._z = Math.asin( - clamp( m12, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m12 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\t\tthis._y = Math.atan2( m13, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\t\tthis._y = 0;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order );\n\n\t\t\t}\n\n\t\t\tthis._order = order;\n\n\t\t\tif ( update !== false ) { this._onChangeCallback(); }\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromQuaternion: function ( q, order, update ) {\n\n\t\t\t_matrix.makeRotationFromQuaternion( q );\n\n\t\t\treturn this.setFromRotationMatrix( _matrix, order, update );\n\n\t\t},\n\n\t\tsetFromVector3: function ( v, order ) {\n\n\t\t\treturn this.set( v.x, v.y, v.z, order || this._order );\n\n\t\t},\n\n\t\treorder: function ( newOrder ) {\n\n\t\t\t// WARNING: this discards revolution information -bhouston\n\n\t\t\t_quaternion$1.setFromEuler( this );\n\n\t\t\treturn this.setFromQuaternion( _quaternion$1, newOrder );\n\n\t\t},\n\n\t\tequals: function ( euler ) {\n\n\t\t\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\n\n\t\t},\n\n\t\tfromArray: function ( array ) {\n\n\t\t\tthis._x = array[ 0 ];\n\t\t\tthis._y = array[ 1 ];\n\t\t\tthis._z = array[ 2 ];\n\t\t\tif ( array[ 3 ] !== undefined ) { this._order = array[ 3 ]; }\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tarray[ offset ] = this._x;\n\t\t\tarray[ offset + 1 ] = this._y;\n\t\t\tarray[ offset + 2 ] = this._z;\n\t\t\tarray[ offset + 3 ] = this._order;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\ttoVector3: function ( optionalResult ) {\n\n\t\t\tif ( optionalResult ) {\n\n\t\t\t\treturn optionalResult.set( this._x, this._y, this._z );\n\n\t\t\t} else {\n\n\t\t\t\treturn new Vector3( this._x, this._y, this._z );\n\n\t\t\t}\n\n\t\t},\n\n\t\t_onChange: function ( callback ) {\n\n\t\t\tthis._onChangeCallback = callback;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t_onChangeCallback: function () {}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Layers() {\n\n\t\tthis.mask = 1 | 0;\n\n\t}\n\n\tObject.assign( Layers.prototype, {\n\n\t\tset: function ( channel ) {\n\n\t\t\tthis.mask = 1 << channel | 0;\n\n\t\t},\n\n\t\tenable: function ( channel ) {\n\n\t\t\tthis.mask |= 1 << channel | 0;\n\n\t\t},\n\n\t\tenableAll: function () {\n\n\t\t\tthis.mask = 0xffffffff | 0;\n\n\t\t},\n\n\t\ttoggle: function ( channel ) {\n\n\t\t\tthis.mask ^= 1 << channel | 0;\n\n\t\t},\n\n\t\tdisable: function ( channel ) {\n\n\t\t\tthis.mask &= ~ ( 1 << channel | 0 );\n\n\t\t},\n\n\t\tdisableAll: function () {\n\n\t\t\tthis.mask = 0;\n\n\t\t},\n\n\t\ttest: function ( layers ) {\n\n\t\t\treturn ( this.mask & layers.mask ) !== 0;\n\n\t\t}\n\n\t} );\n\n\tvar _object3DId = 0;\n\n\tvar _v1$1 = new Vector3();\n\tvar _q1 = new Quaternion();\n\tvar _m1$1 = new Matrix4();\n\tvar _target = new Vector3();\n\n\tvar _position = new Vector3();\n\tvar _scale = new Vector3();\n\tvar _quaternion$2 = new Quaternion();\n\n\tvar _xAxis = new Vector3( 1, 0, 0 );\n\tvar _yAxis = new Vector3( 0, 1, 0 );\n\tvar _zAxis = new Vector3( 0, 0, 1 );\n\n\tvar _addedEvent = { type: 'added' };\n\tvar _removedEvent = { type: 'removed' };\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author elephantatwork / www.elephantatwork.ch\n\t */\n\n\tfunction Object3D() {\n\n\t\tObject.defineProperty( this, 'id', { value: _object3DId ++ } );\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Object3D';\n\n\t\tthis.parent = null;\n\t\tthis.children = [];\n\n\t\tthis.up = Object3D.DefaultUp.clone();\n\n\t\tvar position = new Vector3();\n\t\tvar rotation = new Euler();\n\t\tvar quaternion = new Quaternion();\n\t\tvar scale = new Vector3( 1, 1, 1 );\n\n\t\tfunction onRotationChange() {\n\n\t\t\tquaternion.setFromEuler( rotation, false );\n\n\t\t}\n\n\t\tfunction onQuaternionChange() {\n\n\t\t\trotation.setFromQuaternion( quaternion, undefined, false );\n\n\t\t}\n\n\t\trotation._onChange( onRotationChange );\n\t\tquaternion._onChange( onQuaternionChange );\n\n\t\tObject.defineProperties( this, {\n\t\t\tposition: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: position\n\t\t\t},\n\t\t\trotation: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: rotation\n\t\t\t},\n\t\t\tquaternion: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: quaternion\n\t\t\t},\n\t\t\tscale: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: scale\n\t\t\t},\n\t\t\tmodelViewMatrix: {\n\t\t\t\tvalue: new Matrix4()\n\t\t\t},\n\t\t\tnormalMatrix: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t}\n\t\t} );\n\n\t\tthis.matrix = new Matrix4();\n\t\tthis.matrixWorld = new Matrix4();\n\n\t\tthis.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;\n\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\tthis.layers = new Layers();\n\t\tthis.visible = true;\n\n\t\tthis.castShadow = false;\n\t\tthis.receiveShadow = false;\n\n\t\tthis.frustumCulled = true;\n\t\tthis.renderOrder = 0;\n\n\t\tthis.userData = {};\n\n\t}\n\n\tObject3D.DefaultUp = new Vector3( 0, 1, 0 );\n\tObject3D.DefaultMatrixAutoUpdate = true;\n\n\tObject3D.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: Object3D,\n\n\t\tisObject3D: true,\n\n\t\tonBeforeRender: function () {},\n\t\tonAfterRender: function () {},\n\n\t\tapplyMatrix4: function ( matrix ) {\n\n\t\t\tif ( this.matrixAutoUpdate ) { this.updateMatrix(); }\n\n\t\t\tthis.matrix.premultiply( matrix );\n\n\t\t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\n\n\t\t},\n\n\t\tapplyQuaternion: function ( q ) {\n\n\t\t\tthis.quaternion.premultiply( q );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetRotationFromAxisAngle: function ( axis, angle ) {\n\n\t\t\t// assumes axis is normalized\n\n\t\t\tthis.quaternion.setFromAxisAngle( axis, angle );\n\n\t\t},\n\n\t\tsetRotationFromEuler: function ( euler ) {\n\n\t\t\tthis.quaternion.setFromEuler( euler, true );\n\n\t\t},\n\n\t\tsetRotationFromMatrix: function ( m ) {\n\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tthis.quaternion.setFromRotationMatrix( m );\n\n\t\t},\n\n\t\tsetRotationFromQuaternion: function ( q ) {\n\n\t\t\t// assumes q is normalized\n\n\t\t\tthis.quaternion.copy( q );\n\n\t\t},\n\n\t\trotateOnAxis: function ( axis, angle ) {\n\n\t\t\t// rotate object on axis in object space\n\t\t\t// axis is assumed to be normalized\n\n\t\t\t_q1.setFromAxisAngle( axis, angle );\n\n\t\t\tthis.quaternion.multiply( _q1 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateOnWorldAxis: function ( axis, angle ) {\n\n\t\t\t// rotate object on axis in world space\n\t\t\t// axis is assumed to be normalized\n\t\t\t// method assumes no rotated parent\n\n\t\t\t_q1.setFromAxisAngle( axis, angle );\n\n\t\t\tthis.quaternion.premultiply( _q1 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateX: function ( angle ) {\n\n\t\t\treturn this.rotateOnAxis( _xAxis, angle );\n\n\t\t},\n\n\t\trotateY: function ( angle ) {\n\n\t\t\treturn this.rotateOnAxis( _yAxis, angle );\n\n\t\t},\n\n\t\trotateZ: function ( angle ) {\n\n\t\t\treturn this.rotateOnAxis( _zAxis, angle );\n\n\t\t},\n\n\t\ttranslateOnAxis: function ( axis, distance ) {\n\n\t\t\t// translate object by distance along axis in object space\n\t\t\t// axis is assumed to be normalized\n\n\t\t\t_v1$1.copy( axis ).applyQuaternion( this.quaternion );\n\n\t\t\tthis.position.add( _v1$1.multiplyScalar( distance ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslateX: function ( distance ) {\n\n\t\t\treturn this.translateOnAxis( _xAxis, distance );\n\n\t\t},\n\n\t\ttranslateY: function ( distance ) {\n\n\t\t\treturn this.translateOnAxis( _yAxis, distance );\n\n\t\t},\n\n\t\ttranslateZ: function ( distance ) {\n\n\t\t\treturn this.translateOnAxis( _zAxis, distance );\n\n\t\t},\n\n\t\tlocalToWorld: function ( vector ) {\n\n\t\t\treturn vector.applyMatrix4( this.matrixWorld );\n\n\t\t},\n\n\t\tworldToLocal: function ( vector ) {\n\n\t\t\treturn vector.applyMatrix4( _m1$1.getInverse( this.matrixWorld ) );\n\n\t\t},\n\n\t\tlookAt: function ( x, y, z ) {\n\n\t\t\t// This method does not support objects having non-uniformly-scaled parent(s)\n\n\t\t\tif ( x.isVector3 ) {\n\n\t\t\t\t_target.copy( x );\n\n\t\t\t} else {\n\n\t\t\t\t_target.set( x, y, z );\n\n\t\t\t}\n\n\t\t\tvar parent = this.parent;\n\n\t\t\tthis.updateWorldMatrix( true, false );\n\n\t\t\t_position.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\tif ( this.isCamera || this.isLight ) {\n\n\t\t\t\t_m1$1.lookAt( _position, _target, this.up );\n\n\t\t\t} else {\n\n\t\t\t\t_m1$1.lookAt( _target, _position, this.up );\n\n\t\t\t}\n\n\t\t\tthis.quaternion.setFromRotationMatrix( _m1$1 );\n\n\t\t\tif ( parent ) {\n\n\t\t\t\t_m1$1.extractRotation( parent.matrixWorld );\n\t\t\t\t_q1.setFromRotationMatrix( _m1$1 );\n\t\t\t\tthis.quaternion.premultiply( _q1.inverse() );\n\n\t\t\t}\n\n\t\t},\n\n\t\tadd: function ( object ) {\n\n\t\t\tif ( arguments.length > 1 ) {\n\n\t\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\t\tthis.add( arguments[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tif ( object === this ) {\n\n\t\t\t\tconsole.error( \"THREE.Object3D.add: object can't be added as a child of itself.\", object );\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tif ( ( object && object.isObject3D ) ) {\n\n\t\t\t\tif ( object.parent !== null ) {\n\n\t\t\t\t\tobject.parent.remove( object );\n\n\t\t\t\t}\n\n\t\t\t\tobject.parent = this;\n\t\t\t\tthis.children.push( object );\n\n\t\t\t\tobject.dispatchEvent( _addedEvent );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( \"THREE.Object3D.add: object not an instance of THREE.Object3D.\", object );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tremove: function ( object ) {\n\n\t\t\tif ( arguments.length > 1 ) {\n\n\t\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\t\tthis.remove( arguments[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar index = this.children.indexOf( object );\n\n\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\tobject.parent = null;\n\t\t\t\tthis.children.splice( index, 1 );\n\n\t\t\t\tobject.dispatchEvent( _removedEvent );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tattach: function ( object ) {\n\n\t\t\t// adds object as a child of this, while maintaining the object's world transform\n\n\t\t\tthis.updateWorldMatrix( true, false );\n\n\t\t\t_m1$1.getInverse( this.matrixWorld );\n\n\t\t\tif ( object.parent !== null ) {\n\n\t\t\t\tobject.parent.updateWorldMatrix( true, false );\n\n\t\t\t\t_m1$1.multiply( object.parent.matrixWorld );\n\n\t\t\t}\n\n\t\t\tobject.applyMatrix4( _m1$1 );\n\n\t\t\tobject.updateWorldMatrix( false, false );\n\n\t\t\tthis.add( object );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetObjectById: function ( id ) {\n\n\t\t\treturn this.getObjectByProperty( 'id', id );\n\n\t\t},\n\n\t\tgetObjectByName: function ( name ) {\n\n\t\t\treturn this.getObjectByProperty( 'name', name );\n\n\t\t},\n\n\t\tgetObjectByProperty: function ( name, value ) {\n\n\t\t\tif ( this[ name ] === value ) { return this; }\n\n\t\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = this.children[ i ];\n\t\t\t\tvar object = child.getObjectByProperty( name, value );\n\n\t\t\t\tif ( object !== undefined ) {\n\n\t\t\t\t\treturn object;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn undefined;\n\n\t\t},\n\n\t\tgetWorldPosition: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldPosition() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\treturn target.setFromMatrixPosition( this.matrixWorld );\n\n\t\t},\n\n\t\tgetWorldQuaternion: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldQuaternion() target is now required' );\n\t\t\t\ttarget = new Quaternion();\n\n\t\t\t}\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tthis.matrixWorld.decompose( _position, target, _scale );\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tgetWorldScale: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldScale() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tthis.matrixWorld.decompose( _position, _quaternion$2, target );\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tgetWorldDirection: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldDirection() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tvar e = this.matrixWorld.elements;\n\n\t\t\treturn target.set( e[ 8 ], e[ 9 ], e[ 10 ] ).normalize();\n\n\t\t},\n\n\t\traycast: function () {},\n\n\t\ttraverse: function ( callback ) {\n\n\t\t\tcallback( this );\n\n\t\t\tvar children = this.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].traverse( callback );\n\n\t\t\t}\n\n\t\t},\n\n\t\ttraverseVisible: function ( callback ) {\n\n\t\t\tif ( this.visible === false ) { return; }\n\n\t\t\tcallback( this );\n\n\t\t\tvar children = this.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].traverseVisible( callback );\n\n\t\t\t}\n\n\t\t},\n\n\t\ttraverseAncestors: function ( callback ) {\n\n\t\t\tvar parent = this.parent;\n\n\t\t\tif ( parent !== null ) {\n\n\t\t\t\tcallback( parent );\n\n\t\t\t\tparent.traverseAncestors( callback );\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdateMatrix: function () {\n\n\t\t\tthis.matrix.compose( this.position, this.quaternion, this.scale );\n\n\t\t\tthis.matrixWorldNeedsUpdate = true;\n\n\t\t},\n\n\t\tupdateMatrixWorld: function ( force ) {\n\n\t\t\tif ( this.matrixAutoUpdate ) { this.updateMatrix(); }\n\n\t\t\tif ( this.matrixWorldNeedsUpdate || force ) {\n\n\t\t\t\tif ( this.parent === null ) {\n\n\t\t\t\t\tthis.matrixWorld.copy( this.matrix );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n\t\t\t\t}\n\n\t\t\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\t\t\tforce = true;\n\n\t\t\t}\n\n\t\t\t// update children\n\n\t\t\tvar children = this.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].updateMatrixWorld( force );\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdateWorldMatrix: function ( updateParents, updateChildren ) {\n\n\t\t\tvar parent = this.parent;\n\n\t\t\tif ( updateParents === true && parent !== null ) {\n\n\t\t\t\tparent.updateWorldMatrix( true, false );\n\n\t\t\t}\n\n\t\t\tif ( this.matrixAutoUpdate ) { this.updateMatrix(); }\n\n\t\t\tif ( this.parent === null ) {\n\n\t\t\t\tthis.matrixWorld.copy( this.matrix );\n\n\t\t\t} else {\n\n\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n\t\t\t}\n\n\t\t\t// update children\n\n\t\t\tif ( updateChildren === true ) {\n\n\t\t\t\tvar children = this.children;\n\n\t\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\t\tchildren[ i ].updateWorldMatrix( false, true );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\t// meta is a string when called from JSON.stringify\n\t\t\tvar isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\t\tvar output = {};\n\n\t\t\t// meta is a hash used to collect geometries, materials.\n\t\t\t// not providing it implies that this is the root object\n\t\t\t// being serialized.\n\t\t\tif ( isRootObject ) {\n\n\t\t\t\t// initialize meta obj\n\t\t\t\tmeta = {\n\t\t\t\t\tgeometries: {},\n\t\t\t\t\tmaterials: {},\n\t\t\t\t\ttextures: {},\n\t\t\t\t\timages: {},\n\t\t\t\t\tshapes: {}\n\t\t\t\t};\n\n\t\t\t\toutput.metadata = {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Object',\n\t\t\t\t\tgenerator: 'Object3D.toJSON'\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\t// standard Object3D serialization\n\n\t\t\tvar object = {};\n\n\t\t\tobject.uuid = this.uuid;\n\t\t\tobject.type = this.type;\n\n\t\t\tif ( this.name !== '' ) { object.name = this.name; }\n\t\t\tif ( this.castShadow === true ) { object.castShadow = true; }\n\t\t\tif ( this.receiveShadow === true ) { object.receiveShadow = true; }\n\t\t\tif ( this.visible === false ) { object.visible = false; }\n\t\t\tif ( this.frustumCulled === false ) { object.frustumCulled = false; }\n\t\t\tif ( this.renderOrder !== 0 ) { object.renderOrder = this.renderOrder; }\n\t\t\tif ( JSON.stringify( this.userData ) !== '{}' ) { object.userData = this.userData; }\n\n\t\t\tobject.layers = this.layers.mask;\n\t\t\tobject.matrix = this.matrix.toArray();\n\n\t\t\tif ( this.matrixAutoUpdate === false ) { object.matrixAutoUpdate = false; }\n\n\t\t\t// object specific properties\n\n\t\t\tif ( this.isInstancedMesh ) {\n\n\t\t\t\tobject.type = 'InstancedMesh';\n\t\t\t\tobject.count = this.count;\n\t\t\t\tobject.instanceMatrix = this.instanceMatrix.toJSON();\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tfunction serialize( library, element ) {\n\n\t\t\t\tif ( library[ element.uuid ] === undefined ) {\n\n\t\t\t\t\tlibrary[ element.uuid ] = element.toJSON( meta );\n\n\t\t\t\t}\n\n\t\t\t\treturn element.uuid;\n\n\t\t\t}\n\n\t\t\tif ( this.isMesh || this.isLine || this.isPoints ) {\n\n\t\t\t\tobject.geometry = serialize( meta.geometries, this.geometry );\n\n\t\t\t\tvar parameters = this.geometry.parameters;\n\n\t\t\t\tif ( parameters !== undefined && parameters.shapes !== undefined ) {\n\n\t\t\t\t\tvar shapes = parameters.shapes;\n\n\t\t\t\t\tif ( Array.isArray( shapes ) ) {\n\n\t\t\t\t\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\tvar shape = shapes[ i ];\n\n\t\t\t\t\t\t\tserialize( meta.shapes, shape );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tserialize( meta.shapes, shapes );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.material !== undefined ) {\n\n\t\t\t\tif ( Array.isArray( this.material ) ) {\n\n\t\t\t\t\tvar uuids = [];\n\n\t\t\t\t\tfor ( var i = 0, l = this.material.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tuuids.push( serialize( meta.materials, this.material[ i ] ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tobject.material = uuids;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tobject.material = serialize( meta.materials, this.material );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( this.children.length > 0 ) {\n\n\t\t\t\tobject.children = [];\n\n\t\t\t\tfor ( var i = 0; i < this.children.length; i ++ ) {\n\n\t\t\t\t\tobject.children.push( this.children[ i ].toJSON( meta ).object );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( isRootObject ) {\n\n\t\t\t\tvar geometries = extractFromCache( meta.geometries );\n\t\t\t\tvar materials = extractFromCache( meta.materials );\n\t\t\t\tvar textures = extractFromCache( meta.textures );\n\t\t\t\tvar images = extractFromCache( meta.images );\n\t\t\t\tvar shapes = extractFromCache( meta.shapes );\n\n\t\t\t\tif ( geometries.length > 0 ) { output.geometries = geometries; }\n\t\t\t\tif ( materials.length > 0 ) { output.materials = materials; }\n\t\t\t\tif ( textures.length > 0 ) { output.textures = textures; }\n\t\t\t\tif ( images.length > 0 ) { output.images = images; }\n\t\t\t\tif ( shapes.length > 0 ) { output.shapes = shapes; }\n\n\t\t\t}\n\n\t\t\toutput.object = object;\n\n\t\t\treturn output;\n\n\t\t\t// extract data from the cache hash\n\t\t\t// remove metadata on each item\n\t\t\t// and return as array\n\t\t\tfunction extractFromCache( cache ) {\n\n\t\t\t\tvar values = [];\n\t\t\t\tfor ( var key in cache ) {\n\n\t\t\t\t\tvar data = cache[ key ];\n\t\t\t\t\tdelete data.metadata;\n\t\t\t\t\tvalues.push( data );\n\n\t\t\t\t}\n\t\t\t\treturn values;\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function ( recursive ) {\n\n\t\t\treturn new this.constructor().copy( this, recursive );\n\n\t\t},\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tif ( recursive === undefined ) { recursive = true; }\n\n\t\t\tthis.name = source.name;\n\n\t\t\tthis.up.copy( source.up );\n\n\t\t\tthis.position.copy( source.position );\n\t\t\tthis.quaternion.copy( source.quaternion );\n\t\t\tthis.scale.copy( source.scale );\n\n\t\t\tthis.matrix.copy( source.matrix );\n\t\t\tthis.matrixWorld.copy( source.matrixWorld );\n\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n\n\t\t\tthis.layers.mask = source.layers.mask;\n\t\t\tthis.visible = source.visible;\n\n\t\t\tthis.castShadow = source.castShadow;\n\t\t\tthis.receiveShadow = source.receiveShadow;\n\n\t\t\tthis.frustumCulled = source.frustumCulled;\n\t\t\tthis.renderOrder = source.renderOrder;\n\n\t\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\t\tif ( recursive === true ) {\n\n\t\t\t\tfor ( var i = 0; i < source.children.length; i ++ ) {\n\n\t\t\t\t\tvar child = source.children[ i ];\n\t\t\t\t\tthis.add( child.clone() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Scene() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Scene';\n\n\t\tthis.background = null;\n\t\tthis.environment = null;\n\t\tthis.fog = null;\n\n\t\tthis.overrideMaterial = null;\n\n\t\tthis.autoUpdate = true; // checked by the renderer\n\n\t\tif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n\n\t\t\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) ); // eslint-disable-line no-undef\n\n\t\t}\n\n\t}\n\n\tScene.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Scene,\n\n\t\tisScene: true,\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source, recursive );\n\n\t\t\tif ( source.background !== null ) { this.background = source.background.clone(); }\n\t\t\tif ( source.environment !== null ) { this.environment = source.environment.clone(); }\n\t\t\tif ( source.fog !== null ) { this.fog = source.fog.clone(); }\n\n\t\t\tif ( source.overrideMaterial !== null ) { this.overrideMaterial = source.overrideMaterial.clone(); }\n\n\t\t\tthis.autoUpdate = source.autoUpdate;\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tif ( this.background !== null ) { data.object.background = this.background.toJSON( meta ); }\n\t\t\tif ( this.environment !== null ) { data.object.environment = this.environment.toJSON( meta ); }\n\t\t\tif ( this.fog !== null ) { data.object.fog = this.fog.toJSON(); }\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\tvar _points = [\n\t\tnew Vector3(),\n\t\tnew Vector3(),\n\t\tnew Vector3(),\n\t\tnew Vector3(),\n\t\tnew Vector3(),\n\t\tnew Vector3(),\n\t\tnew Vector3(),\n\t\tnew Vector3()\n\t];\n\n\tvar _vector$1 = new Vector3();\n\n\tvar _box = new Box3();\n\n\t// triangle centered vertices\n\n\tvar _v0 = new Vector3();\n\tvar _v1$2 = new Vector3();\n\tvar _v2 = new Vector3();\n\n\t// triangle edge vectors\n\n\tvar _f0 = new Vector3();\n\tvar _f1 = new Vector3();\n\tvar _f2 = new Vector3();\n\n\tvar _center = new Vector3();\n\tvar _extents = new Vector3();\n\tvar _triangleNormal = new Vector3();\n\tvar _testAxis = new Vector3();\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction Box3( min, max ) {\n\n\t\tthis.min = ( min !== undefined ) ? min : new Vector3( + Infinity, + Infinity, + Infinity );\n\t\tthis.max = ( max !== undefined ) ? max : new Vector3( - Infinity, - Infinity, - Infinity );\n\n\t}\n\n\n\tObject.assign( Box3.prototype, {\n\n\t\tisBox3: true,\n\n\t\tset: function ( min, max ) {\n\n\t\t\tthis.min.copy( min );\n\t\t\tthis.max.copy( max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromArray: function ( array ) {\n\n\t\t\tvar minX = + Infinity;\n\t\t\tvar minY = + Infinity;\n\t\t\tvar minZ = + Infinity;\n\n\t\t\tvar maxX = - Infinity;\n\t\t\tvar maxY = - Infinity;\n\t\t\tvar maxZ = - Infinity;\n\n\t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\t\tvar x = array[ i ];\n\t\t\t\tvar y = array[ i + 1 ];\n\t\t\t\tvar z = array[ i + 2 ];\n\n\t\t\t\tif ( x < minX ) { minX = x; }\n\t\t\t\tif ( y < minY ) { minY = y; }\n\t\t\t\tif ( z < minZ ) { minZ = z; }\n\n\t\t\t\tif ( x > maxX ) { maxX = x; }\n\t\t\t\tif ( y > maxY ) { maxY = y; }\n\t\t\t\tif ( z > maxZ ) { maxZ = z; }\n\n\t\t\t}\n\n\t\t\tthis.min.set( minX, minY, minZ );\n\t\t\tthis.max.set( maxX, maxY, maxZ );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromBufferAttribute: function ( attribute ) {\n\n\t\t\tvar minX = + Infinity;\n\t\t\tvar minY = + Infinity;\n\t\t\tvar minZ = + Infinity;\n\n\t\t\tvar maxX = - Infinity;\n\t\t\tvar maxY = - Infinity;\n\t\t\tvar maxZ = - Infinity;\n\n\t\t\tfor ( var i = 0, l = attribute.count; i < l; i ++ ) {\n\n\t\t\t\tvar x = attribute.getX( i );\n\t\t\t\tvar y = attribute.getY( i );\n\t\t\t\tvar z = attribute.getZ( i );\n\n\t\t\t\tif ( x < minX ) { minX = x; }\n\t\t\t\tif ( y < minY ) { minY = y; }\n\t\t\t\tif ( z < minZ ) { minZ = z; }\n\n\t\t\t\tif ( x > maxX ) { maxX = x; }\n\t\t\t\tif ( y > maxY ) { maxY = y; }\n\t\t\t\tif ( z > maxZ ) { maxZ = z; }\n\n\t\t\t}\n\n\t\t\tthis.min.set( minX, minY, minZ );\n\t\t\tthis.max.set( maxX, maxY, maxZ );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tthis.makeEmpty();\n\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromCenterAndSize: function ( center, size ) {\n\n\t\t\tvar halfSize = _vector$1.copy( size ).multiplyScalar( 0.5 );\n\n\t\t\tthis.min.copy( center ).sub( halfSize );\n\t\t\tthis.max.copy( center ).add( halfSize );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromObject: function ( object ) {\n\n\t\t\tthis.makeEmpty();\n\n\t\t\treturn this.expandByObject( object );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( box ) {\n\n\t\t\tthis.min.copy( box.min );\n\t\t\tthis.max.copy( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeEmpty: function () {\n\n\t\t\tthis.min.x = this.min.y = this.min.z = + Infinity;\n\t\t\tthis.max.x = this.max.y = this.max.z = - Infinity;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tisEmpty: function () {\n\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\n\n\t\t},\n\n\t\tgetCenter: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box3: .getCenter() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t\t},\n\n\t\tgetSize: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box3: .getSize() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.subVectors( this.max, this.min );\n\n\t\t},\n\n\t\texpandByPoint: function ( point ) {\n\n\t\t\tthis.min.min( point );\n\t\t\tthis.max.max( point );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByVector: function ( vector ) {\n\n\t\t\tthis.min.sub( vector );\n\t\t\tthis.max.add( vector );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByScalar: function ( scalar ) {\n\n\t\t\tthis.min.addScalar( - scalar );\n\t\t\tthis.max.addScalar( scalar );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByObject: function ( object ) {\n\n\t\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n\t\t\t// accounting for both the object's, and children's, world transforms\n\n\t\t\tobject.updateWorldMatrix( false, false );\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( geometry !== undefined ) {\n\n\t\t\t\tif ( geometry.boundingBox === null ) {\n\n\t\t\t\t\tgeometry.computeBoundingBox();\n\n\t\t\t\t}\n\n\t\t\t\t_box.copy( geometry.boundingBox );\n\t\t\t\t_box.applyMatrix4( object.matrixWorld );\n\n\t\t\t\tthis.expandByPoint( _box.min );\n\t\t\t\tthis.expandByPoint( _box.max );\n\n\t\t\t}\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tthis.expandByObject( children[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\treturn point.x < this.min.x || point.x > this.max.x ||\n\t\t\t\tpoint.y < this.min.y || point.y > this.max.y ||\n\t\t\t\tpoint.z < this.min.z || point.z > this.max.z ? false : true;\n\n\t\t},\n\n\t\tcontainsBox: function ( box ) {\n\n\t\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\n\t\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y &&\n\t\t\t\tthis.min.z <= box.min.z && box.max.z <= this.max.z;\n\n\t\t},\n\n\t\tgetParameter: function ( point, target ) {\n\n\t\t\t// This can potentially have a divide by zero if the box\n\t\t\t// has a size dimension of 0.\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box3: .getParameter() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.set(\n\t\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\n\t\t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\n\t\t\t);\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\t// using 6 splitting planes to rule out intersections.\n\t\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ||\n\t\t\t\tbox.max.z < this.min.z || box.min.z > this.max.z ? false : true;\n\n\t\t},\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\t// Find the point on the AABB closest to the sphere center.\n\t\t\tthis.clampPoint( sphere.center, _vector$1 );\n\n\t\t\t// If that point is inside the sphere, the AABB and sphere intersect.\n\t\t\treturn _vector$1.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t\t},\n\n\t\tintersectsPlane: function ( plane ) {\n\n\t\t\t// We compute the minimum and maximum dot product values. If those values\n\t\t\t// are on the same side (back or front) of the plane, then there is no intersection.\n\n\t\t\tvar min, max;\n\n\t\t\tif ( plane.normal.x > 0 ) {\n\n\t\t\t\tmin = plane.normal.x * this.min.x;\n\t\t\t\tmax = plane.normal.x * this.max.x;\n\n\t\t\t} else {\n\n\t\t\t\tmin = plane.normal.x * this.max.x;\n\t\t\t\tmax = plane.normal.x * this.min.x;\n\n\t\t\t}\n\n\t\t\tif ( plane.normal.y > 0 ) {\n\n\t\t\t\tmin += plane.normal.y * this.min.y;\n\t\t\t\tmax += plane.normal.y * this.max.y;\n\n\t\t\t} else {\n\n\t\t\t\tmin += plane.normal.y * this.max.y;\n\t\t\t\tmax += plane.normal.y * this.min.y;\n\n\t\t\t}\n\n\t\t\tif ( plane.normal.z > 0 ) {\n\n\t\t\t\tmin += plane.normal.z * this.min.z;\n\t\t\t\tmax += plane.normal.z * this.max.z;\n\n\t\t\t} else {\n\n\t\t\t\tmin += plane.normal.z * this.max.z;\n\t\t\t\tmax += plane.normal.z * this.min.z;\n\n\t\t\t}\n\n\t\t\treturn ( min <= - plane.constant && max >= - plane.constant );\n\n\t\t},\n\n\t\tintersectsTriangle: function ( triangle ) {\n\n\t\t\tif ( this.isEmpty() ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\t// compute box center and extents\n\t\t\tthis.getCenter( _center );\n\t\t\t_extents.subVectors( this.max, _center );\n\n\t\t\t// translate triangle to aabb origin\n\t\t\t_v0.subVectors( triangle.a, _center );\n\t\t\t_v1$2.subVectors( triangle.b, _center );\n\t\t\t_v2.subVectors( triangle.c, _center );\n\n\t\t\t// compute edge vectors for triangle\n\t\t\t_f0.subVectors( _v1$2, _v0 );\n\t\t\t_f1.subVectors( _v2, _v1$2 );\n\t\t\t_f2.subVectors( _v0, _v2 );\n\n\t\t\t// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\n\t\t\t// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\n\t\t\t// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\n\t\t\tvar axes = [\n\t\t\t\t0, - _f0.z, _f0.y, 0, - _f1.z, _f1.y, 0, - _f2.z, _f2.y,\n\t\t\t\t_f0.z, 0, - _f0.x, _f1.z, 0, - _f1.x, _f2.z, 0, - _f2.x,\n\t\t\t\t- _f0.y, _f0.x, 0, - _f1.y, _f1.x, 0, - _f2.y, _f2.x, 0\n\t\t\t];\n\t\t\tif ( ! satForAxes( axes, _v0, _v1$2, _v2, _extents ) ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\t// test 3 face normals from the aabb\n\t\t\taxes = [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];\n\t\t\tif ( ! satForAxes( axes, _v0, _v1$2, _v2, _extents ) ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\t// finally testing the face normal of the triangle\n\t\t\t// use already existing triangle edge vectors here\n\t\t\t_triangleNormal.crossVectors( _f0, _f1 );\n\t\t\taxes = [ _triangleNormal.x, _triangleNormal.y, _triangleNormal.z ];\n\n\t\t\treturn satForAxes( axes, _v0, _v1$2, _v2, _extents );\n\n\t\t},\n\n\t\tclampPoint: function ( point, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box3: .clampPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.copy( point ).clamp( this.min, this.max );\n\n\t\t},\n\n\t\tdistanceToPoint: function ( point ) {\n\n\t\t\tvar clampedPoint = _vector$1.copy( point ).clamp( this.min, this.max );\n\n\t\t\treturn clampedPoint.sub( point ).length();\n\n\t\t},\n\n\t\tgetBoundingSphere: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.error( 'THREE.Box3: .getBoundingSphere() target is now required' );\n\t\t\t\t//target = new Sphere(); // removed to avoid cyclic dependency\n\n\t\t\t}\n\n\t\t\tthis.getCenter( target.center );\n\n\t\t\ttarget.radius = this.getSize( _vector$1 ).length() * 0.5;\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tintersect: function ( box ) {\n\n\t\t\tthis.min.max( box.min );\n\t\t\tthis.max.min( box.max );\n\n\t\t\t// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\t\t\tif ( this.isEmpty() ) { this.makeEmpty(); }\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tunion: function ( box ) {\n\n\t\t\tthis.min.min( box.min );\n\t\t\tthis.max.max( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyMatrix4: function ( matrix ) {\n\n\t\t\t// transform of empty box is an empty box.\n\t\t\tif ( this.isEmpty() ) { return this; }\n\n\t\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\t\t\t_points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\n\t\t\t_points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\n\t\t\t_points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\n\t\t\t_points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\n\t\t\t_points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\n\t\t\t_points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\n\t\t\t_points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\n\t\t\t_points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 111\n\n\t\t\tthis.setFromPoints( _points );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( offset ) {\n\n\t\t\tthis.min.add( offset );\n\t\t\tthis.max.add( offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( box ) {\n\n\t\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t\t}\n\n\t} );\n\n\tfunction satForAxes( axes, v0, v1, v2, extents ) {\n\n\t\tvar i, j;\n\n\t\tfor ( i = 0, j = axes.length - 3; i <= j; i += 3 ) {\n\n\t\t\t_testAxis.fromArray( axes, i );\n\t\t\t// project the aabb onto the seperating axis\n\t\t\tvar r = extents.x * Math.abs( _testAxis.x ) + extents.y * Math.abs( _testAxis.y ) + extents.z * Math.abs( _testAxis.z );\n\t\t\t// project all 3 vertices of the triangle onto the seperating axis\n\t\t\tvar p0 = v0.dot( _testAxis );\n\t\t\tvar p1 = v1.dot( _testAxis );\n\t\t\tvar p2 = v2.dot( _testAxis );\n\t\t\t// actual test, basically see if either of the most extreme of the triangle points intersects r\n\t\t\tif ( Math.max( - Math.max( p0, p1, p2 ), Math.min( p0, p1, p2 ) ) > r ) {\n\n\t\t\t\t// points of the projected triangle are outside the projected half-length of the aabb\n\t\t\t\t// the axis is seperating and we can exit\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tvar _box$1 = new Box3();\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Sphere( center, radius ) {\n\n\t\tthis.center = ( center !== undefined ) ? center : new Vector3();\n\t\tthis.radius = ( radius !== undefined ) ? radius : 0;\n\n\t}\n\n\tObject.assign( Sphere.prototype, {\n\n\t\tset: function ( center, radius ) {\n\n\t\t\tthis.center.copy( center );\n\t\t\tthis.radius = radius;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPoints: function ( points, optionalCenter ) {\n\n\t\t\tvar center = this.center;\n\n\t\t\tif ( optionalCenter !== undefined ) {\n\n\t\t\t\tcenter.copy( optionalCenter );\n\n\t\t\t} else {\n\n\t\t\t\t_box$1.setFromPoints( points ).getCenter( center );\n\n\t\t\t}\n\n\t\t\tvar maxRadiusSq = 0;\n\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\n\n\t\t\t}\n\n\t\t\tthis.radius = Math.sqrt( maxRadiusSq );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( sphere ) {\n\n\t\t\tthis.center.copy( sphere.center );\n\t\t\tthis.radius = sphere.radius;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tempty: function () {\n\n\t\t\treturn ( this.radius <= 0 );\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\n\n\t\t},\n\n\t\tdistanceToPoint: function ( point ) {\n\n\t\t\treturn ( point.distanceTo( this.center ) - this.radius );\n\n\t\t},\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\tvar radiusSum = this.radius + sphere.radius;\n\n\t\t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\treturn box.intersectsSphere( this );\n\n\t\t},\n\n\t\tintersectsPlane: function ( plane ) {\n\n\t\t\treturn Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;\n\n\t\t},\n\n\t\tclampPoint: function ( point, target ) {\n\n\t\t\tvar deltaLengthSq = this.center.distanceToSquared( point );\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Sphere: .clampPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\ttarget.copy( point );\n\n\t\t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\n\n\t\t\t\ttarget.sub( this.center ).normalize();\n\t\t\t\ttarget.multiplyScalar( this.radius ).add( this.center );\n\n\t\t\t}\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tgetBoundingBox: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Sphere: .getBoundingBox() target is now required' );\n\t\t\t\ttarget = new Box3();\n\n\t\t\t}\n\n\t\t\ttarget.set( this.center, this.center );\n\t\t\ttarget.expandByScalar( this.radius );\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tapplyMatrix4: function ( matrix ) {\n\n\t\t\tthis.center.applyMatrix4( matrix );\n\t\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( offset ) {\n\n\t\t\tthis.center.add( offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( sphere ) {\n\n\t\t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\n\n\t\t}\n\n\t} );\n\n\tvar _vector$2 = new Vector3();\n\tvar _segCenter = new Vector3();\n\tvar _segDir = new Vector3();\n\tvar _diff = new Vector3();\n\n\tvar _edge1 = new Vector3();\n\tvar _edge2 = new Vector3();\n\tvar _normal = new Vector3();\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t */\n\n\tfunction Ray( origin, direction ) {\n\n\t\tthis.origin = ( origin !== undefined ) ? origin : new Vector3();\n\t\tthis.direction = ( direction !== undefined ) ? direction : new Vector3( 0, 0, - 1 );\n\n\t}\n\n\tObject.assign( Ray.prototype, {\n\n\t\tset: function ( origin, direction ) {\n\n\t\t\tthis.origin.copy( origin );\n\t\t\tthis.direction.copy( direction );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( ray ) {\n\n\t\t\tthis.origin.copy( ray.origin );\n\t\t\tthis.direction.copy( ray.direction );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tat: function ( t, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Ray: .at() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.copy( this.direction ).multiplyScalar( t ).add( this.origin );\n\n\t\t},\n\n\t\tlookAt: function ( v ) {\n\n\t\t\tthis.direction.copy( v ).sub( this.origin ).normalize();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trecast: function ( t ) {\n\n\t\t\tthis.origin.copy( this.at( t, _vector$2 ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclosestPointToPoint: function ( point, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Ray: .closestPointToPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\ttarget.subVectors( point, this.origin );\n\n\t\t\tvar directionDistance = target.dot( this.direction );\n\n\t\t\tif ( directionDistance < 0 ) {\n\n\t\t\t\treturn target.copy( this.origin );\n\n\t\t\t}\n\n\t\t\treturn target.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n\t\t},\n\n\t\tdistanceToPoint: function ( point ) {\n\n\t\t\treturn Math.sqrt( this.distanceSqToPoint( point ) );\n\n\t\t},\n\n\t\tdistanceSqToPoint: function ( point ) {\n\n\t\t\tvar directionDistance = _vector$2.subVectors( point, this.origin ).dot( this.direction );\n\n\t\t\t// point behind the ray\n\n\t\t\tif ( directionDistance < 0 ) {\n\n\t\t\t\treturn this.origin.distanceToSquared( point );\n\n\t\t\t}\n\n\t\t\t_vector$2.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n\t\t\treturn _vector$2.distanceToSquared( point );\n\n\t\t},\n\n\t\tdistanceSqToSegment: function ( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\n\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\n\t\t\t// It returns the min distance between the ray and the segment\n\t\t\t// defined by v0 and v1\n\t\t\t// It can also set two optional targets :\n\t\t\t// - The closest point on the ray\n\t\t\t// - The closest point on the segment\n\n\t\t\t_segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\n\t\t\t_segDir.copy( v1 ).sub( v0 ).normalize();\n\t\t\t_diff.copy( this.origin ).sub( _segCenter );\n\n\t\t\tvar segExtent = v0.distanceTo( v1 ) * 0.5;\n\t\t\tvar a01 = - this.direction.dot( _segDir );\n\t\t\tvar b0 = _diff.dot( this.direction );\n\t\t\tvar b1 = - _diff.dot( _segDir );\n\t\t\tvar c = _diff.lengthSq();\n\t\t\tvar det = Math.abs( 1 - a01 * a01 );\n\t\t\tvar s0, s1, sqrDist, extDet;\n\n\t\t\tif ( det > 0 ) {\n\n\t\t\t\t// The ray and segment are not parallel.\n\n\t\t\t\ts0 = a01 * b1 - b0;\n\t\t\t\ts1 = a01 * b0 - b1;\n\t\t\t\textDet = segExtent * det;\n\n\t\t\t\tif ( s0 >= 0 ) {\n\n\t\t\t\t\tif ( s1 >= - extDet ) {\n\n\t\t\t\t\t\tif ( s1 <= extDet ) {\n\n\t\t\t\t\t\t\t// region 0\n\t\t\t\t\t\t\t// Minimum at interior points of ray and segment.\n\n\t\t\t\t\t\t\tvar invDet = 1 / det;\n\t\t\t\t\t\t\ts0 *= invDet;\n\t\t\t\t\t\t\ts1 *= invDet;\n\t\t\t\t\t\t\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// region 1\n\n\t\t\t\t\t\t\ts1 = segExtent;\n\t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// region 5\n\n\t\t\t\t\t\ts1 = - segExtent;\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( s1 <= - extDet ) {\n\n\t\t\t\t\t\t// region 4\n\n\t\t\t\t\t\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\n\t\t\t\t\t\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t} else if ( s1 <= extDet ) {\n\n\t\t\t\t\t\t// region 3\n\n\t\t\t\t\t\ts0 = 0;\n\t\t\t\t\t\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// region 2\n\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\n\t\t\t\t\t\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// Ray and segment are parallel.\n\n\t\t\t\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\n\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t}\n\n\t\t\tif ( optionalPointOnRay ) {\n\n\t\t\t\toptionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );\n\n\t\t\t}\n\n\t\t\tif ( optionalPointOnSegment ) {\n\n\t\t\t\toptionalPointOnSegment.copy( _segDir ).multiplyScalar( s1 ).add( _segCenter );\n\n\t\t\t}\n\n\t\t\treturn sqrDist;\n\n\t\t},\n\n\t\tintersectSphere: function ( sphere, target ) {\n\n\t\t\t_vector$2.subVectors( sphere.center, this.origin );\n\t\t\tvar tca = _vector$2.dot( this.direction );\n\t\t\tvar d2 = _vector$2.dot( _vector$2 ) - tca * tca;\n\t\t\tvar radius2 = sphere.radius * sphere.radius;\n\n\t\t\tif ( d2 > radius2 ) { return null; }\n\n\t\t\tvar thc = Math.sqrt( radius2 - d2 );\n\n\t\t\t// t0 = first intersect point - entrance on front of sphere\n\t\t\tvar t0 = tca - thc;\n\n\t\t\t// t1 = second intersect point - exit point on back of sphere\n\t\t\tvar t1 = tca + thc;\n\n\t\t\t// test to see if both t0 and t1 are behind the ray - if so, return null\n\t\t\tif ( t0 < 0 && t1 < 0 ) { return null; }\n\n\t\t\t// test to see if t0 is behind the ray:\n\t\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n\t\t\t// in order to always return an intersect point that is in front of the ray.\n\t\t\tif ( t0 < 0 ) { return this.at( t1, target ); }\n\n\t\t\t// else t0 is in front of the ray, so return the first collision point scaled by t0\n\t\t\treturn this.at( t0, target );\n\n\t\t},\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\treturn this.distanceSqToPoint( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t\t},\n\n\t\tdistanceToPlane: function ( plane ) {\n\n\t\t\tvar denominator = plane.normal.dot( this.direction );\n\n\t\t\tif ( denominator === 0 ) {\n\n\t\t\t\t// line is coplanar, return origin\n\t\t\t\tif ( plane.distanceToPoint( this.origin ) === 0 ) {\n\n\t\t\t\t\treturn 0;\n\n\t\t\t\t}\n\n\t\t\t\t// Null is preferable to undefined since undefined means.... it is undefined\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\n\n\t\t\t// Return if the ray never intersects the plane\n\n\t\t\treturn t >= 0 ? t : null;\n\n\t\t},\n\n\t\tintersectPlane: function ( plane, target ) {\n\n\t\t\tvar t = this.distanceToPlane( plane );\n\n\t\t\tif ( t === null ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\treturn this.at( t, target );\n\n\t\t},\n\n\t\tintersectsPlane: function ( plane ) {\n\n\t\t\t// check if the ray lies on the plane first\n\n\t\t\tvar distToPoint = plane.distanceToPoint( this.origin );\n\n\t\t\tif ( distToPoint === 0 ) {\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\tvar denominator = plane.normal.dot( this.direction );\n\n\t\t\tif ( denominator * distToPoint < 0 ) {\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\t// ray origin is behind the plane (and is pointing behind it)\n\n\t\t\treturn false;\n\n\t\t},\n\n\t\tintersectBox: function ( box, target ) {\n\n\t\t\tvar tmin, tmax, tymin, tymax, tzmin, tzmax;\n\n\t\t\tvar invdirx = 1 / this.direction.x,\n\t\t\t\tinvdiry = 1 / this.direction.y,\n\t\t\t\tinvdirz = 1 / this.direction.z;\n\n\t\t\tvar origin = this.origin;\n\n\t\t\tif ( invdirx >= 0 ) {\n\n\t\t\t\ttmin = ( box.min.x - origin.x ) * invdirx;\n\t\t\t\ttmax = ( box.max.x - origin.x ) * invdirx;\n\n\t\t\t} else {\n\n\t\t\t\ttmin = ( box.max.x - origin.x ) * invdirx;\n\t\t\t\ttmax = ( box.min.x - origin.x ) * invdirx;\n\n\t\t\t}\n\n\t\t\tif ( invdiry >= 0 ) {\n\n\t\t\t\ttymin = ( box.min.y - origin.y ) * invdiry;\n\t\t\t\ttymax = ( box.max.y - origin.y ) * invdiry;\n\n\t\t\t} else {\n\n\t\t\t\ttymin = ( box.max.y - origin.y ) * invdiry;\n\t\t\t\ttymax = ( box.min.y - origin.y ) * invdiry;\n\n\t\t\t}\n\n\t\t\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) { return null; }\n\n\t\t\t// These lines also handle the case where tmin or tmax is NaN\n\t\t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\n\n\t\t\tif ( tymin > tmin || tmin !== tmin ) { tmin = tymin; }\n\n\t\t\tif ( tymax < tmax || tmax !== tmax ) { tmax = tymax; }\n\n\t\t\tif ( invdirz >= 0 ) {\n\n\t\t\t\ttzmin = ( box.min.z - origin.z ) * invdirz;\n\t\t\t\ttzmax = ( box.max.z - origin.z ) * invdirz;\n\n\t\t\t} else {\n\n\t\t\t\ttzmin = ( box.max.z - origin.z ) * invdirz;\n\t\t\t\ttzmax = ( box.min.z - origin.z ) * invdirz;\n\n\t\t\t}\n\n\t\t\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) { return null; }\n\n\t\t\tif ( tzmin > tmin || tmin !== tmin ) { tmin = tzmin; }\n\n\t\t\tif ( tzmax < tmax || tmax !== tmax ) { tmax = tzmax; }\n\n\t\t\t//return point closest to the ray (positive side)\n\n\t\t\tif ( tmax < 0 ) { return null; }\n\n\t\t\treturn this.at( tmin >= 0 ? tmin : tmax, target );\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\treturn this.intersectBox( box, _vector$2 ) !== null;\n\n\t\t},\n\n\t\tintersectTriangle: function ( a, b, c, backfaceCulling, target ) {\n\n\t\t\t// Compute the offset origin, edges, and normal.\n\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n\n\t\t\t_edge1.subVectors( b, a );\n\t\t\t_edge2.subVectors( c, a );\n\t\t\t_normal.crossVectors( _edge1, _edge2 );\n\n\t\t\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n\t\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n\t\t\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n\t\t\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n\t\t\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n\t\t\tvar DdN = this.direction.dot( _normal );\n\t\t\tvar sign;\n\n\t\t\tif ( DdN > 0 ) {\n\n\t\t\t\tif ( backfaceCulling ) { return null; }\n\t\t\t\tsign = 1;\n\n\t\t\t} else if ( DdN < 0 ) {\n\n\t\t\t\tsign = - 1;\n\t\t\t\tDdN = - DdN;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t_diff.subVectors( this.origin, a );\n\t\t\tvar DdQxE2 = sign * this.direction.dot( _edge2.crossVectors( _diff, _edge2 ) );\n\n\t\t\t// b1 < 0, no intersection\n\t\t\tif ( DdQxE2 < 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar DdE1xQ = sign * this.direction.dot( _edge1.cross( _diff ) );\n\n\t\t\t// b2 < 0, no intersection\n\t\t\tif ( DdE1xQ < 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t// b1+b2 > 1, no intersection\n\t\t\tif ( DdQxE2 + DdE1xQ > DdN ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t// Line intersects triangle, check if ray does.\n\t\t\tvar QdN = - sign * _diff.dot( _normal );\n\n\t\t\t// t < 0, no intersection\n\t\t\tif ( QdN < 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t// Ray intersects triangle.\n\t\t\treturn this.at( QdN / DdN, target );\n\n\t\t},\n\n\t\tapplyMatrix4: function ( matrix4 ) {\n\n\t\t\tthis.origin.applyMatrix4( matrix4 );\n\t\t\tthis.direction.transformDirection( matrix4 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( ray ) {\n\n\t\t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t */\n\n\tvar _vector1 = new Vector3();\n\tvar _vector2 = new Vector3();\n\tvar _normalMatrix = new Matrix3();\n\n\tfunction Plane( normal, constant ) {\n\n\t\t// normal is assumed to be normalized\n\n\t\tthis.normal = ( normal !== undefined ) ? normal : new Vector3( 1, 0, 0 );\n\t\tthis.constant = ( constant !== undefined ) ? constant : 0;\n\n\t}\n\n\tObject.assign( Plane.prototype, {\n\n\t\tisPlane: true,\n\n\t\tset: function ( normal, constant ) {\n\n\t\t\tthis.normal.copy( normal );\n\t\t\tthis.constant = constant;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetComponents: function ( x, y, z, w ) {\n\n\t\t\tthis.normal.set( x, y, z );\n\t\t\tthis.constant = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromNormalAndCoplanarPoint: function ( normal, point ) {\n\n\t\t\tthis.normal.copy( normal );\n\t\t\tthis.constant = - point.dot( this.normal );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromCoplanarPoints: function ( a, b, c ) {\n\n\t\t\tvar normal = _vector1.subVectors( c, b ).cross( _vector2.subVectors( a, b ) ).normalize();\n\n\t\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\n\t\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( plane ) {\n\n\t\t\tthis.normal.copy( plane.normal );\n\t\t\tthis.constant = plane.constant;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\t// Note: will lead to a divide by zero if the plane is invalid.\n\n\t\t\tvar inverseNormalLength = 1.0 / this.normal.length();\n\t\t\tthis.normal.multiplyScalar( inverseNormalLength );\n\t\t\tthis.constant *= inverseNormalLength;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnegate: function () {\n\n\t\t\tthis.constant *= - 1;\n\t\t\tthis.normal.negate();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdistanceToPoint: function ( point ) {\n\n\t\t\treturn this.normal.dot( point ) + this.constant;\n\n\t\t},\n\n\t\tdistanceToSphere: function ( sphere ) {\n\n\t\t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\n\n\t\t},\n\n\t\tprojectPoint: function ( point, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Plane: .projectPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.copy( this.normal ).multiplyScalar( - this.distanceToPoint( point ) ).add( point );\n\n\t\t},\n\n\t\tintersectLine: function ( line, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Plane: .intersectLine() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tvar direction = line.delta( _vector1 );\n\n\t\t\tvar denominator = this.normal.dot( direction );\n\n\t\t\tif ( denominator === 0 ) {\n\n\t\t\t\t// line is coplanar, return origin\n\t\t\t\tif ( this.distanceToPoint( line.start ) === 0 ) {\n\n\t\t\t\t\treturn target.copy( line.start );\n\n\t\t\t\t}\n\n\t\t\t\t// Unsure if this is the correct method to handle this case.\n\t\t\t\treturn undefined;\n\n\t\t\t}\n\n\t\t\tvar t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\n\n\t\t\tif ( t < 0 || t > 1 ) {\n\n\t\t\t\treturn undefined;\n\n\t\t\t}\n\n\t\t\treturn target.copy( direction ).multiplyScalar( t ).add( line.start );\n\n\t\t},\n\n\t\tintersectsLine: function ( line ) {\n\n\t\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\n\t\t\tvar startSign = this.distanceToPoint( line.start );\n\t\t\tvar endSign = this.distanceToPoint( line.end );\n\n\t\t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\treturn box.intersectsPlane( this );\n\n\t\t},\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\treturn sphere.intersectsPlane( this );\n\n\t\t},\n\n\t\tcoplanarPoint: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Plane: .coplanarPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.copy( this.normal ).multiplyScalar( - this.constant );\n\n\t\t},\n\n\t\tapplyMatrix4: function ( matrix, optionalNormalMatrix ) {\n\n\t\t\tvar normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix( matrix );\n\n\t\t\tvar referencePoint = this.coplanarPoint( _vector1 ).applyMatrix4( matrix );\n\n\t\t\tvar normal = this.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\tthis.constant = - referencePoint.dot( normal );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( offset ) {\n\n\t\t\tthis.constant -= offset.dot( this.normal );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( plane ) {\n\n\t\t\treturn plane.normal.equals( this.normal ) && ( plane.constant === this.constant );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _v0$1 = new Vector3();\n\tvar _v1$3 = new Vector3();\n\tvar _v2$1 = new Vector3();\n\tvar _v3 = new Vector3();\n\n\tvar _vab = new Vector3();\n\tvar _vac = new Vector3();\n\tvar _vbc = new Vector3();\n\tvar _vap = new Vector3();\n\tvar _vbp = new Vector3();\n\tvar _vcp = new Vector3();\n\n\tfunction Triangle( a, b, c ) {\n\n\t\tthis.a = ( a !== undefined ) ? a : new Vector3();\n\t\tthis.b = ( b !== undefined ) ? b : new Vector3();\n\t\tthis.c = ( c !== undefined ) ? c : new Vector3();\n\n\t}\n\n\tObject.assign( Triangle, {\n\n\t\tgetNormal: function ( a, b, c, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Triangle: .getNormal() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\ttarget.subVectors( c, b );\n\t\t\t_v0$1.subVectors( a, b );\n\t\t\ttarget.cross( _v0$1 );\n\n\t\t\tvar targetLengthSq = target.lengthSq();\n\t\t\tif ( targetLengthSq > 0 ) {\n\n\t\t\t\treturn target.multiplyScalar( 1 / Math.sqrt( targetLengthSq ) );\n\n\t\t\t}\n\n\t\t\treturn target.set( 0, 0, 0 );\n\n\t\t},\n\n\t\t// static/instance method to calculate barycentric coordinates\n\t\t// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n\t\tgetBarycoord: function ( point, a, b, c, target ) {\n\n\t\t\t_v0$1.subVectors( c, a );\n\t\t\t_v1$3.subVectors( b, a );\n\t\t\t_v2$1.subVectors( point, a );\n\n\t\t\tvar dot00 = _v0$1.dot( _v0$1 );\n\t\t\tvar dot01 = _v0$1.dot( _v1$3 );\n\t\t\tvar dot02 = _v0$1.dot( _v2$1 );\n\t\t\tvar dot11 = _v1$3.dot( _v1$3 );\n\t\t\tvar dot12 = _v1$3.dot( _v2$1 );\n\n\t\t\tvar denom = ( dot00 * dot11 - dot01 * dot01 );\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Triangle: .getBarycoord() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\t// collinear or singular triangle\n\t\t\tif ( denom === 0 ) {\n\n\t\t\t\t// arbitrary location outside of triangle?\n\t\t\t\t// not sure if this is the best idea, maybe should be returning undefined\n\t\t\t\treturn target.set( - 2, - 1, - 1 );\n\n\t\t\t}\n\n\t\t\tvar invDenom = 1 / denom;\n\t\t\tvar u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\n\t\t\tvar v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\n\n\t\t\t// barycentric coordinates must always sum to 1\n\t\t\treturn target.set( 1 - u - v, v, u );\n\n\t\t},\n\n\t\tcontainsPoint: function ( point, a, b, c ) {\n\n\t\t\tTriangle.getBarycoord( point, a, b, c, _v3 );\n\n\t\t\treturn ( _v3.x >= 0 ) && ( _v3.y >= 0 ) && ( ( _v3.x + _v3.y ) <= 1 );\n\n\t\t},\n\n\t\tgetUV: function ( point, p1, p2, p3, uv1, uv2, uv3, target ) {\n\n\t\t\tthis.getBarycoord( point, p1, p2, p3, _v3 );\n\n\t\t\ttarget.set( 0, 0 );\n\t\t\ttarget.addScaledVector( uv1, _v3.x );\n\t\t\ttarget.addScaledVector( uv2, _v3.y );\n\t\t\ttarget.addScaledVector( uv3, _v3.z );\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tisFrontFacing: function ( a, b, c, direction ) {\n\n\t\t\t_v0$1.subVectors( c, b );\n\t\t\t_v1$3.subVectors( a, b );\n\n\t\t\t// strictly front facing\n\t\t\treturn ( _v0$1.cross( _v1$3 ).dot( direction ) < 0 ) ? true : false;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Triangle.prototype, {\n\n\t\tset: function ( a, b, c ) {\n\n\t\t\tthis.a.copy( a );\n\t\t\tthis.b.copy( b );\n\t\t\tthis.c.copy( c );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPointsAndIndices: function ( points, i0, i1, i2 ) {\n\n\t\t\tthis.a.copy( points[ i0 ] );\n\t\t\tthis.b.copy( points[ i1 ] );\n\t\t\tthis.c.copy( points[ i2 ] );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( triangle ) {\n\n\t\t\tthis.a.copy( triangle.a );\n\t\t\tthis.b.copy( triangle.b );\n\t\t\tthis.c.copy( triangle.c );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetArea: function () {\n\n\t\t\t_v0$1.subVectors( this.c, this.b );\n\t\t\t_v1$3.subVectors( this.a, this.b );\n\n\t\t\treturn _v0$1.cross( _v1$3 ).length() * 0.5;\n\n\t\t},\n\n\t\tgetMidpoint: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Triangle: .getMidpoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\n\n\t\t},\n\n\t\tgetNormal: function ( target ) {\n\n\t\t\treturn Triangle.getNormal( this.a, this.b, this.c, target );\n\n\t\t},\n\n\t\tgetPlane: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Triangle: .getPlane() target is now required' );\n\t\t\t\ttarget = new Plane();\n\n\t\t\t}\n\n\t\t\treturn target.setFromCoplanarPoints( this.a, this.b, this.c );\n\n\t\t},\n\n\t\tgetBarycoord: function ( point, target ) {\n\n\t\t\treturn Triangle.getBarycoord( point, this.a, this.b, this.c, target );\n\n\t\t},\n\n\t\tgetUV: function ( point, uv1, uv2, uv3, target ) {\n\n\t\t\treturn Triangle.getUV( point, this.a, this.b, this.c, uv1, uv2, uv3, target );\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\treturn Triangle.containsPoint( point, this.a, this.b, this.c );\n\n\t\t},\n\n\t\tisFrontFacing: function ( direction ) {\n\n\t\t\treturn Triangle.isFrontFacing( this.a, this.b, this.c, direction );\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\treturn box.intersectsTriangle( this );\n\n\t\t},\n\n\t\tclosestPointToPoint: function ( p, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Triangle: .closestPointToPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tvar a = this.a, b = this.b, c = this.c;\n\t\t\tvar v, w;\n\n\t\t\t// algorithm thanks to Real-Time Collision Detection by Christer Ericson,\n\t\t\t// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,\n\t\t\t// under the accompanying license; see chapter 5.1.5 for detailed explanation.\n\t\t\t// basically, we're distinguishing which of the voronoi regions of the triangle\n\t\t\t// the point lies in with the minimum amount of redundant computation.\n\n\t\t\t_vab.subVectors( b, a );\n\t\t\t_vac.subVectors( c, a );\n\t\t\t_vap.subVectors( p, a );\n\t\t\tvar d1 = _vab.dot( _vap );\n\t\t\tvar d2 = _vac.dot( _vap );\n\t\t\tif ( d1 <= 0 && d2 <= 0 ) {\n\n\t\t\t\t// vertex region of A; barycentric coords (1, 0, 0)\n\t\t\t\treturn target.copy( a );\n\n\t\t\t}\n\n\t\t\t_vbp.subVectors( p, b );\n\t\t\tvar d3 = _vab.dot( _vbp );\n\t\t\tvar d4 = _vac.dot( _vbp );\n\t\t\tif ( d3 >= 0 && d4 <= d3 ) {\n\n\t\t\t\t// vertex region of B; barycentric coords (0, 1, 0)\n\t\t\t\treturn target.copy( b );\n\n\t\t\t}\n\n\t\t\tvar vc = d1 * d4 - d3 * d2;\n\t\t\tif ( vc <= 0 && d1 >= 0 && d3 <= 0 ) {\n\n\t\t\t\tv = d1 / ( d1 - d3 );\n\t\t\t\t// edge region of AB; barycentric coords (1-v, v, 0)\n\t\t\t\treturn target.copy( a ).addScaledVector( _vab, v );\n\n\t\t\t}\n\n\t\t\t_vcp.subVectors( p, c );\n\t\t\tvar d5 = _vab.dot( _vcp );\n\t\t\tvar d6 = _vac.dot( _vcp );\n\t\t\tif ( d6 >= 0 && d5 <= d6 ) {\n\n\t\t\t\t// vertex region of C; barycentric coords (0, 0, 1)\n\t\t\t\treturn target.copy( c );\n\n\t\t\t}\n\n\t\t\tvar vb = d5 * d2 - d1 * d6;\n\t\t\tif ( vb <= 0 && d2 >= 0 && d6 <= 0 ) {\n\n\t\t\t\tw = d2 / ( d2 - d6 );\n\t\t\t\t// edge region of AC; barycentric coords (1-w, 0, w)\n\t\t\t\treturn target.copy( a ).addScaledVector( _vac, w );\n\n\t\t\t}\n\n\t\t\tvar va = d3 * d6 - d5 * d4;\n\t\t\tif ( va <= 0 && ( d4 - d3 ) >= 0 && ( d5 - d6 ) >= 0 ) {\n\n\t\t\t\t_vbc.subVectors( c, b );\n\t\t\t\tw = ( d4 - d3 ) / ( ( d4 - d3 ) + ( d5 - d6 ) );\n\t\t\t\t// edge region of BC; barycentric coords (0, 1-w, w)\n\t\t\t\treturn target.copy( b ).addScaledVector( _vbc, w ); // edge region of BC\n\n\t\t\t}\n\n\t\t\t// face region\n\t\t\tvar denom = 1 / ( va + vb + vc );\n\t\t\t// u = va * denom\n\t\t\tv = vb * denom;\n\t\t\tw = vc * denom;\n\n\t\t\treturn target.copy( a ).addScaledVector( _vab, v ).addScaledVector( _vac, w );\n\n\t\t},\n\n\t\tequals: function ( triangle ) {\n\n\t\t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _colorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\n\t\t'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\n\t\t'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\n\t\t'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\n\t\t'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\n\t\t'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\n\t\t'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\n\t\t'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\n\t\t'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\n\t\t'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\n\t\t'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\n\t\t'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\n\t\t'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\n\t\t'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\n\t\t'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\n\t\t'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\n\t\t'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\n\t\t'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\n\t\t'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\n\t\t'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\n\t\t'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\n\t\t'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\n\t\t'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\n\t\t'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\n\n\tvar _hslA = { h: 0, s: 0, l: 0 };\n\tvar _hslB = { h: 0, s: 0, l: 0 };\n\n\tfunction Color( r, g, b ) {\n\n\t\tif ( g === undefined && b === undefined ) {\n\n\t\t\t// r is THREE.Color, hex or string\n\t\t\treturn this.set( r );\n\n\t\t}\n\n\t\treturn this.setRGB( r, g, b );\n\n\t}\n\n\tfunction hue2rgb( p, q, t ) {\n\n\t\tif ( t < 0 ) { t += 1; }\n\t\tif ( t > 1 ) { t -= 1; }\n\t\tif ( t < 1 / 6 ) { return p + ( q - p ) * 6 * t; }\n\t\tif ( t < 1 / 2 ) { return q; }\n\t\tif ( t < 2 / 3 ) { return p + ( q - p ) * 6 * ( 2 / 3 - t ); }\n\t\treturn p;\n\n\t}\n\n\tfunction SRGBToLinear( c ) {\n\n\t\treturn ( c < 0.04045 ) ? c * 0.0773993808 : Math.pow( c * 0.9478672986 + 0.0521327014, 2.4 );\n\n\t}\n\n\tfunction LinearToSRGB( c ) {\n\n\t\treturn ( c < 0.0031308 ) ? c * 12.92 : 1.055 * ( Math.pow( c, 0.41666 ) ) - 0.055;\n\n\t}\n\n\tObject.assign( Color.prototype, {\n\n\t\tisColor: true,\n\n\t\tr: 1, g: 1, b: 1,\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value && value.isColor ) {\n\n\t\t\t\tthis.copy( value );\n\n\t\t\t} else if ( typeof value === 'number' ) {\n\n\t\t\t\tthis.setHex( value );\n\n\t\t\t} else if ( typeof value === 'string' ) {\n\n\t\t\t\tthis.setStyle( value );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetScalar: function ( scalar ) {\n\n\t\t\tthis.r = scalar;\n\t\t\tthis.g = scalar;\n\t\t\tthis.b = scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetHex: function ( hex ) {\n\n\t\t\thex = Math.floor( hex );\n\n\t\t\tthis.r = ( hex >> 16 & 255 ) / 255;\n\t\t\tthis.g = ( hex >> 8 & 255 ) / 255;\n\t\t\tthis.b = ( hex & 255 ) / 255;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetRGB: function ( r, g, b ) {\n\n\t\t\tthis.r = r;\n\t\t\tthis.g = g;\n\t\t\tthis.b = b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetHSL: function ( h, s, l ) {\n\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\t\t\th = MathUtils.euclideanModulo( h, 1 );\n\t\t\ts = MathUtils.clamp( s, 0, 1 );\n\t\t\tl = MathUtils.clamp( l, 0, 1 );\n\n\t\t\tif ( s === 0 ) {\n\n\t\t\t\tthis.r = this.g = this.b = l;\n\n\t\t\t} else {\n\n\t\t\t\tvar p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\n\t\t\t\tvar q = ( 2 * l ) - p;\n\n\t\t\t\tthis.r = hue2rgb( q, p, h + 1 / 3 );\n\t\t\t\tthis.g = hue2rgb( q, p, h );\n\t\t\t\tthis.b = hue2rgb( q, p, h - 1 / 3 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetStyle: function ( style ) {\n\n\t\t\tfunction handleAlpha( string ) {\n\n\t\t\t\tif ( string === undefined ) { return; }\n\n\t\t\t\tif ( parseFloat( string ) < 1 ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\tvar m;\n\n\t\t\tif ( m = /^((?:rgb|hsl)a?)\\(\\s*([^\\)]*)\\)/.exec( style ) ) {\n\n\t\t\t\t// rgb / hsl\n\n\t\t\t\tvar color;\n\t\t\t\tvar name = m[ 1 ];\n\t\t\t\tvar components = m[ 2 ];\n\n\t\t\t\tswitch ( name ) {\n\n\t\t\t\t\tcase 'rgb':\n\t\t\t\t\tcase 'rgba':\n\n\t\t\t\t\t\tif ( color = /^(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\n\t\t\t\t\t\t\tthis.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;\n\t\t\t\t\t\t\tthis.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;\n\t\t\t\t\t\t\tthis.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;\n\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( color = /^(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n\t\t\t\t\t\t\tthis.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;\n\t\t\t\t\t\t\tthis.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;\n\t\t\t\t\t\t\tthis.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;\n\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'hsl':\n\t\t\t\t\tcase 'hsla':\n\n\t\t\t\t\t\tif ( color = /^([0-9]*\\.?[0-9]+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n\t\t\t\t\t\t\tvar h = parseFloat( color[ 1 ] ) / 360;\n\t\t\t\t\t\t\tvar s = parseInt( color[ 2 ], 10 ) / 100;\n\t\t\t\t\t\t\tvar l = parseInt( color[ 3 ], 10 ) / 100;\n\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\t\treturn this.setHSL( h, s, l );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t} else if ( m = /^\\#([A-Fa-f0-9]+)$/.exec( style ) ) {\n\n\t\t\t\t// hex color\n\n\t\t\t\tvar hex = m[ 1 ];\n\t\t\t\tvar size = hex.length;\n\n\t\t\t\tif ( size === 3 ) {\n\n\t\t\t\t\t// #ff0\n\t\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;\n\t\t\t\t\tthis.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;\n\t\t\t\t\tthis.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t} else if ( size === 6 ) {\n\n\t\t\t\t\t// #ff0000\n\t\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;\n\t\t\t\t\tthis.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;\n\t\t\t\t\tthis.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( style && style.length > 0 ) {\n\n\t\t\t\treturn this.setColorName( style );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetColorName: function ( style ) {\n\n\t\t\t// color keywords\n\t\t\tvar hex = _colorKeywords[ style ];\n\n\t\t\tif ( hex !== undefined ) {\n\n\t\t\t\t// red\n\t\t\t\tthis.setHex( hex );\n\n\t\t\t} else {\n\n\t\t\t\t// unknown color\n\t\t\t\tconsole.warn( 'THREE.Color: Unknown color ' + style );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.r, this.g, this.b );\n\n\t\t},\n\n\t\tcopy: function ( color ) {\n\n\t\t\tthis.r = color.r;\n\t\t\tthis.g = color.g;\n\t\t\tthis.b = color.b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyGammaToLinear: function ( color, gammaFactor ) {\n\n\t\t\tif ( gammaFactor === undefined ) { gammaFactor = 2.0; }\n\n\t\t\tthis.r = Math.pow( color.r, gammaFactor );\n\t\t\tthis.g = Math.pow( color.g, gammaFactor );\n\t\t\tthis.b = Math.pow( color.b, gammaFactor );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyLinearToGamma: function ( color, gammaFactor ) {\n\n\t\t\tif ( gammaFactor === undefined ) { gammaFactor = 2.0; }\n\n\t\t\tvar safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;\n\n\t\t\tthis.r = Math.pow( color.r, safeInverse );\n\t\t\tthis.g = Math.pow( color.g, safeInverse );\n\t\t\tthis.b = Math.pow( color.b, safeInverse );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tconvertGammaToLinear: function ( gammaFactor ) {\n\n\t\t\tthis.copyGammaToLinear( this, gammaFactor );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tconvertLinearToGamma: function ( gammaFactor ) {\n\n\t\t\tthis.copyLinearToGamma( this, gammaFactor );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopySRGBToLinear: function ( color ) {\n\n\t\t\tthis.r = SRGBToLinear( color.r );\n\t\t\tthis.g = SRGBToLinear( color.g );\n\t\t\tthis.b = SRGBToLinear( color.b );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyLinearToSRGB: function ( color ) {\n\n\t\t\tthis.r = LinearToSRGB( color.r );\n\t\t\tthis.g = LinearToSRGB( color.g );\n\t\t\tthis.b = LinearToSRGB( color.b );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tconvertSRGBToLinear: function () {\n\n\t\t\tthis.copySRGBToLinear( this );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tconvertLinearToSRGB: function () {\n\n\t\t\tthis.copyLinearToSRGB( this );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetHex: function () {\n\n\t\t\treturn ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;\n\n\t\t},\n\n\t\tgetHexString: function () {\n\n\t\t\treturn ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );\n\n\t\t},\n\n\t\tgetHSL: function ( target ) {\n\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Color: .getHSL() target is now required' );\n\t\t\t\ttarget = { h: 0, s: 0, l: 0 };\n\n\t\t\t}\n\n\t\t\tvar r = this.r, g = this.g, b = this.b;\n\n\t\t\tvar max = Math.max( r, g, b );\n\t\t\tvar min = Math.min( r, g, b );\n\n\t\t\tvar hue, saturation;\n\t\t\tvar lightness = ( min + max ) / 2.0;\n\n\t\t\tif ( min === max ) {\n\n\t\t\t\thue = 0;\n\t\t\t\tsaturation = 0;\n\n\t\t\t} else {\n\n\t\t\t\tvar delta = max - min;\n\n\t\t\t\tsaturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\n\n\t\t\t\tswitch ( max ) {\n\n\t\t\t\t\tcase r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\n\t\t\t\t\tcase g: hue = ( b - r ) / delta + 2; break;\n\t\t\t\t\tcase b: hue = ( r - g ) / delta + 4; break;\n\n\t\t\t\t}\n\n\t\t\t\thue /= 6;\n\n\t\t\t}\n\n\t\t\ttarget.h = hue;\n\t\t\ttarget.s = saturation;\n\t\t\ttarget.l = lightness;\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tgetStyle: function () {\n\n\t\t\treturn 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';\n\n\t\t},\n\n\t\toffsetHSL: function ( h, s, l ) {\n\n\t\t\tthis.getHSL( _hslA );\n\n\t\t\t_hslA.h += h; _hslA.s += s; _hslA.l += l;\n\n\t\t\tthis.setHSL( _hslA.h, _hslA.s, _hslA.l );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tadd: function ( color ) {\n\n\t\t\tthis.r += color.r;\n\t\t\tthis.g += color.g;\n\t\t\tthis.b += color.b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddColors: function ( color1, color2 ) {\n\n\t\t\tthis.r = color1.r + color2.r;\n\t\t\tthis.g = color1.g + color2.g;\n\t\t\tthis.b = color1.b + color2.b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScalar: function ( s ) {\n\n\t\t\tthis.r += s;\n\t\t\tthis.g += s;\n\t\t\tthis.b += s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsub: function ( color ) {\n\n\t\t\tthis.r = Math.max( 0, this.r - color.r );\n\t\t\tthis.g = Math.max( 0, this.g - color.g );\n\t\t\tthis.b = Math.max( 0, this.b - color.b );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( color ) {\n\n\t\t\tthis.r *= color.r;\n\t\t\tthis.g *= color.g;\n\t\t\tthis.b *= color.b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( s ) {\n\n\t\t\tthis.r *= s;\n\t\t\tthis.g *= s;\n\t\t\tthis.b *= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerp: function ( color, alpha ) {\n\n\t\t\tthis.r += ( color.r - this.r ) * alpha;\n\t\t\tthis.g += ( color.g - this.g ) * alpha;\n\t\t\tthis.b += ( color.b - this.b ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerpHSL: function ( color, alpha ) {\n\n\t\t\tthis.getHSL( _hslA );\n\t\t\tcolor.getHSL( _hslB );\n\n\t\t\tvar h = MathUtils.lerp( _hslA.h, _hslB.h, alpha );\n\t\t\tvar s = MathUtils.lerp( _hslA.s, _hslB.s, alpha );\n\t\t\tvar l = MathUtils.lerp( _hslA.l, _hslB.l, alpha );\n\n\t\t\tthis.setHSL( h, s, l );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( c ) {\n\n\t\t\treturn ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tthis.r = array[ offset ];\n\t\t\tthis.g = array[ offset + 1 ];\n\t\t\tthis.b = array[ offset + 2 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tarray[ offset ] = this.r;\n\t\t\tarray[ offset + 1 ] = this.g;\n\t\t\tarray[ offset + 2 ] = this.b;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\treturn this.getHex();\n\n\t\t}\n\n\t} );\n\n\tColor.NAMES = _colorKeywords;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Face3( a, b, c, normal, color, materialIndex ) {\n\n\t\tthis.a = a;\n\t\tthis.b = b;\n\t\tthis.c = c;\n\n\t\tthis.normal = ( normal && normal.isVector3 ) ? normal : new Vector3();\n\t\tthis.vertexNormals = Array.isArray( normal ) ? normal : [];\n\n\t\tthis.color = ( color && color.isColor ) ? color : new Color();\n\t\tthis.vertexColors = Array.isArray( color ) ? color : [];\n\n\t\tthis.materialIndex = materialIndex !== undefined ? materialIndex : 0;\n\n\t}\n\n\tObject.assign( Face3.prototype, {\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.a = source.a;\n\t\t\tthis.b = source.b;\n\t\t\tthis.c = source.c;\n\n\t\t\tthis.normal.copy( source.normal );\n\t\t\tthis.color.copy( source.color );\n\n\t\t\tthis.materialIndex = source.materialIndex;\n\n\t\t\tfor ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {\n\n\t\t\t\tthis.vertexNormals[ i ] = source.vertexNormals[ i ].clone();\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {\n\n\t\t\t\tthis.vertexColors[ i ] = source.vertexColors[ i ].clone();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tvar materialId = 0;\n\n\tfunction Material() {\n\n\t\tObject.defineProperty( this, 'id', { value: materialId ++ } );\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Material';\n\n\t\tthis.fog = true;\n\n\t\tthis.blending = NormalBlending;\n\t\tthis.side = FrontSide;\n\t\tthis.flatShading = false;\n\t\tthis.vertexTangents = false;\n\t\tthis.vertexColors = NoColors; // THREE.NoColors, THREE.VertexColors, THREE.FaceColors\n\n\t\tthis.opacity = 1;\n\t\tthis.transparent = false;\n\n\t\tthis.blendSrc = SrcAlphaFactor;\n\t\tthis.blendDst = OneMinusSrcAlphaFactor;\n\t\tthis.blendEquation = AddEquation;\n\t\tthis.blendSrcAlpha = null;\n\t\tthis.blendDstAlpha = null;\n\t\tthis.blendEquationAlpha = null;\n\n\t\tthis.depthFunc = LessEqualDepth;\n\t\tthis.depthTest = true;\n\t\tthis.depthWrite = true;\n\n\t\tthis.stencilWriteMask = 0xff;\n\t\tthis.stencilFunc = AlwaysStencilFunc;\n\t\tthis.stencilRef = 0;\n\t\tthis.stencilFuncMask = 0xff;\n\t\tthis.stencilFail = KeepStencilOp;\n\t\tthis.stencilZFail = KeepStencilOp;\n\t\tthis.stencilZPass = KeepStencilOp;\n\t\tthis.stencilWrite = false;\n\n\t\tthis.clippingPlanes = null;\n\t\tthis.clipIntersection = false;\n\t\tthis.clipShadows = false;\n\n\t\tthis.shadowSide = null;\n\n\t\tthis.colorWrite = true;\n\n\t\tthis.precision = null; // override the renderer's default precision for this material\n\n\t\tthis.polygonOffset = false;\n\t\tthis.polygonOffsetFactor = 0;\n\t\tthis.polygonOffsetUnits = 0;\n\n\t\tthis.dithering = false;\n\n\t\tthis.alphaTest = 0;\n\t\tthis.premultipliedAlpha = false;\n\n\t\tthis.visible = true;\n\n\t\tthis.toneMapped = true;\n\n\t\tthis.userData = {};\n\n\t\tthis.version = 0;\n\n\t}\n\n\tMaterial.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: Material,\n\n\t\tisMaterial: true,\n\n\t\tonBeforeCompile: function () {},\n\n\t\tsetValues: function ( values ) {\n\n\t\t\tif ( values === undefined ) { return; }\n\n\t\t\tfor ( var key in values ) {\n\n\t\t\t\tvar newValue = values[ key ];\n\n\t\t\t\tif ( newValue === undefined ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.Material: '\" + key + \"' parameter is undefined.\" );\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\t// for backward compatability if shading is set in the constructor\n\t\t\t\tif ( key === 'shading' ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\n\t\t\t\t\tthis.flatShading = ( newValue === FlatShading ) ? true : false;\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tvar currentValue = this[ key ];\n\n\t\t\t\tif ( currentValue === undefined ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.\" + this.type + \": '\" + key + \"' is not a property of this material.\" );\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tif ( currentValue && currentValue.isColor ) {\n\n\t\t\t\t\tcurrentValue.set( newValue );\n\n\t\t\t\t} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {\n\n\t\t\t\t\tcurrentValue.copy( newValue );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis[ key ] = newValue;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar isRoot = ( meta === undefined || typeof meta === 'string' );\n\n\t\t\tif ( isRoot ) {\n\n\t\t\t\tmeta = {\n\t\t\t\t\ttextures: {},\n\t\t\t\t\timages: {}\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Material',\n\t\t\t\t\tgenerator: 'Material.toJSON'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// standard Material serialization\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\n\t\t\tif ( this.name !== '' ) { data.name = this.name; }\n\n\t\t\tif ( this.color && this.color.isColor ) { data.color = this.color.getHex(); }\n\n\t\t\tif ( this.roughness !== undefined ) { data.roughness = this.roughness; }\n\t\t\tif ( this.metalness !== undefined ) { data.metalness = this.metalness; }\n\n\t\t\tif ( this.sheen && this.sheen.isColor ) { data.sheen = this.sheen.getHex(); }\n\t\t\tif ( this.emissive && this.emissive.isColor ) { data.emissive = this.emissive.getHex(); }\n\t\t\tif ( this.emissiveIntensity && this.emissiveIntensity !== 1 ) { data.emissiveIntensity = this.emissiveIntensity; }\n\n\t\t\tif ( this.specular && this.specular.isColor ) { data.specular = this.specular.getHex(); }\n\t\t\tif ( this.shininess !== undefined ) { data.shininess = this.shininess; }\n\t\t\tif ( this.clearcoat !== undefined ) { data.clearcoat = this.clearcoat; }\n\t\t\tif ( this.clearcoatRoughness !== undefined ) { data.clearcoatRoughness = this.clearcoatRoughness; }\n\n\t\t\tif ( this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture ) {\n\n\t\t\t\tdata.clearcoatNormalMap = this.clearcoatNormalMap.toJSON( meta ).uuid;\n\t\t\t\tdata.clearcoatNormalScale = this.clearcoatNormalScale.toArray();\n\n\t\t\t}\n\n\t\t\tif ( this.map && this.map.isTexture ) { data.map = this.map.toJSON( meta ).uuid; }\n\t\t\tif ( this.matcap && this.matcap.isTexture ) { data.matcap = this.matcap.toJSON( meta ).uuid; }\n\t\t\tif ( this.alphaMap && this.alphaMap.isTexture ) { data.alphaMap = this.alphaMap.toJSON( meta ).uuid; }\n\t\t\tif ( this.lightMap && this.lightMap.isTexture ) { data.lightMap = this.lightMap.toJSON( meta ).uuid; }\n\n\t\t\tif ( this.aoMap && this.aoMap.isTexture ) {\n\n\t\t\t\tdata.aoMap = this.aoMap.toJSON( meta ).uuid;\n\t\t\t\tdata.aoMapIntensity = this.aoMapIntensity;\n\n\t\t\t}\n\n\t\t\tif ( this.bumpMap && this.bumpMap.isTexture ) {\n\n\t\t\t\tdata.bumpMap = this.bumpMap.toJSON( meta ).uuid;\n\t\t\t\tdata.bumpScale = this.bumpScale;\n\n\t\t\t}\n\n\t\t\tif ( this.normalMap && this.normalMap.isTexture ) {\n\n\t\t\t\tdata.normalMap = this.normalMap.toJSON( meta ).uuid;\n\t\t\t\tdata.normalMapType = this.normalMapType;\n\t\t\t\tdata.normalScale = this.normalScale.toArray();\n\n\t\t\t}\n\n\t\t\tif ( this.displacementMap && this.displacementMap.isTexture ) {\n\n\t\t\t\tdata.displacementMap = this.displacementMap.toJSON( meta ).uuid;\n\t\t\t\tdata.displacementScale = this.displacementScale;\n\t\t\t\tdata.displacementBias = this.displacementBias;\n\n\t\t\t}\n\n\t\t\tif ( this.roughnessMap && this.roughnessMap.isTexture ) { data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid; }\n\t\t\tif ( this.metalnessMap && this.metalnessMap.isTexture ) { data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid; }\n\n\t\t\tif ( this.emissiveMap && this.emissiveMap.isTexture ) { data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid; }\n\t\t\tif ( this.specularMap && this.specularMap.isTexture ) { data.specularMap = this.specularMap.toJSON( meta ).uuid; }\n\n\t\t\tif ( this.envMap && this.envMap.isTexture ) {\n\n\t\t\t\tdata.envMap = this.envMap.toJSON( meta ).uuid;\n\t\t\t\tdata.reflectivity = this.reflectivity; // Scale behind envMap\n\t\t\t\tdata.refractionRatio = this.refractionRatio;\n\n\t\t\t\tif ( this.combine !== undefined ) { data.combine = this.combine; }\n\t\t\t\tif ( this.envMapIntensity !== undefined ) { data.envMapIntensity = this.envMapIntensity; }\n\n\t\t\t}\n\n\t\t\tif ( this.gradientMap && this.gradientMap.isTexture ) {\n\n\t\t\t\tdata.gradientMap = this.gradientMap.toJSON( meta ).uuid;\n\n\t\t\t}\n\n\t\t\tif ( this.size !== undefined ) { data.size = this.size; }\n\t\t\tif ( this.sizeAttenuation !== undefined ) { data.sizeAttenuation = this.sizeAttenuation; }\n\n\t\t\tif ( this.blending !== NormalBlending ) { data.blending = this.blending; }\n\t\t\tif ( this.flatShading === true ) { data.flatShading = this.flatShading; }\n\t\t\tif ( this.side !== FrontSide ) { data.side = this.side; }\n\t\t\tif ( this.vertexColors !== NoColors ) { data.vertexColors = this.vertexColors; }\n\n\t\t\tif ( this.opacity < 1 ) { data.opacity = this.opacity; }\n\t\t\tif ( this.transparent === true ) { data.transparent = this.transparent; }\n\n\t\t\tdata.depthFunc = this.depthFunc;\n\t\t\tdata.depthTest = this.depthTest;\n\t\t\tdata.depthWrite = this.depthWrite;\n\n\t\t\tdata.stencilWrite = this.stencilWrite;\n\t\t\tdata.stencilWriteMask = this.stencilWriteMask;\n\t\t\tdata.stencilFunc = this.stencilFunc;\n\t\t\tdata.stencilRef = this.stencilRef;\n\t\t\tdata.stencilFuncMask = this.stencilFuncMask;\n\t\t\tdata.stencilFail = this.stencilFail;\n\t\t\tdata.stencilZFail = this.stencilZFail;\n\t\t\tdata.stencilZPass = this.stencilZPass;\n\n\t\t\t// rotation (SpriteMaterial)\n\t\t\tif ( this.rotation && this.rotation !== 0 ) { data.rotation = this.rotation; }\n\n\t\t\tif ( this.polygonOffset === true ) { data.polygonOffset = true; }\n\t\t\tif ( this.polygonOffsetFactor !== 0 ) { data.polygonOffsetFactor = this.polygonOffsetFactor; }\n\t\t\tif ( this.polygonOffsetUnits !== 0 ) { data.polygonOffsetUnits = this.polygonOffsetUnits; }\n\n\t\t\tif ( this.linewidth && this.linewidth !== 1 ) { data.linewidth = this.linewidth; }\n\t\t\tif ( this.dashSize !== undefined ) { data.dashSize = this.dashSize; }\n\t\t\tif ( this.gapSize !== undefined ) { data.gapSize = this.gapSize; }\n\t\t\tif ( this.scale !== undefined ) { data.scale = this.scale; }\n\n\t\t\tif ( this.dithering === true ) { data.dithering = true; }\n\n\t\t\tif ( this.alphaTest > 0 ) { data.alphaTest = this.alphaTest; }\n\t\t\tif ( this.premultipliedAlpha === true ) { data.premultipliedAlpha = this.premultipliedAlpha; }\n\n\t\t\tif ( this.wireframe === true ) { data.wireframe = this.wireframe; }\n\t\t\tif ( this.wireframeLinewidth > 1 ) { data.wireframeLinewidth = this.wireframeLinewidth; }\n\t\t\tif ( this.wireframeLinecap !== 'round' ) { data.wireframeLinecap = this.wireframeLinecap; }\n\t\t\tif ( this.wireframeLinejoin !== 'round' ) { data.wireframeLinejoin = this.wireframeLinejoin; }\n\n\t\t\tif ( this.morphTargets === true ) { data.morphTargets = true; }\n\t\t\tif ( this.morphNormals === true ) { data.morphNormals = true; }\n\t\t\tif ( this.skinning === true ) { data.skinning = true; }\n\n\t\t\tif ( this.visible === false ) { data.visible = false; }\n\n\t\t\tif ( this.toneMapped === false ) { data.toneMapped = false; }\n\n\t\t\tif ( JSON.stringify( this.userData ) !== '{}' ) { data.userData = this.userData; }\n\n\t\t\t// TODO: Copied from Object3D.toJSON\n\n\t\t\tfunction extractFromCache( cache ) {\n\n\t\t\t\tvar values = [];\n\n\t\t\t\tfor ( var key in cache ) {\n\n\t\t\t\t\tvar data = cache[ key ];\n\t\t\t\t\tdelete data.metadata;\n\t\t\t\t\tvalues.push( data );\n\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\n\t\t\t}\n\n\t\t\tif ( isRoot ) {\n\n\t\t\t\tvar textures = extractFromCache( meta.textures );\n\t\t\t\tvar images = extractFromCache( meta.images );\n\n\t\t\t\tif ( textures.length > 0 ) { data.textures = textures; }\n\t\t\t\tif ( images.length > 0 ) { data.images = images; }\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.name = source.name;\n\n\t\t\tthis.fog = source.fog;\n\n\t\t\tthis.blending = source.blending;\n\t\t\tthis.side = source.side;\n\t\t\tthis.flatShading = source.flatShading;\n\t\t\tthis.vertexTangents = source.vertexTangents;\n\t\t\tthis.vertexColors = source.vertexColors;\n\n\t\t\tthis.opacity = source.opacity;\n\t\t\tthis.transparent = source.transparent;\n\n\t\t\tthis.blendSrc = source.blendSrc;\n\t\t\tthis.blendDst = source.blendDst;\n\t\t\tthis.blendEquation = source.blendEquation;\n\t\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\n\t\t\tthis.blendDstAlpha = source.blendDstAlpha;\n\t\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\n\n\t\t\tthis.depthFunc = source.depthFunc;\n\t\t\tthis.depthTest = source.depthTest;\n\t\t\tthis.depthWrite = source.depthWrite;\n\n\t\t\tthis.stencilWriteMask = source.stencilWriteMask;\n\t\t\tthis.stencilFunc = source.stencilFunc;\n\t\t\tthis.stencilRef = source.stencilRef;\n\t\t\tthis.stencilFuncMask = source.stencilFuncMask;\n\t\t\tthis.stencilFail = source.stencilFail;\n\t\t\tthis.stencilZFail = source.stencilZFail;\n\t\t\tthis.stencilZPass = source.stencilZPass;\n\t\t\tthis.stencilWrite = source.stencilWrite;\n\n\t\t\tvar srcPlanes = source.clippingPlanes,\n\t\t\t\tdstPlanes = null;\n\n\t\t\tif ( srcPlanes !== null ) {\n\n\t\t\t\tvar n = srcPlanes.length;\n\t\t\t\tdstPlanes = new Array( n );\n\n\t\t\t\tfor ( var i = 0; i !== n; ++ i )\n\t\t\t\t\t{ dstPlanes[ i ] = srcPlanes[ i ].clone(); }\n\n\t\t\t}\n\n\t\t\tthis.clippingPlanes = dstPlanes;\n\t\t\tthis.clipIntersection = source.clipIntersection;\n\t\t\tthis.clipShadows = source.clipShadows;\n\n\t\t\tthis.shadowSide = source.shadowSide;\n\n\t\t\tthis.colorWrite = source.colorWrite;\n\n\t\t\tthis.precision = source.precision;\n\n\t\t\tthis.polygonOffset = source.polygonOffset;\n\t\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\n\t\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\n\n\t\t\tthis.dithering = source.dithering;\n\n\t\t\tthis.alphaTest = source.alphaTest;\n\t\t\tthis.premultipliedAlpha = source.premultipliedAlpha;\n\n\t\t\tthis.visible = source.visible;\n\n\t\t\tthis.toneMapped = source.toneMapped;\n\n\t\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperty( Material.prototype, 'needsUpdate', {\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value === true ) { this.version ++; }\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  specularMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *  combine: THREE.Multiply,\n\t *  reflectivity: <float>,\n\t *  refractionRatio: <float>,\n\t *\n\t *  depthTest: <bool>,\n\t *  depthWrite: <bool>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>\n\t * }\n\t */\n\n\tfunction MeshBasicMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshBasicMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // emissive\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshBasicMaterial.prototype = Object.create( Material.prototype );\n\tMeshBasicMaterial.prototype.constructor = MeshBasicMaterial;\n\n\tMeshBasicMaterial.prototype.isMeshBasicMaterial = true;\n\n\tMeshBasicMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _vector$3 = new Vector3();\n\n\tfunction BufferAttribute( array, itemSize, normalized ) {\n\n\t\tif ( Array.isArray( array ) ) {\n\n\t\t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\n\n\t\t}\n\n\t\tthis.name = '';\n\n\t\tthis.array = array;\n\t\tthis.itemSize = itemSize;\n\t\tthis.count = array !== undefined ? array.length / itemSize : 0;\n\t\tthis.normalized = normalized === true;\n\n\t\tthis.usage = StaticDrawUsage;\n\t\tthis.updateRange = { offset: 0, count: - 1 };\n\n\t\tthis.version = 0;\n\n\t}\n\n\tObject.defineProperty( BufferAttribute.prototype, 'needsUpdate', {\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value === true ) { this.version ++; }\n\n\t\t}\n\n\t} );\n\n\tObject.assign( BufferAttribute.prototype, {\n\n\t\tisBufferAttribute: true,\n\n\t\tonUploadCallback: function () {},\n\n\t\tsetUsage: function ( value ) {\n\n\t\t\tthis.usage = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.name = source.name;\n\t\t\tthis.array = new source.array.constructor( source.array );\n\t\t\tthis.itemSize = source.itemSize;\n\t\t\tthis.count = source.count;\n\t\t\tthis.normalized = source.normalized;\n\n\t\t\tthis.usage = source.usage;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyAt: function ( index1, attribute, index2 ) {\n\n\t\t\tindex1 *= this.itemSize;\n\t\t\tindex2 *= attribute.itemSize;\n\n\t\t\tfor ( var i = 0, l = this.itemSize; i < l; i ++ ) {\n\n\t\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyArray: function ( array ) {\n\n\t\t\tthis.array.set( array );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyColorsArray: function ( colors ) {\n\n\t\t\tvar array = this.array, offset = 0;\n\n\t\t\tfor ( var i = 0, l = colors.length; i < l; i ++ ) {\n\n\t\t\t\tvar color = colors[ i ];\n\n\t\t\t\tif ( color === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );\n\t\t\t\t\tcolor = new Color();\n\n\t\t\t\t}\n\n\t\t\t\tarray[ offset ++ ] = color.r;\n\t\t\t\tarray[ offset ++ ] = color.g;\n\t\t\t\tarray[ offset ++ ] = color.b;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyVector2sArray: function ( vectors ) {\n\n\t\t\tvar array = this.array, offset = 0;\n\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\t\tvar vector = vectors[ i ];\n\n\t\t\t\tif ( vector === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );\n\t\t\t\t\tvector = new Vector2();\n\n\t\t\t\t}\n\n\t\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\t\tarray[ offset ++ ] = vector.y;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyVector3sArray: function ( vectors ) {\n\n\t\t\tvar array = this.array, offset = 0;\n\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\t\tvar vector = vectors[ i ];\n\n\t\t\t\tif ( vector === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );\n\t\t\t\t\tvector = new Vector3();\n\n\t\t\t\t}\n\n\t\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\t\tarray[ offset ++ ] = vector.y;\n\t\t\t\tarray[ offset ++ ] = vector.z;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyVector4sArray: function ( vectors ) {\n\n\t\t\tvar array = this.array, offset = 0;\n\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\t\tvar vector = vectors[ i ];\n\n\t\t\t\tif ( vector === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );\n\t\t\t\t\tvector = new Vector4();\n\n\t\t\t\t}\n\n\t\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\t\tarray[ offset ++ ] = vector.y;\n\t\t\t\tarray[ offset ++ ] = vector.z;\n\t\t\t\tarray[ offset ++ ] = vector.w;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyMatrix3: function ( m ) {\n\n\t\t\tfor ( var i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t\t_vector$3.x = this.getX( i );\n\t\t\t\t_vector$3.y = this.getY( i );\n\t\t\t\t_vector$3.z = this.getZ( i );\n\n\t\t\t\t_vector$3.applyMatrix3( m );\n\n\t\t\t\tthis.setXYZ( i, _vector$3.x, _vector$3.y, _vector$3.z );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyMatrix4: function ( m ) {\n\n\t\t\tfor ( var i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t\t_vector$3.x = this.getX( i );\n\t\t\t\t_vector$3.y = this.getY( i );\n\t\t\t\t_vector$3.z = this.getZ( i );\n\n\t\t\t\t_vector$3.applyMatrix4( m );\n\n\t\t\t\tthis.setXYZ( i, _vector$3.x, _vector$3.y, _vector$3.z );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyNormalMatrix: function ( m ) {\n\n\t\t\tfor ( var i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t\t_vector$3.x = this.getX( i );\n\t\t\t\t_vector$3.y = this.getY( i );\n\t\t\t\t_vector$3.z = this.getZ( i );\n\n\t\t\t\t_vector$3.applyNormalMatrix( m );\n\n\t\t\t\tthis.setXYZ( i, _vector$3.x, _vector$3.y, _vector$3.z );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttransformDirection: function ( m ) {\n\n\t\t\tfor ( var i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t\t_vector$3.x = this.getX( i );\n\t\t\t\t_vector$3.y = this.getY( i );\n\t\t\t\t_vector$3.z = this.getZ( i );\n\n\t\t\t\t_vector$3.transformDirection( m );\n\n\t\t\t\tthis.setXYZ( i, _vector$3.x, _vector$3.y, _vector$3.z );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tset: function ( value, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tthis.array.set( value, offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetX: function ( index ) {\n\n\t\t\treturn this.array[ index * this.itemSize ];\n\n\t\t},\n\n\t\tsetX: function ( index, x ) {\n\n\t\t\tthis.array[ index * this.itemSize ] = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetY: function ( index ) {\n\n\t\t\treturn this.array[ index * this.itemSize + 1 ];\n\n\t\t},\n\n\t\tsetY: function ( index, y ) {\n\n\t\t\tthis.array[ index * this.itemSize + 1 ] = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetZ: function ( index ) {\n\n\t\t\treturn this.array[ index * this.itemSize + 2 ];\n\n\t\t},\n\n\t\tsetZ: function ( index, z ) {\n\n\t\t\tthis.array[ index * this.itemSize + 2 ] = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetW: function ( index ) {\n\n\t\t\treturn this.array[ index * this.itemSize + 3 ];\n\n\t\t},\n\n\t\tsetW: function ( index, w ) {\n\n\t\t\tthis.array[ index * this.itemSize + 3 ] = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXY: function ( index, x, y ) {\n\n\t\t\tindex *= this.itemSize;\n\n\t\t\tthis.array[ index + 0 ] = x;\n\t\t\tthis.array[ index + 1 ] = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXYZ: function ( index, x, y, z ) {\n\n\t\t\tindex *= this.itemSize;\n\n\t\t\tthis.array[ index + 0 ] = x;\n\t\t\tthis.array[ index + 1 ] = y;\n\t\t\tthis.array[ index + 2 ] = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXYZW: function ( index, x, y, z, w ) {\n\n\t\t\tindex *= this.itemSize;\n\n\t\t\tthis.array[ index + 0 ] = x;\n\t\t\tthis.array[ index + 1 ] = y;\n\t\t\tthis.array[ index + 2 ] = z;\n\t\t\tthis.array[ index + 3 ] = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tonUpload: function ( callback ) {\n\n\t\t\tthis.onUploadCallback = callback;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.array, this.itemSize ).copy( this );\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\treturn {\n\t\t\t\titemSize: this.itemSize,\n\t\t\t\ttype: this.array.constructor.name,\n\t\t\t\tarray: Array.prototype.slice.call( this.array ),\n\t\t\t\tnormalized: this.normalized\n\t\t\t};\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tfunction Int8BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Int8Array( array ), itemSize, normalized );\n\n\t}\n\n\tInt8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tInt8BufferAttribute.prototype.constructor = Int8BufferAttribute;\n\n\n\tfunction Uint8BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Uint8Array( array ), itemSize, normalized );\n\n\t}\n\n\tUint8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tUint8BufferAttribute.prototype.constructor = Uint8BufferAttribute;\n\n\n\tfunction Uint8ClampedBufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Uint8ClampedArray( array ), itemSize, normalized );\n\n\t}\n\n\tUint8ClampedBufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tUint8ClampedBufferAttribute.prototype.constructor = Uint8ClampedBufferAttribute;\n\n\n\tfunction Int16BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Int16Array( array ), itemSize, normalized );\n\n\t}\n\n\tInt16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tInt16BufferAttribute.prototype.constructor = Int16BufferAttribute;\n\n\n\tfunction Uint16BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Uint16Array( array ), itemSize, normalized );\n\n\t}\n\n\tUint16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tUint16BufferAttribute.prototype.constructor = Uint16BufferAttribute;\n\n\n\tfunction Int32BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Int32Array( array ), itemSize, normalized );\n\n\t}\n\n\tInt32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tInt32BufferAttribute.prototype.constructor = Int32BufferAttribute;\n\n\n\tfunction Uint32BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Uint32Array( array ), itemSize, normalized );\n\n\t}\n\n\tUint32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tUint32BufferAttribute.prototype.constructor = Uint32BufferAttribute;\n\n\n\tfunction Float32BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Float32Array( array ), itemSize, normalized );\n\n\t}\n\n\tFloat32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tFloat32BufferAttribute.prototype.constructor = Float32BufferAttribute;\n\n\n\tfunction Float64BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Float64Array( array ), itemSize, normalized );\n\n\t}\n\n\tFloat64BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tFloat64BufferAttribute.prototype.constructor = Float64BufferAttribute;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction DirectGeometry() {\n\n\t\tthis.vertices = [];\n\t\tthis.normals = [];\n\t\tthis.colors = [];\n\t\tthis.uvs = [];\n\t\tthis.uvs2 = [];\n\n\t\tthis.groups = [];\n\n\t\tthis.morphTargets = {};\n\n\t\tthis.skinWeights = [];\n\t\tthis.skinIndices = [];\n\n\t\t// this.lineDistances = [];\n\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\t// update flags\n\n\t\tthis.verticesNeedUpdate = false;\n\t\tthis.normalsNeedUpdate = false;\n\t\tthis.colorsNeedUpdate = false;\n\t\tthis.uvsNeedUpdate = false;\n\t\tthis.groupsNeedUpdate = false;\n\n\t}\n\n\tObject.assign( DirectGeometry.prototype, {\n\n\t\tcomputeGroups: function ( geometry ) {\n\n\t\t\tvar group;\n\t\t\tvar groups = [];\n\t\t\tvar materialIndex = undefined;\n\n\t\t\tvar faces = geometry.faces;\n\n\t\t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\t// materials\n\n\t\t\t\tif ( face.materialIndex !== materialIndex ) {\n\n\t\t\t\t\tmaterialIndex = face.materialIndex;\n\n\t\t\t\t\tif ( group !== undefined ) {\n\n\t\t\t\t\t\tgroup.count = ( i * 3 ) - group.start;\n\t\t\t\t\t\tgroups.push( group );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgroup = {\n\t\t\t\t\t\tstart: i * 3,\n\t\t\t\t\t\tmaterialIndex: materialIndex\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( group !== undefined ) {\n\n\t\t\t\tgroup.count = ( i * 3 ) - group.start;\n\t\t\t\tgroups.push( group );\n\n\t\t\t}\n\n\t\t\tthis.groups = groups;\n\n\t\t},\n\n\t\tfromGeometry: function ( geometry ) {\n\n\t\t\tvar faces = geometry.faces;\n\t\t\tvar vertices = geometry.vertices;\n\t\t\tvar faceVertexUvs = geometry.faceVertexUvs;\n\n\t\t\tvar hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;\n\t\t\tvar hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;\n\n\t\t\t// morphs\n\n\t\t\tvar morphTargets = geometry.morphTargets;\n\t\t\tvar morphTargetsLength = morphTargets.length;\n\n\t\t\tvar morphTargetsPosition;\n\n\t\t\tif ( morphTargetsLength > 0 ) {\n\n\t\t\t\tmorphTargetsPosition = [];\n\n\t\t\t\tfor ( var i = 0; i < morphTargetsLength; i ++ ) {\n\n\t\t\t\t\tmorphTargetsPosition[ i ] = {\n\t\t\t\t\t\tname: morphTargets[ i ].name,\n\t\t\t\t\t \tdata: []\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphTargets.position = morphTargetsPosition;\n\n\t\t\t}\n\n\t\t\tvar morphNormals = geometry.morphNormals;\n\t\t\tvar morphNormalsLength = morphNormals.length;\n\n\t\t\tvar morphTargetsNormal;\n\n\t\t\tif ( morphNormalsLength > 0 ) {\n\n\t\t\t\tmorphTargetsNormal = [];\n\n\t\t\t\tfor ( var i = 0; i < morphNormalsLength; i ++ ) {\n\n\t\t\t\t\tmorphTargetsNormal[ i ] = {\n\t\t\t\t\t\tname: morphNormals[ i ].name,\n\t\t\t\t\t \tdata: []\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphTargets.normal = morphTargetsNormal;\n\n\t\t\t}\n\n\t\t\t// skins\n\n\t\t\tvar skinIndices = geometry.skinIndices;\n\t\t\tvar skinWeights = geometry.skinWeights;\n\n\t\t\tvar hasSkinIndices = skinIndices.length === vertices.length;\n\t\t\tvar hasSkinWeights = skinWeights.length === vertices.length;\n\n\t\t\t//\n\n\t\t\tif ( vertices.length > 0 && faces.length === 0 ) {\n\n\t\t\t\tconsole.error( 'THREE.DirectGeometry: Faceless geometries are not supported.' );\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\tthis.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );\n\n\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\t\tthis.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar normal = face.normal;\n\n\t\t\t\t\tthis.normals.push( normal, normal, normal );\n\n\t\t\t\t}\n\n\t\t\t\tvar vertexColors = face.vertexColors;\n\n\t\t\t\tif ( vertexColors.length === 3 ) {\n\n\t\t\t\t\tthis.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar color = face.color;\n\n\t\t\t\t\tthis.colors.push( color, color, color );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceVertexUv === true ) {\n\n\t\t\t\t\tvar vertexUvs = faceVertexUvs[ 0 ][ i ];\n\n\t\t\t\t\tif ( vertexUvs !== undefined ) {\n\n\t\t\t\t\t\tthis.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );\n\n\t\t\t\t\t\tthis.uvs.push( new Vector2(), new Vector2(), new Vector2() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceVertexUv2 === true ) {\n\n\t\t\t\t\tvar vertexUvs = faceVertexUvs[ 1 ][ i ];\n\n\t\t\t\t\tif ( vertexUvs !== undefined ) {\n\n\t\t\t\t\t\tthis.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );\n\n\t\t\t\t\t\tthis.uvs2.push( new Vector2(), new Vector2(), new Vector2() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// morphs\n\n\t\t\t\tfor ( var j = 0; j < morphTargetsLength; j ++ ) {\n\n\t\t\t\t\tvar morphTarget = morphTargets[ j ].vertices;\n\n\t\t\t\t\tmorphTargetsPosition[ j ].data.push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var j = 0; j < morphNormalsLength; j ++ ) {\n\n\t\t\t\t\tvar morphNormal = morphNormals[ j ].vertexNormals[ i ];\n\n\t\t\t\t\tmorphTargetsNormal[ j ].data.push( morphNormal.a, morphNormal.b, morphNormal.c );\n\n\t\t\t\t}\n\n\t\t\t\t// skins\n\n\t\t\t\tif ( hasSkinIndices ) {\n\n\t\t\t\t\tthis.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasSkinWeights ) {\n\n\t\t\t\t\tthis.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.computeGroups( geometry );\n\n\t\t\tthis.verticesNeedUpdate = geometry.verticesNeedUpdate;\n\t\t\tthis.normalsNeedUpdate = geometry.normalsNeedUpdate;\n\t\t\tthis.colorsNeedUpdate = geometry.colorsNeedUpdate;\n\t\t\tthis.uvsNeedUpdate = geometry.uvsNeedUpdate;\n\t\t\tthis.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction arrayMax( array ) {\n\n\t\tif ( array.length === 0 ) { return - Infinity; }\n\n\t\tvar max = array[ 0 ];\n\n\t\tfor ( var i = 1, l = array.length; i < l; ++ i ) {\n\n\t\t\tif ( array[ i ] > max ) { max = array[ i ]; }\n\n\t\t}\n\n\t\treturn max;\n\n\t}\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _bufferGeometryId = 1; // BufferGeometry uses odd numbers as Id\n\n\tvar _m1$2 = new Matrix4();\n\tvar _obj = new Object3D();\n\tvar _offset = new Vector3();\n\tvar _box$2 = new Box3();\n\tvar _boxMorphTargets = new Box3();\n\tvar _vector$4 = new Vector3();\n\n\tfunction BufferGeometry() {\n\n\t\tObject.defineProperty( this, 'id', { value: _bufferGeometryId += 2 } );\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'BufferGeometry';\n\n\t\tthis.index = null;\n\t\tthis.attributes = {};\n\n\t\tthis.morphAttributes = {};\n\t\tthis.morphTargetsRelative = false;\n\n\t\tthis.groups = [];\n\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\tthis.drawRange = { start: 0, count: Infinity };\n\n\t\tthis.userData = {};\n\n\t}\n\n\tBufferGeometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: BufferGeometry,\n\n\t\tisBufferGeometry: true,\n\n\t\tgetIndex: function () {\n\n\t\t\treturn this.index;\n\n\t\t},\n\n\t\tsetIndex: function ( index ) {\n\n\t\t\tif ( Array.isArray( index ) ) {\n\n\t\t\t\tthis.index = new ( arrayMax( index ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );\n\n\t\t\t} else {\n\n\t\t\t\tthis.index = index;\n\n\t\t\t}\n\n\t\t},\n\n\t\tgetAttribute: function ( name ) {\n\n\t\t\treturn this.attributes[ name ];\n\n\t\t},\n\n\t\tsetAttribute: function ( name, attribute ) {\n\n\t\t\tthis.attributes[ name ] = attribute;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdeleteAttribute: function ( name ) {\n\n\t\t\tdelete this.attributes[ name ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddGroup: function ( start, count, materialIndex ) {\n\n\t\t\tthis.groups.push( {\n\n\t\t\t\tstart: start,\n\t\t\t\tcount: count,\n\t\t\t\tmaterialIndex: materialIndex !== undefined ? materialIndex : 0\n\n\t\t\t} );\n\n\t\t},\n\n\t\tclearGroups: function () {\n\n\t\t\tthis.groups = [];\n\n\t\t},\n\n\t\tsetDrawRange: function ( start, count ) {\n\n\t\t\tthis.drawRange.start = start;\n\t\t\tthis.drawRange.count = count;\n\n\t\t},\n\n\t\tapplyMatrix4: function ( matrix ) {\n\n\t\t\tvar position = this.attributes.position;\n\n\t\t\tif ( position !== undefined ) {\n\n\t\t\t\tposition.applyMatrix4( matrix );\n\n\t\t\t\tposition.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tvar normal = this.attributes.normal;\n\n\t\t\tif ( normal !== undefined ) {\n\n\t\t\t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t\t\tnormal.applyNormalMatrix( normalMatrix );\n\n\t\t\t\tnormal.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tvar tangent = this.attributes.tangent;\n\n\t\t\tif ( tangent !== undefined ) {\n\n\t\t\t\ttangent.transformDirection( matrix );\n\n\t\t\t\ttangent.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tif ( this.boundingBox !== null ) {\n\n\t\t\t\tthis.computeBoundingBox();\n\n\t\t\t}\n\n\t\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\t\tthis.computeBoundingSphere();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateX: function ( angle ) {\n\n\t\t\t// rotate geometry around world x-axis\n\n\t\t\t_m1$2.makeRotationX( angle );\n\n\t\t\tthis.applyMatrix4( _m1$2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateY: function ( angle ) {\n\n\t\t\t// rotate geometry around world y-axis\n\n\t\t\t_m1$2.makeRotationY( angle );\n\n\t\t\tthis.applyMatrix4( _m1$2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateZ: function ( angle ) {\n\n\t\t\t// rotate geometry around world z-axis\n\n\t\t\t_m1$2.makeRotationZ( angle );\n\n\t\t\tthis.applyMatrix4( _m1$2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( x, y, z ) {\n\n\t\t\t// translate geometry\n\n\t\t\t_m1$2.makeTranslation( x, y, z );\n\n\t\t\tthis.applyMatrix4( _m1$2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tscale: function ( x, y, z ) {\n\n\t\t\t// scale geometry\n\n\t\t\t_m1$2.makeScale( x, y, z );\n\n\t\t\tthis.applyMatrix4( _m1$2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlookAt: function ( vector ) {\n\n\t\t\t_obj.lookAt( vector );\n\n\t\t\t_obj.updateMatrix();\n\n\t\t\tthis.applyMatrix4( _obj.matrix );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcenter: function () {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t\tthis.boundingBox.getCenter( _offset ).negate();\n\n\t\t\tthis.translate( _offset.x, _offset.y, _offset.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromObject: function ( object ) {\n\n\t\t\t// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( object.isPoints || object.isLine ) {\n\n\t\t\t\tvar positions = new Float32BufferAttribute( geometry.vertices.length * 3, 3 );\n\t\t\t\tvar colors = new Float32BufferAttribute( geometry.colors.length * 3, 3 );\n\n\t\t\t\tthis.setAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );\n\t\t\t\tthis.setAttribute( 'color', colors.copyColorsArray( geometry.colors ) );\n\n\t\t\t\tif ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {\n\n\t\t\t\t\tvar lineDistances = new Float32BufferAttribute( geometry.lineDistances.length, 1 );\n\n\t\t\t\t\tthis.setAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isMesh ) {\n\n\t\t\t\tif ( geometry && geometry.isGeometry ) {\n\n\t\t\t\t\tthis.fromGeometry( geometry );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tvar position = [];\n\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tvar point = points[ i ];\n\t\t\t\tposition.push( point.x, point.y, point.z || 0 );\n\n\t\t\t}\n\n\t\t\tthis.setAttribute( 'position', new Float32BufferAttribute( position, 3 ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tupdateFromObject: function ( object ) {\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( object.isMesh ) {\n\n\t\t\t\tvar direct = geometry.__directGeometry;\n\n\t\t\t\tif ( geometry.elementsNeedUpdate === true ) {\n\n\t\t\t\t\tdirect = undefined;\n\t\t\t\t\tgeometry.elementsNeedUpdate = false;\n\n\t\t\t\t}\n\n\t\t\t\tif ( direct === undefined ) {\n\n\t\t\t\t\treturn this.fromGeometry( geometry );\n\n\t\t\t\t}\n\n\t\t\t\tdirect.verticesNeedUpdate = geometry.verticesNeedUpdate;\n\t\t\t\tdirect.normalsNeedUpdate = geometry.normalsNeedUpdate;\n\t\t\t\tdirect.colorsNeedUpdate = geometry.colorsNeedUpdate;\n\t\t\t\tdirect.uvsNeedUpdate = geometry.uvsNeedUpdate;\n\t\t\t\tdirect.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n\t\t\t\tgeometry.verticesNeedUpdate = false;\n\t\t\t\tgeometry.normalsNeedUpdate = false;\n\t\t\t\tgeometry.colorsNeedUpdate = false;\n\t\t\t\tgeometry.uvsNeedUpdate = false;\n\t\t\t\tgeometry.groupsNeedUpdate = false;\n\n\t\t\t\tgeometry = direct;\n\n\t\t\t}\n\n\t\t\tvar attribute;\n\n\t\t\tif ( geometry.verticesNeedUpdate === true ) {\n\n\t\t\t\tattribute = this.attributes.position;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyVector3sArray( geometry.vertices );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.verticesNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.normalsNeedUpdate === true ) {\n\n\t\t\t\tattribute = this.attributes.normal;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyVector3sArray( geometry.normals );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.normalsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.colorsNeedUpdate === true ) {\n\n\t\t\t\tattribute = this.attributes.color;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyColorsArray( geometry.colors );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.colorsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.uvsNeedUpdate ) {\n\n\t\t\t\tattribute = this.attributes.uv;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyVector2sArray( geometry.uvs );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.uvsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.lineDistancesNeedUpdate ) {\n\n\t\t\t\tattribute = this.attributes.lineDistance;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyArray( geometry.lineDistances );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.lineDistancesNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.groupsNeedUpdate ) {\n\n\t\t\t\tgeometry.computeGroups( object.geometry );\n\t\t\t\tthis.groups = geometry.groups;\n\n\t\t\t\tgeometry.groupsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tfromGeometry: function ( geometry ) {\n\n\t\t\tgeometry.__directGeometry = new DirectGeometry().fromGeometry( geometry );\n\n\t\t\treturn this.fromDirectGeometry( geometry.__directGeometry );\n\n\t\t},\n\n\t\tfromDirectGeometry: function ( geometry ) {\n\n\t\t\tvar positions = new Float32Array( geometry.vertices.length * 3 );\n\t\t\tthis.setAttribute( 'position', new BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );\n\n\t\t\tif ( geometry.normals.length > 0 ) {\n\n\t\t\t\tvar normals = new Float32Array( geometry.normals.length * 3 );\n\t\t\t\tthis.setAttribute( 'normal', new BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.colors.length > 0 ) {\n\n\t\t\t\tvar colors = new Float32Array( geometry.colors.length * 3 );\n\t\t\t\tthis.setAttribute( 'color', new BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.uvs.length > 0 ) {\n\n\t\t\t\tvar uvs = new Float32Array( geometry.uvs.length * 2 );\n\t\t\t\tthis.setAttribute( 'uv', new BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.uvs2.length > 0 ) {\n\n\t\t\t\tvar uvs2 = new Float32Array( geometry.uvs2.length * 2 );\n\t\t\t\tthis.setAttribute( 'uv2', new BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );\n\n\t\t\t}\n\n\t\t\t// groups\n\n\t\t\tthis.groups = geometry.groups;\n\n\t\t\t// morphs\n\n\t\t\tfor ( var name in geometry.morphTargets ) {\n\n\t\t\t\tvar array = [];\n\t\t\t\tvar morphTargets = geometry.morphTargets[ name ];\n\n\t\t\t\tfor ( var i = 0, l = morphTargets.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar morphTarget = morphTargets[ i ];\n\n\t\t\t\t\tvar attribute = new Float32BufferAttribute( morphTarget.data.length * 3, 3 );\n\t\t\t\t\tattribute.name = morphTarget.name;\n\n\t\t\t\t\tarray.push( attribute.copyVector3sArray( morphTarget.data ) );\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphAttributes[ name ] = array;\n\n\t\t\t}\n\n\t\t\t// skinning\n\n\t\t\tif ( geometry.skinIndices.length > 0 ) {\n\n\t\t\t\tvar skinIndices = new Float32BufferAttribute( geometry.skinIndices.length * 4, 4 );\n\t\t\t\tthis.setAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.skinWeights.length > 0 ) {\n\n\t\t\t\tvar skinWeights = new Float32BufferAttribute( geometry.skinWeights.length * 4, 4 );\n\t\t\t\tthis.setAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcomputeBoundingBox: function () {\n\n\t\t\tif ( this.boundingBox === null ) {\n\n\t\t\t\tthis.boundingBox = new Box3();\n\n\t\t\t}\n\n\t\t\tvar position = this.attributes.position;\n\t\t\tvar morphAttributesPosition = this.morphAttributes.position;\n\n\t\t\tif ( position !== undefined ) {\n\n\t\t\t\tthis.boundingBox.setFromBufferAttribute( position );\n\n\t\t\t\t// process morph attributes if present\n\n\t\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\t\tfor ( var i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar morphAttribute = morphAttributesPosition[ i ];\n\t\t\t\t\t\t_box$2.setFromBufferAttribute( morphAttribute );\n\n\t\t\t\t\t\tif ( this.morphTargetsRelative ) {\n\n\t\t\t\t\t\t\t_vector$4.addVectors( this.boundingBox.min, _box$2.min );\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint( _vector$4 );\n\n\t\t\t\t\t\t\t_vector$4.addVectors( this.boundingBox.max, _box$2.max );\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint( _vector$4 );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint( _box$2.min );\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint( _box$2.max );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tthis.boundingBox.makeEmpty();\n\n\t\t\t}\n\n\t\t\tif ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeBoundingSphere: function () {\n\n\t\t\tif ( this.boundingSphere === null ) {\n\n\t\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t\t}\n\n\t\t\tvar position = this.attributes.position;\n\t\t\tvar morphAttributesPosition = this.morphAttributes.position;\n\n\t\t\tif ( position ) {\n\n\t\t\t\t// first, find the center of the bounding sphere\n\n\t\t\t\tvar center = this.boundingSphere.center;\n\n\t\t\t\t_box$2.setFromBufferAttribute( position );\n\n\t\t\t\t// process morph attributes if present\n\n\t\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\t\tfor ( var i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar morphAttribute = morphAttributesPosition[ i ];\n\t\t\t\t\t\t_boxMorphTargets.setFromBufferAttribute( morphAttribute );\n\n\t\t\t\t\t\tif ( this.morphTargetsRelative ) {\n\n\t\t\t\t\t\t\t_vector$4.addVectors( _box$2.min, _boxMorphTargets.min );\n\t\t\t\t\t\t\t_box$2.expandByPoint( _vector$4 );\n\n\t\t\t\t\t\t\t_vector$4.addVectors( _box$2.max, _boxMorphTargets.max );\n\t\t\t\t\t\t\t_box$2.expandByPoint( _vector$4 );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t_box$2.expandByPoint( _boxMorphTargets.min );\n\t\t\t\t\t\t\t_box$2.expandByPoint( _boxMorphTargets.max );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t_box$2.getCenter( center );\n\n\t\t\t\t// second, try to find a boundingSphere with a radius smaller than the\n\t\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\n\t\t\t\tvar maxRadiusSq = 0;\n\n\t\t\t\tfor ( var i = 0, il = position.count; i < il; i ++ ) {\n\n\t\t\t\t\t_vector$4.fromBufferAttribute( position, i );\n\n\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$4 ) );\n\n\t\t\t\t}\n\n\t\t\t\t// process morph attributes if present\n\n\t\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\t\tfor ( var i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar morphAttribute = morphAttributesPosition[ i ];\n\t\t\t\t\t\tvar morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t\t\t\t\tfor ( var j = 0, jl = morphAttribute.count; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\t_vector$4.fromBufferAttribute( morphAttribute, j );\n\n\t\t\t\t\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\t\t\t\t\t_offset.fromBufferAttribute( position, j );\n\t\t\t\t\t\t\t\t_vector$4.add( _offset );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$4 ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\n\n\t\t\t\tif ( isNaN( this.boundingSphere.radius ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeFaceNormals: function () {\n\n\t\t\t// backwards compatibility\n\n\t\t},\n\n\t\tcomputeVertexNormals: function () {\n\n\t\t\tvar index = this.index;\n\t\t\tvar attributes = this.attributes;\n\n\t\t\tif ( attributes.position ) {\n\n\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\tif ( attributes.normal === undefined ) {\n\n\t\t\t\t\tthis.setAttribute( 'normal', new BufferAttribute( new Float32Array( positions.length ), 3 ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// reset existing normals to zero\n\n\t\t\t\t\tvar array = attributes.normal.array;\n\n\t\t\t\t\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tarray[ i ] = 0;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar normals = attributes.normal.array;\n\n\t\t\t\tvar vA, vB, vC;\n\t\t\t\tvar pA = new Vector3(), pB = new Vector3(), pC = new Vector3();\n\t\t\t\tvar cb = new Vector3(), ab = new Vector3();\n\n\t\t\t\t// indexed elements\n\n\t\t\t\tif ( index ) {\n\n\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\tfor ( var i = 0, il = index.count; i < il; i += 3 ) {\n\n\t\t\t\t\t\tvA = indices[ i + 0 ] * 3;\n\t\t\t\t\t\tvB = indices[ i + 1 ] * 3;\n\t\t\t\t\t\tvC = indices[ i + 2 ] * 3;\n\n\t\t\t\t\t\tpA.fromArray( positions, vA );\n\t\t\t\t\t\tpB.fromArray( positions, vB );\n\t\t\t\t\t\tpC.fromArray( positions, vC );\n\n\t\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\t\tnormals[ vA ] += cb.x;\n\t\t\t\t\t\tnormals[ vA + 1 ] += cb.y;\n\t\t\t\t\t\tnormals[ vA + 2 ] += cb.z;\n\n\t\t\t\t\t\tnormals[ vB ] += cb.x;\n\t\t\t\t\t\tnormals[ vB + 1 ] += cb.y;\n\t\t\t\t\t\tnormals[ vB + 2 ] += cb.z;\n\n\t\t\t\t\t\tnormals[ vC ] += cb.x;\n\t\t\t\t\t\tnormals[ vC + 1 ] += cb.y;\n\t\t\t\t\t\tnormals[ vC + 2 ] += cb.z;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// non-indexed elements (unconnected triangle soup)\n\n\t\t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 9 ) {\n\n\t\t\t\t\t\tpA.fromArray( positions, i );\n\t\t\t\t\t\tpB.fromArray( positions, i + 3 );\n\t\t\t\t\t\tpC.fromArray( positions, i + 6 );\n\n\t\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\t\tnormals[ i ] = cb.x;\n\t\t\t\t\t\tnormals[ i + 1 ] = cb.y;\n\t\t\t\t\t\tnormals[ i + 2 ] = cb.z;\n\n\t\t\t\t\t\tnormals[ i + 3 ] = cb.x;\n\t\t\t\t\t\tnormals[ i + 4 ] = cb.y;\n\t\t\t\t\t\tnormals[ i + 5 ] = cb.z;\n\n\t\t\t\t\t\tnormals[ i + 6 ] = cb.x;\n\t\t\t\t\t\tnormals[ i + 7 ] = cb.y;\n\t\t\t\t\t\tnormals[ i + 8 ] = cb.z;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.normalizeNormals();\n\n\t\t\t\tattributes.normal.needsUpdate = true;\n\n\t\t\t}\n\n\t\t},\n\n\t\tmerge: function ( geometry, offset ) {\n\n\t\t\tif ( ! ( geometry && geometry.isBufferGeometry ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( offset === undefined ) {\n\n\t\t\t\toffset = 0;\n\n\t\t\t\tconsole.warn(\n\t\t\t\t\t'THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. '\n\t\t\t\t\t+ 'Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.'\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tvar attributes = this.attributes;\n\n\t\t\tfor ( var key in attributes ) {\n\n\t\t\t\tif ( geometry.attributes[ key ] === undefined ) { continue; }\n\n\t\t\t\tvar attribute1 = attributes[ key ];\n\t\t\t\tvar attributeArray1 = attribute1.array;\n\n\t\t\t\tvar attribute2 = geometry.attributes[ key ];\n\t\t\t\tvar attributeArray2 = attribute2.array;\n\n\t\t\t\tvar attributeOffset = attribute2.itemSize * offset;\n\t\t\t\tvar length = Math.min( attributeArray2.length, attributeArray1.length - attributeOffset );\n\n\t\t\t\tfor ( var i = 0, j = attributeOffset; i < length; i ++, j ++ ) {\n\n\t\t\t\t\tattributeArray1[ j ] = attributeArray2[ i ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnormalizeNormals: function () {\n\n\t\t\tvar normals = this.attributes.normal;\n\n\t\t\tfor ( var i = 0, il = normals.count; i < il; i ++ ) {\n\n\t\t\t\t_vector$4.x = normals.getX( i );\n\t\t\t\t_vector$4.y = normals.getY( i );\n\t\t\t\t_vector$4.z = normals.getZ( i );\n\n\t\t\t\t_vector$4.normalize();\n\n\t\t\t\tnormals.setXYZ( i, _vector$4.x, _vector$4.y, _vector$4.z );\n\n\t\t\t}\n\n\t\t},\n\n\t\ttoNonIndexed: function () {\n\n\t\t\tfunction convertBufferAttribute( attribute, indices ) {\n\n\t\t\t\tvar array = attribute.array;\n\t\t\t\tvar itemSize = attribute.itemSize;\n\n\t\t\t\tvar array2 = new array.constructor( indices.length * itemSize );\n\n\t\t\t\tvar index = 0, index2 = 0;\n\n\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\n\n\t\t\t\t\tindex = indices[ i ] * itemSize;\n\n\t\t\t\t\tfor ( var j = 0; j < itemSize; j ++ ) {\n\n\t\t\t\t\t\tarray2[ index2 ++ ] = array[ index ++ ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn new BufferAttribute( array2, itemSize );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( this.index === null ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar geometry2 = new BufferGeometry();\n\n\t\t\tvar indices = this.index.array;\n\t\t\tvar attributes = this.attributes;\n\n\t\t\t// attributes\n\n\t\t\tfor ( var name in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ name ];\n\n\t\t\t\tvar newAttribute = convertBufferAttribute( attribute, indices );\n\n\t\t\t\tgeometry2.setAttribute( name, newAttribute );\n\n\t\t\t}\n\n\t\t\t// morph attributes\n\n\t\t\tvar morphAttributes = this.morphAttributes;\n\n\t\t\tfor ( name in morphAttributes ) {\n\n\t\t\t\tvar morphArray = [];\n\t\t\t\tvar morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\t\tfor ( var i = 0, il = morphAttribute.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar attribute = morphAttribute[ i ];\n\n\t\t\t\t\tvar newAttribute = convertBufferAttribute( attribute, indices );\n\n\t\t\t\t\tmorphArray.push( newAttribute );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry2.morphAttributes[ name ] = morphArray;\n\n\t\t\t}\n\n\t\t\tgeometry2.morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t\t// groups\n\n\t\t\tvar groups = this.groups;\n\n\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\tvar group = groups[ i ];\n\t\t\t\tgeometry2.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t\t}\n\n\t\t\treturn geometry2;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'BufferGeometry',\n\t\t\t\t\tgenerator: 'BufferGeometry.toJSON'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// standard BufferGeometry serialization\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\t\t\tif ( this.name !== '' ) { data.name = this.name; }\n\t\t\tif ( Object.keys( this.userData ).length > 0 ) { data.userData = this.userData; }\n\n\t\t\tif ( this.parameters !== undefined ) {\n\n\t\t\t\tvar parameters = this.parameters;\n\n\t\t\t\tfor ( var key in parameters ) {\n\n\t\t\t\t\tif ( parameters[ key ] !== undefined ) { data[ key ] = parameters[ key ]; }\n\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\n\t\t\t}\n\n\t\t\tdata.data = { attributes: {} };\n\n\t\t\tvar index = this.index;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tdata.data.index = {\n\t\t\t\t\ttype: index.array.constructor.name,\n\t\t\t\t\tarray: Array.prototype.slice.call( index.array )\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tvar attributes = this.attributes;\n\n\t\t\tfor ( var key in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ key ];\n\n\t\t\t\tvar attributeData = attribute.toJSON();\n\n\t\t\t\tif ( attribute.name !== '' ) { attributeData.name = attribute.name; }\n\n\t\t\t\tdata.data.attributes[ key ] = attributeData;\n\n\t\t\t}\n\n\t\t\tvar morphAttributes = {};\n\t\t\tvar hasMorphAttributes = false;\n\n\t\t\tfor ( var key in this.morphAttributes ) {\n\n\t\t\t\tvar attributeArray = this.morphAttributes[ key ];\n\n\t\t\t\tvar array = [];\n\n\t\t\t\tfor ( var i = 0, il = attributeArray.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar attribute = attributeArray[ i ];\n\n\t\t\t\t\tvar attributeData = attribute.toJSON();\n\n\t\t\t\t\tif ( attribute.name !== '' ) { attributeData.name = attribute.name; }\n\n\t\t\t\t\tarray.push( attributeData );\n\n\t\t\t\t}\n\n\t\t\t\tif ( array.length > 0 ) {\n\n\t\t\t\t\tmorphAttributes[ key ] = array;\n\n\t\t\t\t\thasMorphAttributes = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( hasMorphAttributes ) {\n\n\t\t\t\tdata.data.morphAttributes = morphAttributes;\n\t\t\t\tdata.data.morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t\t}\n\n\t\t\tvar groups = this.groups;\n\n\t\t\tif ( groups.length > 0 ) {\n\n\t\t\t\tdata.data.groups = JSON.parse( JSON.stringify( groups ) );\n\n\t\t\t}\n\n\t\t\tvar boundingSphere = this.boundingSphere;\n\n\t\t\tif ( boundingSphere !== null ) {\n\n\t\t\t\tdata.data.boundingSphere = {\n\t\t\t\t\tcenter: boundingSphere.center.toArray(),\n\t\t\t\t\tradius: boundingSphere.radius\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\t/*\n\t\t\t // Handle primitives\n\n\t\t\t var parameters = this.parameters;\n\n\t\t\t if ( parameters !== undefined ) {\n\n\t\t\t var values = [];\n\n\t\t\t for ( var key in parameters ) {\n\n\t\t\t values.push( parameters[ key ] );\n\n\t\t\t }\n\n\t\t\t var geometry = Object.create( this.constructor.prototype );\n\t\t\t this.constructor.apply( geometry, values );\n\t\t\t return geometry;\n\n\t\t\t }\n\n\t\t\t return new this.constructor().copy( this );\n\t\t\t */\n\n\t\t\treturn new BufferGeometry().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tvar name, i, l;\n\n\t\t\t// reset\n\n\t\t\tthis.index = null;\n\t\t\tthis.attributes = {};\n\t\t\tthis.morphAttributes = {};\n\t\t\tthis.groups = [];\n\t\t\tthis.boundingBox = null;\n\t\t\tthis.boundingSphere = null;\n\n\t\t\t// name\n\n\t\t\tthis.name = source.name;\n\n\t\t\t// index\n\n\t\t\tvar index = source.index;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tthis.setIndex( index.clone() );\n\n\t\t\t}\n\n\t\t\t// attributes\n\n\t\t\tvar attributes = source.attributes;\n\n\t\t\tfor ( name in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ name ];\n\t\t\t\tthis.setAttribute( name, attribute.clone() );\n\n\t\t\t}\n\n\t\t\t// morph attributes\n\n\t\t\tvar morphAttributes = source.morphAttributes;\n\n\t\t\tfor ( name in morphAttributes ) {\n\n\t\t\t\tvar array = [];\n\t\t\t\tvar morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\t\tfor ( i = 0, l = morphAttribute.length; i < l; i ++ ) {\n\n\t\t\t\t\tarray.push( morphAttribute[ i ].clone() );\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphAttributes[ name ] = array;\n\n\t\t\t}\n\n\t\t\tthis.morphTargetsRelative = source.morphTargetsRelative;\n\n\t\t\t// groups\n\n\t\t\tvar groups = source.groups;\n\n\t\t\tfor ( i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\tvar group = groups[ i ];\n\t\t\t\tthis.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t\t}\n\n\t\t\t// bounding box\n\n\t\t\tvar boundingBox = source.boundingBox;\n\n\t\t\tif ( boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = boundingBox.clone();\n\n\t\t\t}\n\n\t\t\t// bounding sphere\n\n\t\t\tvar boundingSphere = source.boundingSphere;\n\n\t\t\tif ( boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\t// draw range\n\n\t\t\tthis.drawRange.start = source.drawRange.start;\n\t\t\tthis.drawRange.count = source.drawRange.count;\n\n\t\t\t// user data\n\n\t\t\tthis.userData = source.userData;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author jonobr1 / http://jonobr1.com/\n\t */\n\n\tvar _inverseMatrix = new Matrix4();\n\tvar _ray = new Ray();\n\tvar _sphere = new Sphere();\n\n\tvar _vA = new Vector3();\n\tvar _vB = new Vector3();\n\tvar _vC = new Vector3();\n\n\tvar _tempA = new Vector3();\n\tvar _tempB = new Vector3();\n\tvar _tempC = new Vector3();\n\n\tvar _morphA = new Vector3();\n\tvar _morphB = new Vector3();\n\tvar _morphC = new Vector3();\n\n\tvar _uvA = new Vector2();\n\tvar _uvB = new Vector2();\n\tvar _uvC = new Vector2();\n\n\tvar _intersectionPoint = new Vector3();\n\tvar _intersectionPointWorld = new Vector3();\n\n\tfunction Mesh( geometry, material ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Mesh';\n\n\t\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\t\tthis.material = material !== undefined ? material : new MeshBasicMaterial();\n\n\t\tthis.updateMorphTargets();\n\n\t}\n\n\tMesh.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Mesh,\n\n\t\tisMesh: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source );\n\n\t\t\tif ( source.morphTargetInfluences !== undefined ) {\n\n\t\t\t\tthis.morphTargetInfluences = source.morphTargetInfluences.slice();\n\n\t\t\t}\n\n\t\t\tif ( source.morphTargetDictionary !== undefined ) {\n\n\t\t\t\tthis.morphTargetDictionary = Object.assign( {}, source.morphTargetDictionary );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tupdateMorphTargets: function () {\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar m, ml, name;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tvar morphAttributes = geometry.morphAttributes;\n\t\t\t\tvar keys = Object.keys( morphAttributes );\n\n\t\t\t\tif ( keys.length > 0 ) {\n\n\t\t\t\t\tvar morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\t\tfor ( m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\t\tname = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar morphTargets = geometry.morphTargets;\n\n\t\t\t\tif ( morphTargets !== undefined && morphTargets.length > 0 ) {\n\n\t\t\t\t\tconsole.error( 'THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\traycast: function ( raycaster, intersects ) {\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar material = this.material;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\n\t\t\tif ( material === undefined ) { return; }\n\n\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\tif ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }\n\n\t\t\t_sphere.copy( geometry.boundingSphere );\n\t\t\t_sphere.applyMatrix4( matrixWorld );\n\n\t\t\tif ( raycaster.ray.intersectsSphere( _sphere ) === false ) { return; }\n\n\t\t\t//\n\n\t\t\t_inverseMatrix.getInverse( matrixWorld );\n\t\t\t_ray.copy( raycaster.ray ).applyMatrix4( _inverseMatrix );\n\n\t\t\t// Check boundingBox before continuing\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tif ( _ray.intersectsBox( geometry.boundingBox ) === false ) { return; }\n\n\t\t\t}\n\n\t\t\tvar intersection;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tvar a, b, c;\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar position = geometry.attributes.position;\n\t\t\t\tvar morphPosition = geometry.morphAttributes.position;\n\t\t\t\tvar morphTargetsRelative = geometry.morphTargetsRelative;\n\t\t\t\tvar uv = geometry.attributes.uv;\n\t\t\t\tvar uv2 = geometry.attributes.uv2;\n\t\t\t\tvar groups = geometry.groups;\n\t\t\t\tvar drawRange = geometry.drawRange;\n\t\t\t\tvar i, j, il, jl;\n\t\t\t\tvar group, groupMaterial;\n\t\t\t\tvar start, end;\n\n\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\t// indexed buffer geometry\n\n\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\tfor ( i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\tgroup = groups[ i ];\n\t\t\t\t\t\t\tgroupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\t\tstart = Math.max( group.start, drawRange.start );\n\t\t\t\t\t\t\tend = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\t\t\tfor ( j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\t\t\t\ta = index.getX( j );\n\t\t\t\t\t\t\t\tb = index.getX( j + 1 );\n\t\t\t\t\t\t\t\tc = index.getX( j + 2 );\n\n\t\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n\n\t\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in indexed buffer semantics\n\t\t\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tstart = Math.max( 0, drawRange.start );\n\t\t\t\t\t\tend = Math.min( index.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\t\tfor ( i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\t\t\t\ta = index.getX( i );\n\t\t\t\t\t\t\tb = index.getX( i + 1 );\n\t\t\t\t\t\t\tc = index.getX( i + 2 );\n\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n\n\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in indexed buffer semantics\n\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( position !== undefined ) {\n\n\t\t\t\t\t// non-indexed buffer geometry\n\n\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\tfor ( i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\tgroup = groups[ i ];\n\t\t\t\t\t\t\tgroupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\t\tstart = Math.max( group.start, drawRange.start );\n\t\t\t\t\t\t\tend = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\t\t\tfor ( j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\t\t\t\ta = j;\n\t\t\t\t\t\t\t\tb = j + 1;\n\t\t\t\t\t\t\t\tc = j + 2;\n\n\t\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n\n\t\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in non-indexed buffer semantics\n\t\t\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tstart = Math.max( 0, drawRange.start );\n\t\t\t\t\t\tend = Math.min( position.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\t\tfor ( i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\t\t\t\ta = i;\n\t\t\t\t\t\t\tb = i + 1;\n\t\t\t\t\t\t\tc = i + 2;\n\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n\n\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in non-indexed buffer semantics\n\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\tvar fvA, fvB, fvC;\n\t\t\t\tvar isMultiMaterial = Array.isArray( material );\n\n\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\tvar faces = geometry.faces;\n\t\t\t\tvar uvs;\n\n\t\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\n\t\t\t\tif ( faceVertexUvs.length > 0 ) { uvs = faceVertexUvs; }\n\n\t\t\t\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tvar face = faces[ f ];\n\t\t\t\t\tvar faceMaterial = isMultiMaterial ? material[ face.materialIndex ] : material;\n\n\t\t\t\t\tif ( faceMaterial === undefined ) { continue; }\n\n\t\t\t\t\tfvA = vertices[ face.a ];\n\t\t\t\t\tfvB = vertices[ face.b ];\n\t\t\t\t\tfvC = vertices[ face.c ];\n\n\t\t\t\t\tintersection = checkIntersection( this, faceMaterial, raycaster, _ray, fvA, fvB, fvC, _intersectionPoint );\n\n\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\tif ( uvs && uvs[ f ] ) {\n\n\t\t\t\t\t\t\tvar uvs_f = uvs[ f ];\n\t\t\t\t\t\t\t_uvA.copy( uvs_f[ 0 ] );\n\t\t\t\t\t\t\t_uvB.copy( uvs_f[ 1 ] );\n\t\t\t\t\t\t\t_uvC.copy( uvs_f[ 2 ] );\n\n\t\t\t\t\t\t\tintersection.uv = Triangle.getUV( _intersectionPoint, fvA, fvB, fvC, _uvA, _uvB, _uvC, new Vector2() );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tintersection.face = face;\n\t\t\t\t\t\tintersection.faceIndex = f;\n\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t\t}\n\n\t} );\n\n\tfunction checkIntersection( object, material, raycaster, ray, pA, pB, pC, point ) {\n\n\t\tvar intersect;\n\n\t\tif ( material.side === BackSide ) {\n\n\t\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\n\n\t\t} else {\n\n\t\t\tintersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );\n\n\t\t}\n\n\t\tif ( intersect === null ) { return null; }\n\n\t\t_intersectionPointWorld.copy( point );\n\t\t_intersectionPointWorld.applyMatrix4( object.matrixWorld );\n\n\t\tvar distance = raycaster.ray.origin.distanceTo( _intersectionPointWorld );\n\n\t\tif ( distance < raycaster.near || distance > raycaster.far ) { return null; }\n\n\t\treturn {\n\t\t\tdistance: distance,\n\t\t\tpoint: _intersectionPointWorld.clone(),\n\t\t\tobject: object\n\t\t};\n\n\t}\n\n\tfunction checkBufferGeometryIntersection( object, material, raycaster, ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c ) {\n\n\t\t_vA.fromBufferAttribute( position, a );\n\t\t_vB.fromBufferAttribute( position, b );\n\t\t_vC.fromBufferAttribute( position, c );\n\n\t\tvar morphInfluences = object.morphTargetInfluences;\n\n\t\tif ( material.morphTargets && morphPosition && morphInfluences ) {\n\n\t\t\t_morphA.set( 0, 0, 0 );\n\t\t\t_morphB.set( 0, 0, 0 );\n\t\t\t_morphC.set( 0, 0, 0 );\n\n\t\t\tfor ( var i = 0, il = morphPosition.length; i < il; i ++ ) {\n\n\t\t\t\tvar influence = morphInfluences[ i ];\n\t\t\t\tvar morphAttribute = morphPosition[ i ];\n\n\t\t\t\tif ( influence === 0 ) { continue; }\n\n\t\t\t\t_tempA.fromBufferAttribute( morphAttribute, a );\n\t\t\t\t_tempB.fromBufferAttribute( morphAttribute, b );\n\t\t\t\t_tempC.fromBufferAttribute( morphAttribute, c );\n\n\t\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\t\t_morphA.addScaledVector( _tempA, influence );\n\t\t\t\t\t_morphB.addScaledVector( _tempB, influence );\n\t\t\t\t\t_morphC.addScaledVector( _tempC, influence );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_morphA.addScaledVector( _tempA.sub( _vA ), influence );\n\t\t\t\t\t_morphB.addScaledVector( _tempB.sub( _vB ), influence );\n\t\t\t\t\t_morphC.addScaledVector( _tempC.sub( _vC ), influence );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_vA.add( _morphA );\n\t\t\t_vB.add( _morphB );\n\t\t\t_vC.add( _morphC );\n\n\t\t}\n\n\t\tvar intersection = checkIntersection( object, material, raycaster, ray, _vA, _vB, _vC, _intersectionPoint );\n\n\t\tif ( intersection ) {\n\n\t\t\tif ( uv ) {\n\n\t\t\t\t_uvA.fromBufferAttribute( uv, a );\n\t\t\t\t_uvB.fromBufferAttribute( uv, b );\n\t\t\t\t_uvC.fromBufferAttribute( uv, c );\n\n\t\t\t\tintersection.uv = Triangle.getUV( _intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() );\n\n\t\t\t}\n\n\t\t\tif ( uv2 ) {\n\n\t\t\t\t_uvA.fromBufferAttribute( uv2, a );\n\t\t\t\t_uvB.fromBufferAttribute( uv2, b );\n\t\t\t\t_uvC.fromBufferAttribute( uv2, c );\n\n\t\t\t\tintersection.uv2 = Triangle.getUV( _intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() );\n\n\t\t\t}\n\n\t\t\tvar face = new Face3( a, b, c );\n\t\t\tTriangle.getNormal( _vA, _vB, _vC, face.normal );\n\n\t\t\tintersection.face = face;\n\n\t\t}\n\n\t\treturn intersection;\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author kile / http://kile.stravaganza.org/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * @author bhouston / http://clara.io\n\t */\n\n\tvar _geometryId = 0; // Geometry uses even numbers as Id\n\tvar _m1$3 = new Matrix4();\n\tvar _obj$1 = new Object3D();\n\tvar _offset$1 = new Vector3();\n\n\tfunction Geometry() {\n\n\t\tObject.defineProperty( this, 'id', { value: _geometryId += 2 } );\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Geometry';\n\n\t\tthis.vertices = [];\n\t\tthis.colors = [];\n\t\tthis.faces = [];\n\t\tthis.faceVertexUvs = [[]];\n\n\t\tthis.morphTargets = [];\n\t\tthis.morphNormals = [];\n\n\t\tthis.skinWeights = [];\n\t\tthis.skinIndices = [];\n\n\t\tthis.lineDistances = [];\n\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\t// update flags\n\n\t\tthis.elementsNeedUpdate = false;\n\t\tthis.verticesNeedUpdate = false;\n\t\tthis.uvsNeedUpdate = false;\n\t\tthis.normalsNeedUpdate = false;\n\t\tthis.colorsNeedUpdate = false;\n\t\tthis.lineDistancesNeedUpdate = false;\n\t\tthis.groupsNeedUpdate = false;\n\n\t}\n\n\tGeometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: Geometry,\n\n\t\tisGeometry: true,\n\n\t\tapplyMatrix4: function ( matrix ) {\n\n\t\t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t\tfor ( var i = 0, il = this.vertices.length; i < il; i ++ ) {\n\n\t\t\t\tvar vertex = this.vertices[ i ];\n\t\t\t\tvertex.applyMatrix4( matrix );\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0, il = this.faces.length; i < il; i ++ ) {\n\n\t\t\t\tvar face = this.faces[ i ];\n\t\t\t\tface.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\tface.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.boundingBox !== null ) {\n\n\t\t\t\tthis.computeBoundingBox();\n\n\t\t\t}\n\n\t\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\t\tthis.computeBoundingSphere();\n\n\t\t\t}\n\n\t\t\tthis.verticesNeedUpdate = true;\n\t\t\tthis.normalsNeedUpdate = true;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateX: function ( angle ) {\n\n\t\t\t// rotate geometry around world x-axis\n\n\t\t\t_m1$3.makeRotationX( angle );\n\n\t\t\tthis.applyMatrix4( _m1$3 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateY: function ( angle ) {\n\n\t\t\t// rotate geometry around world y-axis\n\n\t\t\t_m1$3.makeRotationY( angle );\n\n\t\t\tthis.applyMatrix4( _m1$3 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateZ: function ( angle ) {\n\n\t\t\t// rotate geometry around world z-axis\n\n\t\t\t_m1$3.makeRotationZ( angle );\n\n\t\t\tthis.applyMatrix4( _m1$3 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( x, y, z ) {\n\n\t\t\t// translate geometry\n\n\t\t\t_m1$3.makeTranslation( x, y, z );\n\n\t\t\tthis.applyMatrix4( _m1$3 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tscale: function ( x, y, z ) {\n\n\t\t\t// scale geometry\n\n\t\t\t_m1$3.makeScale( x, y, z );\n\n\t\t\tthis.applyMatrix4( _m1$3 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlookAt: function ( vector ) {\n\n\t\t\t_obj$1.lookAt( vector );\n\n\t\t\t_obj$1.updateMatrix();\n\n\t\t\tthis.applyMatrix4( _obj$1.matrix );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tfromBufferGeometry: function ( geometry ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar indices = geometry.index !== null ? geometry.index.array : undefined;\n\t\t\tvar attributes = geometry.attributes;\n\n\t\t\tif ( attributes.position === undefined ) {\n\n\t\t\t\tconsole.error( 'THREE.Geometry.fromBufferGeometry(): Position attribute required for conversion.' );\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar positions = attributes.position.array;\n\t\t\tvar normals = attributes.normal !== undefined ? attributes.normal.array : undefined;\n\t\t\tvar colors = attributes.color !== undefined ? attributes.color.array : undefined;\n\t\t\tvar uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;\n\t\t\tvar uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;\n\n\t\t\tif ( uvs2 !== undefined ) { this.faceVertexUvs[ 1 ] = []; }\n\n\t\t\tfor ( var i = 0; i < positions.length; i += 3 ) {\n\n\t\t\t\tscope.vertices.push( new Vector3().fromArray( positions, i ) );\n\n\t\t\t\tif ( colors !== undefined ) {\n\n\t\t\t\t\tscope.colors.push( new Color().fromArray( colors, i ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction addFace( a, b, c, materialIndex ) {\n\n\t\t\t\tvar vertexColors = ( colors === undefined ) ? [] : [\n\t\t\t\t\tscope.colors[ a ].clone(),\n\t\t\t\t\tscope.colors[ b ].clone(),\n\t\t\t\t\tscope.colors[ c ].clone() ];\n\n\t\t\t\tvar vertexNormals = ( normals === undefined ) ? [] : [\n\t\t\t\t\tnew Vector3().fromArray( normals, a * 3 ),\n\t\t\t\t\tnew Vector3().fromArray( normals, b * 3 ),\n\t\t\t\t\tnew Vector3().fromArray( normals, c * 3 )\n\t\t\t\t];\n\n\t\t\t\tvar face = new Face3( a, b, c, vertexNormals, vertexColors, materialIndex );\n\n\t\t\t\tscope.faces.push( face );\n\n\t\t\t\tif ( uvs !== undefined ) {\n\n\t\t\t\t\tscope.faceVertexUvs[ 0 ].push( [\n\t\t\t\t\t\tnew Vector2().fromArray( uvs, a * 2 ),\n\t\t\t\t\t\tnew Vector2().fromArray( uvs, b * 2 ),\n\t\t\t\t\t\tnew Vector2().fromArray( uvs, c * 2 )\n\t\t\t\t\t] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( uvs2 !== undefined ) {\n\n\t\t\t\t\tscope.faceVertexUvs[ 1 ].push( [\n\t\t\t\t\t\tnew Vector2().fromArray( uvs2, a * 2 ),\n\t\t\t\t\t\tnew Vector2().fromArray( uvs2, b * 2 ),\n\t\t\t\t\t\tnew Vector2().fromArray( uvs2, c * 2 )\n\t\t\t\t\t] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar groups = geometry.groups;\n\n\t\t\tif ( groups.length > 0 ) {\n\n\t\t\t\tfor ( var i = 0; i < groups.length; i ++ ) {\n\n\t\t\t\t\tvar group = groups[ i ];\n\n\t\t\t\t\tvar start = group.start;\n\t\t\t\t\tvar count = group.count;\n\n\t\t\t\t\tfor ( var j = start, jl = start + count; j < jl; j += 3 ) {\n\n\t\t\t\t\t\tif ( indices !== undefined ) {\n\n\t\t\t\t\t\t\taddFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ], group.materialIndex );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\taddFace( j, j + 1, j + 2, group.materialIndex );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( indices !== undefined ) {\n\n\t\t\t\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\n\n\t\t\t\t\t\taddFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfor ( var i = 0; i < positions.length / 3; i += 3 ) {\n\n\t\t\t\t\t\taddFace( i, i + 1, i + 2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.computeFaceNormals();\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t}\n\n\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcenter: function () {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t\tthis.boundingBox.getCenter( _offset$1 ).negate();\n\n\t\t\tthis.translate( _offset$1.x, _offset$1.y, _offset$1.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\tthis.computeBoundingSphere();\n\n\t\t\tvar center = this.boundingSphere.center;\n\t\t\tvar radius = this.boundingSphere.radius;\n\n\t\t\tvar s = radius === 0 ? 1 : 1.0 / radius;\n\n\t\t\tvar matrix = new Matrix4();\n\t\t\tmatrix.set(\n\t\t\t\ts, 0, 0, - s * center.x,\n\t\t\t\t0, s, 0, - s * center.y,\n\t\t\t\t0, 0, s, - s * center.z,\n\t\t\t\t0, 0, 0, 1\n\t\t\t);\n\n\t\t\tthis.applyMatrix4( matrix );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcomputeFaceNormals: function () {\n\n\t\t\tvar cb = new Vector3(), ab = new Vector3();\n\n\t\t\tfor ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tvar face = this.faces[ f ];\n\n\t\t\t\tvar vA = this.vertices[ face.a ];\n\t\t\t\tvar vB = this.vertices[ face.b ];\n\t\t\t\tvar vC = this.vertices[ face.c ];\n\n\t\t\t\tcb.subVectors( vC, vB );\n\t\t\t\tab.subVectors( vA, vB );\n\t\t\t\tcb.cross( ab );\n\n\t\t\t\tcb.normalize();\n\n\t\t\t\tface.normal.copy( cb );\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeVertexNormals: function ( areaWeighted ) {\n\n\t\t\tif ( areaWeighted === undefined ) { areaWeighted = true; }\n\n\t\t\tvar v, vl, f, fl, face, vertices;\n\n\t\t\tvertices = new Array( this.vertices.length );\n\n\t\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\n\t\t\t\tvertices[ v ] = new Vector3();\n\n\t\t\t}\n\n\t\t\tif ( areaWeighted ) {\n\n\t\t\t\t// vertex normals weighted by triangle areas\n\t\t\t\t// http://www.iquilezles.org/www/articles/normals/normals.htm\n\n\t\t\t\tvar vA, vB, vC;\n\t\t\t\tvar cb = new Vector3(), ab = new Vector3();\n\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\t\tvA = this.vertices[ face.a ];\n\t\t\t\t\tvB = this.vertices[ face.b ];\n\t\t\t\t\tvC = this.vertices[ face.c ];\n\n\t\t\t\t\tcb.subVectors( vC, vB );\n\t\t\t\t\tab.subVectors( vA, vB );\n\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\tvertices[ face.a ].add( cb );\n\t\t\t\t\tvertices[ face.b ].add( cb );\n\t\t\t\t\tvertices[ face.c ].add( cb );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tthis.computeFaceNormals();\n\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\t\tvertices[ face.a ].add( face.normal );\n\t\t\t\t\tvertices[ face.b ].add( face.normal );\n\t\t\t\t\tvertices[ face.c ].add( face.normal );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\n\t\t\t\tvertices[ v ].normalize();\n\n\t\t\t}\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\t\tvertexNormals[ 0 ].copy( vertices[ face.a ] );\n\t\t\t\t\tvertexNormals[ 1 ].copy( vertices[ face.b ] );\n\t\t\t\t\tvertexNormals[ 2 ].copy( vertices[ face.c ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvertexNormals[ 0 ] = vertices[ face.a ].clone();\n\t\t\t\t\tvertexNormals[ 1 ] = vertices[ face.b ].clone();\n\t\t\t\t\tvertexNormals[ 2 ] = vertices[ face.c ].clone();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.faces.length > 0 ) {\n\n\t\t\t\tthis.normalsNeedUpdate = true;\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeFlatVertexNormals: function () {\n\n\t\t\tvar f, fl, face;\n\n\t\t\tthis.computeFaceNormals();\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\t\tvertexNormals[ 0 ].copy( face.normal );\n\t\t\t\t\tvertexNormals[ 1 ].copy( face.normal );\n\t\t\t\t\tvertexNormals[ 2 ].copy( face.normal );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvertexNormals[ 0 ] = face.normal.clone();\n\t\t\t\t\tvertexNormals[ 1 ] = face.normal.clone();\n\t\t\t\t\tvertexNormals[ 2 ] = face.normal.clone();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.faces.length > 0 ) {\n\n\t\t\t\tthis.normalsNeedUpdate = true;\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeMorphNormals: function () {\n\n\t\t\tvar i, il, f, fl, face;\n\n\t\t\t// save original normals\n\t\t\t// - create temp variables on first access\n\t\t\t//   otherwise just copy (for faster repeated calls)\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tif ( ! face.__originalFaceNormal ) {\n\n\t\t\t\t\tface.__originalFaceNormal = face.normal.clone();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tface.__originalFaceNormal.copy( face.normal );\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! face.__originalVertexNormals ) { face.__originalVertexNormals = []; }\n\n\t\t\t\tfor ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {\n\n\t\t\t\t\tif ( ! face.__originalVertexNormals[ i ] ) {\n\n\t\t\t\t\t\tface.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tface.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// use temp geometry to compute face and vertex normals for each morph\n\n\t\t\tvar tmpGeo = new Geometry();\n\t\t\ttmpGeo.faces = this.faces;\n\n\t\t\tfor ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {\n\n\t\t\t\t// create on first access\n\n\t\t\t\tif ( ! this.morphNormals[ i ] ) {\n\n\t\t\t\t\tthis.morphNormals[ i ] = {};\n\t\t\t\t\tthis.morphNormals[ i ].faceNormals = [];\n\t\t\t\t\tthis.morphNormals[ i ].vertexNormals = [];\n\n\t\t\t\t\tvar dstNormalsFace = this.morphNormals[ i ].faceNormals;\n\t\t\t\t\tvar dstNormalsVertex = this.morphNormals[ i ].vertexNormals;\n\n\t\t\t\t\tvar faceNormal, vertexNormals;\n\n\t\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\t\tfaceNormal = new Vector3();\n\t\t\t\t\t\tvertexNormals = { a: new Vector3(), b: new Vector3(), c: new Vector3() };\n\n\t\t\t\t\t\tdstNormalsFace.push( faceNormal );\n\t\t\t\t\t\tdstNormalsVertex.push( vertexNormals );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar morphNormals = this.morphNormals[ i ];\n\n\t\t\t\t// set vertices to morph target\n\n\t\t\t\ttmpGeo.vertices = this.morphTargets[ i ].vertices;\n\n\t\t\t\t// compute morph normals\n\n\t\t\t\ttmpGeo.computeFaceNormals();\n\t\t\t\ttmpGeo.computeVertexNormals();\n\n\t\t\t\t// store morph normals\n\n\t\t\t\tvar faceNormal, vertexNormals;\n\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\t\tfaceNormal = morphNormals.faceNormals[ f ];\n\t\t\t\t\tvertexNormals = morphNormals.vertexNormals[ f ];\n\n\t\t\t\t\tfaceNormal.copy( face.normal );\n\n\t\t\t\t\tvertexNormals.a.copy( face.vertexNormals[ 0 ] );\n\t\t\t\t\tvertexNormals.b.copy( face.vertexNormals[ 1 ] );\n\t\t\t\t\tvertexNormals.c.copy( face.vertexNormals[ 2 ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// restore original normals\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tface.normal = face.__originalFaceNormal;\n\t\t\t\tface.vertexNormals = face.__originalVertexNormals;\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeBoundingBox: function () {\n\n\t\t\tif ( this.boundingBox === null ) {\n\n\t\t\t\tthis.boundingBox = new Box3();\n\n\t\t\t}\n\n\t\t\tthis.boundingBox.setFromPoints( this.vertices );\n\n\t\t},\n\n\t\tcomputeBoundingSphere: function () {\n\n\t\t\tif ( this.boundingSphere === null ) {\n\n\t\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t\t}\n\n\t\t\tthis.boundingSphere.setFromPoints( this.vertices );\n\n\t\t},\n\n\t\tmerge: function ( geometry, matrix, materialIndexOffset ) {\n\n\t\t\tif ( ! ( geometry && geometry.isGeometry ) ) {\n\n\t\t\t\tconsole.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar normalMatrix,\n\t\t\t\tvertexOffset = this.vertices.length,\n\t\t\t\tvertices1 = this.vertices,\n\t\t\t\tvertices2 = geometry.vertices,\n\t\t\t\tfaces1 = this.faces,\n\t\t\t\tfaces2 = geometry.faces,\n\t\t\t\tcolors1 = this.colors,\n\t\t\t\tcolors2 = geometry.colors;\n\n\t\t\tif ( materialIndexOffset === undefined ) { materialIndexOffset = 0; }\n\n\t\t\tif ( matrix !== undefined ) {\n\n\t\t\t\tnormalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t\t}\n\n\t\t\t// vertices\n\n\t\t\tfor ( var i = 0, il = vertices2.length; i < il; i ++ ) {\n\n\t\t\t\tvar vertex = vertices2[ i ];\n\n\t\t\t\tvar vertexCopy = vertex.clone();\n\n\t\t\t\tif ( matrix !== undefined ) { vertexCopy.applyMatrix4( matrix ); }\n\n\t\t\t\tvertices1.push( vertexCopy );\n\n\t\t\t}\n\n\t\t\t// colors\n\n\t\t\tfor ( var i = 0, il = colors2.length; i < il; i ++ ) {\n\n\t\t\t\tcolors1.push( colors2[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// faces\n\n\t\t\tfor ( i = 0, il = faces2.length; i < il; i ++ ) {\n\n\t\t\t\tvar face = faces2[ i ], faceCopy, normal, color,\n\t\t\t\t\tfaceVertexNormals = face.vertexNormals,\n\t\t\t\t\tfaceVertexColors = face.vertexColors;\n\n\t\t\t\tfaceCopy = new Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );\n\t\t\t\tfaceCopy.normal.copy( face.normal );\n\n\t\t\t\tif ( normalMatrix !== undefined ) {\n\n\t\t\t\t\tfaceCopy.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\tnormal = faceVertexNormals[ j ].clone();\n\n\t\t\t\t\tif ( normalMatrix !== undefined ) {\n\n\t\t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfaceCopy.vertexNormals.push( normal );\n\n\t\t\t\t}\n\n\t\t\t\tfaceCopy.color.copy( face.color );\n\n\t\t\t\tfor ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {\n\n\t\t\t\t\tcolor = faceVertexColors[ j ];\n\t\t\t\t\tfaceCopy.vertexColors.push( color.clone() );\n\n\t\t\t\t}\n\n\t\t\t\tfaceCopy.materialIndex = face.materialIndex + materialIndexOffset;\n\n\t\t\t\tfaces1.push( faceCopy );\n\n\t\t\t}\n\n\t\t\t// uvs\n\n\t\t\tfor ( var i = 0, il = geometry.faceVertexUvs.length; i < il; i ++ ) {\n\n\t\t\t\tvar faceVertexUvs2 = geometry.faceVertexUvs[ i ];\n\n\t\t\t\tif ( this.faceVertexUvs[ i ] === undefined ) { this.faceVertexUvs[ i ] = []; }\n\n\t\t\t\tfor ( var j = 0, jl = faceVertexUvs2.length; j < jl; j ++ ) {\n\n\t\t\t\t\tvar uvs2 = faceVertexUvs2[ j ], uvsCopy = [];\n\n\t\t\t\t\tfor ( var k = 0, kl = uvs2.length; k < kl; k ++ ) {\n\n\t\t\t\t\t\tuvsCopy.push( uvs2[ k ].clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.faceVertexUvs[ i ].push( uvsCopy );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tmergeMesh: function ( mesh ) {\n\n\t\t\tif ( ! ( mesh && mesh.isMesh ) ) {\n\n\t\t\t\tconsole.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( mesh.matrixAutoUpdate ) { mesh.updateMatrix(); }\n\n\t\t\tthis.merge( mesh.geometry, mesh.matrix );\n\n\t\t},\n\n\t\t/*\n\t\t * Checks for duplicate vertices with hashmap.\n\t\t * Duplicated vertices are removed\n\t\t * and faces' vertices are updated.\n\t\t */\n\n\t\tmergeVertices: function () {\n\n\t\t\tvar verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\n\t\t\tvar unique = [], changes = [];\n\n\t\t\tvar v, key;\n\t\t\tvar precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\n\t\t\tvar precision = Math.pow( 10, precisionPoints );\n\t\t\tvar i, il, face;\n\t\t\tvar indices, j, jl;\n\n\t\t\tfor ( i = 0, il = this.vertices.length; i < il; i ++ ) {\n\n\t\t\t\tv = this.vertices[ i ];\n\t\t\t\tkey = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );\n\n\t\t\t\tif ( verticesMap[ key ] === undefined ) {\n\n\t\t\t\t\tverticesMap[ key ] = i;\n\t\t\t\t\tunique.push( this.vertices[ i ] );\n\t\t\t\t\tchanges[ i ] = unique.length - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);\n\t\t\t\t\tchanges[ i ] = changes[ verticesMap[ key ] ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\t// if faces are completely degenerate after merging vertices, we\n\t\t\t// have to remove them from the geometry.\n\t\t\tvar faceIndicesToRemove = [];\n\n\t\t\tfor ( i = 0, il = this.faces.length; i < il; i ++ ) {\n\n\t\t\t\tface = this.faces[ i ];\n\n\t\t\t\tface.a = changes[ face.a ];\n\t\t\t\tface.b = changes[ face.b ];\n\t\t\t\tface.c = changes[ face.c ];\n\n\t\t\t\tindices = [ face.a, face.b, face.c ];\n\n\t\t\t\t// if any duplicate vertices are found in a Face3\n\t\t\t\t// we have to remove the face as nothing can be saved\n\t\t\t\tfor ( var n = 0; n < 3; n ++ ) {\n\n\t\t\t\t\tif ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {\n\n\t\t\t\t\t\tfaceIndicesToRemove.push( i );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {\n\n\t\t\t\tvar idx = faceIndicesToRemove[ i ];\n\n\t\t\t\tthis.faces.splice( idx, 1 );\n\n\t\t\t\tfor ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {\n\n\t\t\t\t\tthis.faceVertexUvs[ j ].splice( idx, 1 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Use unique set of vertices\n\n\t\t\tvar diff = this.vertices.length - unique.length;\n\t\t\tthis.vertices = unique;\n\t\t\treturn diff;\n\n\t\t},\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tthis.vertices = [];\n\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tvar point = points[ i ];\n\t\t\t\tthis.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsortFacesByMaterialIndex: function () {\n\n\t\t\tvar faces = this.faces;\n\t\t\tvar length = faces.length;\n\n\t\t\t// tag faces\n\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\tfaces[ i ]._id = i;\n\n\t\t\t}\n\n\t\t\t// sort faces\n\n\t\t\tfunction materialIndexSort( a, b ) {\n\n\t\t\t\treturn a.materialIndex - b.materialIndex;\n\n\t\t\t}\n\n\t\t\tfaces.sort( materialIndexSort );\n\n\t\t\t// sort uvs\n\n\t\t\tvar uvs1 = this.faceVertexUvs[ 0 ];\n\t\t\tvar uvs2 = this.faceVertexUvs[ 1 ];\n\n\t\t\tvar newUvs1, newUvs2;\n\n\t\t\tif ( uvs1 && uvs1.length === length ) { newUvs1 = []; }\n\t\t\tif ( uvs2 && uvs2.length === length ) { newUvs2 = []; }\n\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\tvar id = faces[ i ]._id;\n\n\t\t\t\tif ( newUvs1 ) { newUvs1.push( uvs1[ id ] ); }\n\t\t\t\tif ( newUvs2 ) { newUvs2.push( uvs2[ id ] ); }\n\n\t\t\t}\n\n\t\t\tif ( newUvs1 ) { this.faceVertexUvs[ 0 ] = newUvs1; }\n\t\t\tif ( newUvs2 ) { this.faceVertexUvs[ 1 ] = newUvs2; }\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Geometry',\n\t\t\t\t\tgenerator: 'Geometry.toJSON'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// standard Geometry serialization\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\t\t\tif ( this.name !== '' ) { data.name = this.name; }\n\n\t\t\tif ( this.parameters !== undefined ) {\n\n\t\t\t\tvar parameters = this.parameters;\n\n\t\t\t\tfor ( var key in parameters ) {\n\n\t\t\t\t\tif ( parameters[ key ] !== undefined ) { data[ key ] = parameters[ key ]; }\n\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\n\t\t\t}\n\n\t\t\tvar vertices = [];\n\n\t\t\tfor ( var i = 0; i < this.vertices.length; i ++ ) {\n\n\t\t\t\tvar vertex = this.vertices[ i ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t\tvar faces = [];\n\t\t\tvar normals = [];\n\t\t\tvar normalsHash = {};\n\t\t\tvar colors = [];\n\t\t\tvar colorsHash = {};\n\t\t\tvar uvs = [];\n\t\t\tvar uvsHash = {};\n\n\t\t\tfor ( var i = 0; i < this.faces.length; i ++ ) {\n\n\t\t\t\tvar face = this.faces[ i ];\n\n\t\t\t\tvar hasMaterial = true;\n\t\t\t\tvar hasFaceUv = false; // deprecated\n\t\t\t\tvar hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;\n\t\t\t\tvar hasFaceNormal = face.normal.length() > 0;\n\t\t\t\tvar hasFaceVertexNormal = face.vertexNormals.length > 0;\n\t\t\t\tvar hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;\n\t\t\t\tvar hasFaceVertexColor = face.vertexColors.length > 0;\n\n\t\t\t\tvar faceType = 0;\n\n\t\t\t\tfaceType = setBit( faceType, 0, 0 ); // isQuad\n\t\t\t\tfaceType = setBit( faceType, 1, hasMaterial );\n\t\t\t\tfaceType = setBit( faceType, 2, hasFaceUv );\n\t\t\t\tfaceType = setBit( faceType, 3, hasFaceVertexUv );\n\t\t\t\tfaceType = setBit( faceType, 4, hasFaceNormal );\n\t\t\t\tfaceType = setBit( faceType, 5, hasFaceVertexNormal );\n\t\t\t\tfaceType = setBit( faceType, 6, hasFaceColor );\n\t\t\t\tfaceType = setBit( faceType, 7, hasFaceVertexColor );\n\n\t\t\t\tfaces.push( faceType );\n\t\t\t\tfaces.push( face.a, face.b, face.c );\n\t\t\t\tfaces.push( face.materialIndex );\n\n\t\t\t\tif ( hasFaceVertexUv ) {\n\n\t\t\t\t\tvar faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];\n\n\t\t\t\t\tfaces.push(\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 0 ] ),\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 1 ] ),\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 2 ] )\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceNormal ) {\n\n\t\t\t\t\tfaces.push( getNormalIndex( face.normal ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceVertexNormal ) {\n\n\t\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\t\tfaces.push(\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 0 ] ),\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 1 ] ),\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 2 ] )\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceColor ) {\n\n\t\t\t\t\tfaces.push( getColorIndex( face.color ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceVertexColor ) {\n\n\t\t\t\t\tvar vertexColors = face.vertexColors;\n\n\t\t\t\t\tfaces.push(\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 0 ] ),\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 1 ] ),\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 2 ] )\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction setBit( value, position, enabled ) {\n\n\t\t\t\treturn enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );\n\n\t\t\t}\n\n\t\t\tfunction getNormalIndex( normal ) {\n\n\t\t\t\tvar hash = normal.x.toString() + normal.y.toString() + normal.z.toString();\n\n\t\t\t\tif ( normalsHash[ hash ] !== undefined ) {\n\n\t\t\t\t\treturn normalsHash[ hash ];\n\n\t\t\t\t}\n\n\t\t\t\tnormalsHash[ hash ] = normals.length / 3;\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\treturn normalsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tfunction getColorIndex( color ) {\n\n\t\t\t\tvar hash = color.r.toString() + color.g.toString() + color.b.toString();\n\n\t\t\t\tif ( colorsHash[ hash ] !== undefined ) {\n\n\t\t\t\t\treturn colorsHash[ hash ];\n\n\t\t\t\t}\n\n\t\t\t\tcolorsHash[ hash ] = colors.length;\n\t\t\t\tcolors.push( color.getHex() );\n\n\t\t\t\treturn colorsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tfunction getUvIndex( uv ) {\n\n\t\t\t\tvar hash = uv.x.toString() + uv.y.toString();\n\n\t\t\t\tif ( uvsHash[ hash ] !== undefined ) {\n\n\t\t\t\t\treturn uvsHash[ hash ];\n\n\t\t\t\t}\n\n\t\t\t\tuvsHash[ hash ] = uvs.length / 2;\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\treturn uvsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tdata.data = {};\n\n\t\t\tdata.data.vertices = vertices;\n\t\t\tdata.data.normals = normals;\n\t\t\tif ( colors.length > 0 ) { data.data.colors = colors; }\n\t\t\tif ( uvs.length > 0 ) { data.data.uvs = [ uvs ]; } // temporal backward compatibility\n\t\t\tdata.data.faces = faces;\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\t/*\n\t\t\t // Handle primitives\n\n\t\t\t var parameters = this.parameters;\n\n\t\t\t if ( parameters !== undefined ) {\n\n\t\t\t var values = [];\n\n\t\t\t for ( var key in parameters ) {\n\n\t\t\t values.push( parameters[ key ] );\n\n\t\t\t }\n\n\t\t\t var geometry = Object.create( this.constructor.prototype );\n\t\t\t this.constructor.apply( geometry, values );\n\t\t\t return geometry;\n\n\t\t\t }\n\n\t\t\t return new this.constructor().copy( this );\n\t\t\t */\n\n\t\t\treturn new Geometry().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tvar i, il, j, jl, k, kl;\n\n\t\t\t// reset\n\n\t\t\tthis.vertices = [];\n\t\t\tthis.colors = [];\n\t\t\tthis.faces = [];\n\t\t\tthis.faceVertexUvs = [[]];\n\t\t\tthis.morphTargets = [];\n\t\t\tthis.morphNormals = [];\n\t\t\tthis.skinWeights = [];\n\t\t\tthis.skinIndices = [];\n\t\t\tthis.lineDistances = [];\n\t\t\tthis.boundingBox = null;\n\t\t\tthis.boundingSphere = null;\n\n\t\t\t// name\n\n\t\t\tthis.name = source.name;\n\n\t\t\t// vertices\n\n\t\t\tvar vertices = source.vertices;\n\n\t\t\tfor ( i = 0, il = vertices.length; i < il; i ++ ) {\n\n\t\t\t\tthis.vertices.push( vertices[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// colors\n\n\t\t\tvar colors = source.colors;\n\n\t\t\tfor ( i = 0, il = colors.length; i < il; i ++ ) {\n\n\t\t\t\tthis.colors.push( colors[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// faces\n\n\t\t\tvar faces = source.faces;\n\n\t\t\tfor ( i = 0, il = faces.length; i < il; i ++ ) {\n\n\t\t\t\tthis.faces.push( faces[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// face vertex uvs\n\n\t\t\tfor ( i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {\n\n\t\t\t\tvar faceVertexUvs = source.faceVertexUvs[ i ];\n\n\t\t\t\tif ( this.faceVertexUvs[ i ] === undefined ) {\n\n\t\t\t\t\tthis.faceVertexUvs[ i ] = [];\n\n\t\t\t\t}\n\n\t\t\t\tfor ( j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {\n\n\t\t\t\t\tvar uvs = faceVertexUvs[ j ], uvsCopy = [];\n\n\t\t\t\t\tfor ( k = 0, kl = uvs.length; k < kl; k ++ ) {\n\n\t\t\t\t\t\tvar uv = uvs[ k ];\n\n\t\t\t\t\t\tuvsCopy.push( uv.clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.faceVertexUvs[ i ].push( uvsCopy );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// morph targets\n\n\t\t\tvar morphTargets = source.morphTargets;\n\n\t\t\tfor ( i = 0, il = morphTargets.length; i < il; i ++ ) {\n\n\t\t\t\tvar morphTarget = {};\n\t\t\t\tmorphTarget.name = morphTargets[ i ].name;\n\n\t\t\t\t// vertices\n\n\t\t\t\tif ( morphTargets[ i ].vertices !== undefined ) {\n\n\t\t\t\t\tmorphTarget.vertices = [];\n\n\t\t\t\t\tfor ( j = 0, jl = morphTargets[ i ].vertices.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tmorphTarget.vertices.push( morphTargets[ i ].vertices[ j ].clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// normals\n\n\t\t\t\tif ( morphTargets[ i ].normals !== undefined ) {\n\n\t\t\t\t\tmorphTarget.normals = [];\n\n\t\t\t\t\tfor ( j = 0, jl = morphTargets[ i ].normals.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tmorphTarget.normals.push( morphTargets[ i ].normals[ j ].clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphTargets.push( morphTarget );\n\n\t\t\t}\n\n\t\t\t// morph normals\n\n\t\t\tvar morphNormals = source.morphNormals;\n\n\t\t\tfor ( i = 0, il = morphNormals.length; i < il; i ++ ) {\n\n\t\t\t\tvar morphNormal = {};\n\n\t\t\t\t// vertex normals\n\n\t\t\t\tif ( morphNormals[ i ].vertexNormals !== undefined ) {\n\n\t\t\t\t\tmorphNormal.vertexNormals = [];\n\n\t\t\t\t\tfor ( j = 0, jl = morphNormals[ i ].vertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tvar srcVertexNormal = morphNormals[ i ].vertexNormals[ j ];\n\t\t\t\t\t\tvar destVertexNormal = {};\n\n\t\t\t\t\t\tdestVertexNormal.a = srcVertexNormal.a.clone();\n\t\t\t\t\t\tdestVertexNormal.b = srcVertexNormal.b.clone();\n\t\t\t\t\t\tdestVertexNormal.c = srcVertexNormal.c.clone();\n\n\t\t\t\t\t\tmorphNormal.vertexNormals.push( destVertexNormal );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// face normals\n\n\t\t\t\tif ( morphNormals[ i ].faceNormals !== undefined ) {\n\n\t\t\t\t\tmorphNormal.faceNormals = [];\n\n\t\t\t\t\tfor ( j = 0, jl = morphNormals[ i ].faceNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tmorphNormal.faceNormals.push( morphNormals[ i ].faceNormals[ j ].clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphNormals.push( morphNormal );\n\n\t\t\t}\n\n\t\t\t// skin weights\n\n\t\t\tvar skinWeights = source.skinWeights;\n\n\t\t\tfor ( i = 0, il = skinWeights.length; i < il; i ++ ) {\n\n\t\t\t\tthis.skinWeights.push( skinWeights[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// skin indices\n\n\t\t\tvar skinIndices = source.skinIndices;\n\n\t\t\tfor ( i = 0, il = skinIndices.length; i < il; i ++ ) {\n\n\t\t\t\tthis.skinIndices.push( skinIndices[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// line distances\n\n\t\t\tvar lineDistances = source.lineDistances;\n\n\t\t\tfor ( i = 0, il = lineDistances.length; i < il; i ++ ) {\n\n\t\t\t\tthis.lineDistances.push( lineDistances[ i ] );\n\n\t\t\t}\n\n\t\t\t// bounding box\n\n\t\t\tvar boundingBox = source.boundingBox;\n\n\t\t\tif ( boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = boundingBox.clone();\n\n\t\t\t}\n\n\t\t\t// bounding sphere\n\n\t\t\tvar boundingSphere = source.boundingSphere;\n\n\t\t\tif ( boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\t// update flags\n\n\t\t\tthis.elementsNeedUpdate = source.elementsNeedUpdate;\n\t\t\tthis.verticesNeedUpdate = source.verticesNeedUpdate;\n\t\t\tthis.uvsNeedUpdate = source.uvsNeedUpdate;\n\t\t\tthis.normalsNeedUpdate = source.normalsNeedUpdate;\n\t\t\tthis.colorsNeedUpdate = source.colorsNeedUpdate;\n\t\t\tthis.lineDistancesNeedUpdate = source.lineDistancesNeedUpdate;\n\t\t\tthis.groupsNeedUpdate = source.groupsNeedUpdate;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// BoxGeometry\n\n\tvar BoxGeometry = /*@__PURE__*/(function (Geometry) {\n\t\tfunction BoxGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\n\t\t\tGeometry.call(this);\n\n\t\t\tthis.type = 'BoxGeometry';\n\n\t\t\tthis.parameters = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\tdepth: depth,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\tdepthSegments: depthSegments\n\t\t\t};\n\n\t\t\tthis.fromBufferGeometry( new BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );\n\t\t\tthis.mergeVertices();\n\n\t\t}\n\n\t\tif ( Geometry ) BoxGeometry.__proto__ = Geometry;\n\t\tBoxGeometry.prototype = Object.create( Geometry && Geometry.prototype );\n\t\tBoxGeometry.prototype.constructor = BoxGeometry;\n\n\t\treturn BoxGeometry;\n\t}(Geometry));\n\n\t// BoxBufferGeometry\n\n\tvar BoxBufferGeometry = /*@__PURE__*/(function (BufferGeometry) {\n\t\tfunction BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\n\t\t\tBufferGeometry.call(this);\n\n\t\t\tthis.type = 'BoxBufferGeometry';\n\n\t\t\tthis.parameters = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\tdepth: depth,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\tdepthSegments: depthSegments\n\t\t\t};\n\n\t\t\tvar scope = this;\n\n\t\t\twidth = width || 1;\n\t\t\theight = height || 1;\n\t\t\tdepth = depth || 1;\n\n\t\t\t// segments\n\n\t\t\twidthSegments = Math.floor( widthSegments ) || 1;\n\t\t\theightSegments = Math.floor( heightSegments ) || 1;\n\t\t\tdepthSegments = Math.floor( depthSegments ) || 1;\n\n\t\t\t// buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = [];\n\n\t\t\t// helper variables\n\n\t\t\tvar numberOfVertices = 0;\n\t\t\tvar groupStart = 0;\n\n\t\t\t// build each side of the box geometry\n\n\t\t\tbuildPlane( 'z', 'y', 'x', - 1, - 1, depth, height, width, depthSegments, heightSegments, 0 ); // px\n\t\t\tbuildPlane( 'z', 'y', 'x', 1, - 1, depth, height, - width, depthSegments, heightSegments, 1 ); // nx\n\t\t\tbuildPlane( 'x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2 ); // py\n\t\t\tbuildPlane( 'x', 'z', 'y', 1, - 1, width, depth, - height, widthSegments, depthSegments, 3 ); // ny\n\t\t\tbuildPlane( 'x', 'y', 'z', 1, - 1, width, height, depth, widthSegments, heightSegments, 4 ); // pz\n\t\t\tbuildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth, widthSegments, heightSegments, 5 ); // nz\n\n\t\t\t// build geometry\n\n\t\t\tthis.setIndex( indices );\n\t\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t\tfunction buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {\n\n\t\t\t\tvar segmentWidth = width / gridX;\n\t\t\t\tvar segmentHeight = height / gridY;\n\n\t\t\t\tvar widthHalf = width / 2;\n\t\t\t\tvar heightHalf = height / 2;\n\t\t\t\tvar depthHalf = depth / 2;\n\n\t\t\t\tvar gridX1 = gridX + 1;\n\t\t\t\tvar gridY1 = gridY + 1;\n\n\t\t\t\tvar vertexCounter = 0;\n\t\t\t\tvar groupCount = 0;\n\n\t\t\t\tvar ix, iy;\n\n\t\t\t\tvar vector = new Vector3();\n\n\t\t\t\t// generate vertices, normals and uvs\n\n\t\t\t\tfor ( iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\t\t\tvar y = iy * segmentHeight - heightHalf;\n\n\t\t\t\t\tfor ( ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\t\t\tvar x = ix * segmentWidth - widthHalf;\n\n\t\t\t\t\t\t// set values to correct vector component\n\n\t\t\t\t\t\tvector[ u ] = x * udir;\n\t\t\t\t\t\tvector[ v ] = y * vdir;\n\t\t\t\t\t\tvector[ w ] = depthHalf;\n\n\t\t\t\t\t\t// now apply vector to vertex buffer\n\n\t\t\t\t\t\tvertices.push( vector.x, vector.y, vector.z );\n\n\t\t\t\t\t\t// set values to correct vector component\n\n\t\t\t\t\t\tvector[ u ] = 0;\n\t\t\t\t\t\tvector[ v ] = 0;\n\t\t\t\t\t\tvector[ w ] = depth > 0 ? 1 : - 1;\n\n\t\t\t\t\t\t// now apply vector to normal buffer\n\n\t\t\t\t\t\tnormals.push( vector.x, vector.y, vector.z );\n\n\t\t\t\t\t\t// uvs\n\n\t\t\t\t\t\tuvs.push( ix / gridX );\n\t\t\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\n\n\t\t\t\t\t\t// counters\n\n\t\t\t\t\t\tvertexCounter += 1;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// indices\n\n\t\t\t\t// 1. you need three indices to draw a single face\n\t\t\t\t// 2. a single segment consists of two faces\n\t\t\t\t// 3. so we need to generate six (2*3) indices per segment\n\n\t\t\t\tfor ( iy = 0; iy < gridY; iy ++ ) {\n\n\t\t\t\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\t\t\t\tvar a = numberOfVertices + ix + gridX1 * iy;\n\t\t\t\t\t\tvar b = numberOfVertices + ix + gridX1 * ( iy + 1 );\n\t\t\t\t\t\tvar c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\t\t\t\tvar d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;\n\n\t\t\t\t\t\t// faces\n\n\t\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t\t\t// increase counter\n\n\t\t\t\t\t\tgroupCount += 6;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\t\tscope.addGroup( groupStart, groupCount, materialIndex );\n\n\t\t\t\t// calculate new start value for groups\n\n\t\t\t\tgroupStart += groupCount;\n\n\t\t\t\t// update total number of vertices\n\n\t\t\t\tnumberOfVertices += vertexCounter;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( BufferGeometry ) BoxBufferGeometry.__proto__ = BufferGeometry;\n\t\tBoxBufferGeometry.prototype = Object.create( BufferGeometry && BufferGeometry.prototype );\n\t\tBoxBufferGeometry.prototype.constructor = BoxBufferGeometry;\n\n\t\treturn BoxBufferGeometry;\n\t}(BufferGeometry));\n\n\t/**\n\t * Uniform Utilities\n\t */\n\n\tfunction cloneUniforms( src ) {\n\n\t\tvar dst = {};\n\n\t\tfor ( var u in src ) {\n\n\t\t\tdst[ u ] = {};\n\n\t\t\tfor ( var p in src[ u ] ) {\n\n\t\t\t\tvar property = src[ u ][ p ];\n\n\t\t\t\tif ( property && ( property.isColor ||\n\t\t\t\t\tproperty.isMatrix3 || property.isMatrix4 ||\n\t\t\t\t\tproperty.isVector2 || property.isVector3 || property.isVector4 ||\n\t\t\t\t\tproperty.isTexture ) ) {\n\n\t\t\t\t\tdst[ u ][ p ] = property.clone();\n\n\t\t\t\t} else if ( Array.isArray( property ) ) {\n\n\t\t\t\t\tdst[ u ][ p ] = property.slice();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tdst[ u ][ p ] = property;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn dst;\n\n\t}\n\n\tfunction mergeUniforms( uniforms ) {\n\n\t\tvar merged = {};\n\n\t\tfor ( var u = 0; u < uniforms.length; u ++ ) {\n\n\t\t\tvar tmp = cloneUniforms( uniforms[ u ] );\n\n\t\t\tfor ( var p in tmp ) {\n\n\t\t\t\tmerged[ p ] = tmp[ p ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn merged;\n\n\t}\n\n\t// Legacy\n\n\tvar UniformsUtils = { clone: cloneUniforms, merge: mergeUniforms };\n\n\tvar default_vertex = \"void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\";\n\n\tvar default_fragment = \"void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}\";\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  defines: { \"label\" : \"value\" },\n\t *  uniforms: { \"parameter1\": { value: 1.0 }, \"parameter2\": { value2: 2 } },\n\t *\n\t *  fragmentShader: <string>,\n\t *  vertexShader: <string>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  lights: <bool>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction ShaderMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'ShaderMaterial';\n\n\t\tthis.defines = {};\n\t\tthis.uniforms = {};\n\n\t\tthis.vertexShader = default_vertex;\n\t\tthis.fragmentShader = default_fragment;\n\n\t\tthis.linewidth = 1;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false; // set to use scene fog\n\t\tthis.lights = false; // set to use scene lights\n\t\tthis.clipping = false; // set to use user-defined clipping planes\n\n\t\tthis.skinning = false; // set to use skinning attribute streams\n\t\tthis.morphTargets = false; // set to use morph targets\n\t\tthis.morphNormals = false; // set to use morph normals\n\n\t\tthis.extensions = {\n\t\t\tderivatives: false, // set to use derivatives\n\t\t\tfragDepth: false, // set to use fragment depth values\n\t\t\tdrawBuffers: false, // set to use draw buffers\n\t\t\tshaderTextureLOD: false // set to use shader texture LOD\n\t\t};\n\n\t\t// When rendered geometry doesn't include these attributes but the material does,\n\t\t// use these default values in WebGL. This avoids errors when buffer data is missing.\n\t\tthis.defaultAttributeValues = {\n\t\t\t'color': [ 1, 1, 1 ],\n\t\t\t'uv': [ 0, 0 ],\n\t\t\t'uv2': [ 0, 0 ]\n\t\t};\n\n\t\tthis.index0AttributeName = undefined;\n\t\tthis.uniformsNeedUpdate = false;\n\n\t\tif ( parameters !== undefined ) {\n\n\t\t\tif ( parameters.attributes !== undefined ) {\n\n\t\t\t\tconsole.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );\n\n\t\t\t}\n\n\t\t\tthis.setValues( parameters );\n\n\t\t}\n\n\t}\n\n\tShaderMaterial.prototype = Object.create( Material.prototype );\n\tShaderMaterial.prototype.constructor = ShaderMaterial;\n\n\tShaderMaterial.prototype.isShaderMaterial = true;\n\n\tShaderMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.fragmentShader = source.fragmentShader;\n\t\tthis.vertexShader = source.vertexShader;\n\n\t\tthis.uniforms = cloneUniforms( source.uniforms );\n\n\t\tthis.defines = Object.assign( {}, source.defines );\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\tthis.lights = source.lights;\n\t\tthis.clipping = source.clipping;\n\n\t\tthis.skinning = source.skinning;\n\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\tthis.extensions = source.extensions;\n\n\t\treturn this;\n\n\t};\n\n\tShaderMaterial.prototype.toJSON = function ( meta ) {\n\n\t\tvar data = Material.prototype.toJSON.call( this, meta );\n\n\t\tdata.uniforms = {};\n\n\t\tfor ( var name in this.uniforms ) {\n\n\t\t\tvar uniform = this.uniforms[ name ];\n\t\t\tvar value = uniform.value;\n\n\t\t\tif ( value && value.isTexture ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 't',\n\t\t\t\t\tvalue: value.toJSON( meta ).uuid\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isColor ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'c',\n\t\t\t\t\tvalue: value.getHex()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector2 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v2',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector3 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v3',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector4 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v4',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isMatrix3 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'm3',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isMatrix4 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'm4',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\tvalue: value\n\t\t\t\t};\n\n\t\t\t\t// note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( Object.keys( this.defines ).length > 0 ) { data.defines = this.defines; }\n\n\t\tdata.vertexShader = this.vertexShader;\n\t\tdata.fragmentShader = this.fragmentShader;\n\n\t\tvar extensions = {};\n\n\t\tfor ( var key in this.extensions ) {\n\n\t\t\tif ( this.extensions[ key ] === true ) { extensions[ key ] = true; }\n\n\t\t}\n\n\t\tif ( Object.keys( extensions ).length > 0 ) { data.extensions = extensions; }\n\n\t\treturn data;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author WestLangley / http://github.com/WestLangley\n\t*/\n\n\tfunction Camera() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Camera';\n\n\t\tthis.matrixWorldInverse = new Matrix4();\n\n\t\tthis.projectionMatrix = new Matrix4();\n\t\tthis.projectionMatrixInverse = new Matrix4();\n\n\t}\n\n\tCamera.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Camera,\n\n\t\tisCamera: true,\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source, recursive );\n\n\t\t\tthis.matrixWorldInverse.copy( source.matrixWorldInverse );\n\n\t\t\tthis.projectionMatrix.copy( source.projectionMatrix );\n\t\t\tthis.projectionMatrixInverse.copy( source.projectionMatrixInverse );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetWorldDirection: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Camera: .getWorldDirection() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tvar e = this.matrixWorld.elements;\n\n\t\t\treturn target.set( - e[ 8 ], - e[ 9 ], - e[ 10 ] ).normalize();\n\n\t\t},\n\n\t\tupdateMatrixWorld: function ( force ) {\n\n\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\tthis.matrixWorldInverse.getInverse( this.matrixWorld );\n\n\t\t},\n\n\t\tupdateWorldMatrix: function ( updateParents, updateChildren ) {\n\n\t\t\tObject3D.prototype.updateWorldMatrix.call( this, updateParents, updateChildren );\n\n\t\t\tthis.matrixWorldInverse.getInverse( this.matrixWorld );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author greggman / http://games.greggman.com/\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * @author tschw\n\t */\n\n\tfunction PerspectiveCamera( fov, aspect, near, far ) {\n\n\t\tCamera.call( this );\n\n\t\tthis.type = 'PerspectiveCamera';\n\n\t\tthis.fov = fov !== undefined ? fov : 50;\n\t\tthis.zoom = 1;\n\n\t\tthis.near = near !== undefined ? near : 0.1;\n\t\tthis.far = far !== undefined ? far : 2000;\n\t\tthis.focus = 10;\n\n\t\tthis.aspect = aspect !== undefined ? aspect : 1;\n\t\tthis.view = null;\n\n\t\tthis.filmGauge = 35;\t// width of the film (default in millimeters)\n\t\tthis.filmOffset = 0;\t// horizontal film offset (same unit as gauge)\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tPerspectiveCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\n\n\t\tconstructor: PerspectiveCamera,\n\n\t\tisPerspectiveCamera: true,\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tCamera.prototype.copy.call( this, source, recursive );\n\n\t\t\tthis.fov = source.fov;\n\t\t\tthis.zoom = source.zoom;\n\n\t\t\tthis.near = source.near;\n\t\t\tthis.far = source.far;\n\t\t\tthis.focus = source.focus;\n\n\t\t\tthis.aspect = source.aspect;\n\t\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\t\tthis.filmGauge = source.filmGauge;\n\t\t\tthis.filmOffset = source.filmOffset;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t/**\n\t\t * Sets the FOV by focal length in respect to the current .filmGauge.\n\t\t *\n\t\t * The default film gauge is 35, so that the focal length can be specified for\n\t\t * a 35mm (full frame) camera.\n\t\t *\n\t\t * Values for focal length and film gauge must have the same unit.\n\t\t */\n\t\tsetFocalLength: function ( focalLength ) {\n\n\t\t\t// see http://www.bobatkins.com/photography/technical/field_of_view.html\n\t\t\tvar vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n\n\t\t\tthis.fov = MathUtils.RAD2DEG * 2 * Math.atan( vExtentSlope );\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\t/**\n\t\t * Calculates the focal length from the current .fov and .filmGauge.\n\t\t */\n\t\tgetFocalLength: function () {\n\n\t\t\tvar vExtentSlope = Math.tan( MathUtils.DEG2RAD * 0.5 * this.fov );\n\n\t\t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\n\n\t\t},\n\n\t\tgetEffectiveFOV: function () {\n\n\t\t\treturn MathUtils.RAD2DEG * 2 * Math.atan(\n\t\t\t\tMath.tan( MathUtils.DEG2RAD * 0.5 * this.fov ) / this.zoom );\n\n\t\t},\n\n\t\tgetFilmWidth: function () {\n\n\t\t\t// film not completely covered in portrait format (aspect < 1)\n\t\t\treturn this.filmGauge * Math.min( this.aspect, 1 );\n\n\t\t},\n\n\t\tgetFilmHeight: function () {\n\n\t\t\t// film not completely covered in landscape format (aspect > 1)\n\t\t\treturn this.filmGauge / Math.max( this.aspect, 1 );\n\n\t\t},\n\n\t\t/**\n\t\t * Sets an offset in a larger frustum. This is useful for multi-window or\n\t\t * multi-monitor/multi-machine setups.\n\t\t *\n\t\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n\t\t * the monitors are in grid like this\n\t\t *\n\t\t *   +---+---+---+\n\t\t *   | A | B | C |\n\t\t *   +---+---+---+\n\t\t *   | D | E | F |\n\t\t *   +---+---+---+\n\t\t *\n\t\t * then for each monitor you would call it like this\n\t\t *\n\t\t *   var w = 1920;\n\t\t *   var h = 1080;\n\t\t *   var fullWidth = w * 3;\n\t\t *   var fullHeight = h * 2;\n\t\t *\n\t\t *   --A--\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n\t\t *   --B--\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n\t\t *   --C--\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n\t\t *   --D--\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n\t\t *   --E--\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n\t\t *   --F--\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n\t\t *\n\t\t *   Note there is no reason monitors have to be the same size or in a grid.\n\t\t */\n\t\tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\t\tthis.aspect = fullWidth / fullHeight;\n\n\t\t\tif ( this.view === null ) {\n\n\t\t\t\tthis.view = {\n\t\t\t\t\tenabled: true,\n\t\t\t\t\tfullWidth: 1,\n\t\t\t\t\tfullHeight: 1,\n\t\t\t\t\toffsetX: 0,\n\t\t\t\t\toffsetY: 0,\n\t\t\t\t\twidth: 1,\n\t\t\t\t\theight: 1\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tthis.view.enabled = true;\n\t\t\tthis.view.fullWidth = fullWidth;\n\t\t\tthis.view.fullHeight = fullHeight;\n\t\t\tthis.view.offsetX = x;\n\t\t\tthis.view.offsetY = y;\n\t\t\tthis.view.width = width;\n\t\t\tthis.view.height = height;\n\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\tclearViewOffset: function () {\n\n\t\t\tif ( this.view !== null ) {\n\n\t\t\t\tthis.view.enabled = false;\n\n\t\t\t}\n\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\tupdateProjectionMatrix: function () {\n\n\t\t\tvar near = this.near,\n\t\t\t\ttop = near * Math.tan( MathUtils.DEG2RAD * 0.5 * this.fov ) / this.zoom,\n\t\t\t\theight = 2 * top,\n\t\t\t\twidth = this.aspect * height,\n\t\t\t\tleft = - 0.5 * width,\n\t\t\t\tview = this.view;\n\n\t\t\tif ( this.view !== null && this.view.enabled ) {\n\n\t\t\t\tvar fullWidth = view.fullWidth,\n\t\t\t\t\tfullHeight = view.fullHeight;\n\n\t\t\t\tleft += view.offsetX * width / fullWidth;\n\t\t\t\ttop -= view.offsetY * height / fullHeight;\n\t\t\t\twidth *= view.width / fullWidth;\n\t\t\t\theight *= view.height / fullHeight;\n\n\t\t\t}\n\n\t\t\tvar skew = this.filmOffset;\n\t\t\tif ( skew !== 0 ) { left += near * skew / this.getFilmWidth(); }\n\n\t\t\tthis.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far );\n\n\t\t\tthis.projectionMatrixInverse.getInverse( this.projectionMatrix );\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.fov = this.fov;\n\t\t\tdata.object.zoom = this.zoom;\n\n\t\t\tdata.object.near = this.near;\n\t\t\tdata.object.far = this.far;\n\t\t\tdata.object.focus = this.focus;\n\n\t\t\tdata.object.aspect = this.aspect;\n\n\t\t\tif ( this.view !== null ) { data.object.view = Object.assign( {}, this.view ); }\n\n\t\t\tdata.object.filmGauge = this.filmGauge;\n\t\t\tdata.object.filmOffset = this.filmOffset;\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * Camera for rendering cube maps\n\t *\t- renders scene into axis-aligned cube\n\t *\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tvar fov = 90, aspect = 1;\n\n\tfunction CubeCamera( near, far, cubeResolution, options ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'CubeCamera';\n\n\t\tvar cameraPX = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPX.up.set( 0, - 1, 0 );\n\t\tcameraPX.lookAt( new Vector3( 1, 0, 0 ) );\n\t\tthis.add( cameraPX );\n\n\t\tvar cameraNX = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNX.up.set( 0, - 1, 0 );\n\t\tcameraNX.lookAt( new Vector3( - 1, 0, 0 ) );\n\t\tthis.add( cameraNX );\n\n\t\tvar cameraPY = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPY.up.set( 0, 0, 1 );\n\t\tcameraPY.lookAt( new Vector3( 0, 1, 0 ) );\n\t\tthis.add( cameraPY );\n\n\t\tvar cameraNY = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNY.up.set( 0, 0, - 1 );\n\t\tcameraNY.lookAt( new Vector3( 0, - 1, 0 ) );\n\t\tthis.add( cameraNY );\n\n\t\tvar cameraPZ = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPZ.up.set( 0, - 1, 0 );\n\t\tcameraPZ.lookAt( new Vector3( 0, 0, 1 ) );\n\t\tthis.add( cameraPZ );\n\n\t\tvar cameraNZ = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNZ.up.set( 0, - 1, 0 );\n\t\tcameraNZ.lookAt( new Vector3( 0, 0, - 1 ) );\n\t\tthis.add( cameraNZ );\n\n\t\toptions = options || { format: RGBFormat, magFilter: LinearFilter, minFilter: LinearFilter };\n\n\t\tthis.renderTarget = new WebGLCubeRenderTarget( cubeResolution, options );\n\t\tthis.renderTarget.texture.name = \"CubeCamera\";\n\n\t\tthis.update = function ( renderer, scene ) {\n\n\t\t\tif ( this.parent === null ) { this.updateMatrixWorld(); }\n\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\n\t\t\tvar renderTarget = this.renderTarget;\n\t\t\tvar generateMipmaps = renderTarget.texture.generateMipmaps;\n\n\t\t\trenderTarget.texture.generateMipmaps = false;\n\n\t\t\trenderer.setRenderTarget( renderTarget, 0 );\n\t\t\trenderer.render( scene, cameraPX );\n\n\t\t\trenderer.setRenderTarget( renderTarget, 1 );\n\t\t\trenderer.render( scene, cameraNX );\n\n\t\t\trenderer.setRenderTarget( renderTarget, 2 );\n\t\t\trenderer.render( scene, cameraPY );\n\n\t\t\trenderer.setRenderTarget( renderTarget, 3 );\n\t\t\trenderer.render( scene, cameraNY );\n\n\t\t\trenderer.setRenderTarget( renderTarget, 4 );\n\t\t\trenderer.render( scene, cameraPZ );\n\n\t\t\trenderTarget.texture.generateMipmaps = generateMipmaps;\n\n\t\t\trenderer.setRenderTarget( renderTarget, 5 );\n\t\t\trenderer.render( scene, cameraNZ );\n\n\t\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t\t};\n\n\t\tthis.clear = function ( renderer, color, depth, stencil ) {\n\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\n\t\t\tvar renderTarget = this.renderTarget;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\trenderer.setRenderTarget( renderTarget, i );\n\n\t\t\t\trenderer.clear( color, depth, stencil );\n\n\t\t\t}\n\n\t\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t\t};\n\n\t}\n\n\tCubeCamera.prototype = Object.create( Object3D.prototype );\n\tCubeCamera.prototype.constructor = CubeCamera;\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction WebGLCubeRenderTarget( size, options, dummy ) {\n\n\t\tif ( Number.isInteger( options ) ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )' );\n\n\t\t\toptions = dummy;\n\n\t\t}\n\n\t\tWebGLRenderTarget.call( this, size, size, options );\n\n\t}\n\n\tWebGLCubeRenderTarget.prototype = Object.create( WebGLRenderTarget.prototype );\n\tWebGLCubeRenderTarget.prototype.constructor = WebGLCubeRenderTarget;\n\n\tWebGLCubeRenderTarget.prototype.isWebGLCubeRenderTarget = true;\n\n\tWebGLCubeRenderTarget.prototype.fromEquirectangularTexture = function ( renderer, texture ) {\n\n\t\tthis.texture.type = texture.type;\n\t\tthis.texture.format = texture.format;\n\t\tthis.texture.encoding = texture.encoding;\n\n\t\tvar scene = new Scene();\n\n\t\tvar shader = {\n\n\t\t\tuniforms: {\n\t\t\t\ttEquirect: { value: null },\n\t\t\t},\n\n\t\t\tvertexShader: [\n\n\t\t\t\t\"varying vec3 vWorldDirection;\",\n\n\t\t\t\t\"vec3 transformDirection( in vec3 dir, in mat4 matrix ) {\",\n\n\t\t\t\t\"\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\",\n\n\t\t\t\t\"}\",\n\n\t\t\t\t\"void main() {\",\n\n\t\t\t\t\"\tvWorldDirection = transformDirection( position, modelMatrix );\",\n\n\t\t\t\t\"\t#include <begin_vertex>\",\n\t\t\t\t\"\t#include <project_vertex>\",\n\n\t\t\t\t\"}\"\n\n\t\t\t].join( '\\n' ),\n\n\t\t\tfragmentShader: [\n\n\t\t\t\t\"uniform sampler2D tEquirect;\",\n\n\t\t\t\t\"varying vec3 vWorldDirection;\",\n\n\t\t\t\t\"#define RECIPROCAL_PI 0.31830988618\",\n\t\t\t\t\"#define RECIPROCAL_PI2 0.15915494\",\n\n\t\t\t\t\"void main() {\",\n\n\t\t\t\t\"\tvec3 direction = normalize( vWorldDirection );\",\n\n\t\t\t\t\"\tvec2 sampleUV;\",\n\n\t\t\t\t\"\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\",\n\n\t\t\t\t\"\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\",\n\n\t\t\t\t\"\tgl_FragColor = texture2D( tEquirect, sampleUV );\",\n\n\t\t\t\t\"}\"\n\n\t\t\t].join( '\\n' ),\n\t\t};\n\n\t\tvar material = new ShaderMaterial( {\n\n\t\t\ttype: 'CubemapFromEquirect',\n\n\t\t\tuniforms: cloneUniforms( shader.uniforms ),\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader,\n\t\t\tside: BackSide,\n\t\t\tblending: NoBlending\n\n\t\t} );\n\n\t\tmaterial.uniforms.tEquirect.value = texture;\n\n\t\tvar mesh = new Mesh( new BoxBufferGeometry( 5, 5, 5 ), material );\n\n\t\tscene.add( mesh );\n\n\t\tvar camera = new CubeCamera( 1, 10, 1 );\n\n\t\tcamera.renderTarget = this;\n\t\tcamera.renderTarget.texture.name = 'CubeCameraTexture';\n\n\t\tcamera.update( renderer, scene );\n\n\t\tmesh.geometry.dispose();\n\t\tmesh.material.dispose();\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction DataTexture( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\n\t\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\t\tthis.image = { data: data || null, width: width || 1, height: height || 1 };\n\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\t\tthis.unpackAlignment = 1;\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n\tDataTexture.prototype = Object.create( Texture.prototype );\n\tDataTexture.prototype.constructor = DataTexture;\n\n\tDataTexture.prototype.isDataTexture = true;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author bhouston / http://clara.io\n\t */\n\n\tvar _sphere$1 = new Sphere();\n\tvar _vector$5 = new Vector3();\n\n\tfunction Frustum( p0, p1, p2, p3, p4, p5 ) {\n\n\t\tthis.planes = [\n\n\t\t\t( p0 !== undefined ) ? p0 : new Plane(),\n\t\t\t( p1 !== undefined ) ? p1 : new Plane(),\n\t\t\t( p2 !== undefined ) ? p2 : new Plane(),\n\t\t\t( p3 !== undefined ) ? p3 : new Plane(),\n\t\t\t( p4 !== undefined ) ? p4 : new Plane(),\n\t\t\t( p5 !== undefined ) ? p5 : new Plane()\n\n\t\t];\n\n\t}\n\n\tObject.assign( Frustum.prototype, {\n\n\t\tset: function ( p0, p1, p2, p3, p4, p5 ) {\n\n\t\t\tvar planes = this.planes;\n\n\t\t\tplanes[ 0 ].copy( p0 );\n\t\t\tplanes[ 1 ].copy( p1 );\n\t\t\tplanes[ 2 ].copy( p2 );\n\t\t\tplanes[ 3 ].copy( p3 );\n\t\t\tplanes[ 4 ].copy( p4 );\n\t\t\tplanes[ 5 ].copy( p5 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( frustum ) {\n\n\t\t\tvar planes = this.planes;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tplanes[ i ].copy( frustum.planes[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromProjectionMatrix: function ( m ) {\n\n\t\t\tvar planes = this.planes;\n\t\t\tvar me = m.elements;\n\t\t\tvar me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\n\t\t\tvar me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\n\t\t\tvar me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\n\t\t\tvar me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\n\n\t\t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\n\t\t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\n\t\t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\n\t\t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\n\t\t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\n\t\t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tintersectsObject: function ( object ) {\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }\n\n\t\t\t_sphere$1.copy( geometry.boundingSphere ).applyMatrix4( object.matrixWorld );\n\n\t\t\treturn this.intersectsSphere( _sphere$1 );\n\n\t\t},\n\n\t\tintersectsSprite: function ( sprite ) {\n\n\t\t\t_sphere$1.center.set( 0, 0, 0 );\n\t\t\t_sphere$1.radius = 0.7071067811865476;\n\t\t\t_sphere$1.applyMatrix4( sprite.matrixWorld );\n\n\t\t\treturn this.intersectsSphere( _sphere$1 );\n\n\t\t},\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\tvar planes = this.planes;\n\t\t\tvar center = sphere.center;\n\t\t\tvar negRadius = - sphere.radius;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tvar distance = planes[ i ].distanceToPoint( center );\n\n\t\t\t\tif ( distance < negRadius ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\tvar planes = this.planes;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tvar plane = planes[ i ];\n\n\t\t\t\t// corner at max distance\n\n\t\t\t\t_vector$5.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n\t\t\t\t_vector$5.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n\t\t\t\t_vector$5.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\n\t\t\t\tif ( plane.distanceToPoint( _vector$5 ) < 0 ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\tvar planes = this.planes;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * Uniforms library for shared webgl shaders\n\t */\n\n\tvar UniformsLib = {\n\n\t\tcommon: {\n\n\t\t\tdiffuse: { value: new Color( 0xeeeeee ) },\n\t\t\topacity: { value: 1.0 },\n\n\t\t\tmap: { value: null },\n\t\t\tuvTransform: { value: new Matrix3() },\n\t\t\tuv2Transform: { value: new Matrix3() },\n\n\t\t\talphaMap: { value: null },\n\n\t\t},\n\n\t\tspecularmap: {\n\n\t\t\tspecularMap: { value: null },\n\n\t\t},\n\n\t\tenvmap: {\n\n\t\t\tenvMap: { value: null },\n\t\t\tflipEnvMap: { value: - 1 },\n\t\t\treflectivity: { value: 1.0 },\n\t\t\trefractionRatio: { value: 0.98 },\n\t\t\tmaxMipLevel: { value: 0 }\n\n\t\t},\n\n\t\taomap: {\n\n\t\t\taoMap: { value: null },\n\t\t\taoMapIntensity: { value: 1 }\n\n\t\t},\n\n\t\tlightmap: {\n\n\t\t\tlightMap: { value: null },\n\t\t\tlightMapIntensity: { value: 1 }\n\n\t\t},\n\n\t\temissivemap: {\n\n\t\t\temissiveMap: { value: null }\n\n\t\t},\n\n\t\tbumpmap: {\n\n\t\t\tbumpMap: { value: null },\n\t\t\tbumpScale: { value: 1 }\n\n\t\t},\n\n\t\tnormalmap: {\n\n\t\t\tnormalMap: { value: null },\n\t\t\tnormalScale: { value: new Vector2( 1, 1 ) }\n\n\t\t},\n\n\t\tdisplacementmap: {\n\n\t\t\tdisplacementMap: { value: null },\n\t\t\tdisplacementScale: { value: 1 },\n\t\t\tdisplacementBias: { value: 0 }\n\n\t\t},\n\n\t\troughnessmap: {\n\n\t\t\troughnessMap: { value: null }\n\n\t\t},\n\n\t\tmetalnessmap: {\n\n\t\t\tmetalnessMap: { value: null }\n\n\t\t},\n\n\t\tgradientmap: {\n\n\t\t\tgradientMap: { value: null }\n\n\t\t},\n\n\t\tfog: {\n\n\t\t\tfogDensity: { value: 0.00025 },\n\t\t\tfogNear: { value: 1 },\n\t\t\tfogFar: { value: 2000 },\n\t\t\tfogColor: { value: new Color( 0xffffff ) }\n\n\t\t},\n\n\t\tlights: {\n\n\t\t\tambientLightColor: { value: [] },\n\n\t\t\tlightProbe: { value: [] },\n\n\t\t\tdirectionalLights: { value: [], properties: {\n\t\t\t\tdirection: {},\n\t\t\t\tcolor: {},\n\n\t\t\t\tshadow: {},\n\t\t\t\tshadowBias: {},\n\t\t\t\tshadowRadius: {},\n\t\t\t\tshadowMapSize: {}\n\t\t\t} },\n\n\t\t\tdirectionalShadowMap: { value: [] },\n\t\t\tdirectionalShadowMatrix: { value: [] },\n\n\t\t\tspotLights: { value: [], properties: {\n\t\t\t\tcolor: {},\n\t\t\t\tposition: {},\n\t\t\t\tdirection: {},\n\t\t\t\tdistance: {},\n\t\t\t\tconeCos: {},\n\t\t\t\tpenumbraCos: {},\n\t\t\t\tdecay: {},\n\n\t\t\t\tshadow: {},\n\t\t\t\tshadowBias: {},\n\t\t\t\tshadowRadius: {},\n\t\t\t\tshadowMapSize: {}\n\t\t\t} },\n\n\t\t\tspotShadowMap: { value: [] },\n\t\t\tspotShadowMatrix: { value: [] },\n\n\t\t\tpointLights: { value: [], properties: {\n\t\t\t\tcolor: {},\n\t\t\t\tposition: {},\n\t\t\t\tdecay: {},\n\t\t\t\tdistance: {},\n\n\t\t\t\tshadow: {},\n\t\t\t\tshadowBias: {},\n\t\t\t\tshadowRadius: {},\n\t\t\t\tshadowMapSize: {},\n\t\t\t\tshadowCameraNear: {},\n\t\t\t\tshadowCameraFar: {}\n\t\t\t} },\n\n\t\t\tpointShadowMap: { value: [] },\n\t\t\tpointShadowMatrix: { value: [] },\n\n\t\t\themisphereLights: { value: [], properties: {\n\t\t\t\tdirection: {},\n\t\t\t\tskyColor: {},\n\t\t\t\tgroundColor: {}\n\t\t\t} },\n\n\t\t\t// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src\n\t\t\trectAreaLights: { value: [], properties: {\n\t\t\t\tcolor: {},\n\t\t\t\tposition: {},\n\t\t\t\twidth: {},\n\t\t\t\theight: {}\n\t\t\t} }\n\n\t\t},\n\n\t\tpoints: {\n\n\t\t\tdiffuse: { value: new Color( 0xeeeeee ) },\n\t\t\topacity: { value: 1.0 },\n\t\t\tsize: { value: 1.0 },\n\t\t\tscale: { value: 1.0 },\n\t\t\tmap: { value: null },\n\t\t\talphaMap: { value: null },\n\t\t\tuvTransform: { value: new Matrix3() }\n\n\t\t},\n\n\t\tsprite: {\n\n\t\t\tdiffuse: { value: new Color( 0xeeeeee ) },\n\t\t\topacity: { value: 1.0 },\n\t\t\tcenter: { value: new Vector2( 0.5, 0.5 ) },\n\t\t\trotation: { value: 0.0 },\n\t\t\tmap: { value: null },\n\t\t\talphaMap: { value: null },\n\t\t\tuvTransform: { value: new Matrix3() }\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLAnimation() {\n\n\t\tvar context = null;\n\t\tvar isAnimating = false;\n\t\tvar animationLoop = null;\n\n\t\tfunction onAnimationFrame( time, frame ) {\n\n\t\t\tif ( isAnimating === false ) { return; }\n\n\t\t\tanimationLoop( time, frame );\n\n\t\t\tcontext.requestAnimationFrame( onAnimationFrame );\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tstart: function () {\n\n\t\t\t\tif ( isAnimating === true ) { return; }\n\t\t\t\tif ( animationLoop === null ) { return; }\n\n\t\t\t\tcontext.requestAnimationFrame( onAnimationFrame );\n\n\t\t\t\tisAnimating = true;\n\n\t\t\t},\n\n\t\t\tstop: function () {\n\n\t\t\t\tisAnimating = false;\n\n\t\t\t},\n\n\t\t\tsetAnimationLoop: function ( callback ) {\n\n\t\t\t\tanimationLoop = callback;\n\n\t\t\t},\n\n\t\t\tsetContext: function ( value ) {\n\n\t\t\t\tcontext = value;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLAttributes( gl, capabilities ) {\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\n\t\tvar buffers = new WeakMap();\n\n\t\tfunction createBuffer( attribute, bufferType ) {\n\n\t\t\tvar array = attribute.array;\n\t\t\tvar usage = attribute.usage;\n\n\t\t\tvar buffer = gl.createBuffer();\n\n\t\t\tgl.bindBuffer( bufferType, buffer );\n\t\t\tgl.bufferData( bufferType, array, usage );\n\n\t\t\tattribute.onUploadCallback();\n\n\t\t\tvar type = 5126;\n\n\t\t\tif ( array instanceof Float32Array ) {\n\n\t\t\t\ttype = 5126;\n\n\t\t\t} else if ( array instanceof Float64Array ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.' );\n\n\t\t\t} else if ( array instanceof Uint16Array ) {\n\n\t\t\t\ttype = 5123;\n\n\t\t\t} else if ( array instanceof Int16Array ) {\n\n\t\t\t\ttype = 5122;\n\n\t\t\t} else if ( array instanceof Uint32Array ) {\n\n\t\t\t\ttype = 5125;\n\n\t\t\t} else if ( array instanceof Int32Array ) {\n\n\t\t\t\ttype = 5124;\n\n\t\t\t} else if ( array instanceof Int8Array ) {\n\n\t\t\t\ttype = 5120;\n\n\t\t\t} else if ( array instanceof Uint8Array ) {\n\n\t\t\t\ttype = 5121;\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tbuffer: buffer,\n\t\t\t\ttype: type,\n\t\t\t\tbytesPerElement: array.BYTES_PER_ELEMENT,\n\t\t\t\tversion: attribute.version\n\t\t\t};\n\n\t\t}\n\n\t\tfunction updateBuffer( buffer, attribute, bufferType ) {\n\n\t\t\tvar array = attribute.array;\n\t\t\tvar updateRange = attribute.updateRange;\n\n\t\t\tgl.bindBuffer( bufferType, buffer );\n\n\t\t\tif ( updateRange.count === - 1 ) {\n\n\t\t\t\t// Not using update ranges\n\n\t\t\t\tgl.bufferSubData( bufferType, 0, array );\n\n\t\t\t} else {\n\n\t\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t\tgl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,\n\t\t\t\t\t\tarray, updateRange.offset, updateRange.count );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,\n\t\t\t\t\t\tarray.subarray( updateRange.offset, updateRange.offset + updateRange.count ) );\n\n\t\t\t\t}\n\n\t\t\t\tupdateRange.count = - 1; // reset range\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tfunction get( attribute ) {\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) { attribute = attribute.data; }\n\n\t\t\treturn buffers.get( attribute );\n\n\t\t}\n\n\t\tfunction remove( attribute ) {\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) { attribute = attribute.data; }\n\n\t\t\tvar data = buffers.get( attribute );\n\n\t\t\tif ( data ) {\n\n\t\t\t\tgl.deleteBuffer( data.buffer );\n\n\t\t\t\tbuffers.delete( attribute );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction update( attribute, bufferType ) {\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) { attribute = attribute.data; }\n\n\t\t\tvar data = buffers.get( attribute );\n\n\t\t\tif ( data === undefined ) {\n\n\t\t\t\tbuffers.set( attribute, createBuffer( attribute, bufferType ) );\n\n\t\t\t} else if ( data.version < attribute.version ) {\n\n\t\t\t\tupdateBuffer( data.buffer, attribute, bufferType );\n\n\t\t\t\tdata.version = attribute.version;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tget: get,\n\t\t\tremove: remove,\n\t\t\tupdate: update\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// PlaneGeometry\n\n\tfunction PlaneGeometry( width, height, widthSegments, heightSegments ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'PlaneGeometry';\n\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments\n\t\t};\n\n\t\tthis.fromBufferGeometry( new PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tPlaneGeometry.prototype = Object.create( Geometry.prototype );\n\tPlaneGeometry.prototype.constructor = PlaneGeometry;\n\n\t// PlaneBufferGeometry\n\n\tfunction PlaneBufferGeometry( width, height, widthSegments, heightSegments ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'PlaneBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments\n\t\t};\n\n\t\twidth = width || 1;\n\t\theight = height || 1;\n\n\t\tvar width_half = width / 2;\n\t\tvar height_half = height / 2;\n\n\t\tvar gridX = Math.floor( widthSegments ) || 1;\n\t\tvar gridY = Math.floor( heightSegments ) || 1;\n\n\t\tvar gridX1 = gridX + 1;\n\t\tvar gridY1 = gridY + 1;\n\n\t\tvar segment_width = width / gridX;\n\t\tvar segment_height = height / gridY;\n\n\t\tvar ix, iy;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\tvar y = iy * segment_height - height_half;\n\n\t\t\tfor ( ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\tvar x = ix * segment_width - width_half;\n\n\t\t\t\tvertices.push( x, - y, 0 );\n\n\t\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t\tuvs.push( ix / gridX );\n\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( iy = 0; iy < gridY; iy ++ ) {\n\n\t\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\t\tvar a = ix + gridX1 * iy;\n\t\t\t\tvar b = ix + gridX1 * ( iy + 1 );\n\t\t\t\tvar c = ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\t\tvar d = ( ix + 1 ) + gridX1 * iy;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tPlaneBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tPlaneBufferGeometry.prototype.constructor = PlaneBufferGeometry;\n\n\tvar alphamap_fragment = \"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\";\n\n\tvar alphamap_pars_fragment = \"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n\n\tvar alphatest_fragment = \"#ifdef ALPHATEST\\n\\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif\";\n\n\tvar aomap_fragment = \"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\\t#endif\\n#endif\";\n\n\tvar aomap_pars_fragment = \"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\";\n\n\tvar begin_vertex = \"vec3 transformed = vec3( position );\";\n\n\tvar beginnormal_vertex = \"vec3 objectNormal = vec3( normal );\\n#ifdef USE_TANGENT\\n\\tvec3 objectTangent = vec3( tangent.xyz );\\n#endif\";\n\n\tvar bsdfs = \"vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\\n}\\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\tif( cutoffDistance > 0.0 ) {\\n\\t\\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t}\\n\\treturn distanceFalloff;\\n#else\\n\\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\\n\\t\\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n\\t}\\n\\treturn 1.0;\\n#endif\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n}\\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\\n\\tvec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\\n\\treturn Fr * fresnel + F0;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\treturn 1.0 / ( gl * gv );\\n}\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( incidentLight.direction + viewDir );\\n\\tfloat dotNL = saturate( dot( normal, incidentLight.direction ) );\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\treturn F * ( G * D );\\n}\\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\\n\\tconst float LUT_SIZE  = 64.0;\\n\\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\\n\\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\\n\\tfloat dotNV = saturate( dot( N, V ) );\\n\\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\\n\\tuv = uv * LUT_SCALE + LUT_BIAS;\\n\\treturn uv;\\n}\\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\\n\\tfloat l = length( f );\\n\\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\\n}\\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\\n\\tfloat x = dot( v1, v2 );\\n\\tfloat y = abs( x );\\n\\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\\n\\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\\n\\tfloat v = a / b;\\n\\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\\n\\treturn cross( v1, v2 ) * theta_sintheta;\\n}\\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\\n\\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\\n\\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\\n\\tvec3 lightNormal = cross( v1, v2 );\\n\\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\\n\\tvec3 T1, T2;\\n\\tT1 = normalize( V - N * dot( V, N ) );\\n\\tT2 = - cross( N, T1 );\\n\\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\\n\\tvec3 coords[ 4 ];\\n\\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\\n\\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\\n\\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\\n\\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\\n\\tcoords[ 0 ] = normalize( coords[ 0 ] );\\n\\tcoords[ 1 ] = normalize( coords[ 1 ] );\\n\\tcoords[ 2 ] = normalize( coords[ 2 ] );\\n\\tcoords[ 3 ] = normalize( coords[ 3 ] );\\n\\tvec3 vectorFormFactor = vec3( 0.0 );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\\n\\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\\n\\treturn vec3( result );\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\\n\\treturn specularColor * brdf.x + brdf.y;\\n}\\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tvec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\\n\\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\\n\\tvec3 FssEss = F * brdf.x + brdf.y;\\n\\tfloat Ess = brdf.x + brdf.y;\\n\\tfloat Ems = 1.0 - Ess;\\n\\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\\n\\tsingleScatter += FssEss;\\n\\tmultiScatter += Fms * Ems;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n#if defined( USE_SHEEN )\\nfloat D_Charlie(float roughness, float NoH) {\\n\\tfloat invAlpha  = 1.0 / roughness;\\n\\tfloat cos2h = NoH * NoH;\\n\\tfloat sin2h = max(1.0 - cos2h, 0.0078125);\\treturn (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);\\n}\\nfloat V_Neubelt(float NoV, float NoL) {\\n\\treturn saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\\n}\\nvec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\\n\\tvec3 N = geometry.normal;\\n\\tvec3 V = geometry.viewDir;\\n\\tvec3 H = normalize( V + L );\\n\\tfloat dotNH = saturate( dot( N, H ) );\\n\\treturn specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\\n}\\n#endif\";\n\n\tvar bumpmap_pars_fragment = \"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\\n\\t\\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\\n\\t\\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 );\\n\\t\\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\";\n\n\tvar clipping_planes_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvec4 plane;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\\n\\t\\tplane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n\\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\\n\\t\\tbool clipped = true;\\n\\t\\t#pragma unroll_loop\\n\\t\\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\\n\\t\\t\\tplane = clippingPlanes[ i ];\\n\\t\\t\\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\\n\\t\\t}\\n\\t\\tif ( clipped ) discard;\\n\\t#endif\\n#endif\";\n\n\tvar clipping_planes_pars_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\t#if ! defined( STANDARD ) && ! defined( PHONG ) && ! defined( MATCAP )\\n\\t\\tvarying vec3 vViewPosition;\\n\\t#endif\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\";\n\n\tvar clipping_planes_pars_vertex = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( STANDARD ) && ! defined( PHONG ) && ! defined( MATCAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\";\n\n\tvar clipping_planes_vertex = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( STANDARD ) && ! defined( PHONG ) && ! defined( MATCAP )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\";\n\n\tvar color_fragment = \"#ifdef USE_COLOR\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\";\n\n\tvar color_pars_fragment = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\";\n\n\tvar color_pars_vertex = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\";\n\n\tvar color_vertex = \"#ifdef USE_COLOR\\n\\tvColor.xyz = color.xyz;\\n#endif\";\n\n\tvar common = \"#define PI 3.14159265359\\n#define PI2 6.28318530718\\n#define PI_HALF 1.5707963267949\\n#define RECIPROCAL_PI 0.31830988618\\n#define RECIPROCAL_PI2 0.15915494\\n#define LOG2 1.442695\\n#define EPSILON 1e-6\\n#ifndef saturate\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\n#define whiteComplement(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract(sin(sn) * c);\\n}\\n#ifdef HIGH_PRECISION\\n\\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\\n#else\\n\\tfloat max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }\\n\\tfloat precisionSafeLength( vec3 v ) {\\n\\t\\tfloat maxComponent = max3( abs( v ) );\\n\\t\\treturn length( v / maxComponent ) * maxComponent;\\n\\t}\\n#endif\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n#ifdef CLEARCOAT\\n\\tvec3 clearcoatNormal;\\n#endif\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\nmat3 transposeMat3( const in mat3 m ) {\\n\\tmat3 tmp;\\n\\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\\n\\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\\n\\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\\n\\treturn tmp;\\n}\\nfloat linearToRelativeLuminance( const in vec3 color ) {\\n\\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\\n\\treturn dot( weights, color.rgb );\\n}\\nbool isPerspectiveMatrix( mat4 m ) {\\n  return m[ 2 ][ 3 ] == - 1.0;\\n}\";\n\n\tvar cube_uv_reflection_fragment = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n#define cubeUV_maxMipLevel 8.0\\n#define cubeUV_minMipLevel 4.0\\n#define cubeUV_maxTileSize 256.0\\n#define cubeUV_minTileSize 16.0\\nfloat getFace(vec3 direction) {\\n    vec3 absDirection = abs(direction);\\n    float face = -1.0;\\n    if (absDirection.x > absDirection.z) {\\n      if (absDirection.x > absDirection.y)\\n        face = direction.x > 0.0 ? 0.0 : 3.0;\\n      else\\n        face = direction.y > 0.0 ? 1.0 : 4.0;\\n    } else {\\n      if (absDirection.z > absDirection.y)\\n        face = direction.z > 0.0 ? 2.0 : 5.0;\\n      else\\n        face = direction.y > 0.0 ? 1.0 : 4.0;\\n    }\\n    return face;\\n}\\nvec2 getUV(vec3 direction, float face) {\\n    vec2 uv;\\n    if (face == 0.0) {\\n      uv = vec2(-direction.z, direction.y) / abs(direction.x);\\n    } else if (face == 1.0) {\\n      uv = vec2(direction.x, -direction.z) / abs(direction.y);\\n    } else if (face == 2.0) {\\n      uv = direction.xy / abs(direction.z);\\n    } else if (face == 3.0) {\\n      uv = vec2(direction.z, direction.y) / abs(direction.x);\\n    } else if (face == 4.0) {\\n      uv = direction.xz / abs(direction.y);\\n    } else {\\n      uv = vec2(-direction.x, direction.y) / abs(direction.z);\\n    }\\n    return 0.5 * (uv + 1.0);\\n}\\nvec3 bilinearCubeUV(sampler2D envMap, vec3 direction, float mipInt) {\\n  float face = getFace(direction);\\n  float filterInt = max(cubeUV_minMipLevel - mipInt, 0.0);\\n  mipInt = max(mipInt, cubeUV_minMipLevel);\\n  float faceSize = exp2(mipInt);\\n  float texelSize = 1.0 / (3.0 * cubeUV_maxTileSize);\\n  vec2 uv = getUV(direction, face) * (faceSize - 1.0);\\n  vec2 f = fract(uv);\\n  uv += 0.5 - f;\\n  if (face > 2.0) {\\n    uv.y += faceSize;\\n    face -= 3.0;\\n  }\\n  uv.x += face * faceSize;\\n  if(mipInt < cubeUV_maxMipLevel){\\n    uv.y += 2.0 * cubeUV_maxTileSize;\\n  }\\n  uv.y += filterInt * 2.0 * cubeUV_minTileSize;\\n  uv.x += 3.0 * max(0.0, cubeUV_maxTileSize - 2.0 * faceSize);\\n  uv *= texelSize;\\n  vec3 tl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\\n  uv.x += texelSize;\\n  vec3 tr = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\\n  uv.y += texelSize;\\n  vec3 br = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\\n  uv.x -= texelSize;\\n  vec3 bl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\\n  vec3 tm = mix(tl, tr, f.x);\\n  vec3 bm = mix(bl, br, f.x);\\n  return mix(tm, bm, f.y);\\n}\\n#define r0 1.0\\n#define v0 0.339\\n#define m0 -2.0\\n#define r1 0.8\\n#define v1 0.276\\n#define m1 -1.0\\n#define r4 0.4\\n#define v4 0.046\\n#define m4 2.0\\n#define r5 0.305\\n#define v5 0.016\\n#define m5 3.0\\n#define r6 0.21\\n#define v6 0.0038\\n#define m6 4.0\\nfloat roughnessToMip(float roughness) {\\n  float mip = 0.0;\\n  if (roughness >= r1) {\\n    mip = (r0 - roughness) * (m1 - m0) / (r0 - r1) + m0;\\n  } else if (roughness >= r4) {\\n    mip = (r1 - roughness) * (m4 - m1) / (r1 - r4) + m1;\\n  } else if (roughness >= r5) {\\n    mip = (r4 - roughness) * (m5 - m4) / (r4 - r5) + m4;\\n  } else if (roughness >= r6) {\\n    mip = (r5 - roughness) * (m6 - m5) / (r5 - r6) + m5;\\n  } else {\\n    mip = -2.0 * log2(1.16 * roughness);  }\\n  return mip;\\n}\\nvec4 textureCubeUV(sampler2D envMap, vec3 sampleDir, float roughness) {\\n  float mip = clamp(roughnessToMip(roughness), m0, cubeUV_maxMipLevel);\\n  float mipF = fract(mip);\\n  float mipInt = floor(mip);\\n  vec3 color0 = bilinearCubeUV(envMap, sampleDir, mipInt);\\n  if (mipF == 0.0) {\\n    return vec4(color0, 1.0);\\n  } else {\\n    vec3 color1 = bilinearCubeUV(envMap, sampleDir, mipInt + 1.0);\\n    return vec4(mix(color0, color1, mipF), 1.0);\\n  }\\n}\\n#endif\";\n\n\tvar defaultnormal_vertex = \"vec3 transformedNormal = objectNormal;\\n#ifdef USE_INSTANCING\\n\\ttransformedNormal = mat3( instanceMatrix ) * transformedNormal;\\n#endif\\ntransformedNormal = normalMatrix * transformedNormal;\\n#ifdef FLIP_SIDED\\n\\ttransformedNormal = - transformedNormal;\\n#endif\\n#ifdef USE_TANGENT\\n\\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#ifdef FLIP_SIDED\\n\\t\\ttransformedTangent = - transformedTangent;\\n\\t#endif\\n#endif\";\n\n\tvar displacementmap_pars_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\";\n\n\tvar displacementmap_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\\n#endif\";\n\n\tvar emissivemap_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\";\n\n\tvar emissivemap_pars_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\";\n\n\tvar encodings_fragment = \"gl_FragColor = linearToOutputTexel( gl_FragColor );\";\n\n\tvar encodings_pars_fragment = \"\\nvec4 LinearToLinear( in vec4 value ) {\\n\\treturn value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n\\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n\\tfloat maxComponent = max( max( value.r, value.g ), value.b );\\n\\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n\\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n\\tM = ceil( M * 255.0 ) / 255.0;\\n\\treturn vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat D = max( maxRange / maxRGB, 1.0 );\\n\\tD = clamp( floor( D ) / 255.0, 0.0, 1.0 );\\n\\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value )  {\\n\\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\\n\\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\\n\\tvec4 vResult;\\n\\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n\\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n\\tvResult.w = fract( Le );\\n\\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\\n\\treturn vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n\\tfloat Le = value.z * 255.0 + value.w;\\n\\tvec3 Xp_Y_XYZp;\\n\\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\\n\\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n\\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n\\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\\n\\treturn vec4( max( vRGB, 0.0 ), 1.0 );\\n}\";\n\n\tvar envmap_fragment = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvec3 cameraToFrag;\\n\\t\\t\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t}  else {\\n\\t\\t\\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\\n\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\tvec2 sampleUV;\\n\\t\\treflectVec = normalize( reflectVec );\\n\\t\\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\t\\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\tvec4 envColor = texture2D( envMap, sampleUV );\\n\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\treflectVec = normalize( reflectVec );\\n\\t\\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\\n\\t\\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\t#ifndef ENVMAP_TYPE_CUBE_UV\\n\\t\\tenvColor = envMapTexelToLinear( envColor );\\n\\t#endif\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_common_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float envMapIntensity;\\n\\tuniform float flipEnvMap;\\n\\tuniform int maxMipLevel;\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\t\\n#endif\";\n\n\tvar envmap_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float reflectivity;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_pars_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\t\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_vertex = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex;\\n\\t\\tif ( isOrthographic ) { \\n\\t\\t\\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\";\n\n\tvar fog_vertex = \"#ifdef USE_FOG\\n\\tfogDepth = -mvPosition.z;\\n#endif\";\n\n\tvar fog_pars_vertex = \"#ifdef USE_FOG\\n\\tvarying float fogDepth;\\n#endif\";\n\n\tvar fog_fragment = \"#ifdef USE_FOG\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\";\n\n\tvar fog_pars_fragment = \"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\tvarying float fogDepth;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\";\n\n\tvar gradientmap_pars_fragment = \"#ifdef USE_GRADIENTMAP\\n\\tuniform sampler2D gradientMap;\\n#endif\\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\\n\\tfloat dotNL = dot( normal, lightDirection );\\n\\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\\n\\t#ifdef USE_GRADIENTMAP\\n\\t\\treturn texture2D( gradientMap, coord ).rgb;\\n\\t#else\\n\\t\\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\\n\\t#endif\\n}\";\n\n\tvar lightmap_fragment = \"#ifdef USE_LIGHTMAP\\n\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\treflectedLight.indirectDiffuse += PI * lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n#endif\";\n\n\tvar lightmap_pars_fragment = \"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\";\n\n\tvar lights_lambert_vertex = \"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\nvIndirectFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\\tvLightBack = vec3( 0.0 );\\n\\tvIndirectBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\n#if NUM_POINT_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\\t\\t#endif\\n\\t}\\n#endif\";\n\n\tvar lights_pars_begin = \"uniform bool receiveShadow;\\nuniform vec3 ambientLightColor;\\nuniform vec3 lightProbe[ 9 ];\\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\\n\\tfloat x = normal.x, y = normal.y, z = normal.z;\\n\\tvec3 result = shCoefficients[ 0 ] * 0.886227;\\n\\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\\n\\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\\n\\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\\n\\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\\n\\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\\n\\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\\n\\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\\n\\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\\n\\treturn result;\\n}\\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\\n\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\\n\\treturn irradiance;\\n}\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tdirectLight.color = directionalLight.color;\\n\\t\\tdirectLight.direction = directionalLight.direction;\\n\\t\\tdirectLight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t\\tfloat shadowCameraNear;\\n\\t\\tfloat shadowCameraFar;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tdirectLight.color = pointLight.color;\\n\\t\\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\\t\\tif ( angleCos > spotLight.coneCos ) {\\n\\t\\t\\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\t\\tdirectLight.color = spotLight.color;\\n\\t\\t\\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tstruct RectAreaLight {\\n\\t\\tvec3 color;\\n\\t\\tvec3 position;\\n\\t\\tvec3 halfWidth;\\n\\t\\tvec3 halfHeight;\\n\\t};\\n\\tuniform sampler2D ltc_1;\\tuniform sampler2D ltc_2;\\n\\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\\t\\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tirradiance *= PI;\\n\\t\\t#endif\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\";\n\n\tvar envmap_physical_pars_fragment = \"#if defined( USE_ENVMAP )\\n\\t#ifdef ENVMAP_MODE_REFRACTION\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n\\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\\t\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\\n\\t\\t#else\\n\\t\\t\\tvec4 envMapColor = vec4( 0.0 );\\n\\t\\t#endif\\n\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t}\\n\\tfloat getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {\\n\\t\\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\\t\\tfloat sigma = PI * roughness * roughness / ( 1.0 + roughness );\\n\\t\\tfloat desiredMIPLevel = maxMIPLevelScalar + log2( sigma );\\n\\t\\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\\t}\\n\\tvec3 getLightProbeIndirectRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t  vec3 reflectVec = reflect( -viewDir, normal );\\n\\t\\t  reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\\n\\t\\t#else\\n\\t\\t  vec3 reflectVec = refract( -viewDir, normal, refractionRatio );\\n\\t\\t#endif\\n\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\tfloat specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\\n\\t\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\t\\tvec2 sampleUV;\\n\\t\\t\\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\t\\t\\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\t\\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#endif\\n\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t}\\n#endif\";\n\n\tvar lights_toon_fragment = \"ToonMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\";\n\n\tvar lights_toon_pars_fragment = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct ToonMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tvec3\\tspecularColor;\\n\\tfloat\\tspecularShininess;\\n\\tfloat\\tspecularStrength;\\n};\\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Toon\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Toon\\n#define Material_LightProbeLOD( material )\\t(0)\";\n\n\tvar lights_phong_fragment = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\";\n\n\tvar lights_phong_pars_fragment = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tvec3\\tspecularColor;\\n\\tfloat\\tspecularShininess;\\n\\tfloat\\tspecularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\\t(0)\";\n\n\tvar lights_physical_fragment = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\\nmaterial.specularRoughness = max( roughnessFactor, 0.0525 );material.specularRoughness += geometryRoughness;\\nmaterial.specularRoughness = min( material.specularRoughness, 1.0 );\\n#ifdef REFLECTIVITY\\n\\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\\n#endif\\n#ifdef CLEARCOAT\\n\\tmaterial.clearcoat = saturate( clearcoat );\\tmaterial.clearcoatRoughness = max( clearcoatRoughness, 0.0525 );\\n\\tmaterial.clearcoatRoughness += geometryRoughness;\\n\\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\\n#endif\\n#ifdef USE_SHEEN\\n\\tmaterial.sheenColor = sheen;\\n#endif\";\n\n\tvar lights_physical_pars_fragment = \"struct PhysicalMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tfloat\\tspecularRoughness;\\n\\tvec3\\tspecularColor;\\n#ifdef CLEARCOAT\\n\\tfloat clearcoat;\\n\\tfloat clearcoatRoughness;\\n#endif\\n#ifdef USE_SHEEN\\n\\tvec3 sheenColor;\\n#endif\\n};\\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\\nfloat clearcoatDHRApprox( const in float roughness, const in float dotNL ) {\\n\\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\\n}\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t\\tvec3 normal = geometry.normal;\\n\\t\\tvec3 viewDir = geometry.viewDir;\\n\\t\\tvec3 position = geometry.position;\\n\\t\\tvec3 lightPos = rectAreaLight.position;\\n\\t\\tvec3 halfWidth = rectAreaLight.halfWidth;\\n\\t\\tvec3 halfHeight = rectAreaLight.halfHeight;\\n\\t\\tvec3 lightColor = rectAreaLight.color;\\n\\t\\tfloat roughness = material.specularRoughness;\\n\\t\\tvec3 rectCoords[ 4 ];\\n\\t\\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\\t\\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\\n\\t\\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\\n\\t\\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\\n\\t\\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\\n\\t\\tvec4 t1 = texture2D( ltc_1, uv );\\n\\t\\tvec4 t2 = texture2D( ltc_2, uv );\\n\\t\\tmat3 mInv = mat3(\\n\\t\\t\\tvec3( t1.x, 0, t1.y ),\\n\\t\\t\\tvec3(    0, 1,    0 ),\\n\\t\\t\\tvec3( t1.z, 0, t1.w )\\n\\t\\t);\\n\\t\\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\\n\\t\\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\\n\\t\\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\\n\\t}\\n#endif\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\t#ifdef CLEARCOAT\\n\\t\\tfloat ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\\n\\t\\tvec3 ccIrradiance = ccDotNL * directLight.color;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tccIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\\n\\t\\treflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\\n\\t#else\\n\\t\\tfloat clearcoatDHR = 0.0;\\n\\t#endif\\n\\t#ifdef USE_SHEEN\\n\\t\\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(\\n\\t\\t\\tmaterial.specularRoughness,\\n\\t\\t\\tdirectLight.direction,\\n\\t\\t\\tgeometry,\\n\\t\\t\\tmaterial.sheenColor\\n\\t\\t);\\n\\t#else\\n\\t\\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularRoughness);\\n\\t#endif\\n\\treflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\\n\\t#ifdef CLEARCOAT\\n\\t\\tfloat ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\\n\\t\\tfloat ccDotNL = ccDotNV;\\n\\t\\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\\n\\t#else\\n\\t\\tfloat clearcoatDHR = 0.0;\\n\\t#endif\\n\\tfloat clearcoatInv = 1.0 - clearcoatDHR;\\n\\tvec3 singleScattering = vec3( 0.0 );\\n\\tvec3 multiScattering = vec3( 0.0 );\\n\\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\\n\\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\\n\\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\\n\\treflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;\\n\\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\\n\\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_Direct_RectArea\\t\\tRE_Direct_RectArea_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\";\n\n\tvar lights_fragment_begin = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\\n#ifdef CLEARCOAT\\n\\tgeometry.clearcoatNormal = clearcoatNormal;\\n#endif\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\\n\\t\\tdirectLight.color *= all( bvec3( pointLight.shadow, directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\\n\\t\\tdirectLight.color *= all( bvec3( spotLight.shadow, directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\\n\\t\\tdirectLight.color *= all( bvec3( directionalLight.shadow, directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\\n\\tRectAreaLight rectAreaLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\\n\\t\\trectAreaLight = rectAreaLights[ i ];\\n\\t\\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 iblIrradiance = vec3( 0.0 );\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\tirradiance += getLightProbeIrradiance( lightProbe, geometry );\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\t#pragma unroll_loop\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t}\\n\\t#endif\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tvec3 radiance = vec3( 0.0 );\\n\\tvec3 clearcoatRadiance = vec3( 0.0 );\\n#endif\";\n\n\tvar lights_fragment_maps = \"#if defined( RE_IndirectDiffuse )\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\t\\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tlightMapIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tiblIrradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\\n\\t#endif\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\tradiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );\\n\\t#ifdef CLEARCOAT\\n\\t\\tclearcoatRadiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );\\n\\t#endif\\n#endif\";\n\n\tvar lights_fragment_end = \"#if defined( RE_IndirectDiffuse )\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\\n#endif\";\n\n\tvar logdepthbuf_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\\n#endif\";\n\n\tvar logdepthbuf_pars_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tuniform float logDepthBufFC;\\n\\tvarying float vFragDepth;\\n\\tvarying float vIsPerspective;\\n#endif\";\n\n\tvar logdepthbuf_pars_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t\\tvarying float vIsPerspective;\\n\\t#else\\n\\t\\tuniform float logDepthBufFC;\\n\\t#endif\\n#endif\";\n\n\tvar logdepthbuf_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t\\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\\n\\t#else\\n\\t\\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\\n\\t\\t\\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\\n\\t\\t\\tgl_Position.z *= gl_Position.w;\\n\\t\\t}\\n\\t#endif\\n#endif\";\n\n\tvar map_fragment = \"#ifdef USE_MAP\\n\\tvec4 texelColor = texture2D( map, vUv );\\n\\ttexelColor = mapTexelToLinear( texelColor );\\n\\tdiffuseColor *= texelColor;\\n#endif\";\n\n\tvar map_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\";\n\n\tvar map_particle_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\\n#endif\\n#ifdef USE_MAP\\n\\tvec4 mapTexel = texture2D( map, uv );\\n\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\\n#endif\";\n\n\tvar map_particle_pars_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tuniform mat3 uvTransform;\\n#endif\\n#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n\n\tvar metalnessmap_fragment = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\tmetalnessFactor *= texelMetalness.b;\\n#endif\";\n\n\tvar metalnessmap_pars_fragment = \"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\";\n\n\tvar morphnormal_vertex = \"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal *= morphTargetBaseInfluence;\\n\\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\\n\\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\\n\\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\\n\\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\\n#endif\";\n\n\tvar morphtarget_pars_vertex = \"#ifdef USE_MORPHTARGETS\\n\\tuniform float morphTargetBaseInfluence;\\n\\t#ifndef USE_MORPHNORMALS\\n\\tuniform float morphTargetInfluences[ 8 ];\\n\\t#else\\n\\tuniform float morphTargetInfluences[ 4 ];\\n\\t#endif\\n#endif\";\n\n\tvar morphtarget_vertex = \"#ifdef USE_MORPHTARGETS\\n\\ttransformed *= morphTargetBaseInfluence;\\n\\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\\n\\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\\n\\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\\n\\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\\n\\t#ifndef USE_MORPHNORMALS\\n\\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\\n\\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\\n\\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\\n\\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\\n\\t#endif\\n#endif\";\n\n\tvar normal_fragment_begin = \"#ifdef FLAT_SHADED\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t#endif\\n\\t#ifdef USE_TANGENT\\n\\t\\tvec3 tangent = normalize( vTangent );\\n\\t\\tvec3 bitangent = normalize( vBitangent );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\ttangent = tangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\t\\tbitangent = bitangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\t#endif\\n\\t\\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\\n\\t\\t\\tmat3 vTBN = mat3( tangent, bitangent, normal );\\n\\t\\t#endif\\n\\t#endif\\n#endif\\nvec3 geometryNormal = normal;\";\n\n\tvar normal_fragment_maps = \"#ifdef OBJECTSPACE_NORMALMAP\\n\\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t#ifdef FLIP_SIDED\\n\\t\\tnormal = - normal;\\n\\t#endif\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t#endif\\n\\tnormal = normalize( normalMatrix * normal );\\n#elif defined( TANGENTSPACE_NORMALMAP )\\n\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tmapN.xy *= normalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tnormal = normalize( vTBN * mapN );\\n\\t#else\\n\\t\\tnormal = perturbNormal2Arb( -vViewPosition, normal, mapN );\\n\\t#endif\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\\n#endif\";\n\n\tvar normalmap_pars_fragment = \"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n#endif\\n#ifdef OBJECTSPACE_NORMALMAP\\n\\tuniform mat3 normalMatrix;\\n#endif\\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\\n\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN ) {\\n\\t\\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\\n\\t\\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\\n\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\t\\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s );\\n\\t\\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\\n\\t\\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\\n\\t\\tvec3 N = normalize( surf_norm );\\n\\t\\tmat3 tsn = mat3( S, T, N );\\n\\t\\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\treturn normalize( tsn * mapN );\\n\\t}\\n#endif\";\n\n\tvar clearcoat_normal_fragment_begin = \"#ifdef CLEARCOAT\\n\\tvec3 clearcoatNormal = geometryNormal;\\n#endif\";\n\n\tvar clearcoat_normal_fragment_maps = \"#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tclearcoatMapN.xy *= clearcoatNormalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\\n\\t#else\\n\\t\\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN );\\n\\t#endif\\n#endif\";\n\n\tvar clearcoat_normalmap_pars_fragment = \"#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tuniform sampler2D clearcoatNormalMap;\\n\\tuniform vec2 clearcoatNormalScale;\\n#endif\";\n\n\tvar packing = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n\\treturn normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n\\treturn 2.0 * rgb.xyz - 1.0;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nvec4 pack2HalfToRGBA( vec2 v ) {\\n\\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ));\\n\\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w);\\n}\\nvec2 unpackRGBATo2Half( vec4 v ) {\\n\\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n\\treturn linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n\\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\";\n\n\tvar premultiplied_alpha_fragment = \"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\";\n\n\tvar project_vertex = \"vec4 mvPosition = vec4( transformed, 1.0 );\\n#ifdef USE_INSTANCING\\n\\tmvPosition = instanceMatrix * mvPosition;\\n#endif\\nmvPosition = modelViewMatrix * mvPosition;\\ngl_Position = projectionMatrix * mvPosition;\";\n\n\tvar dithering_fragment = \"#ifdef DITHERING\\n\\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\\n#endif\";\n\n\tvar dithering_pars_fragment = \"#ifdef DITHERING\\n\\tvec3 dithering( vec3 color ) {\\n\\t\\tfloat grid_position = rand( gl_FragCoord.xy );\\n\\t\\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\\n\\t\\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\\n\\t\\treturn color + dither_shift_RGB;\\n\\t}\\n#endif\";\n\n\tvar roughnessmap_fragment = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\troughnessFactor *= texelRoughness.g;\\n#endif\";\n\n\tvar roughnessmap_pars_fragment = \"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\";\n\n\tvar shadowmap_pars_fragment = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\\n\\t\\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\\n\\t}\\n\\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\\n\\t\\tfloat occlusion = 1.0;\\n\\t\\tvec2 distribution = texture2DDistribution( shadow, uv );\\n\\t\\tfloat hard_shadow = step( compare , distribution.x );\\n\\t\\tif (hard_shadow != 1.0 ) {\\n\\t\\t\\tfloat distance = compare - distribution.x ;\\n\\t\\t\\tfloat variance = max( 0.00000, distribution.y * distribution.y );\\n\\t\\t\\tfloat softness_probability = variance / (variance + distance * distance );\\t\\t\\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\\t\\t\\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\\n\\t\\t}\\n\\t\\treturn occlusion;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tfloat shadow = 1.0;\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx2 = dx0 / 2.0;\\n\\t\\t\\tfloat dy2 = dy0 / 2.0;\\n\\t\\t\\tfloat dx3 = dx1 / 2.0;\\n\\t\\t\\tfloat dy3 = dy1 / 2.0;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 17.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx = texelSize.x;\\n\\t\\t\\tfloat dy = texelSize.y;\\n\\t\\t\\tvec2 uv = shadowCoord.xy;\\n\\t\\t\\tvec2 f = fract( uv * shadowMapSize + 0.5 );\\n\\t\\t\\tuv -= f * texelSize;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t\\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t  f.x ),\\n\\t\\t\\t\\t\\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t\\t  texture2DCompare( shadowMap, uv + + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t  f.x ),\\n\\t\\t\\t\\t\\t f.y )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#else\\n\\t\\t\\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn shadow;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\\t\\tdp += shadowBias;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif\";\n\n\tvar shadowmap_pars_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n#endif\";\n\n\tvar shadowmap_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n#endif\";\n\n\tvar shadowmask_pars_fragment = \"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLight directionalLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tshadow *= all( bvec2( directionalLight.shadow, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLight spotLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tshadow *= all( bvec2( spotLight.shadow, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLight pointLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tshadow *= all( bvec2( pointLight.shadow, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\";\n\n\tvar skinbase_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\n\n\tvar skinning_pars_vertex = \"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\t#ifdef BONE_TEXTURE\\n\\t\\tuniform highp sampler2D boneTexture;\\n\\t\\tuniform int boneTextureSize;\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tfloat j = i * 4.0;\\n\\t\\t\\tfloat x = mod( j, float( boneTextureSize ) );\\n\\t\\t\\tfloat y = floor( j / float( boneTextureSize ) );\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureSize );\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureSize );\\n\\t\\t\\ty = dy * ( y + 0.5 );\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#else\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#endif\\n#endif\";\n\n\tvar skinning_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\ttransformed = ( bindMatrixInverse * skinned ).xyz;\\n#endif\";\n\n\tvar skinnormal_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n\\t#ifdef USE_TANGENT\\n\\t\\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#endif\\n#endif\";\n\n\tvar specularmap_fragment = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\";\n\n\tvar specularmap_pars_fragment = \"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\";\n\n\tvar tonemapping_fragment = \"#if defined( TONE_MAPPING )\\n\\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\";\n\n\tvar tonemapping_pars_fragment = \"#ifndef saturate\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\nuniform float toneMappingExposure;\\nuniform float toneMappingWhitePoint;\\nvec3 LinearToneMapping( vec3 color ) {\\n\\treturn toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\\nvec3 Uncharted2ToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\tcolor = max( vec3( 0.0 ), color - 0.004 );\\n\\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\nvec3 ACESFilmicToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( ( color * ( 2.51 * color + 0.03 ) ) / ( color * ( 2.43 * color + 0.59 ) + 0.14 ) );\\n}\";\n\n\tvar uv_pars_fragment = \"#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\\n\\tvarying vec2 vUv;\\n#endif\";\n\n\tvar uv_pars_vertex = \"#ifdef USE_UV\\n\\t#ifdef UVS_VERTEX_ONLY\\n\\t\\tvec2 vUv;\\n\\t#else\\n\\t\\tvarying vec2 vUv;\\n\\t#endif\\n\\tuniform mat3 uvTransform;\\n#endif\";\n\n\tvar uv_vertex = \"#ifdef USE_UV\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n#endif\";\n\n\tvar uv2_pars_fragment = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvarying vec2 vUv2;\\n#endif\";\n\n\tvar uv2_pars_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n\\tuniform mat3 uv2Transform;\\n#endif\";\n\n\tvar uv2_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\\n#endif\";\n\n\tvar worldpos_vertex = \"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\\n\\tvec4 worldPosition = vec4( transformed, 1.0 );\\n\\t#ifdef USE_INSTANCING\\n\\t\\tworldPosition = instanceMatrix * worldPosition;\\n\\t#endif\\n\\tworldPosition = modelMatrix * worldPosition;\\n#endif\";\n\n\tvar background_frag = \"uniform sampler2D t2D;\\nvarying vec2 vUv;\\nvoid main() {\\n\\tvec4 texColor = texture2D( t2D, vUv );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tvar background_vert = \"varying vec2 vUv;\\nuniform mat3 uvTransform;\\nvoid main() {\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n\\tgl_Position = vec4( position.xy, 1.0, 1.0 );\\n}\";\n\n\tvar cube_frag = \"#include <envmap_common_pars_fragment>\\nuniform float opacity;\\nvarying vec3 vWorldDirection;\\n#include <cube_uv_reflection_fragment>\\nvoid main() {\\n\\tvec3 vReflect = vWorldDirection;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = envColor;\\n\\tgl_FragColor.a *= opacity;\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tvar cube_vert = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\tgl_Position.z = gl_Position.w;\\n}\";\n\n\tvar depth_frag = \"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( 1.0 - gl_FragCoord.z ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\\n\\t#endif\\n}\";\n\n\tvar depth_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n}\";\n\n\tvar distanceRGBA_frag = \"#define DISTANCE\\nuniform vec3 referencePosition;\\nuniform float nearDistance;\\nuniform float farDistance;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\tfloat dist = length( vWorldPosition - referencePosition );\\n\\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\\n\\tdist = saturate( dist );\\n\\tgl_FragColor = packDepthToRGBA( dist );\\n}\";\n\n\tvar distanceRGBA_vert = \"#define DISTANCE\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition.xyz;\\n}\";\n\n\tvar equirect_frag = \"uniform sampler2D tEquirect;\\nvarying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldDirection );\\n\\tvec2 sampleUV;\\n\\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tvec4 texColor = texture2D( tEquirect, sampleUV );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tvar equirect_vert = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\";\n\n\tvar linedashed_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\n\tvar linedashed_vert = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\tvLineDistance = scale * lineDistance;\\n\\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshbasic_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\n\\t\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\t\\treflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vec3( 1.0 );\\n\\t#endif\\n\\t#include <aomap_fragment>\\n\\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\n\tvar meshbasic_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_ENVMAP\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshlambert_frag = \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <emissivemap_fragment>\\n\\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vIndirectFront;\\n\\t#endif\\n\\t#include <lightmap_fragment>\\n\\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\\t#else\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\n\\t#endif\\n\\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshlambert_vert = \"#define LAMBERT\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <lights_lambert_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshmatcap_frag = \"#define MATCAP\\nuniform vec3 diffuse;\\nuniform float opacity;\\nuniform sampler2D matcap;\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tvec3 viewDir = normalize( vViewPosition );\\n\\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\\n\\tvec3 y = cross( viewDir, x );\\n\\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\\n\\t#ifdef USE_MATCAP\\n\\t\\tvec4 matcapColor = texture2D( matcap, uv );\\n\\t\\tmatcapColor = matcapTexelToLinear( matcapColor );\\n\\t#else\\n\\t\\tvec4 matcapColor = vec4( 1.0 );\\n\\t#endif\\n\\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\n\tvar meshmatcap_vert = \"#define MATCAP\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#ifndef FLAT_SHADED\\n\\t\\tvNormal = normalize( transformedNormal );\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n}\";\n\n\tvar meshtoon_frag = \"#define TOON\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <gradientmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <lights_toon_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_toon_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshtoon_vert = \"#define TOON\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshphong_frag = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshphong_vert = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshphysical_frag = \"#define STANDARD\\n#ifdef PHYSICAL\\n\\t#define REFLECTIVITY\\n\\t#define CLEARCOAT\\n\\t#define TRANSPARENCY\\n#endif\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifdef TRANSPARENCY\\n\\tuniform float transparency;\\n#endif\\n#ifdef REFLECTIVITY\\n\\tuniform float reflectivity;\\n#endif\\n#ifdef CLEARCOAT\\n\\tuniform float clearcoat;\\n\\tuniform float clearcoatRoughness;\\n#endif\\n#ifdef USE_SHEEN\\n\\tuniform vec3 sheen;\\n#endif\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_physical_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <lights_pars_begin>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <clearcoat_normalmap_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <clearcoat_normal_fragment_begin>\\n\\t#include <clearcoat_normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#ifdef TRANSPARENCY\\n\\t\\tdiffuseColor.a *= saturate( 1. - transparency + linearToRelativeLuminance( reflectedLight.directSpecular + reflectedLight.indirectSpecular ) );\\n\\t#endif\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshphysical_vert = \"#define STANDARD\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar normal_frag = \"#define NORMAL\\nuniform float opacity;\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\\n}\";\n\n\tvar normal_vert = \"#define NORMAL\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n}\";\n\n\tvar points_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\n\tvar points_vert = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\tgl_PointSize = size;\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar shadow_frag = \"uniform vec3 color;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\n\tvar shadow_vert = \"#include <fog_pars_vertex>\\n#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar sprite_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\n\tvar sprite_vert = \"uniform float rotation;\\nuniform vec2 center;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\tvec2 scale;\\n\\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\\n\\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\\n\\t#ifndef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) scale *= - mvPosition.z;\\n\\t#endif\\n\\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\\n\\tvec2 rotatedPosition;\\n\\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\\n\\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\\n\\tmvPosition.xy += rotatedPosition;\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar ShaderChunk = {\n\t\talphamap_fragment: alphamap_fragment,\n\t\talphamap_pars_fragment: alphamap_pars_fragment,\n\t\talphatest_fragment: alphatest_fragment,\n\t\taomap_fragment: aomap_fragment,\n\t\taomap_pars_fragment: aomap_pars_fragment,\n\t\tbegin_vertex: begin_vertex,\n\t\tbeginnormal_vertex: beginnormal_vertex,\n\t\tbsdfs: bsdfs,\n\t\tbumpmap_pars_fragment: bumpmap_pars_fragment,\n\t\tclipping_planes_fragment: clipping_planes_fragment,\n\t\tclipping_planes_pars_fragment: clipping_planes_pars_fragment,\n\t\tclipping_planes_pars_vertex: clipping_planes_pars_vertex,\n\t\tclipping_planes_vertex: clipping_planes_vertex,\n\t\tcolor_fragment: color_fragment,\n\t\tcolor_pars_fragment: color_pars_fragment,\n\t\tcolor_pars_vertex: color_pars_vertex,\n\t\tcolor_vertex: color_vertex,\n\t\tcommon: common,\n\t\tcube_uv_reflection_fragment: cube_uv_reflection_fragment,\n\t\tdefaultnormal_vertex: defaultnormal_vertex,\n\t\tdisplacementmap_pars_vertex: displacementmap_pars_vertex,\n\t\tdisplacementmap_vertex: displacementmap_vertex,\n\t\temissivemap_fragment: emissivemap_fragment,\n\t\temissivemap_pars_fragment: emissivemap_pars_fragment,\n\t\tencodings_fragment: encodings_fragment,\n\t\tencodings_pars_fragment: encodings_pars_fragment,\n\t\tenvmap_fragment: envmap_fragment,\n\t\tenvmap_common_pars_fragment: envmap_common_pars_fragment,\n\t\tenvmap_pars_fragment: envmap_pars_fragment,\n\t\tenvmap_pars_vertex: envmap_pars_vertex,\n\t\tenvmap_physical_pars_fragment: envmap_physical_pars_fragment,\n\t\tenvmap_vertex: envmap_vertex,\n\t\tfog_vertex: fog_vertex,\n\t\tfog_pars_vertex: fog_pars_vertex,\n\t\tfog_fragment: fog_fragment,\n\t\tfog_pars_fragment: fog_pars_fragment,\n\t\tgradientmap_pars_fragment: gradientmap_pars_fragment,\n\t\tlightmap_fragment: lightmap_fragment,\n\t\tlightmap_pars_fragment: lightmap_pars_fragment,\n\t\tlights_lambert_vertex: lights_lambert_vertex,\n\t\tlights_pars_begin: lights_pars_begin,\n\t\tlights_toon_fragment: lights_toon_fragment,\n\t\tlights_toon_pars_fragment: lights_toon_pars_fragment,\n\t\tlights_phong_fragment: lights_phong_fragment,\n\t\tlights_phong_pars_fragment: lights_phong_pars_fragment,\n\t\tlights_physical_fragment: lights_physical_fragment,\n\t\tlights_physical_pars_fragment: lights_physical_pars_fragment,\n\t\tlights_fragment_begin: lights_fragment_begin,\n\t\tlights_fragment_maps: lights_fragment_maps,\n\t\tlights_fragment_end: lights_fragment_end,\n\t\tlogdepthbuf_fragment: logdepthbuf_fragment,\n\t\tlogdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\n\t\tlogdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\n\t\tlogdepthbuf_vertex: logdepthbuf_vertex,\n\t\tmap_fragment: map_fragment,\n\t\tmap_pars_fragment: map_pars_fragment,\n\t\tmap_particle_fragment: map_particle_fragment,\n\t\tmap_particle_pars_fragment: map_particle_pars_fragment,\n\t\tmetalnessmap_fragment: metalnessmap_fragment,\n\t\tmetalnessmap_pars_fragment: metalnessmap_pars_fragment,\n\t\tmorphnormal_vertex: morphnormal_vertex,\n\t\tmorphtarget_pars_vertex: morphtarget_pars_vertex,\n\t\tmorphtarget_vertex: morphtarget_vertex,\n\t\tnormal_fragment_begin: normal_fragment_begin,\n\t\tnormal_fragment_maps: normal_fragment_maps,\n\t\tnormalmap_pars_fragment: normalmap_pars_fragment,\n\t\tclearcoat_normal_fragment_begin: clearcoat_normal_fragment_begin,\n\t\tclearcoat_normal_fragment_maps: clearcoat_normal_fragment_maps,\n\t\tclearcoat_normalmap_pars_fragment: clearcoat_normalmap_pars_fragment,\n\t\tpacking: packing,\n\t\tpremultiplied_alpha_fragment: premultiplied_alpha_fragment,\n\t\tproject_vertex: project_vertex,\n\t\tdithering_fragment: dithering_fragment,\n\t\tdithering_pars_fragment: dithering_pars_fragment,\n\t\troughnessmap_fragment: roughnessmap_fragment,\n\t\troughnessmap_pars_fragment: roughnessmap_pars_fragment,\n\t\tshadowmap_pars_fragment: shadowmap_pars_fragment,\n\t\tshadowmap_pars_vertex: shadowmap_pars_vertex,\n\t\tshadowmap_vertex: shadowmap_vertex,\n\t\tshadowmask_pars_fragment: shadowmask_pars_fragment,\n\t\tskinbase_vertex: skinbase_vertex,\n\t\tskinning_pars_vertex: skinning_pars_vertex,\n\t\tskinning_vertex: skinning_vertex,\n\t\tskinnormal_vertex: skinnormal_vertex,\n\t\tspecularmap_fragment: specularmap_fragment,\n\t\tspecularmap_pars_fragment: specularmap_pars_fragment,\n\t\ttonemapping_fragment: tonemapping_fragment,\n\t\ttonemapping_pars_fragment: tonemapping_pars_fragment,\n\t\tuv_pars_fragment: uv_pars_fragment,\n\t\tuv_pars_vertex: uv_pars_vertex,\n\t\tuv_vertex: uv_vertex,\n\t\tuv2_pars_fragment: uv2_pars_fragment,\n\t\tuv2_pars_vertex: uv2_pars_vertex,\n\t\tuv2_vertex: uv2_vertex,\n\t\tworldpos_vertex: worldpos_vertex,\n\n\t\tbackground_frag: background_frag,\n\t\tbackground_vert: background_vert,\n\t\tcube_frag: cube_frag,\n\t\tcube_vert: cube_vert,\n\t\tdepth_frag: depth_frag,\n\t\tdepth_vert: depth_vert,\n\t\tdistanceRGBA_frag: distanceRGBA_frag,\n\t\tdistanceRGBA_vert: distanceRGBA_vert,\n\t\tequirect_frag: equirect_frag,\n\t\tequirect_vert: equirect_vert,\n\t\tlinedashed_frag: linedashed_frag,\n\t\tlinedashed_vert: linedashed_vert,\n\t\tmeshbasic_frag: meshbasic_frag,\n\t\tmeshbasic_vert: meshbasic_vert,\n\t\tmeshlambert_frag: meshlambert_frag,\n\t\tmeshlambert_vert: meshlambert_vert,\n\t\tmeshmatcap_frag: meshmatcap_frag,\n\t\tmeshmatcap_vert: meshmatcap_vert,\n\t\tmeshtoon_frag: meshtoon_frag,\n\t\tmeshtoon_vert: meshtoon_vert,\n\t\tmeshphong_frag: meshphong_frag,\n\t\tmeshphong_vert: meshphong_vert,\n\t\tmeshphysical_frag: meshphysical_frag,\n\t\tmeshphysical_vert: meshphysical_vert,\n\t\tnormal_frag: normal_frag,\n\t\tnormal_vert: normal_vert,\n\t\tpoints_frag: points_frag,\n\t\tpoints_vert: points_vert,\n\t\tshadow_frag: shadow_frag,\n\t\tshadow_vert: shadow_vert,\n\t\tsprite_frag: sprite_frag,\n\t\tsprite_vert: sprite_vert\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t */\n\n\tvar ShaderLib = {\n\n\t\tbasic: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.specularmap,\n\t\t\t\tUniformsLib.envmap,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.fog\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshbasic_vert,\n\t\t\tfragmentShader: ShaderChunk.meshbasic_frag\n\n\t\t},\n\n\t\tlambert: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.specularmap,\n\t\t\t\tUniformsLib.envmap,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.emissivemap,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\tUniformsLib.lights,\n\t\t\t\t{\n\t\t\t\t\temissive: { value: new Color( 0x000000 ) }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshlambert_vert,\n\t\t\tfragmentShader: ShaderChunk.meshlambert_frag\n\n\t\t},\n\n\t\tphong: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.specularmap,\n\t\t\t\tUniformsLib.envmap,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.emissivemap,\n\t\t\t\tUniformsLib.bumpmap,\n\t\t\t\tUniformsLib.normalmap,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\tUniformsLib.lights,\n\t\t\t\t{\n\t\t\t\t\temissive: { value: new Color( 0x000000 ) },\n\t\t\t\t\tspecular: { value: new Color( 0x111111 ) },\n\t\t\t\t\tshininess: { value: 30 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshphong_vert,\n\t\t\tfragmentShader: ShaderChunk.meshphong_frag\n\n\t\t},\n\n\t\tstandard: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.envmap,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.emissivemap,\n\t\t\t\tUniformsLib.bumpmap,\n\t\t\t\tUniformsLib.normalmap,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\tUniformsLib.roughnessmap,\n\t\t\t\tUniformsLib.metalnessmap,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\tUniformsLib.lights,\n\t\t\t\t{\n\t\t\t\t\temissive: { value: new Color( 0x000000 ) },\n\t\t\t\t\troughness: { value: 0.5 },\n\t\t\t\t\tmetalness: { value: 0.5 },\n\t\t\t\t\tenvMapIntensity: { value: 1 } // temporary\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\n\t\t},\n\n\t\ttoon: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.specularmap,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.emissivemap,\n\t\t\t\tUniformsLib.bumpmap,\n\t\t\t\tUniformsLib.normalmap,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\tUniformsLib.gradientmap,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\tUniformsLib.lights,\n\t\t\t\t{\n\t\t\t\t\temissive: { value: new Color( 0x000000 ) },\n\t\t\t\t\tspecular: { value: new Color( 0x111111 ) },\n\t\t\t\t\tshininess: { value: 30 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshtoon_vert,\n\t\t\tfragmentShader: ShaderChunk.meshtoon_frag\n\n\t\t},\n\n\t\tmatcap: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.bumpmap,\n\t\t\t\tUniformsLib.normalmap,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\t{\n\t\t\t\t\tmatcap: { value: null }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshmatcap_vert,\n\t\t\tfragmentShader: ShaderChunk.meshmatcap_frag\n\n\t\t},\n\n\t\tpoints: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.points,\n\t\t\t\tUniformsLib.fog\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.points_vert,\n\t\t\tfragmentShader: ShaderChunk.points_frag\n\n\t\t},\n\n\t\tdashed: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\t{\n\t\t\t\t\tscale: { value: 1 },\n\t\t\t\t\tdashSize: { value: 1 },\n\t\t\t\t\ttotalSize: { value: 2 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.linedashed_vert,\n\t\t\tfragmentShader: ShaderChunk.linedashed_frag\n\n\t\t},\n\n\t\tdepth: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.displacementmap\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.depth_vert,\n\t\t\tfragmentShader: ShaderChunk.depth_frag\n\n\t\t},\n\n\t\tnormal: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.bumpmap,\n\t\t\t\tUniformsLib.normalmap,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\t{\n\t\t\t\t\topacity: { value: 1.0 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.normal_vert,\n\t\t\tfragmentShader: ShaderChunk.normal_frag\n\n\t\t},\n\n\t\tsprite: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.sprite,\n\t\t\t\tUniformsLib.fog\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.sprite_vert,\n\t\t\tfragmentShader: ShaderChunk.sprite_frag\n\n\t\t},\n\n\t\tbackground: {\n\n\t\t\tuniforms: {\n\t\t\t\tuvTransform: { value: new Matrix3() },\n\t\t\t\tt2D: { value: null },\n\t\t\t},\n\n\t\t\tvertexShader: ShaderChunk.background_vert,\n\t\t\tfragmentShader: ShaderChunk.background_frag\n\n\t\t},\n\t\t/* -------------------------------------------------------------------------\n\t\t//\tCube map shader\n\t\t ------------------------------------------------------------------------- */\n\n\t\tcube: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.envmap,\n\t\t\t\t{\n\t\t\t\t\topacity: { value: 1.0 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.cube_vert,\n\t\t\tfragmentShader: ShaderChunk.cube_frag\n\n\t\t},\n\n\t\tequirect: {\n\n\t\t\tuniforms: {\n\t\t\t\ttEquirect: { value: null },\n\t\t\t},\n\n\t\t\tvertexShader: ShaderChunk.equirect_vert,\n\t\t\tfragmentShader: ShaderChunk.equirect_frag\n\n\t\t},\n\n\t\tdistanceRGBA: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\t{\n\t\t\t\t\treferencePosition: { value: new Vector3() },\n\t\t\t\t\tnearDistance: { value: 1 },\n\t\t\t\t\tfarDistance: { value: 1000 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.distanceRGBA_vert,\n\t\t\tfragmentShader: ShaderChunk.distanceRGBA_frag\n\n\t\t},\n\n\t\tshadow: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.lights,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\t{\n\t\t\t\t\tcolor: { value: new Color( 0x00000 ) },\n\t\t\t\t\topacity: { value: 1.0 }\n\t\t\t\t} ] ),\n\n\t\t\tvertexShader: ShaderChunk.shadow_vert,\n\t\t\tfragmentShader: ShaderChunk.shadow_frag\n\n\t\t}\n\n\t};\n\n\tShaderLib.physical = {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tShaderLib.standard.uniforms,\n\t\t\t{\n\t\t\t\ttransparency: { value: 0 },\n\t\t\t\tclearcoat: { value: 0 },\n\t\t\t\tclearcoatRoughness: { value: 0 },\n\t\t\t\tsheen: { value: new Color( 0x000000 ) },\n\t\t\t\tclearcoatNormalScale: { value: new Vector2( 1, 1 ) },\n\t\t\t\tclearcoatNormalMap: { value: null },\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLBackground( renderer, state, objects, premultipliedAlpha ) {\n\n\t\tvar clearColor = new Color( 0x000000 );\n\t\tvar clearAlpha = 0;\n\n\t\tvar planeMesh;\n\t\tvar boxMesh;\n\n\t\tvar currentBackground = null;\n\t\tvar currentBackgroundVersion = 0;\n\t\tvar currentTonemapping = null;\n\n\t\tfunction render( renderList, scene, camera, forceClear ) {\n\n\t\t\tvar background = scene.background;\n\n\t\t\t// Ignore background in AR\n\t\t\t// TODO: Reconsider this.\n\n\t\t\tvar xr = renderer.xr;\n\t\t\tvar session = xr.getSession && xr.getSession();\n\n\t\t\tif ( session && session.environmentBlendMode === 'additive' ) {\n\n\t\t\t\tbackground = null;\n\n\t\t\t}\n\n\t\t\tif ( background === null ) {\n\n\t\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t\t} else if ( background && background.isColor ) {\n\n\t\t\t\tsetClear( background, 1 );\n\t\t\t\tforceClear = true;\n\n\t\t\t}\n\n\t\t\tif ( renderer.autoClear || forceClear ) {\n\n\t\t\t\trenderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\n\t\t\t}\n\n\t\t\tif ( background && ( background.isCubeTexture || background.isWebGLCubeRenderTarget || background.mapping === CubeUVReflectionMapping ) ) {\n\n\t\t\t\tif ( boxMesh === undefined ) {\n\n\t\t\t\t\tboxMesh = new Mesh(\n\t\t\t\t\t\tnew BoxBufferGeometry( 1, 1, 1 ),\n\t\t\t\t\t\tnew ShaderMaterial( {\n\t\t\t\t\t\t\ttype: 'BackgroundCubeMaterial',\n\t\t\t\t\t\t\tuniforms: cloneUniforms( ShaderLib.cube.uniforms ),\n\t\t\t\t\t\t\tvertexShader: ShaderLib.cube.vertexShader,\n\t\t\t\t\t\t\tfragmentShader: ShaderLib.cube.fragmentShader,\n\t\t\t\t\t\t\tside: BackSide,\n\t\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\t\tfog: false\n\t\t\t\t\t\t} )\n\t\t\t\t\t);\n\n\t\t\t\t\tboxMesh.geometry.deleteAttribute( 'normal' );\n\t\t\t\t\tboxMesh.geometry.deleteAttribute( 'uv' );\n\n\t\t\t\t\tboxMesh.onBeforeRender = function ( renderer, scene, camera ) {\n\n\t\t\t\t\t\tthis.matrixWorld.copyPosition( camera.matrixWorld );\n\n\t\t\t\t\t};\n\n\t\t\t\t\t// enable code injection for non-built-in material\n\t\t\t\t\tObject.defineProperty( boxMesh.material, 'envMap', {\n\n\t\t\t\t\t\tget: function () {\n\n\t\t\t\t\t\t\treturn this.uniforms.envMap.value;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\n\t\t\t\t\tobjects.update( boxMesh );\n\n\t\t\t\t}\n\n\t\t\t\tvar texture = background.isWebGLCubeRenderTarget ? background.texture : background;\n\n\t\t\t\tboxMesh.material.uniforms.envMap.value = texture;\n\t\t\t\tboxMesh.material.uniforms.flipEnvMap.value = texture.isCubeTexture ? - 1 : 1;\n\n\t\t\t\tif ( currentBackground !== background ||\n\t\t\t\t\tcurrentBackgroundVersion !== texture.version ||\n\t\t\t\t\tcurrentTonemapping !== renderer.toneMapping ) {\n\n\t\t\t\t\tboxMesh.material.needsUpdate = true;\n\n\t\t\t\t\tcurrentBackground = background;\n\t\t\t\t\tcurrentBackgroundVersion = texture.version;\n\t\t\t\t\tcurrentTonemapping = renderer.toneMapping;\n\n\t\t\t\t}\n\n\t\t\t\t// push to the pre-sorted opaque render list\n\t\t\t\trenderList.unshift( boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null );\n\n\t\t\t} else if ( background && background.isTexture ) {\n\n\t\t\t\tif ( planeMesh === undefined ) {\n\n\t\t\t\t\tplaneMesh = new Mesh(\n\t\t\t\t\t\tnew PlaneBufferGeometry( 2, 2 ),\n\t\t\t\t\t\tnew ShaderMaterial( {\n\t\t\t\t\t\t\ttype: 'BackgroundMaterial',\n\t\t\t\t\t\t\tuniforms: cloneUniforms( ShaderLib.background.uniforms ),\n\t\t\t\t\t\t\tvertexShader: ShaderLib.background.vertexShader,\n\t\t\t\t\t\t\tfragmentShader: ShaderLib.background.fragmentShader,\n\t\t\t\t\t\t\tside: FrontSide,\n\t\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\t\tfog: false\n\t\t\t\t\t\t} )\n\t\t\t\t\t);\n\n\t\t\t\t\tplaneMesh.geometry.deleteAttribute( 'normal' );\n\n\t\t\t\t\t// enable code injection for non-built-in material\n\t\t\t\t\tObject.defineProperty( planeMesh.material, 'map', {\n\n\t\t\t\t\t\tget: function () {\n\n\t\t\t\t\t\t\treturn this.uniforms.t2D.value;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\n\t\t\t\t\tobjects.update( planeMesh );\n\n\t\t\t\t}\n\n\t\t\t\tplaneMesh.material.uniforms.t2D.value = background;\n\n\t\t\t\tif ( background.matrixAutoUpdate === true ) {\n\n\t\t\t\t\tbackground.updateMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tplaneMesh.material.uniforms.uvTransform.value.copy( background.matrix );\n\n\t\t\t\tif ( currentBackground !== background ||\n\t\t\t\t\tcurrentBackgroundVersion !== background.version ||\n\t\t\t\t\tcurrentTonemapping !== renderer.toneMapping ) {\n\n\t\t\t\t\tplaneMesh.material.needsUpdate = true;\n\n\t\t\t\t\tcurrentBackground = background;\n\t\t\t\t\tcurrentBackgroundVersion = background.version;\n\t\t\t\t\tcurrentTonemapping = renderer.toneMapping;\n\n\t\t\t\t}\n\n\n\t\t\t\t// push to the pre-sorted opaque render list\n\t\t\t\trenderList.unshift( planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setClear( color, alpha ) {\n\n\t\t\tstate.buffers.color.setClear( color.r, color.g, color.b, alpha, premultipliedAlpha );\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tgetClearColor: function () {\n\n\t\t\t\treturn clearColor;\n\n\t\t\t},\n\t\t\tsetClearColor: function ( color, alpha ) {\n\n\t\t\t\tclearColor.set( color );\n\t\t\t\tclearAlpha = alpha !== undefined ? alpha : 1;\n\t\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t\t},\n\t\t\tgetClearAlpha: function () {\n\n\t\t\t\treturn clearAlpha;\n\n\t\t\t},\n\t\t\tsetClearAlpha: function ( alpha ) {\n\n\t\t\t\tclearAlpha = alpha;\n\t\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t\t},\n\t\t\trender: render\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLBufferRenderer( gl, extensions, info, capabilities ) {\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\n\t\tvar mode;\n\n\t\tfunction setMode( value ) {\n\n\t\t\tmode = value;\n\n\t\t}\n\n\t\tfunction render( start, count ) {\n\n\t\t\tgl.drawArrays( mode, start, count );\n\n\t\t\tinfo.update( count, mode );\n\n\t\t}\n\n\t\tfunction renderInstances( geometry, start, count, primcount ) {\n\n\t\t\tif ( primcount === 0 ) { return; }\n\n\t\t\tvar extension, methodName;\n\n\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\textension = gl;\n\t\t\t\tmethodName = 'drawArraysInstanced';\n\n\t\t\t} else {\n\n\t\t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\n\t\t\t\tmethodName = 'drawArraysInstancedANGLE';\n\n\t\t\t\tif ( extension === null ) {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\textension[ methodName ]( mode, start, count, primcount );\n\n\t\t\tinfo.update( count, mode, primcount );\n\n\t\t}\n\n\t\t//\n\n\t\tthis.setMode = setMode;\n\t\tthis.render = render;\n\t\tthis.renderInstances = renderInstances;\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLCapabilities( gl, extensions, parameters ) {\n\n\t\tvar maxAnisotropy;\n\n\t\tfunction getMaxAnisotropy() {\n\n\t\t\tif ( maxAnisotropy !== undefined ) { return maxAnisotropy; }\n\n\t\t\tvar extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tmaxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\n\n\t\t\t} else {\n\n\t\t\t\tmaxAnisotropy = 0;\n\n\t\t\t}\n\n\t\t\treturn maxAnisotropy;\n\n\t\t}\n\n\t\tfunction getMaxPrecision( precision ) {\n\n\t\t\tif ( precision === 'highp' ) {\n\n\t\t\t\tif ( gl.getShaderPrecisionFormat( 35633, 36338 ).precision > 0 &&\n\t\t\t\t\tgl.getShaderPrecisionFormat( 35632, 36338 ).precision > 0 ) {\n\n\t\t\t\t\treturn 'highp';\n\n\t\t\t\t}\n\n\t\t\t\tprecision = 'mediump';\n\n\t\t\t}\n\n\t\t\tif ( precision === 'mediump' ) {\n\n\t\t\t\tif ( gl.getShaderPrecisionFormat( 35633, 36337 ).precision > 0 &&\n\t\t\t\t\tgl.getShaderPrecisionFormat( 35632, 36337 ).precision > 0 ) {\n\n\t\t\t\t\treturn 'mediump';\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn 'lowp';\n\n\t\t}\n\n\t\t/* eslint-disable no-undef */\n\t\tvar isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext ) ||\n\t\t\t( typeof WebGL2ComputeRenderingContext !== 'undefined' && gl instanceof WebGL2ComputeRenderingContext );\n\t\t/* eslint-enable no-undef */\n\n\t\tvar precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n\t\tvar maxPrecision = getMaxPrecision( precision );\n\n\t\tif ( maxPrecision !== precision ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );\n\t\t\tprecision = maxPrecision;\n\n\t\t}\n\n\t\tvar logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\n\n\t\tvar maxTextures = gl.getParameter( 34930 );\n\t\tvar maxVertexTextures = gl.getParameter( 35660 );\n\t\tvar maxTextureSize = gl.getParameter( 3379 );\n\t\tvar maxCubemapSize = gl.getParameter( 34076 );\n\n\t\tvar maxAttributes = gl.getParameter( 34921 );\n\t\tvar maxVertexUniforms = gl.getParameter( 36347 );\n\t\tvar maxVaryings = gl.getParameter( 36348 );\n\t\tvar maxFragmentUniforms = gl.getParameter( 36349 );\n\n\t\tvar vertexTextures = maxVertexTextures > 0;\n\t\tvar floatFragmentTextures = isWebGL2 || !! extensions.get( 'OES_texture_float' );\n\t\tvar floatVertexTextures = vertexTextures && floatFragmentTextures;\n\n\t\tvar maxSamples = isWebGL2 ? gl.getParameter( 36183 ) : 0;\n\n\t\treturn {\n\n\t\t\tisWebGL2: isWebGL2,\n\n\t\t\tgetMaxAnisotropy: getMaxAnisotropy,\n\t\t\tgetMaxPrecision: getMaxPrecision,\n\n\t\t\tprecision: precision,\n\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\n\t\t\tmaxTextures: maxTextures,\n\t\t\tmaxVertexTextures: maxVertexTextures,\n\t\t\tmaxTextureSize: maxTextureSize,\n\t\t\tmaxCubemapSize: maxCubemapSize,\n\n\t\t\tmaxAttributes: maxAttributes,\n\t\t\tmaxVertexUniforms: maxVertexUniforms,\n\t\t\tmaxVaryings: maxVaryings,\n\t\t\tmaxFragmentUniforms: maxFragmentUniforms,\n\n\t\t\tvertexTextures: vertexTextures,\n\t\t\tfloatFragmentTextures: floatFragmentTextures,\n\t\t\tfloatVertexTextures: floatVertexTextures,\n\n\t\t\tmaxSamples: maxSamples\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author tschw\n\t */\n\n\tfunction WebGLClipping() {\n\n\t\tvar scope = this,\n\n\t\t\tglobalState = null,\n\t\t\tnumGlobalPlanes = 0,\n\t\t\tlocalClippingEnabled = false,\n\t\t\trenderingShadows = false,\n\n\t\t\tplane = new Plane(),\n\t\t\tviewNormalMatrix = new Matrix3(),\n\n\t\t\tuniform = { value: null, needsUpdate: false };\n\n\t\tthis.uniform = uniform;\n\t\tthis.numPlanes = 0;\n\t\tthis.numIntersection = 0;\n\n\t\tthis.init = function ( planes, enableLocalClipping, camera ) {\n\n\t\t\tvar enabled =\n\t\t\t\tplanes.length !== 0 ||\n\t\t\t\tenableLocalClipping ||\n\t\t\t\t// enable state of previous frame - the clipping code has to\n\t\t\t\t// run another frame in order to reset the state:\n\t\t\t\tnumGlobalPlanes !== 0 ||\n\t\t\t\tlocalClippingEnabled;\n\n\t\t\tlocalClippingEnabled = enableLocalClipping;\n\n\t\t\tglobalState = projectPlanes( planes, camera, 0 );\n\t\t\tnumGlobalPlanes = planes.length;\n\n\t\t\treturn enabled;\n\n\t\t};\n\n\t\tthis.beginShadows = function () {\n\n\t\t\trenderingShadows = true;\n\t\t\tprojectPlanes( null );\n\n\t\t};\n\n\t\tthis.endShadows = function () {\n\n\t\t\trenderingShadows = false;\n\t\t\tresetGlobalState();\n\n\t\t};\n\n\t\tthis.setState = function ( planes, clipIntersection, clipShadows, camera, cache, fromCache ) {\n\n\t\t\tif ( ! localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && ! clipShadows ) {\n\n\t\t\t\t// there's no local clipping\n\n\t\t\t\tif ( renderingShadows ) {\n\n\t\t\t\t\t// there's no global clipping\n\n\t\t\t\t\tprojectPlanes( null );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tresetGlobalState();\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar nGlobal = renderingShadows ? 0 : numGlobalPlanes,\n\t\t\t\t\tlGlobal = nGlobal * 4,\n\n\t\t\t\t\tdstArray = cache.clippingState || null;\n\n\t\t\t\tuniform.value = dstArray; // ensure unique state\n\n\t\t\t\tdstArray = projectPlanes( planes, camera, lGlobal, fromCache );\n\n\t\t\t\tfor ( var i = 0; i !== lGlobal; ++ i ) {\n\n\t\t\t\t\tdstArray[ i ] = globalState[ i ];\n\n\t\t\t\t}\n\n\t\t\t\tcache.clippingState = dstArray;\n\t\t\t\tthis.numIntersection = clipIntersection ? this.numPlanes : 0;\n\t\t\t\tthis.numPlanes += nGlobal;\n\n\t\t\t}\n\n\n\t\t};\n\n\t\tfunction resetGlobalState() {\n\n\t\t\tif ( uniform.value !== globalState ) {\n\n\t\t\t\tuniform.value = globalState;\n\t\t\t\tuniform.needsUpdate = numGlobalPlanes > 0;\n\n\t\t\t}\n\n\t\t\tscope.numPlanes = numGlobalPlanes;\n\t\t\tscope.numIntersection = 0;\n\n\t\t}\n\n\t\tfunction projectPlanes( planes, camera, dstOffset, skipTransform ) {\n\n\t\t\tvar nPlanes = planes !== null ? planes.length : 0,\n\t\t\t\tdstArray = null;\n\n\t\t\tif ( nPlanes !== 0 ) {\n\n\t\t\t\tdstArray = uniform.value;\n\n\t\t\t\tif ( skipTransform !== true || dstArray === null ) {\n\n\t\t\t\t\tvar flatSize = dstOffset + nPlanes * 4,\n\t\t\t\t\t\tviewMatrix = camera.matrixWorldInverse;\n\n\t\t\t\t\tviewNormalMatrix.getNormalMatrix( viewMatrix );\n\n\t\t\t\t\tif ( dstArray === null || dstArray.length < flatSize ) {\n\n\t\t\t\t\t\tdstArray = new Float32Array( flatSize );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var i = 0, i4 = dstOffset; i !== nPlanes; ++ i, i4 += 4 ) {\n\n\t\t\t\t\t\tplane.copy( planes[ i ] ).applyMatrix4( viewMatrix, viewNormalMatrix );\n\n\t\t\t\t\t\tplane.normal.toArray( dstArray, i4 );\n\t\t\t\t\t\tdstArray[ i4 + 3 ] = plane.constant;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tuniform.value = dstArray;\n\t\t\t\tuniform.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tscope.numPlanes = nPlanes;\n\n\t\t\treturn dstArray;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLExtensions( gl ) {\n\n\t\tvar extensions = {};\n\n\t\treturn {\n\n\t\t\tget: function ( name ) {\n\n\t\t\t\tif ( extensions[ name ] !== undefined ) {\n\n\t\t\t\t\treturn extensions[ name ];\n\n\t\t\t\t}\n\n\t\t\t\tvar extension;\n\n\t\t\t\tswitch ( name ) {\n\n\t\t\t\t\tcase 'WEBGL_depth_texture':\n\t\t\t\t\t\textension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'EXT_texture_filter_anisotropic':\n\t\t\t\t\t\textension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'WEBGL_compressed_texture_s3tc':\n\t\t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\n\t\t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\textension = gl.getExtension( name );\n\n\t\t\t\t}\n\n\t\t\t\tif ( extension === null ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\n\n\t\t\t\t}\n\n\t\t\t\textensions[ name ] = extension;\n\n\t\t\t\treturn extension;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLGeometries( gl, attributes, info ) {\n\n\t\tvar geometries = new WeakMap();\n\t\tvar wireframeAttributes = new WeakMap();\n\n\t\tfunction onGeometryDispose( event ) {\n\n\t\t\tvar geometry = event.target;\n\t\t\tvar buffergeometry = geometries.get( geometry );\n\n\t\t\tif ( buffergeometry.index !== null ) {\n\n\t\t\t\tattributes.remove( buffergeometry.index );\n\n\t\t\t}\n\n\t\t\tfor ( var name in buffergeometry.attributes ) {\n\n\t\t\t\tattributes.remove( buffergeometry.attributes[ name ] );\n\n\t\t\t}\n\n\t\t\tgeometry.removeEventListener( 'dispose', onGeometryDispose );\n\n\t\t\tgeometries.delete( geometry );\n\n\t\t\tvar attribute = wireframeAttributes.get( buffergeometry );\n\n\t\t\tif ( attribute ) {\n\n\t\t\t\tattributes.remove( attribute );\n\t\t\t\twireframeAttributes.delete( buffergeometry );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tinfo.memory.geometries --;\n\n\t\t}\n\n\t\tfunction get( object, geometry ) {\n\n\t\t\tvar buffergeometry = geometries.get( geometry );\n\n\t\t\tif ( buffergeometry ) { return buffergeometry; }\n\n\t\t\tgeometry.addEventListener( 'dispose', onGeometryDispose );\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tbuffergeometry = geometry;\n\n\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\tif ( geometry._bufferGeometry === undefined ) {\n\n\t\t\t\t\tgeometry._bufferGeometry = new BufferGeometry().setFromObject( object );\n\n\t\t\t\t}\n\n\t\t\t\tbuffergeometry = geometry._bufferGeometry;\n\n\t\t\t}\n\n\t\t\tgeometries.set( geometry, buffergeometry );\n\n\t\t\tinfo.memory.geometries ++;\n\n\t\t\treturn buffergeometry;\n\n\t\t}\n\n\t\tfunction update( geometry ) {\n\n\t\t\tvar index = geometry.index;\n\t\t\tvar geometryAttributes = geometry.attributes;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tattributes.update( index, 34963 );\n\n\t\t\t}\n\n\t\t\tfor ( var name in geometryAttributes ) {\n\n\t\t\t\tattributes.update( geometryAttributes[ name ], 34962 );\n\n\t\t\t}\n\n\t\t\t// morph targets\n\n\t\t\tvar morphAttributes = geometry.morphAttributes;\n\n\t\t\tfor ( var name in morphAttributes ) {\n\n\t\t\t\tvar array = morphAttributes[ name ];\n\n\t\t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\n\n\t\t\t\t\tattributes.update( array[ i ], 34962 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction updateWireframeAttribute( geometry ) {\n\n\t\t\tvar indices = [];\n\n\t\t\tvar geometryIndex = geometry.index;\n\t\t\tvar geometryPosition = geometry.attributes.position;\n\t\t\tvar version = 0;\n\n\t\t\tif ( geometryIndex !== null ) {\n\n\t\t\t\tvar array = geometryIndex.array;\n\t\t\t\tversion = geometryIndex.version;\n\n\t\t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\t\t\tvar a = array[ i + 0 ];\n\t\t\t\t\tvar b = array[ i + 1 ];\n\t\t\t\t\tvar c = array[ i + 2 ];\n\n\t\t\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar array = geometryPosition.array;\n\t\t\t\tversion = geometryPosition.version;\n\n\t\t\t\tfor ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {\n\n\t\t\t\t\tvar a = i + 0;\n\t\t\t\t\tvar b = i + 1;\n\t\t\t\t\tvar c = i + 2;\n\n\t\t\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar attribute = new ( arrayMax( indices ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( indices, 1 );\n\t\t\tattribute.version = version;\n\n\t\t\tattributes.update( attribute, 34963 );\n\n\t\t\t//\n\n\t\t\tvar previousAttribute = wireframeAttributes.get( geometry );\n\n\t\t\tif ( previousAttribute ) { attributes.remove( previousAttribute ); }\n\n\t\t\t//\n\n\t\t\twireframeAttributes.set( geometry, attribute );\n\n\t\t}\n\n\t\tfunction getWireframeAttribute( geometry ) {\n\n\t\t\tvar currentAttribute = wireframeAttributes.get( geometry );\n\n\t\t\tif ( currentAttribute ) {\n\n\t\t\t\tvar geometryIndex = geometry.index;\n\n\t\t\t\tif ( geometryIndex !== null ) {\n\n\t\t\t\t\t// if the attribute is obsolete, create a new one\n\n\t\t\t\t\tif ( currentAttribute.version < geometryIndex.version ) {\n\n\t\t\t\t\t\tupdateWireframeAttribute( geometry );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tupdateWireframeAttribute( geometry );\n\n\t\t\t}\n\n\t\t\treturn wireframeAttributes.get( geometry );\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tget: get,\n\t\t\tupdate: update,\n\n\t\t\tgetWireframeAttribute: getWireframeAttribute\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLIndexedBufferRenderer( gl, extensions, info, capabilities ) {\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\n\t\tvar mode;\n\n\t\tfunction setMode( value ) {\n\n\t\t\tmode = value;\n\n\t\t}\n\n\t\tvar type, bytesPerElement;\n\n\t\tfunction setIndex( value ) {\n\n\t\t\ttype = value.type;\n\t\t\tbytesPerElement = value.bytesPerElement;\n\n\t\t}\n\n\t\tfunction render( start, count ) {\n\n\t\t\tgl.drawElements( mode, count, type, start * bytesPerElement );\n\n\t\t\tinfo.update( count, mode );\n\n\t\t}\n\n\t\tfunction renderInstances( geometry, start, count, primcount ) {\n\n\t\t\tif ( primcount === 0 ) { return; }\n\n\t\t\tvar extension, methodName;\n\n\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\textension = gl;\n\t\t\t\tmethodName = 'drawElementsInstanced';\n\n\t\t\t} else {\n\n\t\t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\n\t\t\t\tmethodName = 'drawElementsInstancedANGLE';\n\n\t\t\t\tif ( extension === null ) {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\textension[ methodName ]( mode, count, type, start * bytesPerElement, primcount );\n\n\t\t\tinfo.update( count, mode, primcount );\n\n\t\t}\n\n\t\t//\n\n\t\tthis.setMode = setMode;\n\t\tthis.setIndex = setIndex;\n\t\tthis.render = render;\n\t\tthis.renderInstances = renderInstances;\n\n\t}\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction WebGLInfo( gl ) {\n\n\t\tvar memory = {\n\t\t\tgeometries: 0,\n\t\t\ttextures: 0\n\t\t};\n\n\t\tvar render = {\n\t\t\tframe: 0,\n\t\t\tcalls: 0,\n\t\t\ttriangles: 0,\n\t\t\tpoints: 0,\n\t\t\tlines: 0\n\t\t};\n\n\t\tfunction update( count, mode, instanceCount ) {\n\n\t\t\tinstanceCount = instanceCount || 1;\n\n\t\t\trender.calls ++;\n\n\t\t\tswitch ( mode ) {\n\n\t\t\t\tcase 4:\n\t\t\t\t\trender.triangles += instanceCount * ( count / 3 );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\t\t\t\t\trender.lines += instanceCount * ( count / 2 );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 3:\n\t\t\t\t\trender.lines += instanceCount * ( count - 1 );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\n\t\t\t\t\trender.lines += instanceCount * count;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0:\n\t\t\t\t\trender.points += instanceCount * count;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.error( 'THREE.WebGLInfo: Unknown draw mode:', mode );\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction reset() {\n\n\t\t\trender.frame ++;\n\t\t\trender.calls = 0;\n\t\t\trender.triangles = 0;\n\t\t\trender.points = 0;\n\t\t\trender.lines = 0;\n\n\t\t}\n\n\t\treturn {\n\t\t\tmemory: memory,\n\t\t\trender: render,\n\t\t\tprograms: null,\n\t\t\tautoReset: true,\n\t\t\treset: reset,\n\t\t\tupdate: update\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction absNumericalSort( a, b ) {\n\n\t\treturn Math.abs( b[ 1 ] ) - Math.abs( a[ 1 ] );\n\n\t}\n\n\tfunction WebGLMorphtargets( gl ) {\n\n\t\tvar influencesList = {};\n\t\tvar morphInfluences = new Float32Array( 8 );\n\n\t\tfunction update( object, geometry, material, program ) {\n\n\t\t\tvar objectInfluences = object.morphTargetInfluences;\n\n\t\t\t// When object doesn't have morph target influences defined, we treat it as a 0-length array\n\t\t\t// This is important to make sure we set up morphTargetBaseInfluence / morphTargetInfluences\n\n\t\t\tvar length = objectInfluences === undefined ? 0 : objectInfluences.length;\n\n\t\t\tvar influences = influencesList[ geometry.id ];\n\n\t\t\tif ( influences === undefined ) {\n\n\t\t\t\t// initialise list\n\n\t\t\t\tinfluences = [];\n\n\t\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\t\tinfluences[ i ] = [ i, 0 ];\n\n\t\t\t\t}\n\n\t\t\t\tinfluencesList[ geometry.id ] = influences;\n\n\t\t\t}\n\n\t\t\tvar morphTargets = material.morphTargets && geometry.morphAttributes.position;\n\t\t\tvar morphNormals = material.morphNormals && geometry.morphAttributes.normal;\n\n\t\t\t// Remove current morphAttributes\n\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\tvar influence = influences[ i ];\n\n\t\t\t\tif ( influence[ 1 ] !== 0 ) {\n\n\t\t\t\t\tif ( morphTargets ) { geometry.deleteAttribute( 'morphTarget' + i ); }\n\t\t\t\t\tif ( morphNormals ) { geometry.deleteAttribute( 'morphNormal' + i ); }\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Collect influences\n\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\tvar influence = influences[ i ];\n\n\t\t\t\tinfluence[ 0 ] = i;\n\t\t\t\tinfluence[ 1 ] = objectInfluences[ i ];\n\n\t\t\t}\n\n\t\t\tinfluences.sort( absNumericalSort );\n\n\t\t\t// Add morphAttributes\n\n\t\t\tvar morphInfluencesSum = 0;\n\n\t\t\tfor ( var i = 0; i < 8; i ++ ) {\n\n\t\t\t\tvar influence = influences[ i ];\n\n\t\t\t\tif ( influence ) {\n\n\t\t\t\t\tvar index = influence[ 0 ];\n\t\t\t\t\tvar value = influence[ 1 ];\n\n\t\t\t\t\tif ( value ) {\n\n\t\t\t\t\t\tif ( morphTargets ) { geometry.setAttribute( 'morphTarget' + i, morphTargets[ index ] ); }\n\t\t\t\t\t\tif ( morphNormals ) { geometry.setAttribute( 'morphNormal' + i, morphNormals[ index ] ); }\n\n\t\t\t\t\t\tmorphInfluences[ i ] = value;\n\t\t\t\t\t\tmorphInfluencesSum += value;\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tmorphInfluences[ i ] = 0;\n\n\t\t\t}\n\n\t\t\t// GLSL shader uses formula baseinfluence * base + sum(target * influence)\n\t\t\t// This allows us to switch between absolute morphs and relative morphs without changing shader code\n\t\t\t// When baseinfluence = 1 - sum(influence), the above is equivalent to sum((target - base) * influence)\n\t\t\tvar morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;\n\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetBaseInfluence', morphBaseInfluence );\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetInfluences', morphInfluences );\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tupdate: update\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLObjects( gl, geometries, attributes, info ) {\n\n\t\tvar updateList = {};\n\n\t\tfunction update( object ) {\n\n\t\t\tvar frame = info.render.frame;\n\n\t\t\tvar geometry = object.geometry;\n\t\t\tvar buffergeometry = geometries.get( object, geometry );\n\n\t\t\t// Update once per frame\n\n\t\t\tif ( updateList[ buffergeometry.id ] !== frame ) {\n\n\t\t\t\tif ( geometry.isGeometry ) {\n\n\t\t\t\t\tbuffergeometry.updateFromObject( object );\n\n\t\t\t\t}\n\n\t\t\t\tgeometries.update( buffergeometry );\n\n\t\t\t\tupdateList[ buffergeometry.id ] = frame;\n\n\t\t\t}\n\n\t\t\tif ( object.isInstancedMesh ) {\n\n\t\t\t\tattributes.update( object.instanceMatrix, 34962 );\n\n\t\t\t}\n\n\t\t\treturn buffergeometry;\n\n\t\t}\n\n\t\tfunction dispose() {\n\n\t\t\tupdateList = {};\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tupdate: update,\n\t\t\tdispose: dispose\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction CubeTexture( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\n\t\timages = images !== undefined ? images : [];\n\t\tmapping = mapping !== undefined ? mapping : CubeReflectionMapping;\n\t\tformat = format !== undefined ? format : RGBFormat;\n\n\t\tTexture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\t\tthis.flipY = false;\n\n\t}\n\n\tCubeTexture.prototype = Object.create( Texture.prototype );\n\tCubeTexture.prototype.constructor = CubeTexture;\n\n\tCubeTexture.prototype.isCubeTexture = true;\n\n\tObject.defineProperty( CubeTexture.prototype, 'images', {\n\n\t\tget: function () {\n\n\t\t\treturn this.image;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis.image = value;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author Takahiro https://github.com/takahirox\n\t */\n\n\tfunction DataTexture2DArray( data, width, height, depth ) {\n\n\t\tTexture.call( this, null );\n\n\t\tthis.image = { data: data || null, width: width || 1, height: height || 1, depth: depth || 1 };\n\n\t\tthis.magFilter = NearestFilter;\n\t\tthis.minFilter = NearestFilter;\n\n\t\tthis.wrapR = ClampToEdgeWrapping;\n\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n\tDataTexture2DArray.prototype = Object.create( Texture.prototype );\n\tDataTexture2DArray.prototype.constructor = DataTexture2DArray;\n\tDataTexture2DArray.prototype.isDataTexture2DArray = true;\n\n\t/**\n\t * @author Artur Trzesiok\n\t */\n\n\tfunction DataTexture3D( data, width, height, depth ) {\n\n\t\t// We're going to add .setXXX() methods for setting properties later.\n\t\t// Users can still set in DataTexture3D directly.\n\t\t//\n\t\t//\tvar texture = new THREE.DataTexture3D( data, width, height, depth );\n\t\t// \ttexture.anisotropy = 16;\n\t\t//\n\t\t// See #14839\n\n\t\tTexture.call( this, null );\n\n\t\tthis.image = { data: data || null, width: width || 1, height: height || 1, depth: depth || 1 };\n\n\t\tthis.magFilter = NearestFilter;\n\t\tthis.minFilter = NearestFilter;\n\n\t\tthis.wrapR = ClampToEdgeWrapping;\n\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\n\t\tthis.needsUpdate = true;\n\n\n\t}\n\n\tDataTexture3D.prototype = Object.create( Texture.prototype );\n\tDataTexture3D.prototype.constructor = DataTexture3D;\n\tDataTexture3D.prototype.isDataTexture3D = true;\n\n\t/**\n\t * @author tschw\n\t * @author Mugen87 / https://github.com/Mugen87\n\t * @author mrdoob / http://mrdoob.com/\n\t *\n\t * Uniforms of a program.\n\t * Those form a tree structure with a special top-level container for the root,\n\t * which you get by calling 'new WebGLUniforms( gl, program )'.\n\t *\n\t *\n\t * Properties of inner nodes including the top-level container:\n\t *\n\t * .seq - array of nested uniforms\n\t * .map - nested uniforms by name\n\t *\n\t *\n\t * Methods of all nodes except the top-level container:\n\t *\n\t * .setValue( gl, value, [textures] )\n\t *\n\t * \t\tuploads a uniform value(s)\n\t *  \tthe 'textures' parameter is needed for sampler uniforms\n\t *\n\t *\n\t * Static methods of the top-level container (textures factorizations):\n\t *\n\t * .upload( gl, seq, values, textures )\n\t *\n\t * \t\tsets uniforms in 'seq' to 'values[id].value'\n\t *\n\t * .seqWithValue( seq, values ) : filteredSeq\n\t *\n\t * \t\tfilters 'seq' entries with corresponding entry in values\n\t *\n\t *\n\t * Methods of the top-level container (textures factorizations):\n\t *\n\t * .setValue( gl, name, value, textures )\n\t *\n\t * \t\tsets uniform with  name 'name' to 'value'\n\t *\n\t * .setOptional( gl, obj, prop )\n\t *\n\t * \t\tlike .set for an optional property of the object\n\t *\n\t */\n\n\tvar emptyTexture = new Texture();\n\tvar emptyTexture2dArray = new DataTexture2DArray();\n\tvar emptyTexture3d = new DataTexture3D();\n\tvar emptyCubeTexture = new CubeTexture();\n\n\t// --- Utilities ---\n\n\t// Array Caches (provide typed arrays for temporary by size)\n\n\tvar arrayCacheF32 = [];\n\tvar arrayCacheI32 = [];\n\n\t// Float32Array caches used for uploading Matrix uniforms\n\n\tvar mat4array = new Float32Array( 16 );\n\tvar mat3array = new Float32Array( 9 );\n\tvar mat2array = new Float32Array( 4 );\n\n\t// Flattening for arrays of vectors and matrices\n\n\tfunction flatten( array, nBlocks, blockSize ) {\n\n\t\tvar firstElem = array[ 0 ];\n\n\t\tif ( firstElem <= 0 || firstElem > 0 ) { return array; }\n\t\t// unoptimized: ! isNaN( firstElem )\n\t\t// see http://jacksondunstan.com/articles/983\n\n\t\tvar n = nBlocks * blockSize,\n\t\t\tr = arrayCacheF32[ n ];\n\n\t\tif ( r === undefined ) {\n\n\t\t\tr = new Float32Array( n );\n\t\t\tarrayCacheF32[ n ] = r;\n\n\t\t}\n\n\t\tif ( nBlocks !== 0 ) {\n\n\t\t\tfirstElem.toArray( r, 0 );\n\n\t\t\tfor ( var i = 1, offset = 0; i !== nBlocks; ++ i ) {\n\n\t\t\t\toffset += blockSize;\n\t\t\t\tarray[ i ].toArray( r, offset );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn r;\n\n\t}\n\n\tfunction arraysEqual( a, b ) {\n\n\t\tif ( a.length !== b.length ) { return false; }\n\n\t\tfor ( var i = 0, l = a.length; i < l; i ++ ) {\n\n\t\t\tif ( a[ i ] !== b[ i ] ) { return false; }\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tfunction copyArray( a, b ) {\n\n\t\tfor ( var i = 0, l = b.length; i < l; i ++ ) {\n\n\t\t\ta[ i ] = b[ i ];\n\n\t\t}\n\n\t}\n\n\t// Texture unit allocation\n\n\tfunction allocTexUnits( textures, n ) {\n\n\t\tvar r = arrayCacheI32[ n ];\n\n\t\tif ( r === undefined ) {\n\n\t\t\tr = new Int32Array( n );\n\t\t\tarrayCacheI32[ n ] = r;\n\n\t\t}\n\n\t\tfor ( var i = 0; i !== n; ++ i )\n\t\t\t{ r[ i ] = textures.allocateTextureUnit(); }\n\n\t\treturn r;\n\n\t}\n\n\t// --- Setters ---\n\n\t// Note: Defining these methods externally, because they come in a bunch\n\t// and this way their names minify.\n\n\t// Single scalar\n\n\tfunction setValueV1f( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( cache[ 0 ] === v ) { return; }\n\n\t\tgl.uniform1f( this.addr, v );\n\n\t\tcache[ 0 ] = v;\n\n\t}\n\n\t// Single float vector (from flat array or THREE.VectorN)\n\n\tfunction setValueV2f( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( v.x !== undefined ) {\n\n\t\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {\n\n\t\t\t\tgl.uniform2f( this.addr, v.x, v.y );\n\n\t\t\t\tcache[ 0 ] = v.x;\n\t\t\t\tcache[ 1 ] = v.y;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\t\tgl.uniform2fv( this.addr, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t}\n\n\t}\n\n\tfunction setValueV3f( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( v.x !== undefined ) {\n\n\t\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {\n\n\t\t\t\tgl.uniform3f( this.addr, v.x, v.y, v.z );\n\n\t\t\t\tcache[ 0 ] = v.x;\n\t\t\t\tcache[ 1 ] = v.y;\n\t\t\t\tcache[ 2 ] = v.z;\n\n\t\t\t}\n\n\t\t} else if ( v.r !== undefined ) {\n\n\t\t\tif ( cache[ 0 ] !== v.r || cache[ 1 ] !== v.g || cache[ 2 ] !== v.b ) {\n\n\t\t\t\tgl.uniform3f( this.addr, v.r, v.g, v.b );\n\n\t\t\t\tcache[ 0 ] = v.r;\n\t\t\t\tcache[ 1 ] = v.g;\n\t\t\t\tcache[ 2 ] = v.b;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\t\tgl.uniform3fv( this.addr, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t}\n\n\t}\n\n\tfunction setValueV4f( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( v.x !== undefined ) {\n\n\t\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {\n\n\t\t\t\tgl.uniform4f( this.addr, v.x, v.y, v.z, v.w );\n\n\t\t\t\tcache[ 0 ] = v.x;\n\t\t\t\tcache[ 1 ] = v.y;\n\t\t\t\tcache[ 2 ] = v.z;\n\t\t\t\tcache[ 3 ] = v.w;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\t\tgl.uniform4fv( this.addr, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t}\n\n\t}\n\n\t// Single matrix (from flat array or MatrixN)\n\n\tfunction setValueM2( gl, v ) {\n\n\t\tvar cache = this.cache;\n\t\tvar elements = v.elements;\n\n\t\tif ( elements === undefined ) {\n\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\t\tgl.uniformMatrix2fv( this.addr, false, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, elements ) ) { return; }\n\n\t\t\tmat2array.set( elements );\n\n\t\t\tgl.uniformMatrix2fv( this.addr, false, mat2array );\n\n\t\t\tcopyArray( cache, elements );\n\n\t\t}\n\n\t}\n\n\tfunction setValueM3( gl, v ) {\n\n\t\tvar cache = this.cache;\n\t\tvar elements = v.elements;\n\n\t\tif ( elements === undefined ) {\n\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\t\tgl.uniformMatrix3fv( this.addr, false, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, elements ) ) { return; }\n\n\t\t\tmat3array.set( elements );\n\n\t\t\tgl.uniformMatrix3fv( this.addr, false, mat3array );\n\n\t\t\tcopyArray( cache, elements );\n\n\t\t}\n\n\t}\n\n\tfunction setValueM4( gl, v ) {\n\n\t\tvar cache = this.cache;\n\t\tvar elements = v.elements;\n\n\t\tif ( elements === undefined ) {\n\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\t\tgl.uniformMatrix4fv( this.addr, false, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, elements ) ) { return; }\n\n\t\t\tmat4array.set( elements );\n\n\t\t\tgl.uniformMatrix4fv( this.addr, false, mat4array );\n\n\t\t\tcopyArray( cache, elements );\n\n\t\t}\n\n\t}\n\n\t// Single texture (2D / Cube)\n\n\tfunction setValueT1( gl, v, textures ) {\n\n\t\tvar cache = this.cache;\n\t\tvar unit = textures.allocateTextureUnit();\n\n\t\tif ( cache[ 0 ] !== unit ) {\n\n\t\t\tgl.uniform1i( this.addr, unit );\n\t\t\tcache[ 0 ] = unit;\n\n\t\t}\n\n\t\ttextures.safeSetTexture2D( v || emptyTexture, unit );\n\n\t}\n\n\tfunction setValueT2DArray1( gl, v, textures ) {\n\n\t\tvar cache = this.cache;\n\t\tvar unit = textures.allocateTextureUnit();\n\n\t\tif ( cache[ 0 ] !== unit ) {\n\n\t\t\tgl.uniform1i( this.addr, unit );\n\t\t\tcache[ 0 ] = unit;\n\n\t\t}\n\n\t\ttextures.setTexture2DArray( v || emptyTexture2dArray, unit );\n\n\t}\n\n\tfunction setValueT3D1( gl, v, textures ) {\n\n\t\tvar cache = this.cache;\n\t\tvar unit = textures.allocateTextureUnit();\n\n\t\tif ( cache[ 0 ] !== unit ) {\n\n\t\t\tgl.uniform1i( this.addr, unit );\n\t\t\tcache[ 0 ] = unit;\n\n\t\t}\n\n\t\ttextures.setTexture3D( v || emptyTexture3d, unit );\n\n\t}\n\n\tfunction setValueT6( gl, v, textures ) {\n\n\t\tvar cache = this.cache;\n\t\tvar unit = textures.allocateTextureUnit();\n\n\t\tif ( cache[ 0 ] !== unit ) {\n\n\t\t\tgl.uniform1i( this.addr, unit );\n\t\t\tcache[ 0 ] = unit;\n\n\t\t}\n\n\t\ttextures.safeSetTextureCube( v || emptyCubeTexture, unit );\n\n\t}\n\n\t// Integer / Boolean vectors or arrays thereof (always flat arrays)\n\n\tfunction setValueV1i( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( cache[ 0 ] === v ) { return; }\n\n\t\tgl.uniform1i( this.addr, v );\n\n\t\tcache[ 0 ] = v;\n\n\t}\n\n\tfunction setValueV2i( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\tgl.uniform2iv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n\tfunction setValueV3i( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\tgl.uniform3iv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n\tfunction setValueV4i( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\tgl.uniform4iv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n\t// uint\n\n\tfunction setValueV1ui( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( cache[ 0 ] === v ) { return; }\n\n\t\tgl.uniform1ui( this.addr, v );\n\n\t\tcache[ 0 ] = v;\n\n\t}\n\n\t// Helper to pick the right setter for the singular case\n\n\tfunction getSingularSetter( type ) {\n\n\t\tswitch ( type ) {\n\n\t\t\tcase 0x1406: return setValueV1f; // FLOAT\n\t\t\tcase 0x8b50: return setValueV2f; // _VEC2\n\t\t\tcase 0x8b51: return setValueV3f; // _VEC3\n\t\t\tcase 0x8b52: return setValueV4f; // _VEC4\n\n\t\t\tcase 0x8b5a: return setValueM2; // _MAT2\n\t\t\tcase 0x8b5b: return setValueM3; // _MAT3\n\t\t\tcase 0x8b5c: return setValueM4; // _MAT4\n\n\t\t\tcase 0x1404: case 0x8b56: return setValueV1i; // INT, BOOL\n\t\t\tcase 0x8b53: case 0x8b57: return setValueV2i; // _VEC2\n\t\t\tcase 0x8b54: case 0x8b58: return setValueV3i; // _VEC3\n\t\t\tcase 0x8b55: case 0x8b59: return setValueV4i; // _VEC4\n\n\t\t\tcase 0x1405: return setValueV1ui; // UINT\n\n\t\t\tcase 0x8b5e: // SAMPLER_2D\n\t\t\tcase 0x8d66: // SAMPLER_EXTERNAL_OES\n\t\t\tcase 0x8dca: // INT_SAMPLER_2D\n\t\t\tcase 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\n\t\t\tcase 0x8b62: // SAMPLER_2D_SHADOW\n\t\t\t\treturn setValueT1;\n\n\t\t\tcase 0x8b5f: // SAMPLER_3D\n\t\t\tcase 0x8dcb: // INT_SAMPLER_3D\n\t\t\tcase 0x8dd3: // UNSIGNED_INT_SAMPLER_3D\n\t\t\t\treturn setValueT3D1;\n\n\t\t\tcase 0x8b60: // SAMPLER_CUBE\n\t\t\tcase 0x8dcc: // INT_SAMPLER_CUBE\n\t\t\tcase 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\n\t\t\tcase 0x8dc5: // SAMPLER_CUBE_SHADOW\n\t\t\t\treturn setValueT6;\n\n\t\t\tcase 0x8dc1: // SAMPLER_2D_ARRAY\n\t\t\tcase 0x8dcf: // INT_SAMPLER_2D_ARRAY\n\t\t\tcase 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY\n\t\t\tcase 0x8dc4: // SAMPLER_2D_ARRAY_SHADOW\n\t\t\t\treturn setValueT2DArray1;\n\n\t\t}\n\n\t}\n\n\t// Array of scalars\n\tfunction setValueV1fArray( gl, v ) {\n\n\t\tgl.uniform1fv( this.addr, v );\n\n\t}\n\n\t// Integer / Boolean vectors or arrays thereof (always flat arrays)\n\tfunction setValueV1iArray( gl, v ) {\n\n\t\tgl.uniform1iv( this.addr, v );\n\n\t}\n\n\tfunction setValueV2iArray( gl, v ) {\n\n\t\tgl.uniform2iv( this.addr, v );\n\n\t}\n\n\tfunction setValueV3iArray( gl, v ) {\n\n\t\tgl.uniform3iv( this.addr, v );\n\n\t}\n\n\tfunction setValueV4iArray( gl, v ) {\n\n\t\tgl.uniform4iv( this.addr, v );\n\n\t}\n\n\n\t// Array of vectors (flat or from THREE classes)\n\n\tfunction setValueV2fArray( gl, v ) {\n\n\t\tvar data = flatten( v, this.size, 2 );\n\n\t\tgl.uniform2fv( this.addr, data );\n\n\t}\n\n\tfunction setValueV3fArray( gl, v ) {\n\n\t\tvar data = flatten( v, this.size, 3 );\n\n\t\tgl.uniform3fv( this.addr, data );\n\n\t}\n\n\tfunction setValueV4fArray( gl, v ) {\n\n\t\tvar data = flatten( v, this.size, 4 );\n\n\t\tgl.uniform4fv( this.addr, data );\n\n\t}\n\n\t// Array of matrices (flat or from THREE clases)\n\n\tfunction setValueM2Array( gl, v ) {\n\n\t\tvar data = flatten( v, this.size, 4 );\n\n\t\tgl.uniformMatrix2fv( this.addr, false, data );\n\n\t}\n\n\tfunction setValueM3Array( gl, v ) {\n\n\t\tvar data = flatten( v, this.size, 9 );\n\n\t\tgl.uniformMatrix3fv( this.addr, false, data );\n\n\t}\n\n\tfunction setValueM4Array( gl, v ) {\n\n\t\tvar data = flatten( v, this.size, 16 );\n\n\t\tgl.uniformMatrix4fv( this.addr, false, data );\n\n\t}\n\n\t// Array of textures (2D / Cube)\n\n\tfunction setValueT1Array( gl, v, textures ) {\n\n\t\tvar n = v.length;\n\n\t\tvar units = allocTexUnits( textures, n );\n\n\t\tgl.uniform1iv( this.addr, units );\n\n\t\tfor ( var i = 0; i !== n; ++ i ) {\n\n\t\t\ttextures.safeSetTexture2D( v[ i ] || emptyTexture, units[ i ] );\n\n\t\t}\n\n\t}\n\n\tfunction setValueT6Array( gl, v, textures ) {\n\n\t\tvar n = v.length;\n\n\t\tvar units = allocTexUnits( textures, n );\n\n\t\tgl.uniform1iv( this.addr, units );\n\n\t\tfor ( var i = 0; i !== n; ++ i ) {\n\n\t\t\ttextures.safeSetTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );\n\n\t\t}\n\n\t}\n\n\t// Helper to pick the right setter for a pure (bottom-level) array\n\n\tfunction getPureArraySetter( type ) {\n\n\t\tswitch ( type ) {\n\n\t\t\tcase 0x1406: return setValueV1fArray; // FLOAT\n\t\t\tcase 0x8b50: return setValueV2fArray; // _VEC2\n\t\t\tcase 0x8b51: return setValueV3fArray; // _VEC3\n\t\t\tcase 0x8b52: return setValueV4fArray; // _VEC4\n\n\t\t\tcase 0x8b5a: return setValueM2Array; // _MAT2\n\t\t\tcase 0x8b5b: return setValueM3Array; // _MAT3\n\t\t\tcase 0x8b5c: return setValueM4Array; // _MAT4\n\n\t\t\tcase 0x1404: case 0x8b56: return setValueV1iArray; // INT, BOOL\n\t\t\tcase 0x8b53: case 0x8b57: return setValueV2iArray; // _VEC2\n\t\t\tcase 0x8b54: case 0x8b58: return setValueV3iArray; // _VEC3\n\t\t\tcase 0x8b55: case 0x8b59: return setValueV4iArray; // _VEC4\n\n\t\t\tcase 0x8b5e: // SAMPLER_2D\n\t\t\tcase 0x8d66: // SAMPLER_EXTERNAL_OES\n\t\t\tcase 0x8dca: // INT_SAMPLER_2D\n\t\t\tcase 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\n\t\t\tcase 0x8b62: // SAMPLER_2D_SHADOW\n\t\t\t\treturn setValueT1Array;\n\n\t\t\tcase 0x8b60: // SAMPLER_CUBE\n\t\t\tcase 0x8dcc: // INT_SAMPLER_CUBE\n\t\t\tcase 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\n\t\t\tcase 0x8dc5: // SAMPLER_CUBE_SHADOW\n\t\t\t\treturn setValueT6Array;\n\n\t\t}\n\n\t}\n\n\t// --- Uniform Classes ---\n\n\tfunction SingleUniform( id, activeInfo, addr ) {\n\n\t\tthis.id = id;\n\t\tthis.addr = addr;\n\t\tthis.cache = [];\n\t\tthis.setValue = getSingularSetter( activeInfo.type );\n\n\t\t// this.path = activeInfo.name; // DEBUG\n\n\t}\n\n\tfunction PureArrayUniform( id, activeInfo, addr ) {\n\n\t\tthis.id = id;\n\t\tthis.addr = addr;\n\t\tthis.cache = [];\n\t\tthis.size = activeInfo.size;\n\t\tthis.setValue = getPureArraySetter( activeInfo.type );\n\n\t\t// this.path = activeInfo.name; // DEBUG\n\n\t}\n\n\tPureArrayUniform.prototype.updateCache = function ( data ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( data instanceof Float32Array && cache.length !== data.length ) {\n\n\t\t\tthis.cache = new Float32Array( data.length );\n\n\t\t}\n\n\t\tcopyArray( cache, data );\n\n\t};\n\n\tfunction StructuredUniform( id ) {\n\n\t\tthis.id = id;\n\n\t\tthis.seq = [];\n\t\tthis.map = {};\n\n\t}\n\n\tStructuredUniform.prototype.setValue = function ( gl, value, textures ) {\n\n\t\tvar seq = this.seq;\n\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tvar u = seq[ i ];\n\t\t\tu.setValue( gl, value[ u.id ], textures );\n\n\t\t}\n\n\t};\n\n\t// --- Top-level ---\n\n\t// Parser - builds up the property tree from the path strings\n\n\tvar RePathPart = /([\\w\\d_]+)(\\])?(\\[|\\.)?/g;\n\n\t// extracts\n\t// \t- the identifier (member name or array index)\n\t//  - followed by an optional right bracket (found when array index)\n\t//  - followed by an optional left bracket or dot (type of subscript)\n\t//\n\t// Note: These portions can be read in a non-overlapping fashion and\n\t// allow straightforward parsing of the hierarchy that WebGL encodes\n\t// in the uniform names.\n\n\tfunction addUniform( container, uniformObject ) {\n\n\t\tcontainer.seq.push( uniformObject );\n\t\tcontainer.map[ uniformObject.id ] = uniformObject;\n\n\t}\n\n\tfunction parseUniform( activeInfo, addr, container ) {\n\n\t\tvar path = activeInfo.name,\n\t\t\tpathLength = path.length;\n\n\t\t// reset RegExp object, because of the early exit of a previous run\n\t\tRePathPart.lastIndex = 0;\n\n\t\twhile ( true ) {\n\n\t\t\tvar match = RePathPart.exec( path ),\n\t\t\t\tmatchEnd = RePathPart.lastIndex,\n\n\t\t\t\tid = match[ 1 ],\n\t\t\t\tidIsIndex = match[ 2 ] === ']',\n\t\t\t\tsubscript = match[ 3 ];\n\n\t\t\tif ( idIsIndex ) { id = id | 0; } // convert to integer\n\n\t\t\tif ( subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength ) {\n\n\t\t\t\t// bare name or \"pure\" bottom-level array \"[0]\" suffix\n\n\t\t\t\taddUniform( container, subscript === undefined ?\n\t\t\t\t\tnew SingleUniform( id, activeInfo, addr ) :\n\t\t\t\t\tnew PureArrayUniform( id, activeInfo, addr ) );\n\n\t\t\t\tbreak;\n\n\t\t\t} else {\n\n\t\t\t\t// step into inner node / create it in case it doesn't exist\n\n\t\t\t\tvar map = container.map, next = map[ id ];\n\n\t\t\t\tif ( next === undefined ) {\n\n\t\t\t\t\tnext = new StructuredUniform( id );\n\t\t\t\t\taddUniform( container, next );\n\n\t\t\t\t}\n\n\t\t\t\tcontainer = next;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// Root Container\n\n\tfunction WebGLUniforms( gl, program ) {\n\n\t\tthis.seq = [];\n\t\tthis.map = {};\n\n\t\tvar n = gl.getProgramParameter( program, 35718 );\n\n\t\tfor ( var i = 0; i < n; ++ i ) {\n\n\t\t\tvar info = gl.getActiveUniform( program, i ),\n\t\t\t\taddr = gl.getUniformLocation( program, info.name );\n\n\t\t\tparseUniform( info, addr, this );\n\n\t\t}\n\n\t}\n\n\tWebGLUniforms.prototype.setValue = function ( gl, name, value, textures ) {\n\n\t\tvar u = this.map[ name ];\n\n\t\tif ( u !== undefined ) { u.setValue( gl, value, textures ); }\n\n\t};\n\n\tWebGLUniforms.prototype.setOptional = function ( gl, object, name ) {\n\n\t\tvar v = object[ name ];\n\n\t\tif ( v !== undefined ) { this.setValue( gl, name, v ); }\n\n\t};\n\n\n\t// Static interface\n\n\tWebGLUniforms.upload = function ( gl, seq, values, textures ) {\n\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tvar u = seq[ i ],\n\t\t\t\tv = values[ u.id ];\n\n\t\t\tif ( v.needsUpdate !== false ) {\n\n\t\t\t\t// note: always updating when .needsUpdate is undefined\n\t\t\t\tu.setValue( gl, v.value, textures );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tWebGLUniforms.seqWithValue = function ( seq, values ) {\n\n\t\tvar r = [];\n\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tvar u = seq[ i ];\n\t\t\tif ( u.id in values ) { r.push( u ); }\n\n\t\t}\n\n\t\treturn r;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLShader( gl, type, string ) {\n\n\t\tvar shader = gl.createShader( type );\n\n\t\tgl.shaderSource( shader, string );\n\t\tgl.compileShader( shader );\n\n\t\treturn shader;\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar programIdCount = 0;\n\n\tfunction addLineNumbers( string ) {\n\n\t\tvar lines = string.split( '\\n' );\n\n\t\tfor ( var i = 0; i < lines.length; i ++ ) {\n\n\t\t\tlines[ i ] = ( i + 1 ) + ': ' + lines[ i ];\n\n\t\t}\n\n\t\treturn lines.join( '\\n' );\n\n\t}\n\n\tfunction getEncodingComponents( encoding ) {\n\n\t\tswitch ( encoding ) {\n\n\t\t\tcase LinearEncoding:\n\t\t\t\treturn [ 'Linear', '( value )' ];\n\t\t\tcase sRGBEncoding:\n\t\t\t\treturn [ 'sRGB', '( value )' ];\n\t\t\tcase RGBEEncoding:\n\t\t\t\treturn [ 'RGBE', '( value )' ];\n\t\t\tcase RGBM7Encoding:\n\t\t\t\treturn [ 'RGBM', '( value, 7.0 )' ];\n\t\t\tcase RGBM16Encoding:\n\t\t\t\treturn [ 'RGBM', '( value, 16.0 )' ];\n\t\t\tcase RGBDEncoding:\n\t\t\t\treturn [ 'RGBD', '( value, 256.0 )' ];\n\t\t\tcase GammaEncoding:\n\t\t\t\treturn [ 'Gamma', '( value, float( GAMMA_FACTOR ) )' ];\n\t\t\tcase LogLuvEncoding:\n\t\t\t\treturn [ 'LogLuv', '( value )' ];\n\t\t\tdefault:\n\t\t\t\tthrow new Error( 'unsupported encoding: ' + encoding );\n\n\t\t}\n\n\t}\n\n\tfunction getShaderErrors( gl, shader, type ) {\n\n\t\tvar status = gl.getShaderParameter( shader, 35713 );\n\t\tvar log = gl.getShaderInfoLog( shader ).trim();\n\n\t\tif ( status && log === '' ) { return ''; }\n\n\t\t// --enable-privileged-webgl-extension\n\t\t// console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\n\n\t\tvar source = gl.getShaderSource( shader );\n\n\t\treturn 'THREE.WebGLShader: gl.getShaderInfoLog() ' + type + '\\n' + log + addLineNumbers( source );\n\n\t}\n\n\tfunction getTexelDecodingFunction( functionName, encoding ) {\n\n\t\tvar components = getEncodingComponents( encoding );\n\t\treturn 'vec4 ' + functionName + '( vec4 value ) { return ' + components[ 0 ] + 'ToLinear' + components[ 1 ] + '; }';\n\n\t}\n\n\tfunction getTexelEncodingFunction( functionName, encoding ) {\n\n\t\tvar components = getEncodingComponents( encoding );\n\t\treturn 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[ 0 ] + components[ 1 ] + '; }';\n\n\t}\n\n\tfunction getToneMappingFunction( functionName, toneMapping ) {\n\n\t\tvar toneMappingName;\n\n\t\tswitch ( toneMapping ) {\n\n\t\t\tcase LinearToneMapping:\n\t\t\t\ttoneMappingName = 'Linear';\n\t\t\t\tbreak;\n\n\t\t\tcase ReinhardToneMapping:\n\t\t\t\ttoneMappingName = 'Reinhard';\n\t\t\t\tbreak;\n\n\t\t\tcase Uncharted2ToneMapping:\n\t\t\t\ttoneMappingName = 'Uncharted2';\n\t\t\t\tbreak;\n\n\t\t\tcase CineonToneMapping:\n\t\t\t\ttoneMappingName = 'OptimizedCineon';\n\t\t\t\tbreak;\n\n\t\t\tcase ACESFilmicToneMapping:\n\t\t\t\ttoneMappingName = 'ACESFilmic';\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow new Error( 'unsupported toneMapping: ' + toneMapping );\n\n\t\t}\n\n\t\treturn 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';\n\n\t}\n\n\tfunction generateExtensions( parameters ) {\n\n\t\tvar chunks = [\n\t\t\t( parameters.extensionDerivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.tangentSpaceNormalMap || parameters.clearcoatNormalMap || parameters.flatShading || parameters.shaderID === 'physical' ) ? '#extension GL_OES_standard_derivatives : enable' : '',\n\t\t\t( parameters.extensionFragDepth || parameters.logarithmicDepthBuffer ) && parameters.rendererExtensionFragDepth ? '#extension GL_EXT_frag_depth : enable' : '',\n\t\t\t( parameters.extensionDrawBuffers && parameters.rendererExtensionDrawBuffers ) ? '#extension GL_EXT_draw_buffers : require' : '',\n\t\t\t( parameters.extensionShaderTextureLOD || parameters.envMap ) && parameters.rendererExtensionShaderTextureLod ? '#extension GL_EXT_shader_texture_lod : enable' : ''\n\t\t];\n\n\t\treturn chunks.filter( filterEmptyLine ).join( '\\n' );\n\n\t}\n\n\tfunction generateDefines( defines ) {\n\n\t\tvar chunks = [];\n\n\t\tfor ( var name in defines ) {\n\n\t\t\tvar value = defines[ name ];\n\n\t\t\tif ( value === false ) { continue; }\n\n\t\t\tchunks.push( '#define ' + name + ' ' + value );\n\n\t\t}\n\n\t\treturn chunks.join( '\\n' );\n\n\t}\n\n\tfunction fetchAttributeLocations( gl, program ) {\n\n\t\tvar attributes = {};\n\n\t\tvar n = gl.getProgramParameter( program, 35721 );\n\n\t\tfor ( var i = 0; i < n; i ++ ) {\n\n\t\t\tvar info = gl.getActiveAttrib( program, i );\n\t\t\tvar name = info.name;\n\n\t\t\t// console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );\n\n\t\t\tattributes[ name ] = gl.getAttribLocation( program, name );\n\n\t\t}\n\n\t\treturn attributes;\n\n\t}\n\n\tfunction filterEmptyLine( string ) {\n\n\t\treturn string !== '';\n\n\t}\n\n\tfunction replaceLightNums( string, parameters ) {\n\n\t\treturn string\n\t\t\t.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )\n\t\t\t.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )\n\t\t\t.replace( /NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights )\n\t\t\t.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )\n\t\t\t.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights )\n\t\t\t.replace( /NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows )\n\t\t\t.replace( /NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows )\n\t\t\t.replace( /NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows );\n\n\t}\n\n\tfunction replaceClippingPlaneNums( string, parameters ) {\n\n\t\treturn string\n\t\t\t.replace( /NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes )\n\t\t\t.replace( /UNION_CLIPPING_PLANES/g, ( parameters.numClippingPlanes - parameters.numClipIntersection ) );\n\n\t}\n\n\t// Resolve Includes\n\n\tvar includePattern = /^[ \\t]*#include +<([\\w\\d./]+)>/gm;\n\n\tfunction resolveIncludes( string ) {\n\n\t\treturn string.replace( includePattern, includeReplacer );\n\n\t}\n\n\tfunction includeReplacer( match, include ) {\n\n\t\tvar string = ShaderChunk[ include ];\n\n\t\tif ( string === undefined ) {\n\n\t\t\tthrow new Error( 'Can not resolve #include <' + include + '>' );\n\n\t\t}\n\n\t\treturn resolveIncludes( string );\n\n\t}\n\n\t// Unroll Loops\n\n\tvar loopPattern = /#pragma unroll_loop[\\s]+?for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\n\n\tfunction unrollLoops( string ) {\n\n\t\treturn string.replace( loopPattern, loopReplacer );\n\n\t}\n\n\tfunction loopReplacer( match, start, end, snippet ) {\n\n\t\tvar string = '';\n\n\t\tfor ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {\n\n\t\t\tstring += snippet\n\t\t\t\t.replace( /\\[ i \\]/g, '[ ' + i + ' ]' )\n\t\t\t\t.replace( /UNROLLED_LOOP_INDEX/g, i );\n\n\t\t}\n\n\t\treturn string;\n\n\t}\n\n\t//\n\n\tfunction generatePrecision( parameters ) {\n\n\t\tvar precisionstring = \"precision \" + parameters.precision + \" float;\\nprecision \" + parameters.precision + \" int;\";\n\n\t\tif ( parameters.precision === \"highp\" ) {\n\n\t\t\tprecisionstring += \"\\n#define HIGH_PRECISION\";\n\n\t\t} else if ( parameters.precision === \"mediump\" ) {\n\n\t\t\tprecisionstring += \"\\n#define MEDIUM_PRECISION\";\n\n\t\t} else if ( parameters.precision === \"lowp\" ) {\n\n\t\t\tprecisionstring += \"\\n#define LOW_PRECISION\";\n\n\t\t}\n\n\t\treturn precisionstring;\n\n\t}\n\n\tfunction generateShadowMapTypeDefine( parameters ) {\n\n\t\tvar shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\n\n\t\tif ( parameters.shadowMapType === PCFShadowMap ) {\n\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\n\n\t\t} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {\n\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\n\n\t\t} else if ( parameters.shadowMapType === VSMShadowMap ) {\n\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_VSM';\n\n\t\t}\n\n\t\treturn shadowMapTypeDefine;\n\n\t}\n\n\tfunction generateEnvMapTypeDefine( parameters ) {\n\n\t\tvar envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\n\t\tif ( parameters.envMap ) {\n\n\t\t\tswitch ( parameters.envMapMode ) {\n\n\t\t\t\tcase CubeReflectionMapping:\n\t\t\t\tcase CubeRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase CubeUVReflectionMapping:\n\t\t\t\tcase CubeUVRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase EquirectangularReflectionMapping:\n\t\t\t\tcase EquirectangularRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase SphericalReflectionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_SPHERE';\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn envMapTypeDefine;\n\n\t}\n\n\tfunction generateEnvMapModeDefine( parameters ) {\n\n\t\tvar envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\n\n\t\tif ( parameters.envMap ) {\n\n\t\t\tswitch ( parameters.envMapMode ) {\n\n\t\t\t\tcase CubeRefractionMapping:\n\t\t\t\tcase EquirectangularRefractionMapping:\n\t\t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn envMapModeDefine;\n\n\t}\n\n\tfunction generateEnvMapBlendingDefine( parameters ) {\n\n\t\tvar envMapBlendingDefine = 'ENVMAP_BLENDING_NONE';\n\n\t\tif ( parameters.envMap ) {\n\n\t\t\tswitch ( parameters.combine ) {\n\n\t\t\t\tcase MultiplyOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MixOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase AddOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn envMapBlendingDefine;\n\n\t}\n\n\tfunction WebGLProgram( renderer, cacheKey, parameters ) {\n\n\t\tvar gl = renderer.getContext();\n\n\t\tvar defines = parameters.defines;\n\n\t\tvar vertexShader = parameters.vertexShader;\n\t\tvar fragmentShader = parameters.fragmentShader;\n\t\tvar shadowMapTypeDefine = generateShadowMapTypeDefine( parameters );\n\t\tvar envMapTypeDefine = generateEnvMapTypeDefine( parameters );\n\t\tvar envMapModeDefine = generateEnvMapModeDefine( parameters );\n\t\tvar envMapBlendingDefine = generateEnvMapBlendingDefine( parameters );\n\n\n\t\tvar gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;\n\n\t\tvar customExtensions = parameters.isWebGL2 ? '' : generateExtensions( parameters );\n\n\t\tvar customDefines = generateDefines( defines );\n\n\t\tvar program = gl.createProgram();\n\n\t\tvar prefixVertex, prefixFragment;\n\n\t\tvar numMultiviewViews = parameters.numMultiviewViews;\n\n\t\tif ( parameters.isRawShaderMaterial ) {\n\n\t\t\tprefixVertex = [\n\n\t\t\t\tcustomDefines\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t\tif ( prefixVertex.length > 0 ) {\n\n\t\t\t\tprefixVertex += '\\n';\n\n\t\t\t}\n\n\t\t\tprefixFragment = [\n\n\t\t\t\tcustomExtensions,\n\t\t\t\tcustomDefines\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t\tif ( prefixFragment.length > 0 ) {\n\n\t\t\t\tprefixFragment += '\\n';\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tprefixVertex = [\n\n\t\t\t\tgeneratePrecision( parameters ),\n\n\t\t\t\t'#define SHADER_NAME ' + parameters.shaderName,\n\n\t\t\t\tcustomDefines,\n\n\t\t\t\tparameters.instancing ? '#define USE_INSTANCING' : '',\n\t\t\t\tparameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',\n\n\t\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n\t\t\t\t'#define MAX_BONES ' + parameters.maxBones,\n\t\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n\t\t\t\t( parameters.useFog && parameters.fogExp2 ) ? '#define FOG_EXP2' : '',\n\n\t\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\t\t( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',\n\t\t\t\t( parameters.normalMap && parameters.tangentSpaceNormalMap ) ? '#define TANGENTSPACE_NORMALMAP' : '',\n\n\t\t\t\tparameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',\n\t\t\t\tparameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',\n\t\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\n\t\t\t\tparameters.vertexTangents ? '#define USE_TANGENT' : '',\n\t\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\t\t\t\tparameters.vertexUvs ? '#define USE_UV' : '',\n\t\t\t\tparameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',\n\n\t\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\t\tparameters.skinning ? '#define USE_SKINNING' : '',\n\t\t\t\tparameters.useVertexTexture ? '#define BONE_TEXTURE' : '',\n\n\t\t\t\tparameters.morphTargets ? '#define USE_MORPHTARGETS' : '',\n\t\t\t\tparameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',\n\t\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n\t\t\t\tparameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',\n\n\t\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\t\t( parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n\t\t\t\t'uniform mat4 modelMatrix;',\n\t\t\t\t'uniform mat4 modelViewMatrix;',\n\t\t\t\t'uniform mat4 projectionMatrix;',\n\t\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t\t'uniform mat3 normalMatrix;',\n\t\t\t\t'uniform vec3 cameraPosition;',\n\t\t\t\t'uniform bool isOrthographic;',\n\n\t\t\t\t'#ifdef USE_INSTANCING',\n\n\t\t\t\t' attribute mat4 instanceMatrix;',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'attribute vec3 position;',\n\t\t\t\t'attribute vec3 normal;',\n\t\t\t\t'attribute vec2 uv;',\n\n\t\t\t\t'#ifdef USE_TANGENT',\n\n\t\t\t\t'\tattribute vec4 tangent;',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'#ifdef USE_COLOR',\n\n\t\t\t\t'\tattribute vec3 color;',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'#ifdef USE_MORPHTARGETS',\n\n\t\t\t\t'\tattribute vec3 morphTarget0;',\n\t\t\t\t'\tattribute vec3 morphTarget1;',\n\t\t\t\t'\tattribute vec3 morphTarget2;',\n\t\t\t\t'\tattribute vec3 morphTarget3;',\n\n\t\t\t\t'\t#ifdef USE_MORPHNORMALS',\n\n\t\t\t\t'\t\tattribute vec3 morphNormal0;',\n\t\t\t\t'\t\tattribute vec3 morphNormal1;',\n\t\t\t\t'\t\tattribute vec3 morphNormal2;',\n\t\t\t\t'\t\tattribute vec3 morphNormal3;',\n\n\t\t\t\t'\t#else',\n\n\t\t\t\t'\t\tattribute vec3 morphTarget4;',\n\t\t\t\t'\t\tattribute vec3 morphTarget5;',\n\t\t\t\t'\t\tattribute vec3 morphTarget6;',\n\t\t\t\t'\t\tattribute vec3 morphTarget7;',\n\n\t\t\t\t'\t#endif',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'#ifdef USE_SKINNING',\n\n\t\t\t\t'\tattribute vec4 skinIndex;',\n\t\t\t\t'\tattribute vec4 skinWeight;',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'\\n'\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t\tprefixFragment = [\n\n\t\t\t\tcustomExtensions,\n\n\t\t\t\tgeneratePrecision( parameters ),\n\n\t\t\t\t'#define SHADER_NAME ' + parameters.shaderName,\n\n\t\t\t\tcustomDefines,\n\n\t\t\t\tparameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest + ( parameters.alphaTest % 1 ? '' : '.0' ) : '', // add '.0' if integer\n\n\t\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n\t\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n\t\t\t\t( parameters.useFog && parameters.fogExp2 ) ? '#define FOG_EXP2' : '',\n\n\t\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\t\tparameters.matcap ? '#define USE_MATCAP' : '',\n\t\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapTypeDefine : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapBlendingDefine : '',\n\t\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\t\t( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',\n\t\t\t\t( parameters.normalMap && parameters.tangentSpaceNormalMap ) ? '#define TANGENTSPACE_NORMALMAP' : '',\n\t\t\t\tparameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',\n\t\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\n\t\t\t\tparameters.sheen ? '#define USE_SHEEN' : '',\n\n\t\t\t\tparameters.vertexTangents ? '#define USE_TANGENT' : '',\n\t\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\t\t\t\tparameters.vertexUvs ? '#define USE_UV' : '',\n\t\t\t\tparameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',\n\n\t\t\t\tparameters.gradientMap ? '#define USE_GRADIENTMAP' : '',\n\n\t\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n\t\t\t\tparameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '',\n\n\t\t\t\tparameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '',\n\n\t\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\t\t( parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n\t\t\t\t( ( parameters.extensionShaderTextureLOD || parameters.envMap ) && parameters.rendererExtensionShaderTextureLod ) ? '#define TEXTURE_LOD_EXT' : '',\n\n\t\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t\t'uniform vec3 cameraPosition;',\n\t\t\t\t'uniform bool isOrthographic;',\n\n\t\t\t\t( parameters.toneMapping !== NoToneMapping ) ? '#define TONE_MAPPING' : '',\n\t\t\t\t( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '', // this code is required here because it is used by the toneMapping() function defined below\n\t\t\t\t( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( 'toneMapping', parameters.toneMapping ) : '',\n\n\t\t\t\tparameters.dithering ? '#define DITHERING' : '',\n\n\t\t\t\t( parameters.outputEncoding || parameters.mapEncoding || parameters.matcapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding || parameters.lightMapEncoding ) ?\n\t\t\t\t\tShaderChunk[ 'encodings_pars_fragment' ] : '', // this code is required here because it is used by the various encoding/decoding function defined below\n\t\t\t\tparameters.mapEncoding ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',\n\t\t\t\tparameters.matcapEncoding ? getTexelDecodingFunction( 'matcapTexelToLinear', parameters.matcapEncoding ) : '',\n\t\t\t\tparameters.envMapEncoding ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',\n\t\t\t\tparameters.emissiveMapEncoding ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',\n\t\t\t\tparameters.lightMapEncoding ? getTexelDecodingFunction( 'lightMapTexelToLinear', parameters.lightMapEncoding ) : '',\n\t\t\t\tparameters.outputEncoding ? getTexelEncodingFunction( 'linearToOutputTexel', parameters.outputEncoding ) : '',\n\n\t\t\t\tparameters.depthPacking ? '#define DEPTH_PACKING ' + parameters.depthPacking : '',\n\n\t\t\t\t'\\n'\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t}\n\n\t\tvertexShader = resolveIncludes( vertexShader );\n\t\tvertexShader = replaceLightNums( vertexShader, parameters );\n\t\tvertexShader = replaceClippingPlaneNums( vertexShader, parameters );\n\n\t\tfragmentShader = resolveIncludes( fragmentShader );\n\t\tfragmentShader = replaceLightNums( fragmentShader, parameters );\n\t\tfragmentShader = replaceClippingPlaneNums( fragmentShader, parameters );\n\n\t\tvertexShader = unrollLoops( vertexShader );\n\t\tfragmentShader = unrollLoops( fragmentShader );\n\n\t\tif ( parameters.isWebGL2 && ! parameters.isRawShaderMaterial ) {\n\n\t\t\tvar isGLSL3ShaderMaterial = false;\n\n\t\t\tvar versionRegex = /^\\s*#version\\s+300\\s+es\\s*\\n/;\n\n\t\t\tif ( parameters.isShaderMaterial &&\n\t\t\t\tvertexShader.match( versionRegex ) !== null &&\n\t\t\t\tfragmentShader.match( versionRegex ) !== null ) {\n\n\t\t\t\tisGLSL3ShaderMaterial = true;\n\n\t\t\t\tvertexShader = vertexShader.replace( versionRegex, '' );\n\t\t\t\tfragmentShader = fragmentShader.replace( versionRegex, '' );\n\n\t\t\t}\n\n\t\t\t// GLSL 3.0 conversion\n\n\t\t\tprefixVertex = [\n\t\t\t\t'#version 300 es\\n',\n\t\t\t\t'#define attribute in',\n\t\t\t\t'#define varying out',\n\t\t\t\t'#define texture2D texture'\n\t\t\t].join( '\\n' ) + '\\n' + prefixVertex;\n\n\t\t\tprefixFragment = [\n\t\t\t\t'#version 300 es\\n',\n\t\t\t\t'#define varying in',\n\t\t\t\tisGLSL3ShaderMaterial ? '' : 'out highp vec4 pc_fragColor;',\n\t\t\t\tisGLSL3ShaderMaterial ? '' : '#define gl_FragColor pc_fragColor',\n\t\t\t\t'#define gl_FragDepthEXT gl_FragDepth',\n\t\t\t\t'#define texture2D texture',\n\t\t\t\t'#define textureCube texture',\n\t\t\t\t'#define texture2DProj textureProj',\n\t\t\t\t'#define texture2DLodEXT textureLod',\n\t\t\t\t'#define texture2DProjLodEXT textureProjLod',\n\t\t\t\t'#define textureCubeLodEXT textureLod',\n\t\t\t\t'#define texture2DGradEXT textureGrad',\n\t\t\t\t'#define texture2DProjGradEXT textureProjGrad',\n\t\t\t\t'#define textureCubeGradEXT textureGrad'\n\t\t\t].join( '\\n' ) + '\\n' + prefixFragment;\n\n\t\t\t// Multiview\n\n\t\t\tif ( numMultiviewViews > 0 ) {\n\n\t\t\t\tprefixVertex = prefixVertex.replace(\n\t\t\t\t\t'#version 300 es\\n',\n\t\t\t\t\t[\n\t\t\t\t\t\t'#version 300 es\\n',\n\t\t\t\t\t\t'#extension GL_OVR_multiview2 : require',\n\t\t\t\t\t\t'layout(num_views = ' + numMultiviewViews + ') in;',\n\t\t\t\t\t\t'#define VIEW_ID gl_ViewID_OVR'\n\t\t\t\t\t].join( '\\n' )\n\t\t\t\t);\n\n\t\t\t\tprefixVertex = prefixVertex.replace(\n\t\t\t\t\t[\n\t\t\t\t\t\t'uniform mat4 modelViewMatrix;',\n\t\t\t\t\t\t'uniform mat4 projectionMatrix;',\n\t\t\t\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t\t\t\t'uniform mat3 normalMatrix;'\n\t\t\t\t\t].join( '\\n' ),\n\t\t\t\t\t[\n\t\t\t\t\t\t'uniform mat4 modelViewMatrices[' + numMultiviewViews + '];',\n\t\t\t\t\t\t'uniform mat4 projectionMatrices[' + numMultiviewViews + '];',\n\t\t\t\t\t\t'uniform mat4 viewMatrices[' + numMultiviewViews + '];',\n\t\t\t\t\t\t'uniform mat3 normalMatrices[' + numMultiviewViews + '];',\n\n\t\t\t\t\t\t'#define modelViewMatrix modelViewMatrices[VIEW_ID]',\n\t\t\t\t\t\t'#define projectionMatrix projectionMatrices[VIEW_ID]',\n\t\t\t\t\t\t'#define viewMatrix viewMatrices[VIEW_ID]',\n\t\t\t\t\t\t'#define normalMatrix normalMatrices[VIEW_ID]'\n\t\t\t\t\t].join( '\\n' )\n\t\t\t\t);\n\n\t\t\t\tprefixFragment = prefixFragment.replace(\n\t\t\t\t\t'#version 300 es\\n',\n\t\t\t\t\t[\n\t\t\t\t\t\t'#version 300 es\\n',\n\t\t\t\t\t\t'#extension GL_OVR_multiview2 : require',\n\t\t\t\t\t\t'#define VIEW_ID gl_ViewID_OVR'\n\t\t\t\t\t].join( '\\n' )\n\t\t\t\t);\n\n\t\t\t\tprefixFragment = prefixFragment.replace(\n\t\t\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t\t\t[\n\t\t\t\t\t\t'uniform mat4 viewMatrices[' + numMultiviewViews + '];',\n\t\t\t\t\t\t'#define viewMatrix viewMatrices[VIEW_ID]'\n\t\t\t\t\t].join( '\\n' )\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar vertexGlsl = prefixVertex + vertexShader;\n\t\tvar fragmentGlsl = prefixFragment + fragmentShader;\n\n\t\t// console.log( '*VERTEX*', vertexGlsl );\n\t\t// console.log( '*FRAGMENT*', fragmentGlsl );\n\n\t\tvar glVertexShader = WebGLShader( gl, 35633, vertexGlsl );\n\t\tvar glFragmentShader = WebGLShader( gl, 35632, fragmentGlsl );\n\n\t\tgl.attachShader( program, glVertexShader );\n\t\tgl.attachShader( program, glFragmentShader );\n\n\t\t// Force a particular attribute to index 0.\n\n\t\tif ( parameters.index0AttributeName !== undefined ) {\n\n\t\t\tgl.bindAttribLocation( program, 0, parameters.index0AttributeName );\n\n\t\t} else if ( parameters.morphTargets === true ) {\n\n\t\t\t// programs with morphTargets displace position out of attribute 0\n\t\t\tgl.bindAttribLocation( program, 0, 'position' );\n\n\t\t}\n\n\t\tgl.linkProgram( program );\n\n\t\t// check for link errors\n\t\tif ( renderer.debug.checkShaderErrors ) {\n\n\t\t\tvar programLog = gl.getProgramInfoLog( program ).trim();\n\t\t\tvar vertexLog = gl.getShaderInfoLog( glVertexShader ).trim();\n\t\t\tvar fragmentLog = gl.getShaderInfoLog( glFragmentShader ).trim();\n\n\t\t\tvar runnable = true;\n\t\t\tvar haveDiagnostics = true;\n\n\t\t\tif ( gl.getProgramParameter( program, 35714 ) === false ) {\n\n\t\t\t\trunnable = false;\n\n\t\t\t\tvar vertexErrors = getShaderErrors( gl, glVertexShader, 'vertex' );\n\t\t\t\tvar fragmentErrors = getShaderErrors( gl, glFragmentShader, 'fragment' );\n\n\t\t\t\tconsole.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), '35715', gl.getProgramParameter( program, 35715 ), 'gl.getProgramInfoLog', programLog, vertexErrors, fragmentErrors );\n\n\t\t\t} else if ( programLog !== '' ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );\n\n\t\t\t} else if ( vertexLog === '' || fragmentLog === '' ) {\n\n\t\t\t\thaveDiagnostics = false;\n\n\t\t\t}\n\n\t\t\tif ( haveDiagnostics ) {\n\n\t\t\t\tthis.diagnostics = {\n\n\t\t\t\t\trunnable: runnable,\n\n\t\t\t\t\tprogramLog: programLog,\n\n\t\t\t\t\tvertexShader: {\n\n\t\t\t\t\t\tlog: vertexLog,\n\t\t\t\t\t\tprefix: prefixVertex\n\n\t\t\t\t\t},\n\n\t\t\t\t\tfragmentShader: {\n\n\t\t\t\t\t\tlog: fragmentLog,\n\t\t\t\t\t\tprefix: prefixFragment\n\n\t\t\t\t\t}\n\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t}\n\n\t\t// clean up\n\n\t\tgl.deleteShader( glVertexShader );\n\t\tgl.deleteShader( glFragmentShader );\n\n\t\t// set up caching for uniform locations\n\n\t\tvar cachedUniforms;\n\n\t\tthis.getUniforms = function () {\n\n\t\t\tif ( cachedUniforms === undefined ) {\n\n\t\t\t\tcachedUniforms = new WebGLUniforms( gl, program );\n\n\t\t\t}\n\n\t\t\treturn cachedUniforms;\n\n\t\t};\n\n\t\t// set up caching for attribute locations\n\n\t\tvar cachedAttributes;\n\n\t\tthis.getAttributes = function () {\n\n\t\t\tif ( cachedAttributes === undefined ) {\n\n\t\t\t\tcachedAttributes = fetchAttributeLocations( gl, program );\n\n\t\t\t}\n\n\t\t\treturn cachedAttributes;\n\n\t\t};\n\n\t\t// free resource\n\n\t\tthis.destroy = function () {\n\n\t\t\tgl.deleteProgram( program );\n\t\t\tthis.program = undefined;\n\n\t\t};\n\n\t\t//\n\n\t\tthis.name = parameters.shaderName;\n\t\tthis.id = programIdCount ++;\n\t\tthis.cacheKey = cacheKey;\n\t\tthis.usedTimes = 1;\n\t\tthis.program = program;\n\t\tthis.vertexShader = glVertexShader;\n\t\tthis.fragmentShader = glFragmentShader;\n\t\tthis.numMultiviewViews = numMultiviewViews;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLPrograms( renderer, extensions, capabilities ) {\n\n\t\tvar programs = [];\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\t\tvar logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;\n\t\tvar floatVertexTextures = capabilities.floatVertexTextures;\n\t\tvar precision = capabilities.precision;\n\t\tvar maxVertexUniforms = capabilities.maxVertexUniforms;\n\t\tvar vertexTextures = capabilities.vertexTextures;\n\n\t\tvar shaderIDs = {\n\t\t\tMeshDepthMaterial: 'depth',\n\t\t\tMeshDistanceMaterial: 'distanceRGBA',\n\t\t\tMeshNormalMaterial: 'normal',\n\t\t\tMeshBasicMaterial: 'basic',\n\t\t\tMeshLambertMaterial: 'lambert',\n\t\t\tMeshPhongMaterial: 'phong',\n\t\t\tMeshToonMaterial: 'toon',\n\t\t\tMeshStandardMaterial: 'physical',\n\t\t\tMeshPhysicalMaterial: 'physical',\n\t\t\tMeshMatcapMaterial: 'matcap',\n\t\t\tLineBasicMaterial: 'basic',\n\t\t\tLineDashedMaterial: 'dashed',\n\t\t\tPointsMaterial: 'points',\n\t\t\tShadowMaterial: 'shadow',\n\t\t\tSpriteMaterial: 'sprite'\n\t\t};\n\n\t\tvar parameterNames = [\n\t\t\t\"precision\", \"isWebGL2\", \"supportsVertexTextures\", \"outputEncoding\", \"instancing\", \"numMultiviewViews\",\n\t\t\t\"map\", \"mapEncoding\", \"matcap\", \"matcapEncoding\", \"envMap\", \"envMapMode\", \"envMapEncoding\", \"envMapCubeUV\",\n\t\t\t\"lightMap\", \"lightMapEncoding\", \"aoMap\", \"emissiveMap\", \"emissiveMapEncoding\", \"bumpMap\", \"normalMap\", \"objectSpaceNormalMap\", \"tangentSpaceNormalMap\", \"clearcoatNormalMap\", \"displacementMap\", \"specularMap\",\n\t\t\t\"roughnessMap\", \"metalnessMap\", \"gradientMap\",\n\t\t\t\"alphaMap\", \"combine\", \"vertexColors\", \"vertexTangents\", \"vertexUvs\", \"uvsVertexOnly\", \"fog\", \"useFog\", \"fogExp2\",\n\t\t\t\"flatShading\", \"sizeAttenuation\", \"logarithmicDepthBuffer\", \"skinning\",\n\t\t\t\"maxBones\", \"useVertexTexture\", \"morphTargets\", \"morphNormals\",\n\t\t\t\"maxMorphTargets\", \"maxMorphNormals\", \"premultipliedAlpha\",\n\t\t\t\"numDirLights\", \"numPointLights\", \"numSpotLights\", \"numHemiLights\", \"numRectAreaLights\",\n\t\t\t\"numDirLightShadows\", \"numPointLightShadows\", \"numSpotLightShadows\",\n\t\t\t\"shadowMapEnabled\", \"shadowMapType\", \"toneMapping\", 'physicallyCorrectLights',\n\t\t\t\"alphaTest\", \"doubleSided\", \"flipSided\", \"numClippingPlanes\", \"numClipIntersection\", \"depthPacking\", \"dithering\",\n\t\t\t\"sheen\"\n\t\t];\n\n\t\tfunction getShaderObject( material, shaderID ) {\n\n\t\t\tvar shaderobject;\n\n\t\t\tif ( shaderID ) {\n\n\t\t\t\tvar shader = ShaderLib[ shaderID ];\n\n\t\t\t\tshaderobject = {\n\t\t\t\t\tname: material.type,\n\t\t\t\t\tuniforms: UniformsUtils.clone( shader.uniforms ),\n\t\t\t\t\tvertexShader: shader.vertexShader,\n\t\t\t\t\tfragmentShader: shader.fragmentShader\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\tshaderobject = {\n\t\t\t\t\tname: material.type,\n\t\t\t\t\tuniforms: material.uniforms,\n\t\t\t\t\tvertexShader: material.vertexShader,\n\t\t\t\t\tfragmentShader: material.fragmentShader\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\treturn shaderobject;\n\n\t\t}\n\n\t\tfunction allocateBones( object ) {\n\n\t\t\tvar skeleton = object.skeleton;\n\t\t\tvar bones = skeleton.bones;\n\n\t\t\tif ( floatVertexTextures ) {\n\n\t\t\t\treturn 1024;\n\n\t\t\t} else {\n\n\t\t\t\t// default for when object is not specified\n\t\t\t\t// ( for example when prebuilding shader to be used with multiple objects )\n\t\t\t\t//\n\t\t\t\t//  - leave some extra space for other uniforms\n\t\t\t\t//  - limit here is ANGLE's 254 max uniform vectors\n\t\t\t\t//    (up to 54 should be safe)\n\n\t\t\t\tvar nVertexUniforms = maxVertexUniforms;\n\t\t\t\tvar nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );\n\n\t\t\t\tvar maxBones = Math.min( nVertexMatrices, bones.length );\n\n\t\t\t\tif ( maxBones < bones.length ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.' );\n\t\t\t\t\treturn 0;\n\n\t\t\t\t}\n\n\t\t\t\treturn maxBones;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction getTextureEncodingFromMap( map ) {\n\n\t\t\tvar encoding;\n\n\t\t\tif ( ! map ) {\n\n\t\t\t\tencoding = LinearEncoding;\n\n\t\t\t} else if ( map.isTexture ) {\n\n\t\t\t\tencoding = map.encoding;\n\n\t\t\t} else if ( map.isWebGLRenderTarget ) {\n\n\t\t\t\tconsole.warn( \"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\" );\n\t\t\t\tencoding = map.texture.encoding;\n\n\t\t\t}\n\n\t\t\treturn encoding;\n\n\t\t}\n\n\t\tthis.getParameters = function ( material, lights, shadows, scene, nClipPlanes, nClipIntersection, object ) {\n\n\t\t\tvar fog = scene.fog;\n\t\t\tvar environment = material.isMeshStandardMaterial ? scene.environment : null;\n\n\t\t\tvar envMap = material.envMap || environment;\n\n\t\t\tvar shaderID = shaderIDs[ material.type ];\n\n\t\t\t// heuristics to create shader parameters according to lights in the scene\n\t\t\t// (not to blow over maxLights budget)\n\n\t\t\tvar maxBones = object.isSkinnedMesh ? allocateBones( object ) : 0;\n\n\t\t\tif ( material.precision !== null ) {\n\n\t\t\t\tprecision = capabilities.getMaxPrecision( material.precision );\n\n\t\t\t\tif ( precision !== material.precision ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar shaderobject = getShaderObject( material, shaderID );\n\t\t\tmaterial.onBeforeCompile( shaderobject, renderer );\n\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\t\t\tvar numMultiviewViews = currentRenderTarget && currentRenderTarget.isWebGLMultiviewRenderTarget ? currentRenderTarget.numViews : 0;\n\n\t\t\tvar parameters = {\n\n\t\t\t\tisWebGL2: isWebGL2,\n\n\t\t\t\tshaderID: shaderID,\n\t\t\t\tshaderName: shaderobject.name,\n\n\t\t\t\tuniforms: shaderobject.uniforms,\n\t\t\t\tvertexShader: shaderobject.vertexShader,\n\t\t\t\tfragmentShader: shaderobject.fragmentShader,\n\t\t\t\tdefines: material.defines,\n\n\t\t\t\tisRawShaderMaterial: material.isRawShaderMaterial,\n\t\t\t\tisShaderMaterial: material.isShaderMaterial,\n\n\t\t\t\tprecision: precision,\n\n\t\t\t\tinstancing: object.isInstancedMesh === true,\n\n\t\t\t\tsupportsVertexTextures: vertexTextures,\n\t\t\t\tnumMultiviewViews: numMultiviewViews,\n\t\t\t\toutputEncoding: ( currentRenderTarget !== null ) ? getTextureEncodingFromMap( currentRenderTarget.texture ) : renderer.outputEncoding,\n\t\t\t\tmap: !! material.map,\n\t\t\t\tmapEncoding: getTextureEncodingFromMap( material.map ),\n\t\t\t\tmatcap: !! material.matcap,\n\t\t\t\tmatcapEncoding: getTextureEncodingFromMap( material.matcap ),\n\t\t\t\tenvMap: !! envMap,\n\t\t\t\tenvMapMode: envMap && envMap.mapping,\n\t\t\t\tenvMapEncoding: getTextureEncodingFromMap( envMap ),\n\t\t\t\tenvMapCubeUV: ( !! envMap ) && ( ( envMap.mapping === CubeUVReflectionMapping ) || ( envMap.mapping === CubeUVRefractionMapping ) ),\n\t\t\t\tlightMap: !! material.lightMap,\n\t\t\t\tlightMapEncoding: getTextureEncodingFromMap( material.lightMap ),\n\t\t\t\taoMap: !! material.aoMap,\n\t\t\t\temissiveMap: !! material.emissiveMap,\n\t\t\t\temissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap ),\n\t\t\t\tbumpMap: !! material.bumpMap,\n\t\t\t\tnormalMap: !! material.normalMap,\n\t\t\t\tobjectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,\n\t\t\t\ttangentSpaceNormalMap: material.normalMapType === TangentSpaceNormalMap,\n\t\t\t\tclearcoatNormalMap: !! material.clearcoatNormalMap,\n\t\t\t\tdisplacementMap: !! material.displacementMap,\n\t\t\t\troughnessMap: !! material.roughnessMap,\n\t\t\t\tmetalnessMap: !! material.metalnessMap,\n\t\t\t\tspecularMap: !! material.specularMap,\n\t\t\t\talphaMap: !! material.alphaMap,\n\n\t\t\t\tgradientMap: !! material.gradientMap,\n\n\t\t\t\tsheen: !! material.sheen,\n\n\t\t\t\tcombine: material.combine,\n\n\t\t\t\tvertexTangents: ( material.normalMap && material.vertexTangents ),\n\t\t\t\tvertexColors: material.vertexColors,\n\t\t\t\tvertexUvs: !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatNormalMap || !! material.displacementMap,\n\t\t\t\tuvsVertexOnly: ! ( !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatNormalMap ) && !! material.displacementMap,\n\n\t\t\t\tfog: !! fog,\n\t\t\t\tuseFog: material.fog,\n\t\t\t\tfogExp2: ( fog && fog.isFogExp2 ),\n\n\t\t\t\tflatShading: material.flatShading,\n\n\t\t\t\tsizeAttenuation: material.sizeAttenuation,\n\t\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\n\t\t\t\tskinning: material.skinning && maxBones > 0,\n\t\t\t\tmaxBones: maxBones,\n\t\t\t\tuseVertexTexture: floatVertexTextures,\n\n\t\t\t\tmorphTargets: material.morphTargets,\n\t\t\t\tmorphNormals: material.morphNormals,\n\t\t\t\tmaxMorphTargets: renderer.maxMorphTargets,\n\t\t\t\tmaxMorphNormals: renderer.maxMorphNormals,\n\n\t\t\t\tnumDirLights: lights.directional.length,\n\t\t\t\tnumPointLights: lights.point.length,\n\t\t\t\tnumSpotLights: lights.spot.length,\n\t\t\t\tnumRectAreaLights: lights.rectArea.length,\n\t\t\t\tnumHemiLights: lights.hemi.length,\n\n\t\t\t\tnumDirLightShadows: lights.directionalShadowMap.length,\n\t\t\t\tnumPointLightShadows: lights.pointShadowMap.length,\n\t\t\t\tnumSpotLightShadows: lights.spotShadowMap.length,\n\n\t\t\t\tnumClippingPlanes: nClipPlanes,\n\t\t\t\tnumClipIntersection: nClipIntersection,\n\n\t\t\t\tdithering: material.dithering,\n\n\t\t\t\tshadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,\n\t\t\t\tshadowMapType: renderer.shadowMap.type,\n\n\t\t\t\ttoneMapping: material.toneMapped ? renderer.toneMapping : NoToneMapping,\n\t\t\t\tphysicallyCorrectLights: renderer.physicallyCorrectLights,\n\n\t\t\t\tpremultipliedAlpha: material.premultipliedAlpha,\n\n\t\t\t\talphaTest: material.alphaTest,\n\t\t\t\tdoubleSided: material.side === DoubleSide,\n\t\t\t\tflipSided: material.side === BackSide,\n\n\t\t\t\tdepthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false,\n\n\t\t\t\tindex0AttributeName: material.index0AttributeName,\n\n\t\t\t\textensionDerivatives: material.extensions && material.extensions.derivatives,\n\t\t\t\textensionFragDepth: material.extensions && material.extensions.frawbuffers,\n\t\t\t\textensionDrawbuffers: material.extensions && material.extensions.drawbuffers,\n\t\t\t\textensionShaderTextureLOD: material.extensions && material.extensions.shaderTextureLOD,\n\n\t\t\t\trendererExtensionFragDepth: isWebGL2 || extensions.get( 'EXT_frag_depth' ) !== null,\n\t\t\t\trendererExtensionDrawBuffers: isWebGL2 || extensions.get( 'WEBGL_draw_buffers' ) !== null,\n\t\t\t\trendererExtensionShaderTextureLod: isWebGL2 || extensions.get( 'EXT_shader_texture_lod' ) !== null,\n\n\t\t\t\tonBeforeCompile: material.onBeforeCompile\n\n\t\t\t};\n\n\t\t\treturn parameters;\n\n\t\t};\n\n\t\tthis.getProgramCacheKey = function ( parameters ) {\n\n\t\t\tvar array = [];\n\n\t\t\tif ( parameters.shaderID ) {\n\n\t\t\t\tarray.push( parameters.shaderID );\n\n\t\t\t} else {\n\n\t\t\t\tarray.push( parameters.fragmentShader );\n\t\t\t\tarray.push( parameters.vertexShader );\n\n\t\t\t}\n\n\t\t\tif ( parameters.defines !== undefined ) {\n\n\t\t\t\tfor ( var name in parameters.defines ) {\n\n\t\t\t\t\tarray.push( name );\n\t\t\t\t\tarray.push( parameters.defines[ name ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( parameters.isRawShaderMaterial === undefined ) {\n\n\t\t\t\tfor ( var i = 0; i < parameterNames.length; i ++ ) {\n\n\t\t\t\t\tarray.push( parameters[ parameterNames[ i ] ] );\n\n\t\t\t\t}\n\n\t\t\t\tarray.push( renderer.outputEncoding );\n\t\t\t\tarray.push( renderer.gammaFactor );\n\n\t\t\t}\n\n\t\t\tarray.push( parameters.onBeforeCompile.toString() );\n\n\t\t\treturn array.join();\n\n\t\t};\n\n\t\tthis.acquireProgram = function ( parameters, cacheKey ) {\n\n\t\t\tvar program;\n\n\t\t\t// Check if code has been already compiled\n\t\t\tfor ( var p = 0, pl = programs.length; p < pl; p ++ ) {\n\n\t\t\t\tvar preexistingProgram = programs[ p ];\n\n\t\t\t\tif ( preexistingProgram.cacheKey === cacheKey ) {\n\n\t\t\t\t\tprogram = preexistingProgram;\n\t\t\t\t\t++ program.usedTimes;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( program === undefined ) {\n\n\t\t\t\tprogram = new WebGLProgram( renderer, cacheKey, parameters );\n\t\t\t\tprograms.push( program );\n\n\t\t\t}\n\n\t\t\treturn program;\n\n\t\t};\n\n\t\tthis.releaseProgram = function ( program ) {\n\n\t\t\tif ( -- program.usedTimes === 0 ) {\n\n\t\t\t\t// Remove from unordered set\n\t\t\t\tvar i = programs.indexOf( program );\n\t\t\t\tprograms[ i ] = programs[ programs.length - 1 ];\n\t\t\t\tprograms.pop();\n\n\t\t\t\t// Free WebGL resources\n\t\t\t\tprogram.destroy();\n\n\t\t\t}\n\n\t\t};\n\n\t\t// Exposed for resource monitoring & error feedback via renderer.info:\n\t\tthis.programs = programs;\n\n\t}\n\n\t/**\n\t * @author fordacious / fordacious.github.io\n\t */\n\n\tfunction WebGLProperties() {\n\n\t\tvar properties = new WeakMap();\n\n\t\tfunction get( object ) {\n\n\t\t\tvar map = properties.get( object );\n\n\t\t\tif ( map === undefined ) {\n\n\t\t\t\tmap = {};\n\t\t\t\tproperties.set( object, map );\n\n\t\t\t}\n\n\t\t\treturn map;\n\n\t\t}\n\n\t\tfunction remove( object ) {\n\n\t\t\tproperties.delete( object );\n\n\t\t}\n\n\t\tfunction update( object, key, value ) {\n\n\t\t\tproperties.get( object )[ key ] = value;\n\n\t\t}\n\n\t\tfunction dispose() {\n\n\t\t\tproperties = new WeakMap();\n\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tremove: remove,\n\t\t\tupdate: update,\n\t\t\tdispose: dispose\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction painterSortStable( a, b ) {\n\n\t\tif ( a.groupOrder !== b.groupOrder ) {\n\n\t\t\treturn a.groupOrder - b.groupOrder;\n\n\t\t} else if ( a.renderOrder !== b.renderOrder ) {\n\n\t\t\treturn a.renderOrder - b.renderOrder;\n\n\t\t} else if ( a.program !== b.program ) {\n\n\t\t\treturn a.program.id - b.program.id;\n\n\t\t} else if ( a.material.id !== b.material.id ) {\n\n\t\t\treturn a.material.id - b.material.id;\n\n\t\t} else if ( a.z !== b.z ) {\n\n\t\t\treturn a.z - b.z;\n\n\t\t} else {\n\n\t\t\treturn a.id - b.id;\n\n\t\t}\n\n\t}\n\n\tfunction reversePainterSortStable( a, b ) {\n\n\t\tif ( a.groupOrder !== b.groupOrder ) {\n\n\t\t\treturn a.groupOrder - b.groupOrder;\n\n\t\t} else if ( a.renderOrder !== b.renderOrder ) {\n\n\t\t\treturn a.renderOrder - b.renderOrder;\n\n\t\t} else if ( a.z !== b.z ) {\n\n\t\t\treturn b.z - a.z;\n\n\t\t} else {\n\n\t\t\treturn a.id - b.id;\n\n\t\t}\n\n\t}\n\n\n\tfunction WebGLRenderList() {\n\n\t\tvar renderItems = [];\n\t\tvar renderItemsIndex = 0;\n\n\t\tvar opaque = [];\n\t\tvar transparent = [];\n\n\t\tvar defaultProgram = { id: - 1 };\n\n\t\tfunction init() {\n\n\t\t\trenderItemsIndex = 0;\n\n\t\t\topaque.length = 0;\n\t\t\ttransparent.length = 0;\n\n\t\t}\n\n\t\tfunction getNextRenderItem( object, geometry, material, groupOrder, z, group ) {\n\n\t\t\tvar renderItem = renderItems[ renderItemsIndex ];\n\n\t\t\tif ( renderItem === undefined ) {\n\n\t\t\t\trenderItem = {\n\t\t\t\t\tid: object.id,\n\t\t\t\t\tobject: object,\n\t\t\t\t\tgeometry: geometry,\n\t\t\t\t\tmaterial: material,\n\t\t\t\t\tprogram: material.program || defaultProgram,\n\t\t\t\t\tgroupOrder: groupOrder,\n\t\t\t\t\trenderOrder: object.renderOrder,\n\t\t\t\t\tz: z,\n\t\t\t\t\tgroup: group\n\t\t\t\t};\n\n\t\t\t\trenderItems[ renderItemsIndex ] = renderItem;\n\n\t\t\t} else {\n\n\t\t\t\trenderItem.id = object.id;\n\t\t\t\trenderItem.object = object;\n\t\t\t\trenderItem.geometry = geometry;\n\t\t\t\trenderItem.material = material;\n\t\t\t\trenderItem.program = material.program || defaultProgram;\n\t\t\t\trenderItem.groupOrder = groupOrder;\n\t\t\t\trenderItem.renderOrder = object.renderOrder;\n\t\t\t\trenderItem.z = z;\n\t\t\t\trenderItem.group = group;\n\n\t\t\t}\n\n\t\t\trenderItemsIndex ++;\n\n\t\t\treturn renderItem;\n\n\t\t}\n\n\t\tfunction push( object, geometry, material, groupOrder, z, group ) {\n\n\t\t\tvar renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );\n\n\t\t\t( material.transparent === true ? transparent : opaque ).push( renderItem );\n\n\t\t}\n\n\t\tfunction unshift( object, geometry, material, groupOrder, z, group ) {\n\n\t\t\tvar renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );\n\n\t\t\t( material.transparent === true ? transparent : opaque ).unshift( renderItem );\n\n\t\t}\n\n\t\tfunction sort( customOpaqueSort, customTransparentSort ) {\n\n\t\t\tif ( opaque.length > 1 ) { opaque.sort( customOpaqueSort || painterSortStable ); }\n\t\t\tif ( transparent.length > 1 ) { transparent.sort( customTransparentSort || reversePainterSortStable ); }\n\n\t\t}\n\n\t\treturn {\n\t\t\topaque: opaque,\n\t\t\ttransparent: transparent,\n\n\t\t\tinit: init,\n\t\t\tpush: push,\n\t\t\tunshift: unshift,\n\n\t\t\tsort: sort\n\t\t};\n\n\t}\n\n\tfunction WebGLRenderLists() {\n\n\t\tvar lists = new WeakMap();\n\n\t\tfunction onSceneDispose( event ) {\n\n\t\t\tvar scene = event.target;\n\n\t\t\tscene.removeEventListener( 'dispose', onSceneDispose );\n\n\t\t\tlists.delete( scene );\n\n\t\t}\n\n\t\tfunction get( scene, camera ) {\n\n\t\t\tvar cameras = lists.get( scene );\n\t\t\tvar list;\n\t\t\tif ( cameras === undefined ) {\n\n\t\t\t\tlist = new WebGLRenderList();\n\t\t\t\tlists.set( scene, new WeakMap() );\n\t\t\t\tlists.get( scene ).set( camera, list );\n\n\t\t\t\tscene.addEventListener( 'dispose', onSceneDispose );\n\n\t\t\t} else {\n\n\t\t\t\tlist = cameras.get( camera );\n\t\t\t\tif ( list === undefined ) {\n\n\t\t\t\t\tlist = new WebGLRenderList();\n\t\t\t\t\tcameras.set( camera, list );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn list;\n\n\t\t}\n\n\t\tfunction dispose() {\n\n\t\t\tlists = new WeakMap();\n\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction UniformsCache() {\n\n\t\tvar lights = {};\n\n\t\treturn {\n\n\t\t\tget: function ( light ) {\n\n\t\t\t\tif ( lights[ light.id ] !== undefined ) {\n\n\t\t\t\t\treturn lights[ light.id ];\n\n\t\t\t\t}\n\n\t\t\t\tvar uniforms;\n\n\t\t\t\tswitch ( light.type ) {\n\n\t\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color(),\n\n\t\t\t\t\t\t\tshadow: false,\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SpotLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\t\tconeCos: 0,\n\t\t\t\t\t\t\tpenumbraCos: 0,\n\t\t\t\t\t\t\tdecay: 0,\n\n\t\t\t\t\t\t\tshadow: false,\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PointLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\t\tdecay: 0,\n\n\t\t\t\t\t\t\tshadow: false,\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2(),\n\t\t\t\t\t\t\tshadowCameraNear: 1,\n\t\t\t\t\t\t\tshadowCameraFar: 1000\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'HemisphereLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tskyColor: new Color(),\n\t\t\t\t\t\t\tgroundColor: new Color()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'RectAreaLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\thalfWidth: new Vector3(),\n\t\t\t\t\t\t\thalfHeight: new Vector3()\n\t\t\t\t\t\t\t// TODO (abelnation): set RectAreaLight shadow uniforms\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tlights[ light.id ] = uniforms;\n\n\t\t\t\treturn uniforms;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tvar nextVersion = 0;\n\n\tfunction shadowCastingLightsFirst( lightA, lightB ) {\n\n\t\treturn ( lightB.castShadow ? 1 : 0 ) - ( lightA.castShadow ? 1 : 0 );\n\n\t}\n\n\tfunction WebGLLights() {\n\n\t\tvar cache = new UniformsCache();\n\n\t\tvar state = {\n\n\t\t\tversion: 0,\n\n\t\t\thash: {\n\t\t\t\tdirectionalLength: - 1,\n\t\t\t\tpointLength: - 1,\n\t\t\t\tspotLength: - 1,\n\t\t\t\trectAreaLength: - 1,\n\t\t\t\themiLength: - 1,\n\n\t\t\t\tnumDirectionalShadows: - 1,\n\t\t\t\tnumPointShadows: - 1,\n\t\t\t\tnumSpotShadows: - 1,\n\t\t\t},\n\n\t\t\tambient: [ 0, 0, 0 ],\n\t\t\tprobe: [],\n\t\t\tdirectional: [],\n\t\t\tdirectionalShadowMap: [],\n\t\t\tdirectionalShadowMatrix: [],\n\t\t\tspot: [],\n\t\t\tspotShadowMap: [],\n\t\t\tspotShadowMatrix: [],\n\t\t\trectArea: [],\n\t\t\tpoint: [],\n\t\t\tpointShadowMap: [],\n\t\t\tpointShadowMatrix: [],\n\t\t\themi: [],\n\n\t\t\tnumDirectionalShadows: - 1,\n\t\t\tnumPointShadows: - 1,\n\t\t\tnumSpotShadows: - 1\n\n\t\t};\n\n\t\tfor ( var i = 0; i < 9; i ++ ) { state.probe.push( new Vector3() ); }\n\n\t\tvar vector3 = new Vector3();\n\t\tvar matrix4 = new Matrix4();\n\t\tvar matrix42 = new Matrix4();\n\n\t\tfunction setup( lights, shadows, camera ) {\n\n\t\t\tvar r = 0, g = 0, b = 0;\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) { state.probe[ i ].set( 0, 0, 0 ); }\n\n\t\t\tvar directionalLength = 0;\n\t\t\tvar pointLength = 0;\n\t\t\tvar spotLength = 0;\n\t\t\tvar rectAreaLength = 0;\n\t\t\tvar hemiLength = 0;\n\n\t\t\tvar numDirectionalShadows = 0;\n\t\t\tvar numPointShadows = 0;\n\t\t\tvar numSpotShadows = 0;\n\n\t\t\tvar viewMatrix = camera.matrixWorldInverse;\n\n\t\t\tlights.sort( shadowCastingLightsFirst );\n\n\t\t\tfor ( var i = 0, l = lights.length; i < l; i ++ ) {\n\n\t\t\t\tvar light = lights[ i ];\n\n\t\t\t\tvar color = light.color;\n\t\t\t\tvar intensity = light.intensity;\n\t\t\t\tvar distance = light.distance;\n\n\t\t\t\tvar shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;\n\n\t\t\t\tif ( light.isAmbientLight ) {\n\n\t\t\t\t\tr += color.r * intensity;\n\t\t\t\t\tg += color.g * intensity;\n\t\t\t\t\tb += color.b * intensity;\n\n\t\t\t\t} else if ( light.isLightProbe ) {\n\n\t\t\t\t\tfor ( var j = 0; j < 9; j ++ ) {\n\n\t\t\t\t\t\tstate.probe[ j ].addScaledVector( light.sh.coefficients[ j ], intensity );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( light.isDirectionalLight ) {\n\n\t\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tvector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\t\tuniforms.direction.sub( vector3 );\n\t\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\t\tuniforms.shadow = light.castShadow;\n\n\t\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\t\t\tuniforms.shadowBias = shadow.bias;\n\t\t\t\t\t\tuniforms.shadowRadius = shadow.radius;\n\t\t\t\t\t\tuniforms.shadowMapSize = shadow.mapSize;\n\n\t\t\t\t\t\tstate.directionalShadowMap[ directionalLength ] = shadowMap;\n\t\t\t\t\t\tstate.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;\n\n\t\t\t\t\t\tnumDirectionalShadows ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.directional[ directionalLength ] = uniforms;\n\n\t\t\t\t\tdirectionalLength ++;\n\n\t\t\t\t} else if ( light.isSpotLight ) {\n\n\t\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\n\t\t\t\t\tuniforms.distance = distance;\n\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tvector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\t\tuniforms.direction.sub( vector3 );\n\t\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\t\tuniforms.coneCos = Math.cos( light.angle );\n\t\t\t\t\tuniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );\n\t\t\t\t\tuniforms.decay = light.decay;\n\n\t\t\t\t\tuniforms.shadow = light.castShadow;\n\n\t\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\t\t\tuniforms.shadowBias = shadow.bias;\n\t\t\t\t\t\tuniforms.shadowRadius = shadow.radius;\n\t\t\t\t\t\tuniforms.shadowMapSize = shadow.mapSize;\n\n\t\t\t\t\t\tstate.spotShadowMap[ spotLength ] = shadowMap;\n\t\t\t\t\t\tstate.spotShadowMatrix[ spotLength ] = light.shadow.matrix;\n\n\t\t\t\t\t\tnumSpotShadows ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.spot[ spotLength ] = uniforms;\n\n\t\t\t\t\tspotLength ++;\n\n\t\t\t\t} else if ( light.isRectAreaLight ) {\n\n\t\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\t\t// (a) intensity is the total visible light emitted\n\t\t\t\t\t//uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );\n\n\t\t\t\t\t// (b) intensity is the brightness of the light\n\t\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\n\n\t\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\t\t// extract local rotation of light to derive width/height half vectors\n\t\t\t\t\tmatrix42.identity();\n\t\t\t\t\tmatrix4.copy( light.matrixWorld );\n\t\t\t\t\tmatrix4.premultiply( viewMatrix );\n\t\t\t\t\tmatrix42.extractRotation( matrix4 );\n\n\t\t\t\t\tuniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );\n\t\t\t\t\tuniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );\n\n\t\t\t\t\tuniforms.halfWidth.applyMatrix4( matrix42 );\n\t\t\t\t\tuniforms.halfHeight.applyMatrix4( matrix42 );\n\n\t\t\t\t\t// TODO (abelnation): RectAreaLight distance?\n\t\t\t\t\t// uniforms.distance = distance;\n\n\t\t\t\t\tstate.rectArea[ rectAreaLength ] = uniforms;\n\n\t\t\t\t\trectAreaLength ++;\n\n\t\t\t\t} else if ( light.isPointLight ) {\n\n\t\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n\t\t\t\t\tuniforms.distance = light.distance;\n\t\t\t\t\tuniforms.decay = light.decay;\n\n\t\t\t\t\tuniforms.shadow = light.castShadow;\n\n\t\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\t\t\tuniforms.shadowBias = shadow.bias;\n\t\t\t\t\t\tuniforms.shadowRadius = shadow.radius;\n\t\t\t\t\t\tuniforms.shadowMapSize = shadow.mapSize;\n\t\t\t\t\t\tuniforms.shadowCameraNear = shadow.camera.near;\n\t\t\t\t\t\tuniforms.shadowCameraFar = shadow.camera.far;\n\n\t\t\t\t\t\tstate.pointShadowMap[ pointLength ] = shadowMap;\n\t\t\t\t\t\tstate.pointShadowMatrix[ pointLength ] = light.shadow.matrix;\n\n\t\t\t\t\t\tnumPointShadows ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.point[ pointLength ] = uniforms;\n\n\t\t\t\t\tpointLength ++;\n\n\t\t\t\t} else if ( light.isHemisphereLight ) {\n\n\t\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\t\t\t\t\tuniforms.direction.normalize();\n\n\t\t\t\t\tuniforms.skyColor.copy( light.color ).multiplyScalar( intensity );\n\t\t\t\t\tuniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );\n\n\t\t\t\t\tstate.hemi[ hemiLength ] = uniforms;\n\n\t\t\t\t\themiLength ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.ambient[ 0 ] = r;\n\t\t\tstate.ambient[ 1 ] = g;\n\t\t\tstate.ambient[ 2 ] = b;\n\n\t\t\tvar hash = state.hash;\n\n\t\t\tif ( hash.directionalLength !== directionalLength ||\n\t\t\t\thash.pointLength !== pointLength ||\n\t\t\t\thash.spotLength !== spotLength ||\n\t\t\t\thash.rectAreaLength !== rectAreaLength ||\n\t\t\t\thash.hemiLength !== hemiLength ||\n\t\t\t\thash.numDirectionalShadows !== numDirectionalShadows ||\n\t\t\t\thash.numPointShadows !== numPointShadows ||\n\t\t\t\thash.numSpotShadows !== numSpotShadows ) {\n\n\t\t\t\tstate.directional.length = directionalLength;\n\t\t\t\tstate.spot.length = spotLength;\n\t\t\t\tstate.rectArea.length = rectAreaLength;\n\t\t\t\tstate.point.length = pointLength;\n\t\t\t\tstate.hemi.length = hemiLength;\n\n\t\t\t\tstate.directionalShadowMap.length = numDirectionalShadows;\n\t\t\t\tstate.pointShadowMap.length = numPointShadows;\n\t\t\t\tstate.spotShadowMap.length = numSpotShadows;\n\t\t\t\tstate.directionalShadowMatrix.length = numDirectionalShadows;\n\t\t\t\tstate.pointShadowMatrix.length = numPointShadows;\n\t\t\t\tstate.spotShadowMatrix.length = numSpotShadows;\n\n\t\t\t\thash.directionalLength = directionalLength;\n\t\t\t\thash.pointLength = pointLength;\n\t\t\t\thash.spotLength = spotLength;\n\t\t\t\thash.rectAreaLength = rectAreaLength;\n\t\t\t\thash.hemiLength = hemiLength;\n\n\t\t\t\thash.numDirectionalShadows = numDirectionalShadows;\n\t\t\t\thash.numPointShadows = numPointShadows;\n\t\t\t\thash.numSpotShadows = numSpotShadows;\n\n\t\t\t\tstate.version = nextVersion ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\t\t\tsetup: setup,\n\t\t\tstate: state\n\t\t};\n\n\t}\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction WebGLRenderState() {\n\n\t\tvar lights = new WebGLLights();\n\n\t\tvar lightsArray = [];\n\t\tvar shadowsArray = [];\n\n\t\tfunction init() {\n\n\t\t\tlightsArray.length = 0;\n\t\t\tshadowsArray.length = 0;\n\n\t\t}\n\n\t\tfunction pushLight( light ) {\n\n\t\t\tlightsArray.push( light );\n\n\t\t}\n\n\t\tfunction pushShadow( shadowLight ) {\n\n\t\t\tshadowsArray.push( shadowLight );\n\n\t\t}\n\n\t\tfunction setupLights( camera ) {\n\n\t\t\tlights.setup( lightsArray, shadowsArray, camera );\n\n\t\t}\n\n\t\tvar state = {\n\t\t\tlightsArray: lightsArray,\n\t\t\tshadowsArray: shadowsArray,\n\n\t\t\tlights: lights\n\t\t};\n\n\t\treturn {\n\t\t\tinit: init,\n\t\t\tstate: state,\n\t\t\tsetupLights: setupLights,\n\n\t\t\tpushLight: pushLight,\n\t\t\tpushShadow: pushShadow\n\t\t};\n\n\t}\n\n\tfunction WebGLRenderStates() {\n\n\t\tvar renderStates = new WeakMap();\n\n\t\tfunction onSceneDispose( event ) {\n\n\t\t\tvar scene = event.target;\n\n\t\t\tscene.removeEventListener( 'dispose', onSceneDispose );\n\n\t\t\trenderStates.delete( scene );\n\n\t\t}\n\n\t\tfunction get( scene, camera ) {\n\n\t\t\tvar renderState;\n\n\t\t\tif ( renderStates.has( scene ) === false ) {\n\n\t\t\t\trenderState = new WebGLRenderState();\n\t\t\t\trenderStates.set( scene, new WeakMap() );\n\t\t\t\trenderStates.get( scene ).set( camera, renderState );\n\n\t\t\t\tscene.addEventListener( 'dispose', onSceneDispose );\n\n\t\t\t} else {\n\n\t\t\t\tif ( renderStates.get( scene ).has( camera ) === false ) {\n\n\t\t\t\t\trenderState = new WebGLRenderState();\n\t\t\t\t\trenderStates.get( scene ).set( camera, renderState );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trenderState = renderStates.get( scene ).get( camera );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn renderState;\n\n\t\t}\n\n\t\tfunction dispose() {\n\n\t\t\trenderStates = new WeakMap();\n\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author bhouston / https://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>\n\t * }\n\t */\n\n\tfunction MeshDepthMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshDepthMaterial';\n\n\t\tthis.depthPacking = BasicDepthPacking;\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshDepthMaterial.prototype = Object.create( Material.prototype );\n\tMeshDepthMaterial.prototype.constructor = MeshDepthMaterial;\n\n\tMeshDepthMaterial.prototype.isMeshDepthMaterial = true;\n\n\tMeshDepthMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.depthPacking = source.depthPacking;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *\n\t *  referencePosition: <float>,\n\t *  nearDistance: <float>,\n\t *  farDistance: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>\n\t *\n\t * }\n\t */\n\n\tfunction MeshDistanceMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshDistanceMaterial';\n\n\t\tthis.referencePosition = new Vector3();\n\t\tthis.nearDistance = 1;\n\t\tthis.farDistance = 1000;\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.fog = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshDistanceMaterial.prototype = Object.create( Material.prototype );\n\tMeshDistanceMaterial.prototype.constructor = MeshDistanceMaterial;\n\n\tMeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;\n\n\tMeshDistanceMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.referencePosition.copy( source.referencePosition );\n\t\tthis.nearDistance = source.nearDistance;\n\t\tthis.farDistance = source.farDistance;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\treturn this;\n\n\t};\n\n\tvar vsm_frag = \"uniform sampler2D shadow_pass;\\nuniform vec2 resolution;\\nuniform float radius;\\n#include <packing>\\nvoid main() {\\n  float mean = 0.0;\\n  float squared_mean = 0.0;\\n\\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy  ) / resolution ) );\\n  for ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {\\n    #ifdef HORIZONAL_PASS\\n      vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );\\n      mean += distribution.x;\\n      squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\\n    #else\\n      float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0,  i )  * radius ) / resolution ) );\\n      mean += depth;\\n      squared_mean += depth * depth;\\n    #endif\\n  }\\n  mean = mean * HALF_SAMPLE_RATE;\\n  squared_mean = squared_mean * HALF_SAMPLE_RATE;\\n  float std_dev = sqrt( squared_mean - mean * mean );\\n  gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\\n}\";\n\n\tvar vsm_vert = \"void main() {\\n\\tgl_Position = vec4( position, 1.0 );\\n}\";\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLShadowMap( _renderer, _objects, maxTextureSize ) {\n\n\t\tvar _frustum = new Frustum(),\n\n\t\t\t_shadowMapSize = new Vector2(),\n\t\t\t_viewportSize = new Vector2(),\n\n\t\t\t_viewport = new Vector4(),\n\n\t\t\t_depthMaterials = [],\n\t\t\t_distanceMaterials = [],\n\n\t\t\t_materialCache = {};\n\n\t\tvar shadowSide = { 0: BackSide, 1: FrontSide, 2: DoubleSide };\n\n\t\tvar shadowMaterialVertical = new ShaderMaterial( {\n\n\t\t\tdefines: {\n\t\t\t\tSAMPLE_RATE: 2.0 / 8.0,\n\t\t\t\tHALF_SAMPLE_RATE: 1.0 / 8.0\n\t\t\t},\n\n\t\t\tuniforms: {\n\t\t\t\tshadow_pass: { value: null },\n\t\t\t\tresolution: { value: new Vector2() },\n\t\t\t\tradius: { value: 4.0 }\n\t\t\t},\n\n\t\t\tvertexShader: vsm_vert,\n\n\t\t\tfragmentShader: vsm_frag\n\n\t\t} );\n\n\t\tvar shadowMaterialHorizonal = shadowMaterialVertical.clone();\n\t\tshadowMaterialHorizonal.defines.HORIZONAL_PASS = 1;\n\n\t\tvar fullScreenTri = new BufferGeometry();\n\t\tfullScreenTri.setAttribute(\n\t\t\t\"position\",\n\t\t\tnew BufferAttribute(\n\t\t\t\tnew Float32Array( [ - 1, - 1, 0.5, 3, - 1, 0.5, - 1, 3, 0.5 ] ),\n\t\t\t\t3\n\t\t\t)\n\t\t);\n\n\t\tvar fullScreenMesh = new Mesh( fullScreenTri, shadowMaterialVertical );\n\n\t\tvar scope = this;\n\n\t\tthis.enabled = false;\n\n\t\tthis.autoUpdate = true;\n\t\tthis.needsUpdate = false;\n\n\t\tthis.type = PCFShadowMap;\n\n\t\tthis.render = function ( lights, scene, camera ) {\n\n\t\t\tif ( scope.enabled === false ) { return; }\n\t\t\tif ( scope.autoUpdate === false && scope.needsUpdate === false ) { return; }\n\n\t\t\tif ( lights.length === 0 ) { return; }\n\n\t\t\tvar currentRenderTarget = _renderer.getRenderTarget();\n\t\t\tvar activeCubeFace = _renderer.getActiveCubeFace();\n\t\t\tvar activeMipmapLevel = _renderer.getActiveMipmapLevel();\n\n\t\t\tvar _state = _renderer.state;\n\n\t\t\t// Set GL state for depth map.\n\t\t\t_state.setBlending( NoBlending );\n\t\t\t_state.buffers.color.setClear( 1, 1, 1, 1 );\n\t\t\t_state.buffers.depth.setTest( true );\n\t\t\t_state.setScissorTest( false );\n\n\t\t\t// render depth map\n\n\t\t\tfor ( var i = 0, il = lights.length; i < il; i ++ ) {\n\n\t\t\t\tvar light = lights[ i ];\n\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\tif ( shadow === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\t_shadowMapSize.copy( shadow.mapSize );\n\n\t\t\t\tvar shadowFrameExtents = shadow.getFrameExtents();\n\n\t\t\t\t_shadowMapSize.multiply( shadowFrameExtents );\n\n\t\t\t\t_viewportSize.copy( shadow.mapSize );\n\n\t\t\t\tif ( _shadowMapSize.x > maxTextureSize || _shadowMapSize.y > maxTextureSize ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap:', light, 'has shadow exceeding max texture size, reducing' );\n\n\t\t\t\t\tif ( _shadowMapSize.x > maxTextureSize ) {\n\n\t\t\t\t\t\t_viewportSize.x = Math.floor( maxTextureSize / shadowFrameExtents.x );\n\t\t\t\t\t\t_shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;\n\t\t\t\t\t\tshadow.mapSize.x = _viewportSize.x;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( _shadowMapSize.y > maxTextureSize ) {\n\n\t\t\t\t\t\t_viewportSize.y = Math.floor( maxTextureSize / shadowFrameExtents.y );\n\t\t\t\t\t\t_shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;\n\t\t\t\t\t\tshadow.mapSize.y = _viewportSize.y;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( shadow.map === null && ! shadow.isPointLightShadow && this.type === VSMShadowMap ) {\n\n\t\t\t\t\tvar pars = { minFilter: LinearFilter, magFilter: LinearFilter, format: RGBAFormat };\n\n\t\t\t\t\tshadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\t\t\t\t\tshadow.map.texture.name = light.name + \".shadowMap\";\n\n\t\t\t\t\tshadow.mapPass = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\n\t\t\t\t\tshadow.camera.updateProjectionMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tif ( shadow.map === null ) {\n\n\t\t\t\t\tvar pars = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };\n\n\t\t\t\t\tshadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\t\t\t\t\tshadow.map.texture.name = light.name + \".shadowMap\";\n\n\t\t\t\t\tshadow.camera.updateProjectionMatrix();\n\n\t\t\t\t}\n\n\t\t\t\t_renderer.setRenderTarget( shadow.map );\n\t\t\t\t_renderer.clear();\n\n\t\t\t\tvar viewportCount = shadow.getViewportCount();\n\n\t\t\t\tfor ( var vp = 0; vp < viewportCount; vp ++ ) {\n\n\t\t\t\t\tvar viewport = shadow.getViewport( vp );\n\n\t\t\t\t\t_viewport.set(\n\t\t\t\t\t\t_viewportSize.x * viewport.x,\n\t\t\t\t\t\t_viewportSize.y * viewport.y,\n\t\t\t\t\t\t_viewportSize.x * viewport.z,\n\t\t\t\t\t\t_viewportSize.y * viewport.w\n\t\t\t\t\t);\n\n\t\t\t\t\t_state.viewport( _viewport );\n\n\t\t\t\t\tshadow.updateMatrices( light, vp );\n\n\t\t\t\t\t_frustum = shadow.getFrustum();\n\n\t\t\t\t\trenderObject( scene, camera, shadow.camera, light, this.type );\n\n\t\t\t\t}\n\n\t\t\t\t// do blur pass for VSM\n\n\t\t\t\tif ( ! shadow.isPointLightShadow && this.type === VSMShadowMap ) {\n\n\t\t\t\t\tVSMPass( shadow, camera );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tscope.needsUpdate = false;\n\n\t\t\t_renderer.setRenderTarget( currentRenderTarget, activeCubeFace, activeMipmapLevel );\n\n\t\t};\n\n\t\tfunction VSMPass( shadow, camera ) {\n\n\t\t\tvar geometry = _objects.update( fullScreenMesh );\n\n\t\t\t// vertical pass\n\n\t\t\tshadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;\n\t\t\tshadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;\n\t\t\tshadowMaterialVertical.uniforms.radius.value = shadow.radius;\n\t\t\t_renderer.setRenderTarget( shadow.mapPass );\n\t\t\t_renderer.clear();\n\t\t\t_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null );\n\n\t\t\t// horizonal pass\n\n\t\t\tshadowMaterialHorizonal.uniforms.shadow_pass.value = shadow.mapPass.texture;\n\t\t\tshadowMaterialHorizonal.uniforms.resolution.value = shadow.mapSize;\n\t\t\tshadowMaterialHorizonal.uniforms.radius.value = shadow.radius;\n\t\t\t_renderer.setRenderTarget( shadow.map );\n\t\t\t_renderer.clear();\n\t\t\t_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialHorizonal, fullScreenMesh, null );\n\n\t\t}\n\n\t\tfunction getDepthMaterialVariant( useMorphing, useSkinning, useInstancing ) {\n\n\t\t\tvar index = useMorphing << 0 | useSkinning << 1 | useInstancing << 2;\n\n\t\t\tvar material = _depthMaterials[ index ];\n\n\t\t\tif ( material === undefined ) {\n\n\t\t\t\tmaterial = new MeshDepthMaterial( {\n\n\t\t\t\t\tdepthPacking: RGBADepthPacking,\n\n\t\t\t\t\tmorphTargets: useMorphing,\n\t\t\t\t\tskinning: useSkinning\n\n\t\t\t\t} );\n\n\t\t\t\t_depthMaterials[ index ] = material;\n\n\t\t\t}\n\n\t\t\treturn material;\n\n\t\t}\n\n\t\tfunction getDistanceMaterialVariant( useMorphing, useSkinning, useInstancing ) {\n\n\t\t\tvar index = useMorphing << 0 | useSkinning << 1 | useInstancing << 2;\n\n\t\t\tvar material = _distanceMaterials[ index ];\n\n\t\t\tif ( material === undefined ) {\n\n\t\t\t\tmaterial = new MeshDistanceMaterial( {\n\n\t\t\t\t\tmorphTargets: useMorphing,\n\t\t\t\t\tskinning: useSkinning\n\n\t\t\t\t} );\n\n\t\t\t\t_distanceMaterials[ index ] = material;\n\n\t\t\t}\n\n\t\t\treturn material;\n\n\t\t}\n\n\t\tfunction getDepthMaterial( object, material, light, shadowCameraNear, shadowCameraFar, type ) {\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tvar result = null;\n\n\t\t\tvar getMaterialVariant = getDepthMaterialVariant;\n\t\t\tvar customMaterial = object.customDepthMaterial;\n\n\t\t\tif ( light.isPointLight === true ) {\n\n\t\t\t\tgetMaterialVariant = getDistanceMaterialVariant;\n\t\t\t\tcustomMaterial = object.customDistanceMaterial;\n\n\t\t\t}\n\n\t\t\tif ( customMaterial === undefined ) {\n\n\t\t\t\tvar useMorphing = false;\n\n\t\t\t\tif ( material.morphTargets === true ) {\n\n\t\t\t\t\tif ( geometry.isBufferGeometry === true ) {\n\n\t\t\t\t\t\tuseMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;\n\n\t\t\t\t\t} else if ( geometry.isGeometry === true ) {\n\n\t\t\t\t\t\tuseMorphing = geometry.morphTargets && geometry.morphTargets.length > 0;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar useSkinning = false;\n\n\t\t\t\tif ( object.isSkinnedMesh === true ) {\n\n\t\t\t\t\tif ( material.skinning === true ) {\n\n\t\t\t\t\t\tuseSkinning = true;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:', object );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar useInstancing = object.isInstancedMesh === true;\n\n\t\t\t\tresult = getMaterialVariant( useMorphing, useSkinning, useInstancing );\n\n\t\t\t} else {\n\n\t\t\t\tresult = customMaterial;\n\n\t\t\t}\n\n\t\t\tif ( _renderer.localClippingEnabled &&\n\t\t\t\t\tmaterial.clipShadows === true &&\n\t\t\t\t\tmaterial.clippingPlanes.length !== 0 ) {\n\n\t\t\t\t// in this case we need a unique material instance reflecting the\n\t\t\t\t// appropriate state\n\n\t\t\t\tvar keyA = result.uuid, keyB = material.uuid;\n\n\t\t\t\tvar materialsForVariant = _materialCache[ keyA ];\n\n\t\t\t\tif ( materialsForVariant === undefined ) {\n\n\t\t\t\t\tmaterialsForVariant = {};\n\t\t\t\t\t_materialCache[ keyA ] = materialsForVariant;\n\n\t\t\t\t}\n\n\t\t\t\tvar cachedMaterial = materialsForVariant[ keyB ];\n\n\t\t\t\tif ( cachedMaterial === undefined ) {\n\n\t\t\t\t\tcachedMaterial = result.clone();\n\t\t\t\t\tmaterialsForVariant[ keyB ] = cachedMaterial;\n\n\t\t\t\t}\n\n\t\t\t\tresult = cachedMaterial;\n\n\t\t\t}\n\n\t\t\tresult.visible = material.visible;\n\t\t\tresult.wireframe = material.wireframe;\n\n\t\t\tif ( type === VSMShadowMap ) {\n\n\t\t\t\tresult.side = ( material.shadowSide !== null ) ? material.shadowSide : material.side;\n\n\t\t\t} else {\n\n\t\t\t\tresult.side = ( material.shadowSide !== null ) ? material.shadowSide : shadowSide[ material.side ];\n\n\t\t\t}\n\n\t\t\tresult.clipShadows = material.clipShadows;\n\t\t\tresult.clippingPlanes = material.clippingPlanes;\n\t\t\tresult.clipIntersection = material.clipIntersection;\n\n\t\t\tresult.wireframeLinewidth = material.wireframeLinewidth;\n\t\t\tresult.linewidth = material.linewidth;\n\n\t\t\tif ( light.isPointLight === true && result.isMeshDistanceMaterial === true ) {\n\n\t\t\t\tresult.referencePosition.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tresult.nearDistance = shadowCameraNear;\n\t\t\t\tresult.farDistance = shadowCameraFar;\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t\tfunction renderObject( object, camera, shadowCamera, light, type ) {\n\n\t\t\tif ( object.visible === false ) { return; }\n\n\t\t\tvar visible = object.layers.test( camera.layers );\n\n\t\t\tif ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {\n\n\t\t\t\tif ( ( object.castShadow || ( object.receiveShadow && type === VSMShadowMap ) ) && ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) ) {\n\n\t\t\t\t\tobject.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );\n\n\t\t\t\t\tvar geometry = _objects.update( object );\n\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\tvar groups = geometry.groups;\n\n\t\t\t\t\t\tfor ( var k = 0, kl = groups.length; k < kl; k ++ ) {\n\n\t\t\t\t\t\t\tvar group = groups[ k ];\n\t\t\t\t\t\t\tvar groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\n\n\t\t\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, groupMaterial, light, shadowCamera.near, shadowCamera.far, type );\n\n\t\t\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( material.visible ) {\n\n\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, material, light, shadowCamera.near, shadowCamera.far, type );\n\n\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\trenderObject( children[ i ], camera, shadowCamera, light, type );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLState( gl, extensions, capabilities ) {\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\n\t\tfunction ColorBuffer() {\n\n\t\t\tvar locked = false;\n\n\t\t\tvar color = new Vector4();\n\t\t\tvar currentColorMask = null;\n\t\t\tvar currentColorClear = new Vector4( 0, 0, 0, 0 );\n\n\t\t\treturn {\n\n\t\t\t\tsetMask: function ( colorMask ) {\n\n\t\t\t\t\tif ( currentColorMask !== colorMask && ! locked ) {\n\n\t\t\t\t\t\tgl.colorMask( colorMask, colorMask, colorMask, colorMask );\n\t\t\t\t\t\tcurrentColorMask = colorMask;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\t\tlocked = lock;\n\n\t\t\t\t},\n\n\t\t\t\tsetClear: function ( r, g, b, a, premultipliedAlpha ) {\n\n\t\t\t\t\tif ( premultipliedAlpha === true ) {\n\n\t\t\t\t\t\tr *= a; g *= a; b *= a;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcolor.set( r, g, b, a );\n\n\t\t\t\t\tif ( currentColorClear.equals( color ) === false ) {\n\n\t\t\t\t\t\tgl.clearColor( r, g, b, a );\n\t\t\t\t\t\tcurrentColorClear.copy( color );\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\treset: function () {\n\n\t\t\t\t\tlocked = false;\n\n\t\t\t\t\tcurrentColorMask = null;\n\t\t\t\t\tcurrentColorClear.set( - 1, 0, 0, 0 ); // set to invalid state\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t\tfunction DepthBuffer() {\n\n\t\t\tvar locked = false;\n\n\t\t\tvar currentDepthMask = null;\n\t\t\tvar currentDepthFunc = null;\n\t\t\tvar currentDepthClear = null;\n\n\t\t\treturn {\n\n\t\t\t\tsetTest: function ( depthTest ) {\n\n\t\t\t\t\tif ( depthTest ) {\n\n\t\t\t\t\t\tenable( 2929 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tdisable( 2929 );\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetMask: function ( depthMask ) {\n\n\t\t\t\t\tif ( currentDepthMask !== depthMask && ! locked ) {\n\n\t\t\t\t\t\tgl.depthMask( depthMask );\n\t\t\t\t\t\tcurrentDepthMask = depthMask;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetFunc: function ( depthFunc ) {\n\n\t\t\t\t\tif ( currentDepthFunc !== depthFunc ) {\n\n\t\t\t\t\t\tif ( depthFunc ) {\n\n\t\t\t\t\t\t\tswitch ( depthFunc ) {\n\n\t\t\t\t\t\t\t\tcase NeverDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 512 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase AlwaysDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 519 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase LessDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 513 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase LessEqualDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 515 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase EqualDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 514 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase GreaterEqualDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 518 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase GreaterDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 516 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase NotEqualDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 517 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 515 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tgl.depthFunc( 515 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcurrentDepthFunc = depthFunc;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\t\tlocked = lock;\n\n\t\t\t\t},\n\n\t\t\t\tsetClear: function ( depth ) {\n\n\t\t\t\t\tif ( currentDepthClear !== depth ) {\n\n\t\t\t\t\t\tgl.clearDepth( depth );\n\t\t\t\t\t\tcurrentDepthClear = depth;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\treset: function () {\n\n\t\t\t\t\tlocked = false;\n\n\t\t\t\t\tcurrentDepthMask = null;\n\t\t\t\t\tcurrentDepthFunc = null;\n\t\t\t\t\tcurrentDepthClear = null;\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t\tfunction StencilBuffer() {\n\n\t\t\tvar locked = false;\n\n\t\t\tvar currentStencilMask = null;\n\t\t\tvar currentStencilFunc = null;\n\t\t\tvar currentStencilRef = null;\n\t\t\tvar currentStencilFuncMask = null;\n\t\t\tvar currentStencilFail = null;\n\t\t\tvar currentStencilZFail = null;\n\t\t\tvar currentStencilZPass = null;\n\t\t\tvar currentStencilClear = null;\n\n\t\t\treturn {\n\n\t\t\t\tsetTest: function ( stencilTest ) {\n\n\t\t\t\t\tif ( ! locked ) {\n\n\t\t\t\t\t\tif ( stencilTest ) {\n\n\t\t\t\t\t\t\tenable( 2960 );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tdisable( 2960 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetMask: function ( stencilMask ) {\n\n\t\t\t\t\tif ( currentStencilMask !== stencilMask && ! locked ) {\n\n\t\t\t\t\t\tgl.stencilMask( stencilMask );\n\t\t\t\t\t\tcurrentStencilMask = stencilMask;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetFunc: function ( stencilFunc, stencilRef, stencilMask ) {\n\n\t\t\t\t\tif ( currentStencilFunc !== stencilFunc ||\n\t\t\t\t\t     currentStencilRef \t!== stencilRef \t||\n\t\t\t\t\t     currentStencilFuncMask !== stencilMask ) {\n\n\t\t\t\t\t\tgl.stencilFunc( stencilFunc, stencilRef, stencilMask );\n\n\t\t\t\t\t\tcurrentStencilFunc = stencilFunc;\n\t\t\t\t\t\tcurrentStencilRef = stencilRef;\n\t\t\t\t\t\tcurrentStencilFuncMask = stencilMask;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetOp: function ( stencilFail, stencilZFail, stencilZPass ) {\n\n\t\t\t\t\tif ( currentStencilFail\t !== stencilFail \t||\n\t\t\t\t\t     currentStencilZFail !== stencilZFail ||\n\t\t\t\t\t     currentStencilZPass !== stencilZPass ) {\n\n\t\t\t\t\t\tgl.stencilOp( stencilFail, stencilZFail, stencilZPass );\n\n\t\t\t\t\t\tcurrentStencilFail = stencilFail;\n\t\t\t\t\t\tcurrentStencilZFail = stencilZFail;\n\t\t\t\t\t\tcurrentStencilZPass = stencilZPass;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\t\tlocked = lock;\n\n\t\t\t\t},\n\n\t\t\t\tsetClear: function ( stencil ) {\n\n\t\t\t\t\tif ( currentStencilClear !== stencil ) {\n\n\t\t\t\t\t\tgl.clearStencil( stencil );\n\t\t\t\t\t\tcurrentStencilClear = stencil;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\treset: function () {\n\n\t\t\t\t\tlocked = false;\n\n\t\t\t\t\tcurrentStencilMask = null;\n\t\t\t\t\tcurrentStencilFunc = null;\n\t\t\t\t\tcurrentStencilRef = null;\n\t\t\t\t\tcurrentStencilFuncMask = null;\n\t\t\t\t\tcurrentStencilFail = null;\n\t\t\t\t\tcurrentStencilZFail = null;\n\t\t\t\t\tcurrentStencilZPass = null;\n\t\t\t\t\tcurrentStencilClear = null;\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t\t//\n\n\t\tvar colorBuffer = new ColorBuffer();\n\t\tvar depthBuffer = new DepthBuffer();\n\t\tvar stencilBuffer = new StencilBuffer();\n\n\t\tvar maxVertexAttributes = gl.getParameter( 34921 );\n\t\tvar newAttributes = new Uint8Array( maxVertexAttributes );\n\t\tvar enabledAttributes = new Uint8Array( maxVertexAttributes );\n\t\tvar attributeDivisors = new Uint8Array( maxVertexAttributes );\n\n\t\tvar enabledCapabilities = {};\n\n\t\tvar currentProgram = null;\n\n\t\tvar currentBlendingEnabled = null;\n\t\tvar currentBlending = null;\n\t\tvar currentBlendEquation = null;\n\t\tvar currentBlendSrc = null;\n\t\tvar currentBlendDst = null;\n\t\tvar currentBlendEquationAlpha = null;\n\t\tvar currentBlendSrcAlpha = null;\n\t\tvar currentBlendDstAlpha = null;\n\t\tvar currentPremultipledAlpha = false;\n\n\t\tvar currentFlipSided = null;\n\t\tvar currentCullFace = null;\n\n\t\tvar currentLineWidth = null;\n\n\t\tvar currentPolygonOffsetFactor = null;\n\t\tvar currentPolygonOffsetUnits = null;\n\n\t\tvar maxTextures = gl.getParameter( 35661 );\n\n\t\tvar lineWidthAvailable = false;\n\t\tvar version = 0;\n\t\tvar glVersion = gl.getParameter( 7938 );\n\n\t\tif ( glVersion.indexOf( 'WebGL' ) !== - 1 ) {\n\n\t\t\tversion = parseFloat( /^WebGL\\ ([0-9])/.exec( glVersion )[ 1 ] );\n\t\t\tlineWidthAvailable = ( version >= 1.0 );\n\n\t\t} else if ( glVersion.indexOf( 'OpenGL ES' ) !== - 1 ) {\n\n\t\t\tversion = parseFloat( /^OpenGL\\ ES\\ ([0-9])/.exec( glVersion )[ 1 ] );\n\t\t\tlineWidthAvailable = ( version >= 2.0 );\n\n\t\t}\n\n\t\tvar currentTextureSlot = null;\n\t\tvar currentBoundTextures = {};\n\n\t\tvar currentScissor = new Vector4();\n\t\tvar currentViewport = new Vector4();\n\n\t\tfunction createTexture( type, target, count ) {\n\n\t\t\tvar data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.\n\t\t\tvar texture = gl.createTexture();\n\n\t\t\tgl.bindTexture( type, texture );\n\t\t\tgl.texParameteri( type, 10241, 9728 );\n\t\t\tgl.texParameteri( type, 10240, 9728 );\n\n\t\t\tfor ( var i = 0; i < count; i ++ ) {\n\n\t\t\t\tgl.texImage2D( target + i, 0, 6408, 1, 1, 0, 6408, 5121, data );\n\n\t\t\t}\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t\tvar emptyTextures = {};\n\t\temptyTextures[ 3553 ] = createTexture( 3553, 3553, 1 );\n\t\temptyTextures[ 34067 ] = createTexture( 34067, 34069, 6 );\n\n\t\t// init\n\n\t\tcolorBuffer.setClear( 0, 0, 0, 1 );\n\t\tdepthBuffer.setClear( 1 );\n\t\tstencilBuffer.setClear( 0 );\n\n\t\tenable( 2929 );\n\t\tdepthBuffer.setFunc( LessEqualDepth );\n\n\t\tsetFlipSided( false );\n\t\tsetCullFace( CullFaceBack );\n\t\tenable( 2884 );\n\n\t\tsetBlending( NoBlending );\n\n\t\t//\n\n\t\tfunction initAttributes() {\n\n\t\t\tfor ( var i = 0, l = newAttributes.length; i < l; i ++ ) {\n\n\t\t\t\tnewAttributes[ i ] = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction enableAttribute( attribute ) {\n\n\t\t\tenableAttributeAndDivisor( attribute, 0 );\n\n\t\t}\n\n\t\tfunction enableAttributeAndDivisor( attribute, meshPerAttribute ) {\n\n\t\t\tnewAttributes[ attribute ] = 1;\n\n\t\t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\n\t\t\t\tgl.enableVertexAttribArray( attribute );\n\t\t\t\tenabledAttributes[ attribute ] = 1;\n\n\t\t\t}\n\n\t\t\tif ( attributeDivisors[ attribute ] !== meshPerAttribute ) {\n\n\t\t\t\tvar extension = isWebGL2 ? gl : extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\t\textension[ isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE' ]( attribute, meshPerAttribute );\n\t\t\t\tattributeDivisors[ attribute ] = meshPerAttribute;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction disableUnusedAttributes() {\n\n\t\t\tfor ( var i = 0, l = enabledAttributes.length; i !== l; ++ i ) {\n\n\t\t\t\tif ( enabledAttributes[ i ] !== newAttributes[ i ] ) {\n\n\t\t\t\t\tgl.disableVertexAttribArray( i );\n\t\t\t\t\tenabledAttributes[ i ] = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction enable( id ) {\n\n\t\t\tif ( enabledCapabilities[ id ] !== true ) {\n\n\t\t\t\tgl.enable( id );\n\t\t\t\tenabledCapabilities[ id ] = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction disable( id ) {\n\n\t\t\tif ( enabledCapabilities[ id ] !== false ) {\n\n\t\t\t\tgl.disable( id );\n\t\t\t\tenabledCapabilities[ id ] = false;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction useProgram( program ) {\n\n\t\t\tif ( currentProgram !== program ) {\n\n\t\t\t\tgl.useProgram( program );\n\n\t\t\t\tcurrentProgram = program;\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\tvar equationToGL = {};\n\t\tequationToGL[ AddEquation ] = 32774;\n\t\tequationToGL[ SubtractEquation ] = 32778;\n\t\tequationToGL[ ReverseSubtractEquation ] = 32779;\n\n\t\tif ( isWebGL2 ) {\n\n\t\t\tequationToGL[ MinEquation ] = 32775;\n\t\t\tequationToGL[ MaxEquation ] = 32776;\n\n\t\t} else {\n\n\t\t\tvar extension = extensions.get( 'EXT_blend_minmax' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tequationToGL[ MinEquation ] = extension.MIN_EXT;\n\t\t\t\tequationToGL[ MaxEquation ] = extension.MAX_EXT;\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar factorToGL = {};\n\t\tfactorToGL[ ZeroFactor ] = 0;\n\t\tfactorToGL[ OneFactor ] = 1;\n\t\tfactorToGL[ SrcColorFactor ] = 768;\n\t\tfactorToGL[ SrcAlphaFactor ] = 770;\n\t\tfactorToGL[ SrcAlphaSaturateFactor ] = 776;\n\t\tfactorToGL[ DstColorFactor ] = 774;\n\t\tfactorToGL[ DstAlphaFactor ] = 772;\n\t\tfactorToGL[ OneMinusSrcColorFactor ] = 769;\n\t\tfactorToGL[ OneMinusSrcAlphaFactor ] = 771;\n\t\tfactorToGL[ OneMinusDstColorFactor ] = 775;\n\t\tfactorToGL[ OneMinusDstAlphaFactor ] = 773;\n\n\t\tfunction setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {\n\n\t\t\tif ( blending === NoBlending ) {\n\n\t\t\t\tif ( currentBlendingEnabled ) {\n\n\t\t\t\t\tdisable( 3042 );\n\t\t\t\t\tcurrentBlendingEnabled = false;\n\n\t\t\t\t}\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( ! currentBlendingEnabled ) {\n\n\t\t\t\tenable( 3042 );\n\t\t\t\tcurrentBlendingEnabled = true;\n\n\t\t\t}\n\n\t\t\tif ( blending !== CustomBlending ) {\n\n\t\t\t\tif ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {\n\n\t\t\t\t\tif ( currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation ) {\n\n\t\t\t\t\t\tgl.blendEquation( 32774 );\n\n\t\t\t\t\t\tcurrentBlendEquation = AddEquation;\n\t\t\t\t\t\tcurrentBlendEquationAlpha = AddEquation;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\t\tswitch ( blending ) {\n\n\t\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( 1, 771, 1, 771 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc( 1, 1 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( 0, 0, 769, 771 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( 0, 768, 0, 770 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tconsole.error( 'THREE.WebGLState: Invalid blending: ', blending );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tswitch ( blending ) {\n\n\t\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( 770, 771, 1, 771 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc( 770, 1 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc( 0, 769 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc( 0, 768 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tconsole.error( 'THREE.WebGLState: Invalid blending: ', blending );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentBlendSrc = null;\n\t\t\t\t\tcurrentBlendDst = null;\n\t\t\t\t\tcurrentBlendSrcAlpha = null;\n\t\t\t\t\tcurrentBlendDstAlpha = null;\n\n\t\t\t\t\tcurrentBlending = blending;\n\t\t\t\t\tcurrentPremultipledAlpha = premultipliedAlpha;\n\n\t\t\t\t}\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t// custom blending\n\n\t\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\n\t\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\n\t\t\tblendDstAlpha = blendDstAlpha || blendDst;\n\n\t\t\tif ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {\n\n\t\t\t\tgl.blendEquationSeparate( equationToGL[ blendEquation ], equationToGL[ blendEquationAlpha ] );\n\n\t\t\t\tcurrentBlendEquation = blendEquation;\n\t\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\n\n\t\t\t}\n\n\t\t\tif ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {\n\n\t\t\t\tgl.blendFuncSeparate( factorToGL[ blendSrc ], factorToGL[ blendDst ], factorToGL[ blendSrcAlpha ], factorToGL[ blendDstAlpha ] );\n\n\t\t\t\tcurrentBlendSrc = blendSrc;\n\t\t\t\tcurrentBlendDst = blendDst;\n\t\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\n\t\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\n\n\t\t\t}\n\n\t\t\tcurrentBlending = blending;\n\t\t\tcurrentPremultipledAlpha = null;\n\n\t\t}\n\n\t\tfunction setMaterial( material, frontFaceCW ) {\n\n\t\t\tmaterial.side === DoubleSide\n\t\t\t\t? disable( 2884 )\n\t\t\t\t: enable( 2884 );\n\n\t\t\tvar flipSided = ( material.side === BackSide );\n\t\t\tif ( frontFaceCW ) { flipSided = ! flipSided; }\n\n\t\t\tsetFlipSided( flipSided );\n\n\t\t\t( material.blending === NormalBlending && material.transparent === false )\n\t\t\t\t? setBlending( NoBlending )\n\t\t\t\t: setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );\n\n\t\t\tdepthBuffer.setFunc( material.depthFunc );\n\t\t\tdepthBuffer.setTest( material.depthTest );\n\t\t\tdepthBuffer.setMask( material.depthWrite );\n\t\t\tcolorBuffer.setMask( material.colorWrite );\n\n\t\t\tvar stencilWrite = material.stencilWrite;\n\t\t\tstencilBuffer.setTest( stencilWrite );\n\t\t\tif ( stencilWrite ) {\n\n\t\t\t\tstencilBuffer.setMask( material.stencilWriteMask );\n\t\t\t\tstencilBuffer.setFunc( material.stencilFunc, material.stencilRef, material.stencilFuncMask );\n\t\t\t\tstencilBuffer.setOp( material.stencilFail, material.stencilZFail, material.stencilZPass );\n\n\t\t\t}\n\n\t\t\tsetPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\n\n\t\t}\n\n\t\t//\n\n\t\tfunction setFlipSided( flipSided ) {\n\n\t\t\tif ( currentFlipSided !== flipSided ) {\n\n\t\t\t\tif ( flipSided ) {\n\n\t\t\t\t\tgl.frontFace( 2304 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.frontFace( 2305 );\n\n\t\t\t\t}\n\n\t\t\t\tcurrentFlipSided = flipSided;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setCullFace( cullFace ) {\n\n\t\t\tif ( cullFace !== CullFaceNone ) {\n\n\t\t\t\tenable( 2884 );\n\n\t\t\t\tif ( cullFace !== currentCullFace ) {\n\n\t\t\t\t\tif ( cullFace === CullFaceBack ) {\n\n\t\t\t\t\t\tgl.cullFace( 1029 );\n\n\t\t\t\t\t} else if ( cullFace === CullFaceFront ) {\n\n\t\t\t\t\t\tgl.cullFace( 1028 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tgl.cullFace( 1032 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tdisable( 2884 );\n\n\t\t\t}\n\n\t\t\tcurrentCullFace = cullFace;\n\n\t\t}\n\n\t\tfunction setLineWidth( width ) {\n\n\t\t\tif ( width !== currentLineWidth ) {\n\n\t\t\t\tif ( lineWidthAvailable ) { gl.lineWidth( width ); }\n\n\t\t\t\tcurrentLineWidth = width;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setPolygonOffset( polygonOffset, factor, units ) {\n\n\t\t\tif ( polygonOffset ) {\n\n\t\t\t\tenable( 32823 );\n\n\t\t\t\tif ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {\n\n\t\t\t\t\tgl.polygonOffset( factor, units );\n\n\t\t\t\t\tcurrentPolygonOffsetFactor = factor;\n\t\t\t\t\tcurrentPolygonOffsetUnits = units;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tdisable( 32823 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setScissorTest( scissorTest ) {\n\n\t\t\tif ( scissorTest ) {\n\n\t\t\t\tenable( 3089 );\n\n\t\t\t} else {\n\n\t\t\t\tdisable( 3089 );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// texture\n\n\t\tfunction activeTexture( webglSlot ) {\n\n\t\t\tif ( webglSlot === undefined ) { webglSlot = 33984 + maxTextures - 1; }\n\n\t\t\tif ( currentTextureSlot !== webglSlot ) {\n\n\t\t\t\tgl.activeTexture( webglSlot );\n\t\t\t\tcurrentTextureSlot = webglSlot;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction bindTexture( webglType, webglTexture ) {\n\n\t\t\tif ( currentTextureSlot === null ) {\n\n\t\t\t\tactiveTexture();\n\n\t\t\t}\n\n\t\t\tvar boundTexture = currentBoundTextures[ currentTextureSlot ];\n\n\t\t\tif ( boundTexture === undefined ) {\n\n\t\t\t\tboundTexture = { type: undefined, texture: undefined };\n\t\t\t\tcurrentBoundTextures[ currentTextureSlot ] = boundTexture;\n\n\t\t\t}\n\n\t\t\tif ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {\n\n\t\t\t\tgl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );\n\n\t\t\t\tboundTexture.type = webglType;\n\t\t\t\tboundTexture.texture = webglTexture;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction unbindTexture() {\n\n\t\t\tvar boundTexture = currentBoundTextures[ currentTextureSlot ];\n\n\t\t\tif ( boundTexture !== undefined && boundTexture.type !== undefined ) {\n\n\t\t\t\tgl.bindTexture( boundTexture.type, null );\n\n\t\t\t\tboundTexture.type = undefined;\n\t\t\t\tboundTexture.texture = undefined;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction compressedTexImage2D() {\n\n\t\t\ttry {\n\n\t\t\t\tgl.compressedTexImage2D.apply( gl, arguments );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction texImage2D() {\n\n\t\t\ttry {\n\n\t\t\t\tgl.texImage2D.apply( gl, arguments );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction texImage3D() {\n\n\t\t\ttry {\n\n\t\t\t\tgl.texImage3D.apply( gl, arguments );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tfunction scissor( scissor ) {\n\n\t\t\tif ( currentScissor.equals( scissor ) === false ) {\n\n\t\t\t\tgl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );\n\t\t\t\tcurrentScissor.copy( scissor );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction viewport( viewport ) {\n\n\t\t\tif ( currentViewport.equals( viewport ) === false ) {\n\n\t\t\t\tgl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );\n\t\t\t\tcurrentViewport.copy( viewport );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tfunction reset() {\n\n\t\t\tfor ( var i = 0; i < enabledAttributes.length; i ++ ) {\n\n\t\t\t\tif ( enabledAttributes[ i ] === 1 ) {\n\n\t\t\t\t\tgl.disableVertexAttribArray( i );\n\t\t\t\t\tenabledAttributes[ i ] = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tenabledCapabilities = {};\n\n\t\t\tcurrentTextureSlot = null;\n\t\t\tcurrentBoundTextures = {};\n\n\t\t\tcurrentProgram = null;\n\n\t\t\tcurrentBlending = null;\n\n\t\t\tcurrentFlipSided = null;\n\t\t\tcurrentCullFace = null;\n\n\t\t\tcolorBuffer.reset();\n\t\t\tdepthBuffer.reset();\n\t\t\tstencilBuffer.reset();\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tbuffers: {\n\t\t\t\tcolor: colorBuffer,\n\t\t\t\tdepth: depthBuffer,\n\t\t\t\tstencil: stencilBuffer\n\t\t\t},\n\n\t\t\tinitAttributes: initAttributes,\n\t\t\tenableAttribute: enableAttribute,\n\t\t\tenableAttributeAndDivisor: enableAttributeAndDivisor,\n\t\t\tdisableUnusedAttributes: disableUnusedAttributes,\n\t\t\tenable: enable,\n\t\t\tdisable: disable,\n\n\t\t\tuseProgram: useProgram,\n\n\t\t\tsetBlending: setBlending,\n\t\t\tsetMaterial: setMaterial,\n\n\t\t\tsetFlipSided: setFlipSided,\n\t\t\tsetCullFace: setCullFace,\n\n\t\t\tsetLineWidth: setLineWidth,\n\t\t\tsetPolygonOffset: setPolygonOffset,\n\n\t\t\tsetScissorTest: setScissorTest,\n\n\t\t\tactiveTexture: activeTexture,\n\t\t\tbindTexture: bindTexture,\n\t\t\tunbindTexture: unbindTexture,\n\t\t\tcompressedTexImage2D: compressedTexImage2D,\n\t\t\ttexImage2D: texImage2D,\n\t\t\ttexImage3D: texImage3D,\n\n\t\t\tscissor: scissor,\n\t\t\tviewport: viewport,\n\n\t\t\treset: reset\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info ) {\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\t\tvar maxTextures = capabilities.maxTextures;\n\t\tvar maxCubemapSize = capabilities.maxCubemapSize;\n\t\tvar maxTextureSize = capabilities.maxTextureSize;\n\t\tvar maxSamples = capabilities.maxSamples;\n\n\t\tvar _videoTextures = new WeakMap();\n\t\tvar _canvas;\n\n\t\t// cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,\n\t\t// also OffscreenCanvas.getContext(\"webgl\"), but not OffscreenCanvas.getContext(\"2d\")!\n\t\t// Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).\n\n\t\tvar useOffscreenCanvas = false;\n\n\t\ttry {\n\n\t\t\tuseOffscreenCanvas = typeof OffscreenCanvas !== 'undefined'\n\t\t\t\t&& ( new OffscreenCanvas( 1, 1 ).getContext( \"2d\" ) ) !== null;\n\n\t\t} catch ( err ) {\n\n\t\t\t// Ignore any errors\n\n\t\t}\n\n\t\tfunction createCanvas( width, height ) {\n\n\t\t\t// Use OffscreenCanvas when available. Specially needed in web workers\n\n\t\t\treturn useOffscreenCanvas ?\n\t\t\t\tnew OffscreenCanvas( width, height ) :\n\t\t\t\tdocument.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\n\t\t}\n\n\t\tfunction resizeImage( image, needsPowerOfTwo, needsNewCanvas, maxSize ) {\n\n\t\t\tvar scale = 1;\n\n\t\t\t// handle case if texture exceeds max size\n\n\t\t\tif ( image.width > maxSize || image.height > maxSize ) {\n\n\t\t\t\tscale = maxSize / Math.max( image.width, image.height );\n\n\t\t\t}\n\n\t\t\t// only perform resize if necessary\n\n\t\t\tif ( scale < 1 || needsPowerOfTwo === true ) {\n\n\t\t\t\t// only perform resize for certain image types\n\n\t\t\t\tif ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||\n\t\t\t\t\t( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||\n\t\t\t\t\t( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {\n\n\t\t\t\t\tvar floor = needsPowerOfTwo ? MathUtils.floorPowerOfTwo : Math.floor;\n\n\t\t\t\t\tvar width = floor( scale * image.width );\n\t\t\t\t\tvar height = floor( scale * image.height );\n\n\t\t\t\t\tif ( _canvas === undefined ) { _canvas = createCanvas( width, height ); }\n\n\t\t\t\t\t// cube textures can't reuse the same canvas\n\n\t\t\t\t\tvar canvas = needsNewCanvas ? createCanvas( width, height ) : _canvas;\n\n\t\t\t\t\tcanvas.width = width;\n\t\t\t\t\tcanvas.height = height;\n\n\t\t\t\t\tvar context = canvas.getContext( '2d' );\n\t\t\t\t\tcontext.drawImage( image, 0, 0, width, height );\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').' );\n\n\t\t\t\t\treturn canvas;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( 'data' in image ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn image;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn image;\n\n\t\t}\n\n\t\tfunction isPowerOfTwo( image ) {\n\n\t\t\treturn MathUtils.isPowerOfTwo( image.width ) && MathUtils.isPowerOfTwo( image.height );\n\n\t\t}\n\n\t\tfunction textureNeedsPowerOfTwo( texture ) {\n\n\t\t\tif ( isWebGL2 ) { return false; }\n\n\t\t\treturn ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) ||\n\t\t\t\t( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter );\n\n\t\t}\n\n\t\tfunction textureNeedsGenerateMipmaps( texture, supportsMips ) {\n\n\t\t\treturn texture.generateMipmaps && supportsMips &&\n\t\t\t\ttexture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n\n\t\t}\n\n\t\tfunction generateMipmap( target, texture, width, height ) {\n\n\t\t\t_gl.generateMipmap( target );\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\t// Note: Math.log( x ) * Math.LOG2E used instead of Math.log2( x ) which is not supported by IE11\n\t\t\ttextureProperties.__maxMipLevel = Math.log( Math.max( width, height ) ) * Math.LOG2E;\n\n\t\t}\n\n\t\tfunction getInternalFormat( internalFormatName, glFormat, glType ) {\n\n\t\t\tif ( isWebGL2 === false ) { return glFormat; }\n\n\t\t\tif ( internalFormatName !== null ) {\n\n\t\t\t\tif ( _gl[ internalFormatName ] !== undefined ) { return _gl[ internalFormatName ]; }\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \\'' + internalFormatName + '\\'' );\n\n\t\t\t}\n\n\t\t\tvar internalFormat = glFormat;\n\n\t\t\tif ( glFormat === 6403 ) {\n\n\t\t\t\tif ( glType === 5126 ) { internalFormat = 33326; }\n\t\t\t\tif ( glType === 5131 ) { internalFormat = 33325; }\n\t\t\t\tif ( glType === 5121 ) { internalFormat = 33321; }\n\n\t\t\t}\n\n\t\t\tif ( glFormat === 6407 ) {\n\n\t\t\t\tif ( glType === 5126 ) { internalFormat = 34837; }\n\t\t\t\tif ( glType === 5131 ) { internalFormat = 34843; }\n\t\t\t\tif ( glType === 5121 ) { internalFormat = 32849; }\n\n\t\t\t}\n\n\t\t\tif ( glFormat === 6408 ) {\n\n\t\t\t\tif ( glType === 5126 ) { internalFormat = 34836; }\n\t\t\t\tif ( glType === 5131 ) { internalFormat = 34842; }\n\t\t\t\tif ( glType === 5121 ) { internalFormat = 32856; }\n\n\t\t\t}\n\n\t\t\tif ( internalFormat === 33325 || internalFormat === 33326 ||\n\t\t\t\tinternalFormat === 34842 || internalFormat === 34836 ) {\n\n\t\t\t\textensions.get( 'EXT_color_buffer_float' );\n\n\t\t\t} else if ( internalFormat === 34843 || internalFormat === 34837 ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Floating point textures with RGB format not supported. Please use RGBA instead.' );\n\n\t\t\t}\n\n\t\t\treturn internalFormat;\n\n\t\t}\n\n\t\t// Fallback filters for non-power-of-2 textures\n\n\t\tfunction filterFallback( f ) {\n\n\t\t\tif ( f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter ) {\n\n\t\t\t\treturn 9728;\n\n\t\t\t}\n\n\t\t\treturn 9729;\n\n\t\t}\n\n\t\t//\n\n\t\tfunction onTextureDispose( event ) {\n\n\t\t\tvar texture = event.target;\n\n\t\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\n\t\t\tdeallocateTexture( texture );\n\n\t\t\tif ( texture.isVideoTexture ) {\n\n\t\t\t\t_videoTextures.delete( texture );\n\n\t\t\t}\n\n\t\t\tinfo.memory.textures --;\n\n\t\t}\n\n\t\tfunction onRenderTargetDispose( event ) {\n\n\t\t\tvar renderTarget = event.target;\n\n\t\t\trenderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\n\n\t\t\tdeallocateRenderTarget( renderTarget );\n\n\t\t\tinfo.memory.textures --;\n\n\t\t}\n\n\t\t//\n\n\t\tfunction deallocateTexture( texture ) {\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( textureProperties.__webglInit === undefined ) { return; }\n\n\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\t\tproperties.remove( texture );\n\n\t\t}\n\n\t\tfunction deallocateRenderTarget( renderTarget ) {\n\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\n\t\t\tif ( ! renderTarget ) { return; }\n\n\t\t\tif ( textureProperties.__webglTexture !== undefined ) {\n\n\t\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\t\t}\n\n\t\t\tif ( renderTarget.depthTexture ) {\n\n\t\t\t\trenderTarget.depthTexture.dispose();\n\n\t\t\t}\n\n\t\t\tif ( renderTarget.isWebGLCubeRenderTarget ) {\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) { _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] ); }\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );\n\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) { _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer ); }\n\n\t\t\t}\n\n\t\t\tif ( renderTarget.isWebGLMultiviewRenderTarget ) {\n\n\t\t\t\t_gl.deleteTexture( renderTargetProperties.__webglColorTexture );\n\t\t\t\t_gl.deleteTexture( renderTargetProperties.__webglDepthStencilTexture );\n\n\t\t\t\tinfo.memory.textures -= 2;\n\n\t\t\t\tfor ( var i = 0, il = renderTargetProperties.__webglViewFramebuffers.length; i < il; i ++ ) {\n\n\t\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglViewFramebuffers[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tproperties.remove( renderTarget.texture );\n\t\t\tproperties.remove( renderTarget );\n\n\t\t}\n\n\t\t//\n\n\t\tvar textureUnits = 0;\n\n\t\tfunction resetTextureUnits() {\n\n\t\t\ttextureUnits = 0;\n\n\t\t}\n\n\t\tfunction allocateTextureUnit() {\n\n\t\t\tvar textureUnit = textureUnits;\n\n\t\t\tif ( textureUnit >= maxTextures ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + maxTextures );\n\n\t\t\t}\n\n\t\t\ttextureUnits += 1;\n\n\t\t\treturn textureUnit;\n\n\t\t}\n\n\t\t//\n\n\t\tfunction setTexture2D( texture, slot ) {\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( texture.isVideoTexture ) { updateVideoTexture( texture ); }\n\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\t\tvar image = texture.image;\n\n\t\t\t\tif ( image === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined' );\n\n\t\t\t\t} else if ( image.complete === false ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete' );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\tstate.bindTexture( 3553, textureProperties.__webglTexture );\n\n\t\t}\n\n\t\tfunction setTexture2DArray( texture, slot ) {\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\tstate.bindTexture( 35866, textureProperties.__webglTexture );\n\n\t\t}\n\n\t\tfunction setTexture3D( texture, slot ) {\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\tstate.bindTexture( 32879, textureProperties.__webglTexture );\n\n\t\t}\n\n\t\tfunction setTextureCube( texture, slot ) {\n\n\t\t\tif ( texture.image.length !== 6 ) { return; }\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\t\tinitTexture( textureProperties, texture );\n\n\t\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\t\tstate.bindTexture( 34067, textureProperties.__webglTexture );\n\n\t\t\t\t_gl.pixelStorei( 37440, texture.flipY );\n\n\t\t\t\tvar isCompressed = ( texture && ( texture.isCompressedTexture || texture.image[ 0 ].isCompressedTexture ) );\n\t\t\t\tvar isDataTexture = ( texture.image[ 0 ] && texture.image[ 0 ].isDataTexture );\n\n\t\t\t\tvar cubeImage = [];\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tif ( ! isCompressed && ! isDataTexture ) {\n\n\t\t\t\t\t\tcubeImage[ i ] = resizeImage( texture.image[ i ], false, true, maxCubemapSize );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tcubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar image = cubeImage[ 0 ],\n\t\t\t\t\tsupportsMips = isPowerOfTwo( image ) || isWebGL2,\n\t\t\t\t\tglFormat = utils.convert( texture.format ),\n\t\t\t\t\tglType = utils.convert( texture.type ),\n\t\t\t\t\tglInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType );\n\n\t\t\t\tsetTextureParameters( 34067, texture, supportsMips );\n\n\t\t\t\tvar mipmaps;\n\n\t\t\t\tif ( isCompressed ) {\n\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t\tmipmaps = cubeImage[ i ].mipmaps;\n\n\t\t\t\t\t\tfor ( var j = 0; j < mipmaps.length; j ++ ) {\n\n\t\t\t\t\t\t\tvar mipmap = mipmaps[ j ];\n\n\t\t\t\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\n\t\t\t\t\t\t\t\tif ( glFormat !== null ) {\n\n\t\t\t\t\t\t\t\t\tstate.compressedTexImage2D( 34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()' );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.texImage2D( 34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tmipmaps = texture.mipmaps;\n\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t\tif ( isDataTexture ) {\n\n\t\t\t\t\t\t\tstate.texImage2D( 34069 + i, 0, glInternalFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );\n\n\t\t\t\t\t\t\tfor ( var j = 0; j < mipmaps.length; j ++ ) {\n\n\t\t\t\t\t\t\t\tvar mipmap = mipmaps[ j ];\n\t\t\t\t\t\t\t\tvar mipmapImage = mipmap.image[ i ].image;\n\n\t\t\t\t\t\t\t\tstate.texImage2D( 34069 + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.texImage2D( 34069 + i, 0, glInternalFormat, glFormat, glType, cubeImage[ i ] );\n\n\t\t\t\t\t\t\tfor ( var j = 0; j < mipmaps.length; j ++ ) {\n\n\t\t\t\t\t\t\t\tvar mipmap = mipmaps[ j ];\n\n\t\t\t\t\t\t\t\tstate.texImage2D( 34069 + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[ i ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length;\n\n\t\t\t\t}\n\n\t\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\t\t// We assume images for cube map have the same size.\n\t\t\t\t\tgenerateMipmap( 34067, texture, image.width, image.height );\n\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__version = texture.version;\n\n\t\t\t\tif ( texture.onUpdate ) { texture.onUpdate( texture ); }\n\n\t\t\t} else {\n\n\t\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\t\tstate.bindTexture( 34067, textureProperties.__webglTexture );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setTextureCubeDynamic( texture, slot ) {\n\n\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\tstate.bindTexture( 34067, properties.get( texture ).__webglTexture );\n\n\t\t}\n\n\t\tvar wrappingToGL = {};\n\t\twrappingToGL[ RepeatWrapping ] = 10497;\n\t\twrappingToGL[ ClampToEdgeWrapping ] = 33071;\n\t\twrappingToGL[ MirroredRepeatWrapping ] = 33648;\n\n\t\tvar filterToGL = {};\n\t\tfilterToGL[ NearestFilter ] = 9728;\n\t\tfilterToGL[ NearestMipmapNearestFilter ] = 9984;\n\t\tfilterToGL[ NearestMipmapLinearFilter ] = 9986;\n\t\tfilterToGL[ LinearFilter ] = 9729;\n\t\tfilterToGL[ LinearMipmapNearestFilter ] = 9985;\n\t\tfilterToGL[ LinearMipmapLinearFilter ] = 9987;\n\n\t\tfunction setTextureParameters( textureType, texture, supportsMips ) {\n\n\t\t\tif ( supportsMips ) {\n\n\t\t\t\t_gl.texParameteri( textureType, 10242, wrappingToGL[ texture.wrapS ] );\n\t\t\t\t_gl.texParameteri( textureType, 10243, wrappingToGL[ texture.wrapT ] );\n\n\t\t\t\tif ( textureType === 32879 || textureType === 35866 ) {\n\n\t\t\t\t\t_gl.texParameteri( textureType, 32882, wrappingToGL[ texture.wrapR ] );\n\n\t\t\t\t}\n\n\t\t\t\t_gl.texParameteri( textureType, 10240, filterToGL[ texture.magFilter ] );\n\t\t\t\t_gl.texParameteri( textureType, 10241, filterToGL[ texture.minFilter ] );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.texParameteri( textureType, 10242, 33071 );\n\t\t\t\t_gl.texParameteri( textureType, 10243, 33071 );\n\n\t\t\t\tif ( textureType === 32879 || textureType === 35866 ) {\n\n\t\t\t\t\t_gl.texParameteri( textureType, 32882, 33071 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.' );\n\n\t\t\t\t}\n\n\t\t\t\t_gl.texParameteri( textureType, 10240, filterFallback( texture.magFilter ) );\n\t\t\t\t_gl.texParameteri( textureType, 10241, filterFallback( texture.minFilter ) );\n\n\t\t\t\tif ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\t\tif ( extension ) {\n\n\t\t\t\tif ( texture.type === FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) { return; }\n\t\t\t\tif ( texture.type === HalfFloatType && ( isWebGL2 || extensions.get( 'OES_texture_half_float_linear' ) ) === null ) { return; }\n\n\t\t\t\tif ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {\n\n\t\t\t\t\t_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );\n\t\t\t\t\tproperties.get( texture ).__currentAnisotropy = texture.anisotropy;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction initTexture( textureProperties, texture ) {\n\n\t\t\tif ( textureProperties.__webglInit === undefined ) {\n\n\t\t\t\ttextureProperties.__webglInit = true;\n\n\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n\t\t\t\tinfo.memory.textures ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction uploadTexture( textureProperties, texture, slot ) {\n\n\t\t\tvar textureType = 3553;\n\n\t\t\tif ( texture.isDataTexture2DArray ) { textureType = 35866; }\n\t\t\tif ( texture.isDataTexture3D ) { textureType = 32879; }\n\n\t\t\tinitTexture( textureProperties, texture );\n\n\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\tstate.bindTexture( textureType, textureProperties.__webglTexture );\n\n\t\t\t_gl.pixelStorei( 37440, texture.flipY );\n\t\t\t_gl.pixelStorei( 37441, texture.premultiplyAlpha );\n\t\t\t_gl.pixelStorei( 3317, texture.unpackAlignment );\n\n\t\t\tvar needsPowerOfTwo = textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( texture.image ) === false;\n\t\t\tvar image = resizeImage( texture.image, needsPowerOfTwo, false, maxTextureSize );\n\n\t\t\tvar supportsMips = isPowerOfTwo( image ) || isWebGL2,\n\t\t\t\tglFormat = utils.convert( texture.format ),\n\t\t\t\tglType = utils.convert( texture.type ),\n\t\t\t\tglInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType );\n\n\t\t\tsetTextureParameters( textureType, texture, supportsMips );\n\n\t\t\tvar mipmap, mipmaps = texture.mipmaps;\n\n\t\t\tif ( texture.isDepthTexture ) {\n\n\t\t\t\t// populate depth texture with dummy data\n\n\t\t\t\tglInternalFormat = 6402;\n\n\t\t\t\tif ( texture.type === FloatType ) {\n\n\t\t\t\t\tif ( isWebGL2 === false ) { throw new Error( 'Float Depth Texture only supported in WebGL2.0' ); }\n\t\t\t\t\tglInternalFormat = 36012;\n\n\t\t\t\t} else if ( isWebGL2 ) {\n\n\t\t\t\t\t// WebGL 2.0 requires signed internalformat for glTexImage2D\n\t\t\t\t\tglInternalFormat = 33189;\n\n\t\t\t\t}\n\n\t\t\t\tif ( texture.format === DepthFormat && glInternalFormat === 6402 ) {\n\n\t\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t\t// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tif ( texture.type !== UnsignedShortType && texture.type !== UnsignedIntType ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.' );\n\n\t\t\t\t\t\ttexture.type = UnsignedShortType;\n\t\t\t\t\t\tglType = utils.convert( texture.type );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// Depth stencil textures need the DEPTH_STENCIL internal format\n\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\tif ( texture.format === DepthStencilFormat ) {\n\n\t\t\t\t\tglInternalFormat = 34041;\n\n\t\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t\t// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tif ( texture.type !== UnsignedInt248Type ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.' );\n\n\t\t\t\t\t\ttexture.type = UnsignedInt248Type;\n\t\t\t\t\t\tglType = utils.convert( texture.type );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tstate.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null );\n\n\t\t\t} else if ( texture.isDataTexture ) {\n\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\t\tif ( mipmaps.length > 0 && supportsMips ) {\n\n\t\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\n\t\t\t\t\t\tstate.texImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data );\n\t\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t\t\t}\n\n\t\t\t} else if ( texture.isCompressedTexture ) {\n\n\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\tmipmap = mipmaps[ i ];\n\n\t\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\n\t\t\t\t\t\tif ( glFormat !== null ) {\n\n\t\t\t\t\t\t\tstate.compressedTexImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tstate.texImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t\t} else if ( texture.isDataTexture2DArray ) {\n\n\t\t\t\tstate.texImage3D( 35866, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );\n\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t\t} else if ( texture.isDataTexture3D ) {\n\n\t\t\t\tstate.texImage3D( 32879, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );\n\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t\t} else {\n\n\t\t\t\t// regular Texture (image, video, canvas)\n\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\t\tif ( mipmaps.length > 0 && supportsMips ) {\n\n\t\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\n\t\t\t\t\t\tstate.texImage2D( 3553, i, glInternalFormat, glFormat, glType, mipmap );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage2D( 3553, 0, glInternalFormat, glFormat, glType, image );\n\t\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\tgenerateMipmap( textureType, texture, image.width, image.height );\n\n\t\t\t}\n\n\t\t\ttextureProperties.__version = texture.version;\n\n\t\t\tif ( texture.onUpdate ) { texture.onUpdate( texture ); }\n\n\t\t}\n\n\t\t// Render targets\n\n\t\t// Setup storage for target texture and bind it to correct framebuffer\n\t\tfunction setupFrameBufferTexture( framebuffer, renderTarget, attachment, textureTarget ) {\n\n\t\t\tvar glFormat = utils.convert( renderTarget.texture.format );\n\t\t\tvar glType = utils.convert( renderTarget.texture.type );\n\t\t\tvar glInternalFormat = getInternalFormat( renderTarget.texture.internalFormat, glFormat, glType );\n\t\t\tstate.texImage2D( textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\n\t\t\t_gl.bindFramebuffer( 36160, framebuffer );\n\t\t\t_gl.framebufferTexture2D( 36160, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );\n\t\t\t_gl.bindFramebuffer( 36160, null );\n\n\t\t}\n\n\t\t// Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n\t\tfunction setupRenderBufferStorage( renderbuffer, renderTarget, isMultisample ) {\n\n\t\t\t_gl.bindRenderbuffer( 36161, renderbuffer );\n\n\t\t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\n\n\t\t\t\tif ( isMultisample ) {\n\n\t\t\t\t\tvar samples = getRenderTargetSamples( renderTarget );\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, 33189, renderTarget.width, renderTarget.height );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.renderbufferStorage( 36161, 33189, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\t\t\t\t_gl.framebufferRenderbuffer( 36160, 36096, 36161, renderbuffer );\n\n\t\t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\n\n\t\t\t\tif ( isMultisample ) {\n\n\t\t\t\t\tvar samples = getRenderTargetSamples( renderTarget );\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, 35056, renderTarget.width, renderTarget.height );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.renderbufferStorage( 36161, 34041, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\n\t\t\t\t_gl.framebufferRenderbuffer( 36160, 33306, 36161, renderbuffer );\n\n\t\t\t} else {\n\n\t\t\t\tvar glFormat = utils.convert( renderTarget.texture.format );\n\t\t\t\tvar glType = utils.convert( renderTarget.texture.type );\n\t\t\t\tvar glInternalFormat = getInternalFormat( renderTarget.texture.internalFormat, glFormat, glType );\n\n\t\t\t\tif ( isMultisample ) {\n\n\t\t\t\t\tvar samples = getRenderTargetSamples( renderTarget );\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.renderbufferStorage( 36161, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_gl.bindRenderbuffer( 36161, null );\n\n\t\t}\n\n\t\t// Setup resources for a Depth Texture for a FBO (needs an extension)\n\t\tfunction setupDepthTexture( framebuffer, renderTarget ) {\n\n\t\t\tvar isCube = ( renderTarget && renderTarget.isWebGLCubeRenderTarget );\n\t\t\tif ( isCube ) { throw new Error( 'Depth Texture with cube render targets is not supported' ); }\n\n\t\t\t_gl.bindFramebuffer( 36160, framebuffer );\n\n\t\t\tif ( ! ( renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture ) ) {\n\n\t\t\t\tthrow new Error( 'renderTarget.depthTexture must be an instance of THREE.DepthTexture' );\n\n\t\t\t}\n\n\t\t\t// upload an empty depth texture with framebuffer size\n\t\t\tif ( ! properties.get( renderTarget.depthTexture ).__webglTexture ||\n\t\t\t\t\trenderTarget.depthTexture.image.width !== renderTarget.width ||\n\t\t\t\t\trenderTarget.depthTexture.image.height !== renderTarget.height ) {\n\n\t\t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\n\t\t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\n\t\t\t\trenderTarget.depthTexture.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tsetTexture2D( renderTarget.depthTexture, 0 );\n\n\t\t\tvar webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;\n\n\t\t\tif ( renderTarget.depthTexture.format === DepthFormat ) {\n\n\t\t\t\t_gl.framebufferTexture2D( 36160, 36096, 3553, webglDepthTexture, 0 );\n\n\t\t\t} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {\n\n\t\t\t\t_gl.framebufferTexture2D( 36160, 33306, 3553, webglDepthTexture, 0 );\n\n\t\t\t} else {\n\n\t\t\t\tthrow new Error( 'Unknown depthTexture format' );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Setup GL resources for a non-texture depth buffer\n\t\tfunction setupDepthRenderbuffer( renderTarget ) {\n\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\n\t\t\tvar isCube = ( renderTarget.isWebGLCubeRenderTarget === true );\n\n\t\t\tif ( renderTarget.depthTexture ) {\n\n\t\t\t\tif ( isCube ) { throw new Error( 'target.depthTexture not supported in Cube render targets' ); }\n\n\t\t\t\tsetupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );\n\n\t\t\t} else {\n\n\t\t\t\tif ( isCube ) {\n\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\n\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t\t_gl.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\t\t\trenderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();\n\t\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer );\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_gl.bindFramebuffer( 36160, null );\n\n\t\t}\n\n\t\t// Set up GL resources for the render target\n\t\tfunction setupRenderTarget( renderTarget ) {\n\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\n\t\t\trenderTarget.addEventListener( 'dispose', onRenderTargetDispose );\n\n\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n\t\t\tinfo.memory.textures ++;\n\n\t\t\tvar isCube = ( renderTarget.isWebGLCubeRenderTarget === true );\n\t\t\tvar isMultisample = ( renderTarget.isWebGLMultisampleRenderTarget === true );\n\t\t\tvar isMultiview = ( renderTarget.isWebGLMultiviewRenderTarget === true );\n\t\t\tvar supportsMips = isPowerOfTwo( renderTarget ) || isWebGL2;\n\n\t\t\t// Setup framebuffer\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\trenderTargetProperties.__webglFramebuffer = [];\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\trenderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\n\t\t\t\tif ( isMultisample ) {\n\n\t\t\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t\t\trenderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();\n\t\t\t\t\t\trenderTargetProperties.__webglColorRenderbuffer = _gl.createRenderbuffer();\n\n\t\t\t\t\t\t_gl.bindRenderbuffer( 36161, renderTargetProperties.__webglColorRenderbuffer );\n\n\t\t\t\t\t\tvar glFormat = utils.convert( renderTarget.texture.format );\n\t\t\t\t\t\tvar glType = utils.convert( renderTarget.texture.type );\n\t\t\t\t\t\tvar glInternalFormat = getInternalFormat( renderTarget.texture.internalFormat, glFormat, glType );\n\t\t\t\t\t\tvar samples = getRenderTargetSamples( renderTarget );\n\t\t\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t\t\t_gl.bindFramebuffer( 36160, renderTargetProperties.__webglMultisampledFramebuffer );\n\t\t\t\t\t\t_gl.framebufferRenderbuffer( 36160, 36064, 36161, renderTargetProperties.__webglColorRenderbuffer );\n\t\t\t\t\t\t_gl.bindRenderbuffer( 36161, null );\n\n\t\t\t\t\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\t\t\t\t\trenderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();\n\t\t\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_gl.bindFramebuffer( 36160, null );\n\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( isMultiview ) {\n\n\t\t\t\t\tvar width = renderTarget.width;\n\t\t\t\t\tvar height = renderTarget.height;\n\t\t\t\t\tvar numViews = renderTarget.numViews;\n\n\t\t\t\t\t_gl.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer );\n\n\t\t\t\t\tvar ext = extensions.get( 'OVR_multiview2' );\n\n\t\t\t\t\tinfo.memory.textures += 2;\n\n\t\t\t\t\tvar colorTexture = _gl.createTexture();\n\t\t\t\t\t_gl.bindTexture( 35866, colorTexture );\n\t\t\t\t\t_gl.texParameteri( 35866, 10240, 9728 );\n\t\t\t\t\t_gl.texParameteri( 35866, 10241, 9728 );\n\t\t\t\t\t_gl.texImage3D( 35866, 0, 32856, width, height, numViews, 0, 6408, 5121, null );\n\t\t\t\t\text.framebufferTextureMultiviewOVR( 36160, 36064, colorTexture, 0, 0, numViews );\n\n\t\t\t\t\tvar depthStencilTexture = _gl.createTexture();\n\t\t\t\t\t_gl.bindTexture( 35866, depthStencilTexture );\n\t\t\t\t\t_gl.texParameteri( 35866, 10240, 9728 );\n\t\t\t\t\t_gl.texParameteri( 35866, 10241, 9728 );\n\t\t\t\t\t_gl.texImage3D( 35866, 0, 35056, width, height, numViews, 0, 34041, 34042, null );\n\t\t\t\t\text.framebufferTextureMultiviewOVR( 36160, 33306, depthStencilTexture, 0, 0, numViews );\n\n\t\t\t\t\tvar viewFramebuffers = new Array( numViews );\n\t\t\t\t\tfor ( var i = 0; i < numViews; ++ i ) {\n\n\t\t\t\t\t\tviewFramebuffers[ i ] = _gl.createFramebuffer();\n\t\t\t\t\t\t_gl.bindFramebuffer( 36160, viewFramebuffers[ i ] );\n\t\t\t\t\t\t_gl.framebufferTextureLayer( 36160, 36064, colorTexture, 0, i );\n\n\t\t\t\t\t}\n\n\t\t\t\t\trenderTargetProperties.__webglColorTexture = colorTexture;\n\t\t\t\t\trenderTargetProperties.__webglDepthStencilTexture = depthStencilTexture;\n\t\t\t\t\trenderTargetProperties.__webglViewFramebuffers = viewFramebuffers;\n\n\t\t\t\t\t_gl.bindFramebuffer( 36160, null );\n\t\t\t\t\t_gl.bindTexture( 35866, null );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Setup color buffer\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\tstate.bindTexture( 34067, textureProperties.__webglTexture );\n\t\t\t\tsetTextureParameters( 34067, renderTarget.texture, supportsMips );\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, 36064, 34069 + i );\n\n\t\t\t\t}\n\n\t\t\t\tif ( textureNeedsGenerateMipmaps( renderTarget.texture, supportsMips ) ) {\n\n\t\t\t\t\tgenerateMipmap( 34067, renderTarget.texture, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\t\t\t\tstate.bindTexture( 34067, null );\n\n\t\t\t} else if ( ! isMultiview ) {\n\n\t\t\t\tstate.bindTexture( 3553, textureProperties.__webglTexture );\n\t\t\t\tsetTextureParameters( 3553, renderTarget.texture, supportsMips );\n\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, 36064, 3553 );\n\n\t\t\t\tif ( textureNeedsGenerateMipmaps( renderTarget.texture, supportsMips ) ) {\n\n\t\t\t\t\tgenerateMipmap( 3553, renderTarget.texture, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\t\t\t\tstate.bindTexture( 3553, null );\n\n\t\t\t}\n\n\t\t\t// Setup depth and stencil buffers\n\n\t\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\t\tsetupDepthRenderbuffer( renderTarget );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction updateRenderTargetMipmap( renderTarget ) {\n\n\t\t\tvar texture = renderTarget.texture;\n\t\t\tvar supportsMips = isPowerOfTwo( renderTarget ) || isWebGL2;\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\tvar target = renderTarget.isWebGLCubeRenderTarget ? 34067 : 3553;\n\t\t\t\tvar webglTexture = properties.get( texture ).__webglTexture;\n\n\t\t\t\tstate.bindTexture( target, webglTexture );\n\t\t\t\tgenerateMipmap( target, texture, renderTarget.width, renderTarget.height );\n\t\t\t\tstate.bindTexture( target, null );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction updateMultisampleRenderTarget( renderTarget ) {\n\n\t\t\tif ( renderTarget.isWebGLMultisampleRenderTarget ) {\n\n\t\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\n\t\t\t\t\t_gl.bindFramebuffer( 36008, renderTargetProperties.__webglMultisampledFramebuffer );\n\t\t\t\t\t_gl.bindFramebuffer( 36009, renderTargetProperties.__webglFramebuffer );\n\n\t\t\t\t\tvar width = renderTarget.width;\n\t\t\t\t\tvar height = renderTarget.height;\n\t\t\t\t\tvar mask = 16384;\n\n\t\t\t\t\tif ( renderTarget.depthBuffer ) { mask |= 256; }\n\t\t\t\t\tif ( renderTarget.stencilBuffer ) { mask |= 1024; }\n\n\t\t\t\t\t_gl.blitFramebuffer( 0, 0, width, height, 0, 0, width, height, mask, 9728 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction getRenderTargetSamples( renderTarget ) {\n\n\t\t\treturn ( isWebGL2 && renderTarget.isWebGLMultisampleRenderTarget ) ?\n\t\t\t\tMath.min( maxSamples, renderTarget.samples ) : 0;\n\n\t\t}\n\n\t\tfunction updateVideoTexture( texture ) {\n\n\t\t\tvar frame = info.render.frame;\n\n\t\t\t// Check the last frame we updated the VideoTexture\n\n\t\t\tif ( _videoTextures.get( texture ) !== frame ) {\n\n\t\t\t\t_videoTextures.set( texture, frame );\n\t\t\t\ttexture.update();\n\n\t\t\t}\n\n\t\t}\n\n\t\t// backwards compatibility\n\n\t\tvar warnedTexture2D = false;\n\t\tvar warnedTextureCube = false;\n\n\t\tfunction safeSetTexture2D( texture, slot ) {\n\n\t\t\tif ( texture && texture.isWebGLRenderTarget ) {\n\n\t\t\t\tif ( warnedTexture2D === false ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead.\" );\n\t\t\t\t\twarnedTexture2D = true;\n\n\t\t\t\t}\n\n\t\t\t\ttexture = texture.texture;\n\n\t\t\t}\n\n\t\t\tsetTexture2D( texture, slot );\n\n\t\t}\n\n\t\tfunction safeSetTextureCube( texture, slot ) {\n\n\t\t\tif ( texture && texture.isWebGLCubeRenderTarget ) {\n\n\t\t\t\tif ( warnedTextureCube === false ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead.\" );\n\t\t\t\t\twarnedTextureCube = true;\n\n\t\t\t\t}\n\n\t\t\t\ttexture = texture.texture;\n\n\t\t\t}\n\n\t\t\t// currently relying on the fact that WebGLCubeRenderTarget.texture is a Texture and NOT a CubeTexture\n\t\t\t// TODO: unify these code paths\n\t\t\tif ( ( texture && texture.isCubeTexture ) ||\n\t\t\t\t( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {\n\n\t\t\t\t// CompressedTexture can have Array in image :/\n\n\t\t\t\t// this function alone should take care of cube textures\n\t\t\t\tsetTextureCube( texture, slot );\n\n\t\t\t} else {\n\n\t\t\t\t// assumed: texture property of THREE.WebGLCubeRenderTarget\n\t\t\t\tsetTextureCubeDynamic( texture, slot );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tthis.allocateTextureUnit = allocateTextureUnit;\n\t\tthis.resetTextureUnits = resetTextureUnits;\n\n\t\tthis.setTexture2D = setTexture2D;\n\t\tthis.setTexture2DArray = setTexture2DArray;\n\t\tthis.setTexture3D = setTexture3D;\n\t\tthis.setTextureCube = setTextureCube;\n\t\tthis.setTextureCubeDynamic = setTextureCubeDynamic;\n\t\tthis.setupRenderTarget = setupRenderTarget;\n\t\tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\n\t\tthis.updateMultisampleRenderTarget = updateMultisampleRenderTarget;\n\n\t\tthis.safeSetTexture2D = safeSetTexture2D;\n\t\tthis.safeSetTextureCube = safeSetTextureCube;\n\n\t}\n\n\t/**\n\t * @author thespite / http://www.twitter.com/thespite\n\t */\n\n\tfunction WebGLUtils( gl, extensions, capabilities ) {\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\n\t\tfunction convert( p ) {\n\n\t\t\tvar extension;\n\n\t\t\tif ( p === UnsignedByteType ) { return 5121; }\n\t\t\tif ( p === UnsignedShort4444Type ) { return 32819; }\n\t\t\tif ( p === UnsignedShort5551Type ) { return 32820; }\n\t\t\tif ( p === UnsignedShort565Type ) { return 33635; }\n\n\t\t\tif ( p === ByteType ) { return 5120; }\n\t\t\tif ( p === ShortType ) { return 5122; }\n\t\t\tif ( p === UnsignedShortType ) { return 5123; }\n\t\t\tif ( p === IntType ) { return 5124; }\n\t\t\tif ( p === UnsignedIntType ) { return 5125; }\n\t\t\tif ( p === FloatType ) { return 5126; }\n\n\t\t\tif ( p === HalfFloatType ) {\n\n\t\t\t\tif ( isWebGL2 ) { return 5131; }\n\n\t\t\t\textension = extensions.get( 'OES_texture_half_float' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\treturn extension.HALF_FLOAT_OES;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === AlphaFormat ) { return 6406; }\n\t\t\tif ( p === RGBFormat ) { return 6407; }\n\t\t\tif ( p === RGBAFormat ) { return 6408; }\n\t\t\tif ( p === LuminanceFormat ) { return 6409; }\n\t\t\tif ( p === LuminanceAlphaFormat ) { return 6410; }\n\t\t\tif ( p === DepthFormat ) { return 6402; }\n\t\t\tif ( p === DepthStencilFormat ) { return 34041; }\n\t\t\tif ( p === RedFormat ) { return 6403; }\n\n\t\t\t// WebGL2 formats.\n\n\t\t\tif ( p === RedIntegerFormat ) { return 36244; }\n\t\t\tif ( p === RGFormat ) { return 33319; }\n\t\t\tif ( p === RGIntegerFormat ) { return 33320; }\n\t\t\tif ( p === RGBIntegerFormat ) { return 36248; }\n\t\t\tif ( p === RGBAIntegerFormat ) { return 36249; }\n\n\t\t\tif ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format ||\n\t\t\t\tp === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\tif ( p === RGB_S3TC_DXT1_Format ) { return extension.COMPRESSED_RGB_S3TC_DXT1_EXT; }\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT1_Format ) { return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT; }\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT3_Format ) { return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT; }\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT5_Format ) { return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT; }\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format ||\n\t\t\t\tp === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\tif ( p === RGB_PVRTC_4BPPV1_Format ) { return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG; }\n\t\t\t\t\tif ( p === RGB_PVRTC_2BPPV1_Format ) { return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG; }\n\t\t\t\t\tif ( p === RGBA_PVRTC_4BPPV1_Format ) { return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG; }\n\t\t\t\t\tif ( p === RGBA_PVRTC_2BPPV1_Format ) { return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG; }\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === RGB_ETC1_Format ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_etc1' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\treturn extension.COMPRESSED_RGB_ETC1_WEBGL;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format ||\n\t\t\t\tp === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format ||\n\t\t\t\tp === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format ||\n\t\t\t\tp === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format ||\n\t\t\t\tp === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_astc' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\t// TODO Complete?\n\n\t\t\t\t\treturn p;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === UnsignedInt248Type ) {\n\n\t\t\t\tif ( isWebGL2 ) { return 34042; }\n\n\t\t\t\textension = extensions.get( 'WEBGL_depth_texture' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\treturn extension.UNSIGNED_INT_24_8_WEBGL;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn { convert: convert };\n\n\t}\n\n\t/**\n\t * @author fernandojsg / http://fernandojsg.com\n\t * @author Takahiro https://github.com/takahirox\n\t */\n\n\tfunction WebGLMultiviewRenderTarget( width, height, numViews, options ) {\n\n\t\tWebGLRenderTarget.call( this, width, height, options );\n\n\t\tthis.depthBuffer = false;\n\t\tthis.stencilBuffer = false;\n\n\t\tthis.numViews = numViews;\n\n\t}\n\n\tWebGLMultiviewRenderTarget.prototype = Object.assign( Object.create( WebGLRenderTarget.prototype ), {\n\n\t\tconstructor: WebGLMultiviewRenderTarget,\n\n\t\tisWebGLMultiviewRenderTarget: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tWebGLRenderTarget.prototype.copy.call( this, source );\n\n\t\t\tthis.numViews = source.numViews;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetNumViews: function ( numViews ) {\n\n\t\t\tif ( this.numViews !== numViews ) {\n\n\t\t\t\tthis.numViews = numViews;\n\t\t\t\tthis.dispose();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author fernandojsg / http://fernandojsg.com\n\t * @author Takahiro https://github.com/takahirox\n\t */\n\n\tfunction WebGLMultiview( renderer, gl ) {\n\n\t\tvar DEFAULT_NUMVIEWS = 2;\n\n\t\tvar extensions = renderer.extensions;\n\t\tvar properties = renderer.properties;\n\n\t\tvar renderTarget, currentRenderTarget;\n\t\tvar mat3, mat4, cameraArray, renderSize;\n\n\t\tvar available;\n\t\tvar maxNumViews = 0;\n\n\t\t//\n\n\t\tfunction isAvailable() {\n\n\t\t\tif ( available === undefined ) {\n\n\t\t\t\tvar extension = extensions.get( 'OVR_multiview2' );\n\n\t\t\t\tavailable = extension !== null && gl.getContextAttributes().antialias === false;\n\n\t\t\t\tif ( available ) {\n\n\t\t\t\t\tmaxNumViews = gl.getParameter( extension.MAX_VIEWS_OVR );\n\t\t\t\t\trenderTarget = new WebGLMultiviewRenderTarget( 0, 0, DEFAULT_NUMVIEWS );\n\n\t\t\t\t\trenderSize = new Vector2();\n\t\t\t\t\tmat4 = [];\n\t\t\t\t\tmat3 = [];\n\t\t\t\t\tcameraArray = [];\n\n\t\t\t\t\tfor ( var i = 0; i < maxNumViews; i ++ ) {\n\n\t\t\t\t\t\tmat4[ i ] = new Matrix4();\n\t\t\t\t\t\tmat3[ i ] = new Matrix3();\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn available;\n\n\t\t}\n\n\t\tfunction getCameraArray( camera ) {\n\n\t\t\tif ( camera.isArrayCamera ) { return camera.cameras; }\n\n\t\t\tcameraArray[ 0 ] = camera;\n\n\t\t\treturn cameraArray;\n\n\t\t}\n\n\t\tfunction updateCameraProjectionMatricesUniform( camera, uniforms ) {\n\n\t\t\tvar cameras = getCameraArray( camera );\n\n\t\t\tfor ( var i = 0; i < cameras.length; i ++ ) {\n\n\t\t\t\tmat4[ i ].copy( cameras[ i ].projectionMatrix );\n\n\t\t\t}\n\n\t\t\tuniforms.setValue( gl, 'projectionMatrices', mat4 );\n\n\t\t}\n\n\t\tfunction updateCameraViewMatricesUniform( camera, uniforms ) {\n\n\t\t\tvar cameras = getCameraArray( camera );\n\n\t\t\tfor ( var i = 0; i < cameras.length; i ++ ) {\n\n\t\t\t\tmat4[ i ].copy( cameras[ i ].matrixWorldInverse );\n\n\t\t\t}\n\n\t\t\tuniforms.setValue( gl, 'viewMatrices', mat4 );\n\n\t\t}\n\n\t\tfunction updateObjectMatricesUniforms( object, camera, uniforms ) {\n\n\t\t\tvar cameras = getCameraArray( camera );\n\n\t\t\tfor ( var i = 0; i < cameras.length; i ++ ) {\n\n\t\t\t\tmat4[ i ].multiplyMatrices( cameras[ i ].matrixWorldInverse, object.matrixWorld );\n\t\t\t\tmat3[ i ].getNormalMatrix( mat4[ i ] );\n\n\t\t\t}\n\n\t\t\tuniforms.setValue( gl, 'modelViewMatrices', mat4 );\n\t\t\tuniforms.setValue( gl, 'normalMatrices', mat3 );\n\n\t\t}\n\n\t\tfunction isMultiviewCompatible( camera ) {\n\n\t\t\tif ( camera.isArrayCamera === undefined ) { return true; }\n\n\t\t\tvar cameras = camera.cameras;\n\n\t\t\tif ( cameras.length > maxNumViews ) { return false; }\n\n\t\t\tfor ( var i = 1, il = cameras.length; i < il; i ++ ) {\n\n\t\t\t\tif ( cameras[ 0 ].viewport.z !== cameras[ i ].viewport.z ||\n\t\t\t\t\tcameras[ 0 ].viewport.w !== cameras[ i ].viewport.w ) { return false; }\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\tfunction resizeRenderTarget( camera ) {\n\n\t\t\tif ( currentRenderTarget ) {\n\n\t\t\t\trenderSize.set( currentRenderTarget.width, currentRenderTarget.height );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.getDrawingBufferSize( renderSize );\n\n\t\t\t}\n\n\t\t\tif ( camera.isArrayCamera ) {\n\n\t\t\t\tvar viewport = camera.cameras[ 0 ].viewport;\n\n\t\t\t\trenderTarget.setSize( viewport.z, viewport.w );\n\t\t\t\trenderTarget.setNumViews( camera.cameras.length );\n\n\t\t\t} else {\n\n\t\t\t\trenderTarget.setSize( renderSize.x, renderSize.y );\n\t\t\t\trenderTarget.setNumViews( DEFAULT_NUMVIEWS );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction attachCamera( camera ) {\n\n\t\t\tif ( isMultiviewCompatible( camera ) === false ) { return; }\n\n\t\t\tcurrentRenderTarget = renderer.getRenderTarget();\n\t\t\tresizeRenderTarget( camera );\n\t\t\trenderer.setRenderTarget( renderTarget );\n\n\t\t}\n\n\t\tfunction detachCamera( camera ) {\n\n\t\t\tif ( renderTarget !== renderer.getRenderTarget() ) { return; }\n\n\t\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t\t\tflush( camera );\n\n\t\t}\n\n\t\tfunction flush( camera ) {\n\n\t\t\tvar srcRenderTarget = renderTarget;\n\t\t\tvar numViews = srcRenderTarget.numViews;\n\n\t\t\tvar srcFramebuffers = properties.get( srcRenderTarget ).__webglViewFramebuffers;\n\n\t\t\tvar viewWidth = srcRenderTarget.width;\n\t\t\tvar viewHeight = srcRenderTarget.height;\n\n\t\t\tif ( camera.isArrayCamera ) {\n\n\t\t\t\tfor ( var i = 0; i < numViews; i ++ ) {\n\n\t\t\t\t\tvar viewport = camera.cameras[ i ].viewport;\n\n\t\t\t\t\tvar x1 = viewport.x;\n\t\t\t\t\tvar y1 = viewport.y;\n\t\t\t\t\tvar x2 = x1 + viewport.z;\n\t\t\t\t\tvar y2 = y1 + viewport.w;\n\n\t\t\t\t\tgl.bindFramebuffer( 36008, srcFramebuffers[ i ] );\n\t\t\t\t\tgl.blitFramebuffer( 0, 0, viewWidth, viewHeight, x1, y1, x2, y2, 16384, 9728 );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tgl.bindFramebuffer( 36008, srcFramebuffers[ 0 ] );\n\t\t\t\tgl.blitFramebuffer( 0, 0, viewWidth, viewHeight, 0, 0, renderSize.x, renderSize.y, 16384, 9728 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.isAvailable = isAvailable;\n\t\tthis.attachCamera = attachCamera;\n\t\tthis.detachCamera = detachCamera;\n\t\tthis.updateCameraProjectionMatricesUniform = updateCameraProjectionMatricesUniform;\n\t\tthis.updateCameraViewMatricesUniform = updateCameraViewMatricesUniform;\n\t\tthis.updateObjectMatricesUniforms = updateObjectMatricesUniforms;\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction ArrayCamera( array ) {\n\n\t\tPerspectiveCamera.call( this );\n\n\t\tthis.cameras = array || [];\n\n\t}\n\n\tArrayCamera.prototype = Object.assign( Object.create( PerspectiveCamera.prototype ), {\n\n\t\tconstructor: ArrayCamera,\n\n\t\tisArrayCamera: true\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Group() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Group';\n\n\t}\n\n\tGroup.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Group,\n\n\t\tisGroup: true\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebXRManager( renderer, gl ) {\n\n\t\tvar scope = this;\n\n\t\tvar session = null;\n\n\t\t// var framebufferScaleFactor = 1.0;\n\n\t\tvar referenceSpace = null;\n\t\tvar referenceSpaceType = 'local-floor';\n\n\t\tvar pose = null;\n\n\t\tvar controllers = [];\n\t\tvar inputSourcesMap = new Map();\n\n\t\t//\n\n\t\tvar cameraL = new PerspectiveCamera();\n\t\tcameraL.layers.enable( 1 );\n\t\tcameraL.viewport = new Vector4();\n\n\t\tvar cameraR = new PerspectiveCamera();\n\t\tcameraR.layers.enable( 2 );\n\t\tcameraR.viewport = new Vector4();\n\n\t\tvar cameraVR = new ArrayCamera( [ cameraL, cameraR ] );\n\t\tcameraVR.layers.enable( 1 );\n\t\tcameraVR.layers.enable( 2 );\n\n\t\tvar _currentDepthNear = null;\n\t\tvar _currentDepthFar = null;\n\n\t\t//\n\n\t\tthis.enabled = false;\n\n\t\tthis.isPresenting = false;\n\n\t\tthis.getController = function ( id ) {\n\n\t\t\tvar controller = controllers[ id ];\n\n\t\t\tif ( controller === undefined ) {\n\n\t\t\t\tcontroller = {};\n\t\t\t\tcontrollers[ id ] = controller;\n\n\t\t\t}\n\n\t\t\tif ( controller.targetRay === undefined ) {\n\n\t\t\t\tcontroller.targetRay = new Group();\n\t\t\t\tcontroller.targetRay.matrixAutoUpdate = false;\n\t\t\t\tcontroller.targetRay.visible = false;\n\n\t\t\t}\n\n\t\t\treturn controller.targetRay;\n\n\t\t};\n\n\t\tthis.getControllerGrip = function ( id ) {\n\n\t\t\tvar controller = controllers[ id ];\n\n\t\t\tif ( controller === undefined ) {\n\n\t\t\t\tcontroller = {};\n\t\t\t\tcontrollers[ id ] = controller;\n\n\t\t\t}\n\n\t\t\tif ( controller.grip === undefined ) {\n\n\t\t\t\tcontroller.grip = new Group();\n\t\t\t\tcontroller.grip.matrixAutoUpdate = false;\n\t\t\t\tcontroller.grip.visible = false;\n\n\t\t\t}\n\n\t\t\treturn controller.grip;\n\n\t\t};\n\n\t\t//\n\n\t\tfunction onSessionEvent( event ) {\n\n\t\t\tvar controller = inputSourcesMap.get( event.inputSource );\n\n\t\t\tif ( controller ) {\n\n\t\t\t\tif ( controller.targetRay ) {\n\n\t\t\t\t\tcontroller.targetRay.dispatchEvent( { type: event.type } );\n\n\t\t\t\t}\n\n\t\t\t\tif ( controller.grip ) {\n\n\t\t\t\t\tcontroller.grip.dispatchEvent( { type: event.type } );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onSessionEnd() {\n\n\t\t\tinputSourcesMap.forEach( function ( controller, inputSource ) {\n\n\t\t\t\tif ( controller.targetRay ) {\n\n\t\t\t\t\tcontroller.targetRay.dispatchEvent( { type: 'disconnected', data: inputSource } );\n\t\t\t\t\tcontroller.targetRay.visible = false;\n\n\t\t\t\t}\n\n\t\t\t\tif ( controller.grip ) {\n\n\t\t\t\t\tcontroller.grip.dispatchEvent( { type: 'disconnected', data: inputSource } );\n\t\t\t\t\tcontroller.grip.visible = false;\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tinputSourcesMap.clear();\n\n\t\t\t//\n\n\t\t\trenderer.setFramebuffer( null );\n\t\t\trenderer.setRenderTarget( renderer.getRenderTarget() ); // Hack #15830\n\t\t\tanimation.stop();\n\n\t\t\tscope.isPresenting = false;\n\n\t\t\tscope.dispatchEvent( { type: 'sessionend' } );\n\n\t\t}\n\n\t\tfunction onRequestReferenceSpace( value ) {\n\n\t\t\treferenceSpace = value;\n\n\t\t\tanimation.setContext( session );\n\t\t\tanimation.start();\n\n\t\t\tscope.isPresenting = true;\n\n\t\t\tscope.dispatchEvent( { type: 'sessionstart' } );\n\n\t\t}\n\n\t\tthis.setFramebufferScaleFactor = function ( /* value */ ) {\n\n\t\t\t// framebufferScaleFactor = value;\n\n\t\t};\n\n\t\tthis.setReferenceSpaceType = function ( value ) {\n\n\t\t\treferenceSpaceType = value;\n\n\t\t};\n\n\t\tthis.getReferenceSpace = function () {\n\n\t\t\treturn referenceSpace;\n\n\t\t};\n\n\t\tthis.getSession = function () {\n\n\t\t\treturn session;\n\n\t\t};\n\n\t\tthis.setSession = function ( value ) {\n\n\t\t\tsession = value;\n\n\t\t\tif ( session !== null ) {\n\n\t\t\t\tsession.addEventListener( 'select', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'selectstart', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'selectend', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'squeeze', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'squeezestart', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'squeezeend', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'end', onSessionEnd );\n\n\t\t\t\tvar attributes = gl.getContextAttributes();\n\n\t\t\t\tvar layerInit = {\n\t\t\t\t\tantialias: attributes.antialias,\n\t\t\t\t\talpha: attributes.alpha,\n\t\t\t\t\tdepth: attributes.depth,\n\t\t\t\t\tstencil: attributes.stencil\n\t\t\t\t};\n\n\t\t\t\t// eslint-disable-next-line no-undef\n\t\t\t\tvar baseLayer = new XRWebGLLayer( session, gl, layerInit );\n\n\t\t\t\tsession.updateRenderState( { baseLayer: baseLayer } );\n\n\t\t\t\tsession.requestReferenceSpace( referenceSpaceType ).then( onRequestReferenceSpace );\n\n\t\t\t\t//\n\n\t\t\t\tsession.addEventListener( 'inputsourceschange', updateInputSources );\n\n\t\t\t}\n\n\t\t};\n\n\t\tfunction updateInputSources( event ) {\n\n\t\t\tvar inputSources = session.inputSources;\n\n\t\t\t// Assign inputSources to available controllers\n\n\t\t\tfor ( var i = 0; i < controllers.length; i ++ ) {\n\n\t\t\t\tinputSourcesMap.set( inputSources[ i ], controllers[ i ] );\n\n\t\t\t}\n\n\t\t\t// Notify disconnected\n\n\t\t\tfor ( var i = 0; i < event.removed.length; i ++ ) {\n\n\t\t\t\tvar inputSource = event.removed[ i ];\n\t\t\t\tvar controller = inputSourcesMap.get( inputSource );\n\n\t\t\t\tif ( controller ) {\n\n\t\t\t\t\tif ( controller.targetRay ) {\n\n\t\t\t\t\t\tcontroller.targetRay.dispatchEvent( { type: 'disconnected', data: inputSource } );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( controller.grip ) {\n\n\t\t\t\t\t\tcontroller.grip.dispatchEvent( { type: 'disconnected', data: inputSource } );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tinputSourcesMap.delete( inputSource );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Notify connected\n\n\t\t\tfor ( var i = 0; i < event.added.length; i ++ ) {\n\n\t\t\t\tvar inputSource = event.added[ i ];\n\t\t\t\tvar controller = inputSourcesMap.get( inputSource );\n\n\t\t\t\tif ( controller ) {\n\n\t\t\t\t\tif ( controller.targetRay ) {\n\n\t\t\t\t\t\tcontroller.targetRay.dispatchEvent( { type: 'connected', data: inputSource } );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( controller.grip ) {\n\n\t\t\t\t\t\tcontroller.grip.dispatchEvent( { type: 'connected', data: inputSource } );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tvar cameraLPos = new Vector3();\n\t\tvar cameraRPos = new Vector3();\n\n\t\t/**\n\t\t * @author jsantell / https://www.jsantell.com/\n\t\t *\n\t\t * Assumes 2 cameras that are parallel and share an X-axis, and that\n\t\t * the cameras' projection and world matrices have already been set.\n\t\t * And that near and far planes are identical for both cameras.\n\t\t * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765\n\t\t */\n\t\tfunction setProjectionFromUnion( camera, cameraL, cameraR ) {\n\n\t\t\tcameraLPos.setFromMatrixPosition( cameraL.matrixWorld );\n\t\t\tcameraRPos.setFromMatrixPosition( cameraR.matrixWorld );\n\n\t\t\tvar ipd = cameraLPos.distanceTo( cameraRPos );\n\n\t\t\tvar projL = cameraL.projectionMatrix.elements;\n\t\t\tvar projR = cameraR.projectionMatrix.elements;\n\n\t\t\t// VR systems will have identical far and near planes, and\n\t\t\t// most likely identical top and bottom frustum extents.\n\t\t\t// Use the left camera for these values.\n\t\t\tvar near = projL[ 14 ] / ( projL[ 10 ] - 1 );\n\t\t\tvar far = projL[ 14 ] / ( projL[ 10 ] + 1 );\n\t\t\tvar topFov = ( projL[ 9 ] + 1 ) / projL[ 5 ];\n\t\t\tvar bottomFov = ( projL[ 9 ] - 1 ) / projL[ 5 ];\n\n\t\t\tvar leftFov = ( projL[ 8 ] - 1 ) / projL[ 0 ];\n\t\t\tvar rightFov = ( projR[ 8 ] + 1 ) / projR[ 0 ];\n\t\t\tvar left = near * leftFov;\n\t\t\tvar right = near * rightFov;\n\n\t\t\t// Calculate the new camera's position offset from the\n\t\t\t// left camera. xOffset should be roughly half `ipd`.\n\t\t\tvar zOffset = ipd / ( - leftFov + rightFov );\n\t\t\tvar xOffset = zOffset * - leftFov;\n\n\t\t\t// TODO: Better way to apply this offset?\n\t\t\tcameraL.matrixWorld.decompose( camera.position, camera.quaternion, camera.scale );\n\t\t\tcamera.translateX( xOffset );\n\t\t\tcamera.translateZ( zOffset );\n\t\t\tcamera.matrixWorld.compose( camera.position, camera.quaternion, camera.scale );\n\t\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\n\n\t\t\t// Find the union of the frustum values of the cameras and scale\n\t\t\t// the values so that the near plane's position does not change in world space,\n\t\t\t// although must now be relative to the new union camera.\n\t\t\tvar near2 = near + zOffset;\n\t\t\tvar far2 = far + zOffset;\n\t\t\tvar left2 = left - xOffset;\n\t\t\tvar right2 = right + ( ipd - xOffset );\n\t\t\tvar top2 = topFov * far / far2 * near2;\n\t\t\tvar bottom2 = bottomFov * far / far2 * near2;\n\n\t\t\tcamera.projectionMatrix.makePerspective( left2, right2, top2, bottom2, near2, far2 );\n\n\t\t}\n\n\t\tfunction updateCamera( camera, parent ) {\n\n\t\t\tif ( parent === null ) {\n\n\t\t\t\tcamera.matrixWorld.copy( camera.matrix );\n\n\t\t\t} else {\n\n\t\t\t\tcamera.matrixWorld.multiplyMatrices( parent.matrixWorld, camera.matrix );\n\n\t\t\t}\n\n\t\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\n\n\t\t}\n\n\t\tthis.getCamera = function ( camera ) {\n\n\t\t\tcameraVR.near = cameraR.near = cameraL.near = camera.near;\n\t\t\tcameraVR.far = cameraR.far = cameraL.far = camera.far;\n\n\t\t\tif ( _currentDepthNear !== cameraVR.near || _currentDepthFar !== cameraVR.far ) {\n\n\t\t\t\t// Note that the new renderState won't apply until the next frame. See #18320\n\n\t\t\t\tsession.updateRenderState( {\n\t\t\t\t\tdepthNear: cameraVR.near,\n\t\t\t\t\tdepthFar: cameraVR.far\n\t\t\t\t} );\n\n\t\t\t\t_currentDepthNear = cameraVR.near;\n\t\t\t\t_currentDepthFar = cameraVR.far;\n\n\t\t\t}\n\n\t\t\tvar parent = camera.parent;\n\t\t\tvar cameras = cameraVR.cameras;\n\n\t\t\tupdateCamera( cameraVR, parent );\n\n\t\t\tfor ( var i = 0; i < cameras.length; i ++ ) {\n\n\t\t\t\tupdateCamera( cameras[ i ], parent );\n\n\t\t\t}\n\n\t\t\t// update camera and its children\n\n\t\t\tcamera.matrixWorld.copy( cameraVR.matrixWorld );\n\n\t\t\tvar children = camera.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].updateMatrixWorld( true );\n\n\t\t\t}\n\n\t\t\tsetProjectionFromUnion( cameraVR, cameraL, cameraR );\n\n\t\t\treturn cameraVR;\n\n\t\t};\n\n\t\t// Animation Loop\n\n\t\tvar onAnimationFrameCallback = null;\n\n\t\tfunction onAnimationFrame( time, frame ) {\n\n\t\t\tpose = frame.getViewerPose( referenceSpace );\n\n\t\t\tif ( pose !== null ) {\n\n\t\t\t\tvar views = pose.views;\n\t\t\t\tvar baseLayer = session.renderState.baseLayer;\n\n\t\t\t\trenderer.setFramebuffer( baseLayer.framebuffer );\n\n\t\t\t\tfor ( var i = 0; i < views.length; i ++ ) {\n\n\t\t\t\t\tvar view = views[ i ];\n\t\t\t\t\tvar viewport = baseLayer.getViewport( view );\n\n\t\t\t\t\tvar camera = cameraVR.cameras[ i ];\n\t\t\t\t\tcamera.matrix.fromArray( view.transform.matrix );\n\t\t\t\t\tcamera.projectionMatrix.fromArray( view.projectionMatrix );\n\t\t\t\t\tcamera.viewport.set( viewport.x, viewport.y, viewport.width, viewport.height );\n\n\t\t\t\t\tif ( i === 0 ) {\n\n\t\t\t\t\t\tcameraVR.matrix.copy( camera.matrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar inputSources = session.inputSources;\n\n\t\t\tfor ( var i = 0; i < controllers.length; i ++ ) {\n\n\t\t\t\tvar controller = controllers[ i ];\n\n\t\t\t\tvar inputSource = inputSources[ i ];\n\n\t\t\t\tvar inputPose = null;\n\t\t\t\tvar gripPose = null;\n\n\t\t\t\tif ( inputSource ) {\n\n\t\t\t\t\tif ( controller.targetRay ) {\n\n\t\t\t\t\t\tinputPose = frame.getPose( inputSource.targetRaySpace, referenceSpace );\n\n\t\t\t\t\t\tif ( inputPose !== null ) {\n\n\t\t\t\t\t\t\tcontroller.targetRay.matrix.fromArray( inputPose.transform.matrix );\n\t\t\t\t\t\t\tcontroller.targetRay.matrix.decompose( controller.targetRay.position, controller.targetRay.rotation, controller.targetRay.scale );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( controller.grip && inputSource.gripSpace ) {\n\n\t\t\t\t\t\tgripPose = frame.getPose( inputSource.gripSpace, referenceSpace );\n\n\t\t\t\t\t\tif ( gripPose !== null ) {\n\n\t\t\t\t\t\t\tcontroller.grip.matrix.fromArray( gripPose.transform.matrix );\n\t\t\t\t\t\t\tcontroller.grip.matrix.decompose( controller.grip.position, controller.grip.rotation, controller.grip.scale );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( controller.targetRay ) {\n\n\t\t\t\t\tcontroller.targetRay.visible = inputPose !== null;\n\n\t\t\t\t}\n\n\t\t\t\tif ( controller.grip ) {\n\n\t\t\t\t\tcontroller.grip.visible = gripPose !== null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( onAnimationFrameCallback ) { onAnimationFrameCallback( time, frame ); }\n\n\t\t}\n\n\t\tvar animation = new WebGLAnimation();\n\t\tanimation.setAnimationLoop( onAnimationFrame );\n\n\t\tthis.setAnimationLoop = function ( callback ) {\n\n\t\t\tonAnimationFrameCallback = callback;\n\n\t\t};\n\n\t\tthis.dispose = function () {};\n\n\t}\n\n\tObject.assign( WebXRManager.prototype, EventDispatcher.prototype );\n\n\t/**\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author szimek / https://github.com/szimek/\n\t * @author tschw\n\t */\n\n\tfunction WebGLRenderer( parameters ) {\n\n\t\tparameters = parameters || {};\n\n\t\tvar _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),\n\t\t\t_context = parameters.context !== undefined ? parameters.context : null,\n\n\t\t\t_alpha = parameters.alpha !== undefined ? parameters.alpha : false,\n\t\t\t_depth = parameters.depth !== undefined ? parameters.depth : true,\n\t\t\t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\n\t\t\t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\n\t\t\t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\n\t\t\t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,\n\t\t\t_powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default',\n\t\t\t_failIfMajorPerformanceCaveat = parameters.failIfMajorPerformanceCaveat !== undefined ? parameters.failIfMajorPerformanceCaveat : false;\n\n\t\tvar currentRenderList = null;\n\t\tvar currentRenderState = null;\n\n\t\t// public properties\n\n\t\tthis.domElement = _canvas;\n\n\t\t// Debug configuration container\n\t\tthis.debug = {\n\n\t\t\t/**\n\t\t\t * Enables error checking and reporting when shader programs are being compiled\n\t\t\t * @type {boolean}\n\t\t\t */\n\t\t\tcheckShaderErrors: true\n\t\t};\n\n\t\t// clearing\n\n\t\tthis.autoClear = true;\n\t\tthis.autoClearColor = true;\n\t\tthis.autoClearDepth = true;\n\t\tthis.autoClearStencil = true;\n\n\t\t// scene graph\n\n\t\tthis.sortObjects = true;\n\n\t\t// user-defined clipping\n\n\t\tthis.clippingPlanes = [];\n\t\tthis.localClippingEnabled = false;\n\n\t\t// physically based shading\n\n\t\tthis.gammaFactor = 2.0;\t// for backwards compatibility\n\t\tthis.outputEncoding = LinearEncoding;\n\n\t\t// physical lights\n\n\t\tthis.physicallyCorrectLights = false;\n\n\t\t// tone mapping\n\n\t\tthis.toneMapping = LinearToneMapping;\n\t\tthis.toneMappingExposure = 1.0;\n\t\tthis.toneMappingWhitePoint = 1.0;\n\n\t\t// morphs\n\n\t\tthis.maxMorphTargets = 8;\n\t\tthis.maxMorphNormals = 4;\n\n\t\t// internal properties\n\n\t\tvar _this = this,\n\n\t\t\t_isContextLost = false,\n\n\t\t\t// internal state cache\n\n\t\t\t_framebuffer = null,\n\n\t\t\t_currentActiveCubeFace = 0,\n\t\t\t_currentActiveMipmapLevel = 0,\n\t\t\t_currentRenderTarget = null,\n\t\t\t_currentFramebuffer = null,\n\t\t\t_currentMaterialId = - 1,\n\n\t\t\t// geometry and program caching\n\n\t\t\t_currentGeometryProgram = {\n\t\t\t\tgeometry: null,\n\t\t\t\tprogram: null,\n\t\t\t\twireframe: false\n\t\t\t},\n\n\t\t\t_currentCamera = null,\n\t\t\t_currentArrayCamera = null,\n\n\t\t\t_currentViewport = new Vector4(),\n\t\t\t_currentScissor = new Vector4(),\n\t\t\t_currentScissorTest = null,\n\n\t\t\t//\n\n\t\t\t_width = _canvas.width,\n\t\t\t_height = _canvas.height,\n\n\t\t\t_pixelRatio = 1,\n\t\t\t_opaqueSort = null,\n\t\t\t_transparentSort = null,\n\n\t\t\t_viewport = new Vector4( 0, 0, _width, _height ),\n\t\t\t_scissor = new Vector4( 0, 0, _width, _height ),\n\t\t\t_scissorTest = false,\n\n\t\t\t// frustum\n\n\t\t\t_frustum = new Frustum(),\n\n\t\t\t// clipping\n\n\t\t\t_clipping = new WebGLClipping(),\n\t\t\t_clippingEnabled = false,\n\t\t\t_localClippingEnabled = false,\n\n\t\t\t// camera matrices cache\n\n\t\t\t_projScreenMatrix = new Matrix4(),\n\n\t\t\t_vector3 = new Vector3();\n\n\t\tfunction getTargetPixelRatio() {\n\n\t\t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\n\n\t\t}\n\n\t\t// initialize\n\n\t\tvar _gl;\n\n\t\ttry {\n\n\t\t\tvar contextAttributes = {\n\t\t\t\talpha: _alpha,\n\t\t\t\tdepth: _depth,\n\t\t\t\tstencil: _stencil,\n\t\t\t\tantialias: _antialias,\n\t\t\t\tpremultipliedAlpha: _premultipliedAlpha,\n\t\t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer,\n\t\t\t\tpowerPreference: _powerPreference,\n\t\t\t\tfailIfMajorPerformanceCaveat: _failIfMajorPerformanceCaveat,\n\t\t\t\txrCompatible: true\n\t\t\t};\n\n\t\t\t// event listeners must be registered before WebGL context is created, see #12753\n\n\t\t\t_canvas.addEventListener( 'webglcontextlost', onContextLost, false );\n\t\t\t_canvas.addEventListener( 'webglcontextrestored', onContextRestore, false );\n\n\t\t\t_gl = _context || _canvas.getContext( 'webgl', contextAttributes ) || _canvas.getContext( 'experimental-webgl', contextAttributes );\n\n\t\t\tif ( _gl === null ) {\n\n\t\t\t\tif ( _canvas.getContext( 'webgl' ) !== null ) {\n\n\t\t\t\t\tthrow new Error( 'Error creating WebGL context with your selected attributes.' );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow new Error( 'Error creating WebGL context.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Some experimental-webgl implementations do not have getShaderPrecisionFormat\n\n\t\t\tif ( _gl.getShaderPrecisionFormat === undefined ) {\n\n\t\t\t\t_gl.getShaderPrecisionFormat = function () {\n\n\t\t\t\t\treturn { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };\n\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLRenderer: ' + error.message );\n\t\t\tthrow error;\n\n\t\t}\n\n\t\tvar extensions, capabilities, state, info;\n\t\tvar properties, textures, attributes, geometries, objects;\n\t\tvar programCache, renderLists, renderStates;\n\n\t\tvar background, morphtargets, bufferRenderer, indexedBufferRenderer;\n\n\t\tvar utils;\n\n\t\tfunction initGLContext() {\n\n\t\t\textensions = new WebGLExtensions( _gl );\n\n\t\t\tcapabilities = new WebGLCapabilities( _gl, extensions, parameters );\n\n\t\t\tif ( capabilities.isWebGL2 === false ) {\n\n\t\t\t\textensions.get( 'WEBGL_depth_texture' );\n\t\t\t\textensions.get( 'OES_texture_float' );\n\t\t\t\textensions.get( 'OES_texture_half_float' );\n\t\t\t\textensions.get( 'OES_texture_half_float_linear' );\n\t\t\t\textensions.get( 'OES_standard_derivatives' );\n\t\t\t\textensions.get( 'OES_element_index_uint' );\n\t\t\t\textensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\t}\n\n\t\t\textensions.get( 'OES_texture_float_linear' );\n\n\t\t\tutils = new WebGLUtils( _gl, extensions, capabilities );\n\n\t\t\tstate = new WebGLState( _gl, extensions, capabilities );\n\t\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor() );\n\t\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor() );\n\n\t\t\tinfo = new WebGLInfo( _gl );\n\t\t\tproperties = new WebGLProperties();\n\t\t\ttextures = new WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info );\n\t\t\tattributes = new WebGLAttributes( _gl, capabilities );\n\t\t\tgeometries = new WebGLGeometries( _gl, attributes, info );\n\t\t\tobjects = new WebGLObjects( _gl, geometries, attributes, info );\n\t\t\tmorphtargets = new WebGLMorphtargets( _gl );\n\t\t\tprogramCache = new WebGLPrograms( _this, extensions, capabilities );\n\t\t\trenderLists = new WebGLRenderLists();\n\t\t\trenderStates = new WebGLRenderStates();\n\n\t\t\tbackground = new WebGLBackground( _this, state, objects, _premultipliedAlpha );\n\n\t\t\tbufferRenderer = new WebGLBufferRenderer( _gl, extensions, info, capabilities );\n\t\t\tindexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, info, capabilities );\n\n\t\t\tinfo.programs = programCache.programs;\n\n\t\t\t_this.capabilities = capabilities;\n\t\t\t_this.extensions = extensions;\n\t\t\t_this.properties = properties;\n\t\t\t_this.renderLists = renderLists;\n\t\t\t_this.state = state;\n\t\t\t_this.info = info;\n\n\t\t}\n\n\t\tinitGLContext();\n\n\t\t// xr\n\n\t\tvar xr = new WebXRManager( _this, _gl );\n\n\t\tthis.xr = xr;\n\n\t\t// Multiview\n\n\t\tvar multiview = new WebGLMultiview( _this, _gl );\n\n\t\t// shadow map\n\n\t\tvar shadowMap = new WebGLShadowMap( _this, objects, capabilities.maxTextureSize );\n\n\t\tthis.shadowMap = shadowMap;\n\n\t\t// API\n\n\t\tthis.getContext = function () {\n\n\t\t\treturn _gl;\n\n\t\t};\n\n\t\tthis.getContextAttributes = function () {\n\n\t\t\treturn _gl.getContextAttributes();\n\n\t\t};\n\n\t\tthis.forceContextLoss = function () {\n\n\t\t\tvar extension = extensions.get( 'WEBGL_lose_context' );\n\t\t\tif ( extension ) { extension.loseContext(); }\n\n\t\t};\n\n\t\tthis.forceContextRestore = function () {\n\n\t\t\tvar extension = extensions.get( 'WEBGL_lose_context' );\n\t\t\tif ( extension ) { extension.restoreContext(); }\n\n\t\t};\n\n\t\tthis.getPixelRatio = function () {\n\n\t\t\treturn _pixelRatio;\n\n\t\t};\n\n\t\tthis.setPixelRatio = function ( value ) {\n\n\t\t\tif ( value === undefined ) { return; }\n\n\t\t\t_pixelRatio = value;\n\n\t\t\tthis.setSize( _width, _height, false );\n\n\t\t};\n\n\t\tthis.getSize = function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'WebGLRenderer: .getsize() now requires a Vector2 as an argument' );\n\n\t\t\t\ttarget = new Vector2();\n\n\t\t\t}\n\n\t\t\treturn target.set( _width, _height );\n\n\t\t};\n\n\t\tthis.setSize = function ( width, height, updateStyle ) {\n\n\t\t\tif ( xr.isPresenting ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Can\\'t change size while VR device is presenting.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t_width = width;\n\t\t\t_height = height;\n\n\t\t\t_canvas.width = Math.floor( width * _pixelRatio );\n\t\t\t_canvas.height = Math.floor( height * _pixelRatio );\n\n\t\t\tif ( updateStyle !== false ) {\n\n\t\t\t\t_canvas.style.width = width + 'px';\n\t\t\t\t_canvas.style.height = height + 'px';\n\n\t\t\t}\n\n\t\t\tthis.setViewport( 0, 0, width, height );\n\n\t\t};\n\n\t\tthis.getDrawingBufferSize = function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument' );\n\n\t\t\t\ttarget = new Vector2();\n\n\t\t\t}\n\n\t\t\treturn target.set( _width * _pixelRatio, _height * _pixelRatio ).floor();\n\n\t\t};\n\n\t\tthis.setDrawingBufferSize = function ( width, height, pixelRatio ) {\n\n\t\t\t_width = width;\n\t\t\t_height = height;\n\n\t\t\t_pixelRatio = pixelRatio;\n\n\t\t\t_canvas.width = Math.floor( width * pixelRatio );\n\t\t\t_canvas.height = Math.floor( height * pixelRatio );\n\n\t\t\tthis.setViewport( 0, 0, width, height );\n\n\t\t};\n\n\t\tthis.getCurrentViewport = function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument' );\n\n\t\t\t\ttarget = new Vector4();\n\n\t\t\t}\n\n\t\t\treturn target.copy( _currentViewport );\n\n\t\t};\n\n\t\tthis.getViewport = function ( target ) {\n\n\t\t\treturn target.copy( _viewport );\n\n\t\t};\n\n\t\tthis.setViewport = function ( x, y, width, height ) {\n\n\t\t\tif ( x.isVector4 ) {\n\n\t\t\t\t_viewport.set( x.x, x.y, x.z, x.w );\n\n\t\t\t} else {\n\n\t\t\t\t_viewport.set( x, y, width, height );\n\n\t\t\t}\n\n\t\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor() );\n\n\t\t};\n\n\t\tthis.getScissor = function ( target ) {\n\n\t\t\treturn target.copy( _scissor );\n\n\t\t};\n\n\t\tthis.setScissor = function ( x, y, width, height ) {\n\n\t\t\tif ( x.isVector4 ) {\n\n\t\t\t\t_scissor.set( x.x, x.y, x.z, x.w );\n\n\t\t\t} else {\n\n\t\t\t\t_scissor.set( x, y, width, height );\n\n\t\t\t}\n\n\t\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor() );\n\n\t\t};\n\n\t\tthis.getScissorTest = function () {\n\n\t\t\treturn _scissorTest;\n\n\t\t};\n\n\t\tthis.setScissorTest = function ( boolean ) {\n\n\t\t\tstate.setScissorTest( _scissorTest = boolean );\n\n\t\t};\n\n\t\tthis.setOpaqueSort = function ( method ) {\n\n\t\t\t_opaqueSort = method;\n\n\t\t};\n\n\t\tthis.setTransparentSort = function ( method ) {\n\n\t\t\t_transparentSort = method;\n\n\t\t};\n\n\t\t// Clearing\n\n\t\tthis.getClearColor = function () {\n\n\t\t\treturn background.getClearColor();\n\n\t\t};\n\n\t\tthis.setClearColor = function () {\n\n\t\t\tbackground.setClearColor.apply( background, arguments );\n\n\t\t};\n\n\t\tthis.getClearAlpha = function () {\n\n\t\t\treturn background.getClearAlpha();\n\n\t\t};\n\n\t\tthis.setClearAlpha = function () {\n\n\t\t\tbackground.setClearAlpha.apply( background, arguments );\n\n\t\t};\n\n\t\tthis.clear = function ( color, depth, stencil ) {\n\n\t\t\tvar bits = 0;\n\n\t\t\tif ( color === undefined || color ) { bits |= 16384; }\n\t\t\tif ( depth === undefined || depth ) { bits |= 256; }\n\t\t\tif ( stencil === undefined || stencil ) { bits |= 1024; }\n\n\t\t\t_gl.clear( bits );\n\n\t\t};\n\n\t\tthis.clearColor = function () {\n\n\t\t\tthis.clear( true, false, false );\n\n\t\t};\n\n\t\tthis.clearDepth = function () {\n\n\t\t\tthis.clear( false, true, false );\n\n\t\t};\n\n\t\tthis.clearStencil = function () {\n\n\t\t\tthis.clear( false, false, true );\n\n\t\t};\n\n\t\t//\n\n\t\tthis.dispose = function () {\n\n\t\t\t_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );\n\t\t\t_canvas.removeEventListener( 'webglcontextrestored', onContextRestore, false );\n\n\t\t\trenderLists.dispose();\n\t\t\trenderStates.dispose();\n\t\t\tproperties.dispose();\n\t\t\tobjects.dispose();\n\n\t\t\txr.dispose();\n\n\t\t\tanimation.stop();\n\n\t\t};\n\n\t\t// Events\n\n\t\tfunction onContextLost( event ) {\n\n\t\t\tevent.preventDefault();\n\n\t\t\tconsole.log( 'THREE.WebGLRenderer: Context Lost.' );\n\n\t\t\t_isContextLost = true;\n\n\t\t}\n\n\t\tfunction onContextRestore( /* event */ ) {\n\n\t\t\tconsole.log( 'THREE.WebGLRenderer: Context Restored.' );\n\n\t\t\t_isContextLost = false;\n\n\t\t\tinitGLContext();\n\n\t\t}\n\n\t\tfunction onMaterialDispose( event ) {\n\n\t\t\tvar material = event.target;\n\n\t\t\tmaterial.removeEventListener( 'dispose', onMaterialDispose );\n\n\t\t\tdeallocateMaterial( material );\n\n\t\t}\n\n\t\t// Buffer deallocation\n\n\t\tfunction deallocateMaterial( material ) {\n\n\t\t\treleaseMaterialProgramReference( material );\n\n\t\t\tproperties.remove( material );\n\n\t\t}\n\n\n\t\tfunction releaseMaterialProgramReference( material ) {\n\n\t\t\tvar programInfo = properties.get( material ).program;\n\n\t\t\tmaterial.program = undefined;\n\n\t\t\tif ( programInfo !== undefined ) {\n\n\t\t\t\tprogramCache.releaseProgram( programInfo );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Buffer rendering\n\n\t\tfunction renderObjectImmediate( object, program ) {\n\n\t\t\tobject.render( function ( object ) {\n\n\t\t\t\t_this.renderBufferImmediate( object, program );\n\n\t\t\t} );\n\n\t\t}\n\n\t\tthis.renderBufferImmediate = function ( object, program ) {\n\n\t\t\tstate.initAttributes();\n\n\t\t\tvar buffers = properties.get( object );\n\n\t\t\tif ( object.hasPositions && ! buffers.position ) { buffers.position = _gl.createBuffer(); }\n\t\t\tif ( object.hasNormals && ! buffers.normal ) { buffers.normal = _gl.createBuffer(); }\n\t\t\tif ( object.hasUvs && ! buffers.uv ) { buffers.uv = _gl.createBuffer(); }\n\t\t\tif ( object.hasColors && ! buffers.color ) { buffers.color = _gl.createBuffer(); }\n\n\t\t\tvar programAttributes = program.getAttributes();\n\n\t\t\tif ( object.hasPositions ) {\n\n\t\t\t\t_gl.bindBuffer( 34962, buffers.position );\n\t\t\t\t_gl.bufferData( 34962, object.positionArray, 35048 );\n\n\t\t\t\tstate.enableAttribute( programAttributes.position );\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.position, 3, 5126, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( object.hasNormals ) {\n\n\t\t\t\t_gl.bindBuffer( 34962, buffers.normal );\n\t\t\t\t_gl.bufferData( 34962, object.normalArray, 35048 );\n\n\t\t\t\tstate.enableAttribute( programAttributes.normal );\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.normal, 3, 5126, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( object.hasUvs ) {\n\n\t\t\t\t_gl.bindBuffer( 34962, buffers.uv );\n\t\t\t\t_gl.bufferData( 34962, object.uvArray, 35048 );\n\n\t\t\t\tstate.enableAttribute( programAttributes.uv );\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.uv, 2, 5126, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( object.hasColors ) {\n\n\t\t\t\t_gl.bindBuffer( 34962, buffers.color );\n\t\t\t\t_gl.bufferData( 34962, object.colorArray, 35048 );\n\n\t\t\t\tstate.enableAttribute( programAttributes.color );\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.color, 3, 5126, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\tstate.disableUnusedAttributes();\n\n\t\t\t_gl.drawArrays( 4, 0, object.count );\n\n\t\t\tobject.count = 0;\n\n\t\t};\n\n\t\tvar tempScene = new Scene();\n\n\t\tthis.renderBufferDirect = function ( camera, scene, geometry, material, object, group ) {\n\n\t\t\tif ( scene === null ) { scene = tempScene; } // renderBufferDirect second parameter used to be fog (could be null)\n\n\t\t\tvar frontFaceCW = ( object.isMesh && object.matrixWorld.determinant() < 0 );\n\n\t\t\tvar program = setProgram( camera, scene, material, object );\n\n\t\t\tstate.setMaterial( material, frontFaceCW );\n\n\t\t\tvar updateBuffers = false;\n\n\t\t\tif ( _currentGeometryProgram.geometry !== geometry.id ||\n\t\t\t\t_currentGeometryProgram.program !== program.id ||\n\t\t\t\t_currentGeometryProgram.wireframe !== ( material.wireframe === true ) ) {\n\n\t\t\t\t_currentGeometryProgram.geometry = geometry.id;\n\t\t\t\t_currentGeometryProgram.program = program.id;\n\t\t\t\t_currentGeometryProgram.wireframe = material.wireframe === true;\n\t\t\t\tupdateBuffers = true;\n\n\t\t\t}\n\n\t\t\tif ( material.morphTargets || material.morphNormals ) {\n\n\t\t\t\tmorphtargets.update( object, geometry, material, program );\n\n\t\t\t\tupdateBuffers = true;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar index = geometry.index;\n\t\t\tvar position = geometry.attributes.position;\n\n\t\t\t//\n\n\t\t\tif ( index === null ) {\n\n\t\t\t\tif ( position === undefined || position.count === 0 ) { return; }\n\n\t\t\t} else if ( index.count === 0 ) {\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar rangeFactor = 1;\n\n\t\t\tif ( material.wireframe === true ) {\n\n\t\t\t\tindex = geometries.getWireframeAttribute( geometry );\n\t\t\t\trangeFactor = 2;\n\n\t\t\t}\n\n\t\t\tvar attribute;\n\t\t\tvar renderer = bufferRenderer;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tattribute = attributes.get( index );\n\n\t\t\t\trenderer = indexedBufferRenderer;\n\t\t\t\trenderer.setIndex( attribute );\n\n\t\t\t}\n\n\t\t\tif ( updateBuffers ) {\n\n\t\t\t\tsetupVertexAttributes( object, geometry, material, program );\n\n\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\t_gl.bindBuffer( 34963, attribute.buffer );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar dataCount = ( index !== null ) ? index.count : position.count;\n\n\t\t\tvar rangeStart = geometry.drawRange.start * rangeFactor;\n\t\t\tvar rangeCount = geometry.drawRange.count * rangeFactor;\n\n\t\t\tvar groupStart = group !== null ? group.start * rangeFactor : 0;\n\t\t\tvar groupCount = group !== null ? group.count * rangeFactor : Infinity;\n\n\t\t\tvar drawStart = Math.max( rangeStart, groupStart );\n\t\t\tvar drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;\n\n\t\t\tvar drawCount = Math.max( 0, drawEnd - drawStart + 1 );\n\n\t\t\tif ( drawCount === 0 ) { return; }\n\n\t\t\t//\n\n\t\t\tif ( object.isMesh ) {\n\n\t\t\t\tif ( material.wireframe === true ) {\n\n\t\t\t\t\tstate.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );\n\t\t\t\t\trenderer.setMode( 1 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trenderer.setMode( 4 );\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isLine ) {\n\n\t\t\t\tvar lineWidth = material.linewidth;\n\n\t\t\t\tif ( lineWidth === undefined ) { lineWidth = 1; } // Not using Line*Material\n\n\t\t\t\tstate.setLineWidth( lineWidth * getTargetPixelRatio() );\n\n\t\t\t\tif ( object.isLineSegments ) {\n\n\t\t\t\t\trenderer.setMode( 1 );\n\n\t\t\t\t} else if ( object.isLineLoop ) {\n\n\t\t\t\t\trenderer.setMode( 2 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trenderer.setMode( 3 );\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isPoints ) {\n\n\t\t\t\trenderer.setMode( 0 );\n\n\t\t\t} else if ( object.isSprite ) {\n\n\t\t\t\trenderer.setMode( 4 );\n\n\t\t\t}\n\n\t\t\tif ( object.isInstancedMesh ) {\n\n\t\t\t\trenderer.renderInstances( geometry, drawStart, drawCount, object.count );\n\n\t\t\t} else if ( geometry.isInstancedBufferGeometry ) {\n\n\t\t\t\trenderer.renderInstances( geometry, drawStart, drawCount, geometry.maxInstancedCount );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.render( drawStart, drawCount );\n\n\t\t\t}\n\n\t\t};\n\n\t\tfunction setupVertexAttributes( object, geometry, material, program ) {\n\n\t\t\tif ( capabilities.isWebGL2 === false && ( object.isInstancedMesh || geometry.isInstancedBufferGeometry ) ) {\n\n\t\t\t\tif ( extensions.get( 'ANGLE_instanced_arrays' ) === null ) { return; }\n\n\t\t\t}\n\n\t\t\tstate.initAttributes();\n\n\t\t\tvar geometryAttributes = geometry.attributes;\n\n\t\t\tvar programAttributes = program.getAttributes();\n\n\t\t\tvar materialDefaultAttributeValues = material.defaultAttributeValues;\n\n\t\t\tfor ( var name in programAttributes ) {\n\n\t\t\t\tvar programAttribute = programAttributes[ name ];\n\n\t\t\t\tif ( programAttribute >= 0 ) {\n\n\t\t\t\t\tvar geometryAttribute = geometryAttributes[ name ];\n\n\t\t\t\t\tif ( geometryAttribute !== undefined ) {\n\n\t\t\t\t\t\tvar normalized = geometryAttribute.normalized;\n\t\t\t\t\t\tvar size = geometryAttribute.itemSize;\n\n\t\t\t\t\t\tvar attribute = attributes.get( geometryAttribute );\n\n\t\t\t\t\t\t// TODO Attribute may not be available on context restore\n\n\t\t\t\t\t\tif ( attribute === undefined ) { continue; }\n\n\t\t\t\t\t\tvar buffer = attribute.buffer;\n\t\t\t\t\t\tvar type = attribute.type;\n\t\t\t\t\t\tvar bytesPerElement = attribute.bytesPerElement;\n\n\t\t\t\t\t\tif ( geometryAttribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\t\t\t\tvar data = geometryAttribute.data;\n\t\t\t\t\t\t\tvar stride = data.stride;\n\t\t\t\t\t\t\tvar offset = geometryAttribute.offset;\n\n\t\t\t\t\t\t\tif ( data && data.isInstancedInterleavedBuffer ) {\n\n\t\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute );\n\n\t\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\n\t\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = data.meshPerAttribute * data.count;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t_gl.bindBuffer( 34962, buffer );\n\t\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, stride * bytesPerElement, offset * bytesPerElement );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( geometryAttribute.isInstancedBufferAttribute ) {\n\n\t\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute );\n\n\t\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\n\t\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t_gl.bindBuffer( 34962, buffer );\n\t\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, 0, 0 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( name === 'instanceMatrix' ) {\n\n\t\t\t\t\t\tvar attribute = attributes.get( object.instanceMatrix );\n\n\t\t\t\t\t\t// TODO Attribute may not be available on context restore\n\n\t\t\t\t\t\tif ( attribute === undefined ) { continue; }\n\n\t\t\t\t\t\tvar buffer = attribute.buffer;\n\t\t\t\t\t\tvar type = attribute.type;\n\n\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute + 0, 1 );\n\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute + 1, 1 );\n\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute + 2, 1 );\n\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute + 3, 1 );\n\n\t\t\t\t\t\t_gl.bindBuffer( 34962, buffer );\n\n\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute + 0, 4, type, false, 64, 0 );\n\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute + 1, 4, type, false, 64, 16 );\n\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute + 2, 4, type, false, 64, 32 );\n\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute + 3, 4, type, false, 64, 48 );\n\n\t\t\t\t\t} else if ( materialDefaultAttributeValues !== undefined ) {\n\n\t\t\t\t\t\tvar value = materialDefaultAttributeValues[ name ];\n\n\t\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\t\tswitch ( value.length ) {\n\n\t\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib2fv( programAttribute, value );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib3fv( programAttribute, value );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib4fv( programAttribute, value );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib1fv( programAttribute, value );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.disableUnusedAttributes();\n\n\t\t}\n\n\t\t// Compile\n\n\t\tthis.compile = function ( scene, camera ) {\n\n\t\t\tcurrentRenderState = renderStates.get( scene, camera );\n\t\t\tcurrentRenderState.init();\n\n\t\t\tscene.traverse( function ( object ) {\n\n\t\t\t\tif ( object.isLight ) {\n\n\t\t\t\t\tcurrentRenderState.pushLight( object );\n\n\t\t\t\t\tif ( object.castShadow ) {\n\n\t\t\t\t\t\tcurrentRenderState.pushShadow( object );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tcurrentRenderState.setupLights( camera );\n\n\t\t\tvar compiled = {};\n\n\t\t\tscene.traverse( function ( object ) {\n\n\t\t\t\tif ( object.material ) {\n\n\t\t\t\t\tif ( Array.isArray( object.material ) ) {\n\n\t\t\t\t\t\tfor ( var i = 0; i < object.material.length; i ++ ) {\n\n\t\t\t\t\t\t\tif ( object.material[ i ].uuid in compiled === false ) {\n\n\t\t\t\t\t\t\t\tinitMaterial( object.material[ i ], scene, object );\n\t\t\t\t\t\t\t\tcompiled[ object.material[ i ].uuid ] = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( object.material.uuid in compiled === false ) {\n\n\t\t\t\t\t\tinitMaterial( object.material, scene, object );\n\t\t\t\t\t\tcompiled[ object.material.uuid ] = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t};\n\n\t\t// Animation Loop\n\n\t\tvar onAnimationFrameCallback = null;\n\n\t\tfunction onAnimationFrame( time ) {\n\n\t\t\tif ( xr.isPresenting ) { return; }\n\t\t\tif ( onAnimationFrameCallback ) { onAnimationFrameCallback( time ); }\n\n\t\t}\n\n\t\tvar animation = new WebGLAnimation();\n\t\tanimation.setAnimationLoop( onAnimationFrame );\n\n\t\tif ( typeof window !== 'undefined' ) { animation.setContext( window ); }\n\n\t\tthis.setAnimationLoop = function ( callback ) {\n\n\t\t\tonAnimationFrameCallback = callback;\n\t\t\txr.setAnimationLoop( callback );\n\n\t\t\tanimation.start();\n\n\t\t};\n\n\t\t// Rendering\n\n\t\tthis.render = function ( scene, camera ) {\n\n\t\t\tvar renderTarget, forceClear;\n\n\t\t\tif ( arguments[ 2 ] !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead.' );\n\t\t\t\trenderTarget = arguments[ 2 ];\n\n\t\t\t}\n\n\t\t\tif ( arguments[ 3 ] !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead.' );\n\t\t\t\tforceClear = arguments[ 3 ];\n\n\t\t\t}\n\n\t\t\tif ( ! ( camera && camera.isCamera ) ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( _isContextLost ) { return; }\n\n\t\t\t// reset caching for this frame\n\n\t\t\t_currentGeometryProgram.geometry = null;\n\t\t\t_currentGeometryProgram.program = null;\n\t\t\t_currentGeometryProgram.wireframe = false;\n\t\t\t_currentMaterialId = - 1;\n\t\t\t_currentCamera = null;\n\n\t\t\t// update scene graph\n\n\t\t\tif ( scene.autoUpdate === true ) { scene.updateMatrixWorld(); }\n\n\t\t\t// update camera matrices and frustum\n\n\t\t\tif ( camera.parent === null ) { camera.updateMatrixWorld(); }\n\n\t\t\tif ( xr.enabled && xr.isPresenting ) {\n\n\t\t\t\tcamera = xr.getCamera( camera );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tcurrentRenderState = renderStates.get( scene, camera );\n\t\t\tcurrentRenderState.init();\n\n\t\t\tscene.onBeforeRender( _this, scene, camera, renderTarget || _currentRenderTarget );\n\n\t\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t\t\t_frustum.setFromProjectionMatrix( _projScreenMatrix );\n\n\t\t\t_localClippingEnabled = this.localClippingEnabled;\n\t\t\t_clippingEnabled = _clipping.init( this.clippingPlanes, _localClippingEnabled, camera );\n\n\t\t\tcurrentRenderList = renderLists.get( scene, camera );\n\t\t\tcurrentRenderList.init();\n\n\t\t\tprojectObject( scene, camera, 0, _this.sortObjects );\n\n\t\t\tif ( _this.sortObjects === true ) {\n\n\t\t\t\tcurrentRenderList.sort( _opaqueSort, _transparentSort );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( _clippingEnabled ) { _clipping.beginShadows(); }\n\n\t\t\tvar shadowsArray = currentRenderState.state.shadowsArray;\n\n\t\t\tshadowMap.render( shadowsArray, scene, camera );\n\n\t\t\tcurrentRenderState.setupLights( camera );\n\n\t\t\tif ( _clippingEnabled ) { _clipping.endShadows(); }\n\n\t\t\t//\n\n\t\t\tif ( this.info.autoReset ) { this.info.reset(); }\n\n\t\t\tif ( renderTarget !== undefined ) {\n\n\t\t\t\tthis.setRenderTarget( renderTarget );\n\n\t\t\t}\n\n\t\t\tif ( xr.enabled && multiview.isAvailable() ) {\n\n\t\t\t\tmultiview.attachCamera( camera );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tbackground.render( currentRenderList, scene, camera, forceClear );\n\n\t\t\t// render scene\n\n\t\t\tvar opaqueObjects = currentRenderList.opaque;\n\t\t\tvar transparentObjects = currentRenderList.transparent;\n\n\t\t\tif ( scene.overrideMaterial ) {\n\n\t\t\t\tvar overrideMaterial = scene.overrideMaterial;\n\n\t\t\t\tif ( opaqueObjects.length ) { renderObjects( opaqueObjects, scene, camera, overrideMaterial ); }\n\t\t\t\tif ( transparentObjects.length ) { renderObjects( transparentObjects, scene, camera, overrideMaterial ); }\n\n\t\t\t} else {\n\n\t\t\t\t// opaque pass (front-to-back order)\n\n\t\t\t\tif ( opaqueObjects.length ) { renderObjects( opaqueObjects, scene, camera ); }\n\n\t\t\t\t// transparent pass (back-to-front order)\n\n\t\t\t\tif ( transparentObjects.length ) { renderObjects( transparentObjects, scene, camera ); }\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tscene.onAfterRender( _this, scene, camera );\n\n\t\t\t//\n\n\t\t\tif ( _currentRenderTarget !== null ) {\n\n\t\t\t\t// Generate mipmap if we're using any kind of mipmap filtering\n\n\t\t\t\ttextures.updateRenderTargetMipmap( _currentRenderTarget );\n\n\t\t\t\t// resolve multisample renderbuffers to a single-sample texture if necessary\n\n\t\t\t\ttextures.updateMultisampleRenderTarget( _currentRenderTarget );\n\n\t\t\t}\n\n\t\t\t// Ensure depth buffer writing is enabled so it can be cleared on next render\n\n\t\t\tstate.buffers.depth.setTest( true );\n\t\t\tstate.buffers.depth.setMask( true );\n\t\t\tstate.buffers.color.setMask( true );\n\n\t\t\tstate.setPolygonOffset( false );\n\n\t\t\tif ( xr.enabled ) {\n\n\t\t\t\tif ( multiview.isAvailable() ) {\n\n\t\t\t\t\tmultiview.detachCamera( camera );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// _gl.finish();\n\n\t\t\tcurrentRenderList = null;\n\t\t\tcurrentRenderState = null;\n\n\t\t};\n\n\t\tfunction projectObject( object, camera, groupOrder, sortObjects ) {\n\n\t\t\tif ( object.visible === false ) { return; }\n\n\t\t\tvar visible = object.layers.test( camera.layers );\n\n\t\t\tif ( visible ) {\n\n\t\t\t\tif ( object.isGroup ) {\n\n\t\t\t\t\tgroupOrder = object.renderOrder;\n\n\t\t\t\t} else if ( object.isLOD ) {\n\n\t\t\t\t\tif ( object.autoUpdate === true ) { object.update( camera ); }\n\n\t\t\t\t} else if ( object.isLight ) {\n\n\t\t\t\t\tcurrentRenderState.pushLight( object );\n\n\t\t\t\t\tif ( object.castShadow ) {\n\n\t\t\t\t\t\tcurrentRenderState.pushShadow( object );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( object.isSprite ) {\n\n\t\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {\n\n\t\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar geometry = objects.update( object );\n\t\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\t\tif ( material.visible ) {\n\n\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( object.isImmediateRenderObject ) {\n\n\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentRenderList.push( object, null, object.material, groupOrder, _vector3.z, null );\n\n\t\t\t\t} else if ( object.isMesh || object.isLine || object.isPoints ) {\n\n\t\t\t\t\tif ( object.isSkinnedMesh ) {\n\n\t\t\t\t\t\t// update skeleton only once in a frame\n\n\t\t\t\t\t\tif ( object.skeleton.frame !== info.render.frame ) {\n\n\t\t\t\t\t\t\tobject.skeleton.update();\n\t\t\t\t\t\t\tobject.skeleton.frame = info.render.frame;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {\n\n\t\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar geometry = objects.update( object );\n\t\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\t\tvar groups = geometry.groups;\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\t\tvar group = groups[ i ];\n\t\t\t\t\t\t\t\tvar groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\n\n\t\t\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, groupMaterial, groupOrder, _vector3.z, group );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else if ( material.visible ) {\n\n\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tprojectObject( children[ i ], camera, groupOrder, sortObjects );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction renderObjects( renderList, scene, camera, overrideMaterial ) {\n\n\t\t\tfor ( var i = 0, l = renderList.length; i < l; i ++ ) {\n\n\t\t\t\tvar renderItem = renderList[ i ];\n\n\t\t\t\tvar object = renderItem.object;\n\t\t\t\tvar geometry = renderItem.geometry;\n\t\t\t\tvar material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;\n\t\t\t\tvar group = renderItem.group;\n\n\t\t\t\tif ( camera.isArrayCamera ) {\n\n\t\t\t\t\t_currentArrayCamera = camera;\n\n\t\t\t\t\tif ( xr.enabled && multiview.isAvailable() ) {\n\n\t\t\t\t\t\trenderObject( object, scene, camera, geometry, material, group );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tvar cameras = camera.cameras;\n\n\t\t\t\t\t\tfor ( var j = 0, jl = cameras.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\tvar camera2 = cameras[ j ];\n\n\t\t\t\t\t\t\tif ( object.layers.test( camera2.layers ) ) {\n\n\t\t\t\t\t\t\t\tstate.viewport( _currentViewport.copy( camera2.viewport ) );\n\n\t\t\t\t\t\t\t\tcurrentRenderState.setupLights( camera2 );\n\n\t\t\t\t\t\t\t\trenderObject( object, scene, camera2, geometry, material, group );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_currentArrayCamera = null;\n\n\t\t\t\t\trenderObject( object, scene, camera, geometry, material, group );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction renderObject( object, scene, camera, geometry, material, group ) {\n\n\t\t\tobject.onBeforeRender( _this, scene, camera, geometry, material, group );\n\t\t\tcurrentRenderState = renderStates.get( scene, _currentArrayCamera || camera );\n\n\t\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\n\t\t\tobject.normalMatrix.getNormalMatrix( object.modelViewMatrix );\n\n\t\t\tif ( object.isImmediateRenderObject ) {\n\n\t\t\t\tvar program = setProgram( camera, scene, material, object );\n\n\t\t\t\tstate.setMaterial( material );\n\n\t\t\t\t_currentGeometryProgram.geometry = null;\n\t\t\t\t_currentGeometryProgram.program = null;\n\t\t\t\t_currentGeometryProgram.wireframe = false;\n\n\t\t\t\trenderObjectImmediate( object, program );\n\n\t\t\t} else {\n\n\t\t\t\t_this.renderBufferDirect( camera, scene, geometry, material, object, group );\n\n\t\t\t}\n\n\t\t\tobject.onAfterRender( _this, scene, camera, geometry, material, group );\n\t\t\tcurrentRenderState = renderStates.get( scene, _currentArrayCamera || camera );\n\n\t\t}\n\n\t\tfunction initMaterial( material, scene, object ) {\n\n\t\t\tvar materialProperties = properties.get( material );\n\n\t\t\tvar lights = currentRenderState.state.lights;\n\t\t\tvar shadowsArray = currentRenderState.state.shadowsArray;\n\n\t\t\tvar lightsStateVersion = lights.state.version;\n\n\t\t\tvar parameters = programCache.getParameters( material, lights.state, shadowsArray, scene, _clipping.numPlanes, _clipping.numIntersection, object );\n\t\t\tvar programCacheKey = programCache.getProgramCacheKey( parameters );\n\n\t\t\tvar program = materialProperties.program;\n\t\t\tvar programChange = true;\n\n\t\t\tif ( program === undefined ) {\n\n\t\t\t\t// new material\n\t\t\t\tmaterial.addEventListener( 'dispose', onMaterialDispose );\n\n\t\t\t} else if ( program.cacheKey !== programCacheKey ) {\n\n\t\t\t\t// changed glsl or parameters\n\t\t\t\treleaseMaterialProgramReference( material );\n\n\t\t\t} else if ( materialProperties.lightsStateVersion !== lightsStateVersion ) {\n\n\t\t\t\tmaterialProperties.lightsStateVersion = lightsStateVersion;\n\n\t\t\t\tprogramChange = false;\n\n\t\t\t} else if ( parameters.shaderID !== undefined ) {\n\n\t\t\t\t// same glsl and uniform list\n\t\t\t\treturn;\n\n\t\t\t} else {\n\n\t\t\t\t// only rebuild uniform list\n\t\t\t\tprogramChange = false;\n\n\t\t\t}\n\n\t\t\tif ( programChange ) {\n\n\t\t\t\tprogram = programCache.acquireProgram( parameters, programCacheKey );\n\n\t\t\t\tmaterialProperties.program = program;\n\t\t\t\tmaterialProperties.uniforms = parameters.uniforms;\n\t\t\t\tmaterialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\t\t\tmaterialProperties.outputEncoding = _this.outputEncoding;\n\t\t\t\tmaterial.program = program;\n\n\t\t\t}\n\n\t\t\tvar programAttributes = program.getAttributes();\n\n\t\t\tif ( material.morphTargets ) {\n\n\t\t\t\tmaterial.numSupportedMorphTargets = 0;\n\n\t\t\t\tfor ( var i = 0; i < _this.maxMorphTargets; i ++ ) {\n\n\t\t\t\t\tif ( programAttributes[ 'morphTarget' + i ] >= 0 ) {\n\n\t\t\t\t\t\tmaterial.numSupportedMorphTargets ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material.morphNormals ) {\n\n\t\t\t\tmaterial.numSupportedMorphNormals = 0;\n\n\t\t\t\tfor ( var i = 0; i < _this.maxMorphNormals; i ++ ) {\n\n\t\t\t\t\tif ( programAttributes[ 'morphNormal' + i ] >= 0 ) {\n\n\t\t\t\t\t\tmaterial.numSupportedMorphNormals ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar uniforms = materialProperties.uniforms;\n\n\t\t\tif ( ! material.isShaderMaterial &&\n\t\t\t\t! material.isRawShaderMaterial ||\n\t\t\t\tmaterial.clipping === true ) {\n\n\t\t\t\tmaterialProperties.numClippingPlanes = _clipping.numPlanes;\n\t\t\t\tmaterialProperties.numIntersection = _clipping.numIntersection;\n\t\t\t\tuniforms.clippingPlanes = _clipping.uniform;\n\n\t\t\t}\n\n\t\t\tmaterialProperties.fog = scene.fog;\n\n\t\t\t// store the light setup it was created for\n\n\t\t\tmaterialProperties.needsLights = materialNeedsLights( material );\n\t\t\tmaterialProperties.lightsStateVersion = lightsStateVersion;\n\n\t\t\tif ( materialProperties.needsLights ) {\n\n\t\t\t\t// wire up the material to this renderer's lighting state\n\n\t\t\t\tuniforms.ambientLightColor.value = lights.state.ambient;\n\t\t\t\tuniforms.lightProbe.value = lights.state.probe;\n\t\t\t\tuniforms.directionalLights.value = lights.state.directional;\n\t\t\t\tuniforms.spotLights.value = lights.state.spot;\n\t\t\t\tuniforms.rectAreaLights.value = lights.state.rectArea;\n\t\t\t\tuniforms.pointLights.value = lights.state.point;\n\t\t\t\tuniforms.hemisphereLights.value = lights.state.hemi;\n\n\t\t\t\tuniforms.directionalShadowMap.value = lights.state.directionalShadowMap;\n\t\t\t\tuniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;\n\t\t\t\tuniforms.spotShadowMap.value = lights.state.spotShadowMap;\n\t\t\t\tuniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;\n\t\t\t\tuniforms.pointShadowMap.value = lights.state.pointShadowMap;\n\t\t\t\tuniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;\n\t\t\t\t// TODO (abelnation): add area lights shadow info to uniforms\n\n\t\t\t}\n\n\t\t\tvar progUniforms = materialProperties.program.getUniforms(),\n\t\t\t\tuniformsList =\n\t\t\t\t\tWebGLUniforms.seqWithValue( progUniforms.seq, uniforms );\n\n\t\t\tmaterialProperties.uniformsList = uniformsList;\n\n\t\t}\n\n\t\tfunction setProgram( camera, scene, material, object ) {\n\n\t\t\ttextures.resetTextureUnits();\n\n\t\t\tvar fog = scene.fog;\n\t\t\tvar environment = material.isMeshStandardMaterial ? scene.environment : null;\n\n\t\t\tvar materialProperties = properties.get( material );\n\t\t\tvar lights = currentRenderState.state.lights;\n\n\t\t\tif ( _clippingEnabled ) {\n\n\t\t\t\tif ( _localClippingEnabled || camera !== _currentCamera ) {\n\n\t\t\t\t\tvar useCache =\n\t\t\t\t\t\tcamera === _currentCamera &&\n\t\t\t\t\t\tmaterial.id === _currentMaterialId;\n\n\t\t\t\t\t// we might want to call this function with some ClippingGroup\n\t\t\t\t\t// object instead of the material, once it becomes feasible\n\t\t\t\t\t// (#8465, #8379)\n\t\t\t\t\t_clipping.setState(\n\t\t\t\t\t\tmaterial.clippingPlanes, material.clipIntersection, material.clipShadows,\n\t\t\t\t\t\tcamera, materialProperties, useCache );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material.version === materialProperties.__version ) {\n\n\t\t\t\tif ( materialProperties.program === undefined ) {\n\n\t\t\t\t\tinitMaterial( material, scene, object );\n\n\t\t\t\t} else if ( material.fog && materialProperties.fog !== fog ) {\n\n\t\t\t\t\tinitMaterial( material, scene, object );\n\n\t\t\t\t} else if ( materialProperties.environment !== environment ) {\n\n\t\t\t\t\tinitMaterial( material, scene, object );\n\n\t\t\t\t} else if ( materialProperties.needsLights && ( materialProperties.lightsStateVersion !== lights.state.version ) ) {\n\n\t\t\t\t\tinitMaterial( material, scene, object );\n\n\t\t\t\t} else if ( materialProperties.numClippingPlanes !== undefined &&\n\t\t\t\t\t( materialProperties.numClippingPlanes !== _clipping.numPlanes ||\n\t\t\t\t\tmaterialProperties.numIntersection !== _clipping.numIntersection ) ) {\n\n\t\t\t\t\tinitMaterial( material, scene, object );\n\n\t\t\t\t} else if ( materialProperties.outputEncoding !== _this.outputEncoding ) {\n\n\t\t\t\t\tinitMaterial( material, scene, object );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tinitMaterial( material, scene, object );\n\t\t\t\tmaterialProperties.__version = material.version;\n\n\t\t\t}\n\n\t\t\tvar refreshProgram = false;\n\t\t\tvar refreshMaterial = false;\n\t\t\tvar refreshLights = false;\n\n\t\t\tvar program = materialProperties.program,\n\t\t\t\tp_uniforms = program.getUniforms(),\n\t\t\t\tm_uniforms = materialProperties.uniforms;\n\n\t\t\tif ( state.useProgram( program.program ) ) {\n\n\t\t\t\trefreshProgram = true;\n\t\t\t\trefreshMaterial = true;\n\t\t\t\trefreshLights = true;\n\n\t\t\t}\n\n\t\t\tif ( material.id !== _currentMaterialId ) {\n\n\t\t\t\t_currentMaterialId = material.id;\n\n\t\t\t\trefreshMaterial = true;\n\n\t\t\t}\n\n\t\t\tif ( refreshProgram || _currentCamera !== camera ) {\n\n\t\t\t\tif ( program.numMultiviewViews > 0 ) {\n\n\t\t\t\t\tmultiview.updateCameraProjectionMatricesUniform( camera, p_uniforms );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tp_uniforms.setValue( _gl, 'projectionMatrix', camera.projectionMatrix );\n\n\t\t\t\t}\n\n\t\t\t\tif ( capabilities.logarithmicDepthBuffer ) {\n\n\t\t\t\t\tp_uniforms.setValue( _gl, 'logDepthBufFC',\n\t\t\t\t\t\t2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( _currentCamera !== camera ) {\n\n\t\t\t\t\t_currentCamera = camera;\n\n\t\t\t\t\t// lighting uniforms depend on the camera so enforce an update\n\t\t\t\t\t// now, in case this material supports lights - or later, when\n\t\t\t\t\t// the next material that does gets activated:\n\n\t\t\t\t\trefreshMaterial = true;\t\t// set to true on material change\n\t\t\t\t\trefreshLights = true;\t\t// remains set until update done\n\n\t\t\t\t}\n\n\t\t\t\t// load material specific uniforms\n\t\t\t\t// (shader material also gets them for the sake of genericity)\n\n\t\t\t\tif ( material.isShaderMaterial ||\n\t\t\t\t\tmaterial.isMeshPhongMaterial ||\n\t\t\t\t\tmaterial.isMeshToonMaterial ||\n\t\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\t\tmaterial.envMap ) {\n\n\t\t\t\t\tvar uCamPos = p_uniforms.map.cameraPosition;\n\n\t\t\t\t\tif ( uCamPos !== undefined ) {\n\n\t\t\t\t\t\tuCamPos.setValue( _gl,\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( camera.matrixWorld ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( material.isMeshPhongMaterial ||\n\t\t\t\t\tmaterial.isMeshToonMaterial ||\n\t\t\t\t\tmaterial.isMeshLambertMaterial ||\n\t\t\t\t\tmaterial.isMeshBasicMaterial ||\n\t\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\t\tmaterial.isShaderMaterial ) {\n\n\t\t\t\t\tp_uniforms.setValue( _gl, 'isOrthographic', camera.isOrthographicCamera === true );\n\n\t\t\t\t}\n\n\t\t\t\tif ( material.isMeshPhongMaterial ||\n\t\t\t\t\tmaterial.isMeshToonMaterial ||\n\t\t\t\t\tmaterial.isMeshLambertMaterial ||\n\t\t\t\t\tmaterial.isMeshBasicMaterial ||\n\t\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\t\tmaterial.isShaderMaterial ||\n\t\t\t\t\tmaterial.skinning ) {\n\n\t\t\t\t\tif ( program.numMultiviewViews > 0 ) {\n\n\t\t\t\t\t\tmultiview.updateCameraViewMatricesUniform( camera, p_uniforms );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tp_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// skinning uniforms must be set even if material didn't change\n\t\t\t// auto-setting of texture unit for bone texture must go before other textures\n\t\t\t// not sure why, but otherwise weird things happen\n\n\t\t\tif ( material.skinning ) {\n\n\t\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrix' );\n\t\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );\n\n\t\t\t\tvar skeleton = object.skeleton;\n\n\t\t\t\tif ( skeleton ) {\n\n\t\t\t\t\tvar bones = skeleton.bones;\n\n\t\t\t\t\tif ( capabilities.floatVertexTextures ) {\n\n\t\t\t\t\t\tif ( skeleton.boneTexture === undefined ) {\n\n\t\t\t\t\t\t\t// layout (1 matrix = 4 pixels)\n\t\t\t\t\t\t\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n\t\t\t\t\t\t\t//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\n\t\t\t\t\t\t\t//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\n\t\t\t\t\t\t\t//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\n\t\t\t\t\t\t\t//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n\n\n\t\t\t\t\t\t\tvar size = Math.sqrt( bones.length * 4 ); // 4 pixels needed for 1 matrix\n\t\t\t\t\t\t\tsize = MathUtils.ceilPowerOfTwo( size );\n\t\t\t\t\t\t\tsize = Math.max( size, 4 );\n\n\t\t\t\t\t\t\tvar boneMatrices = new Float32Array( size * size * 4 ); // 4 floats per RGBA pixel\n\t\t\t\t\t\t\tboneMatrices.set( skeleton.boneMatrices ); // copy current values\n\n\t\t\t\t\t\t\tvar boneTexture = new DataTexture( boneMatrices, size, size, RGBAFormat, FloatType );\n\n\t\t\t\t\t\t\tskeleton.boneMatrices = boneMatrices;\n\t\t\t\t\t\t\tskeleton.boneTexture = boneTexture;\n\t\t\t\t\t\t\tskeleton.boneTextureSize = size;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tp_uniforms.setValue( _gl, 'boneTexture', skeleton.boneTexture, textures );\n\t\t\t\t\t\tp_uniforms.setValue( _gl, 'boneTextureSize', skeleton.boneTextureSize );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tp_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow ) {\n\n\t\t\t\tmaterialProperties.receiveShadow = object.receiveShadow;\n\t\t\t\tp_uniforms.setValue( _gl, 'receiveShadow', object.receiveShadow );\n\n\t\t\t}\n\n\t\t\tif ( refreshMaterial ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'toneMappingExposure', _this.toneMappingExposure );\n\t\t\t\tp_uniforms.setValue( _gl, 'toneMappingWhitePoint', _this.toneMappingWhitePoint );\n\n\t\t\t\tif ( materialProperties.needsLights ) {\n\n\t\t\t\t\t// the current material requires lighting info\n\n\t\t\t\t\t// note: all lighting uniforms are always set correctly\n\t\t\t\t\t// they simply reference the renderer's state for their\n\t\t\t\t\t// values\n\t\t\t\t\t//\n\t\t\t\t\t// use the current material's .needsUpdate flags to set\n\t\t\t\t\t// the GL state when required\n\n\t\t\t\t\tmarkUniformsLightsNeedsUpdate( m_uniforms, refreshLights );\n\n\t\t\t\t}\n\n\t\t\t\t// refresh uniforms common to several materials\n\n\t\t\t\tif ( fog && material.fog ) {\n\n\t\t\t\t\trefreshUniformsFog( m_uniforms, fog );\n\n\t\t\t\t}\n\n\t\t\t\tif ( material.isMeshBasicMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshLambertMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\t\trefreshUniformsLambert( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshToonMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\t\trefreshUniformsToon( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshPhongMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\t\trefreshUniformsPhong( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshStandardMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material, environment );\n\n\t\t\t\t\tif ( material.isMeshPhysicalMaterial ) {\n\n\t\t\t\t\t\trefreshUniformsPhysical( m_uniforms, material, environment );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\trefreshUniformsStandard( m_uniforms, material, environment );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( material.isMeshMatcapMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\t\trefreshUniformsMatcap( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshDepthMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\t\trefreshUniformsDepth( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshDistanceMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\t\trefreshUniformsDistance( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshNormalMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\t\trefreshUniformsNormal( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isLineBasicMaterial ) {\n\n\t\t\t\t\trefreshUniformsLine( m_uniforms, material );\n\n\t\t\t\t\tif ( material.isLineDashedMaterial ) {\n\n\t\t\t\t\t\trefreshUniformsDash( m_uniforms, material );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( material.isPointsMaterial ) {\n\n\t\t\t\t\trefreshUniformsPoints( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isSpriteMaterial ) {\n\n\t\t\t\t\trefreshUniformsSprites( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isShadowMaterial ) {\n\n\t\t\t\t\tm_uniforms.color.value.copy( material.color );\n\t\t\t\t\tm_uniforms.opacity.value = material.opacity;\n\n\t\t\t\t}\n\n\t\t\t\t// RectAreaLight Texture\n\t\t\t\t// TODO (mrdoob): Find a nicer implementation\n\n\t\t\t\tif ( m_uniforms.ltc_1 !== undefined ) { m_uniforms.ltc_1.value = UniformsLib.LTC_1; }\n\t\t\t\tif ( m_uniforms.ltc_2 !== undefined ) { m_uniforms.ltc_2.value = UniformsLib.LTC_2; }\n\n\t\t\t\tWebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );\n\n\t\t\t\tif ( material.isShaderMaterial ) {\n\n\t\t\t\t\tmaterial.uniformsNeedUpdate = false; // #15581\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material.isShaderMaterial && material.uniformsNeedUpdate === true ) {\n\n\t\t\t\tWebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );\n\t\t\t\tmaterial.uniformsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( material.isSpriteMaterial ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'center', object.center );\n\n\t\t\t}\n\n\t\t\t// common matrices\n\n\t\t\tif ( program.numMultiviewViews > 0 ) {\n\n\t\t\t\tmultiview.updateObjectMatricesUniforms( object, camera, p_uniforms );\n\n\t\t\t} else {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'modelViewMatrix', object.modelViewMatrix );\n\t\t\t\tp_uniforms.setValue( _gl, 'normalMatrix', object.normalMatrix );\n\n\t\t\t}\n\n\t\t\tp_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );\n\n\t\t\treturn program;\n\n\t\t}\n\n\t\t// Uniforms (refresh uniforms objects)\n\n\t\tfunction refreshUniformsCommon( uniforms, material, environment ) {\n\n\t\t\tuniforms.opacity.value = material.opacity;\n\n\t\t\tif ( material.color ) {\n\n\t\t\t\tuniforms.diffuse.value.copy( material.color );\n\n\t\t\t}\n\n\t\t\tif ( material.emissive ) {\n\n\t\t\t\tuniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );\n\n\t\t\t}\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuniforms.map.value = material.map;\n\n\t\t\t}\n\n\t\t\tif ( material.alphaMap ) {\n\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t\t}\n\n\t\t\tif ( material.specularMap ) {\n\n\t\t\t\tuniforms.specularMap.value = material.specularMap;\n\n\t\t\t}\n\n\t\t\tvar envMap = material.envMap || environment;\n\n\t\t\tif ( envMap ) {\n\n\t\t\t\tuniforms.envMap.value = envMap;\n\n\t\t\t\tuniforms.flipEnvMap.value = envMap.isCubeTexture ? - 1 : 1;\n\n\t\t\t\tuniforms.reflectivity.value = material.reflectivity;\n\t\t\t\tuniforms.refractionRatio.value = material.refractionRatio;\n\n\t\t\t\tuniforms.maxMipLevel.value = properties.get( envMap ).__maxMipLevel;\n\n\t\t\t}\n\n\t\t\tif ( material.lightMap ) {\n\n\t\t\t\tuniforms.lightMap.value = material.lightMap;\n\t\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\n\t\t\t}\n\n\t\t\tif ( material.aoMap ) {\n\n\t\t\t\tuniforms.aoMap.value = material.aoMap;\n\t\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\n\n\t\t\t}\n\n\t\t\t// uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. specular map\n\t\t\t// 3. normal map\n\t\t\t// 4. bump map\n\t\t\t// 5. alpha map\n\t\t\t// 6. emissive map\n\n\t\t\tvar uvScaleMap;\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuvScaleMap = material.map;\n\n\t\t\t} else if ( material.specularMap ) {\n\n\t\t\t\tuvScaleMap = material.specularMap;\n\n\t\t\t} else if ( material.displacementMap ) {\n\n\t\t\t\tuvScaleMap = material.displacementMap;\n\n\t\t\t} else if ( material.normalMap ) {\n\n\t\t\t\tuvScaleMap = material.normalMap;\n\n\t\t\t} else if ( material.bumpMap ) {\n\n\t\t\t\tuvScaleMap = material.bumpMap;\n\n\t\t\t} else if ( material.roughnessMap ) {\n\n\t\t\t\tuvScaleMap = material.roughnessMap;\n\n\t\t\t} else if ( material.metalnessMap ) {\n\n\t\t\t\tuvScaleMap = material.metalnessMap;\n\n\t\t\t} else if ( material.alphaMap ) {\n\n\t\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t\t} else if ( material.emissiveMap ) {\n\n\t\t\t\tuvScaleMap = material.emissiveMap;\n\n\t\t\t}\n\n\t\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\t\t// backwards compatibility\n\t\t\t\tif ( uvScaleMap.isWebGLRenderTarget ) {\n\n\t\t\t\t\tuvScaleMap = uvScaleMap.texture;\n\n\t\t\t\t}\n\n\t\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\n\n\t\t\t}\n\n\t\t\t// uv repeat and offset setting priorities for uv2\n\t\t\t// 1. ao map\n\t\t\t// 2. light map\n\n\t\t\tvar uv2ScaleMap;\n\n\t\t\tif ( material.aoMap ) {\n\n\t\t\t\tuv2ScaleMap = material.aoMap;\n\n\t\t\t} else if ( material.lightMap ) {\n\n\t\t\t\tuv2ScaleMap = material.lightMap;\n\n\t\t\t}\n\n\t\t\tif ( uv2ScaleMap !== undefined ) {\n\n\t\t\t\t// backwards compatibility\n\t\t\t\tif ( uv2ScaleMap.isWebGLRenderTarget ) {\n\n\t\t\t\t\tuv2ScaleMap = uv2ScaleMap.texture;\n\n\t\t\t\t}\n\n\t\t\t\tif ( uv2ScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\t\tuv2ScaleMap.updateMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tuniforms.uv2Transform.value.copy( uv2ScaleMap.matrix );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsLine( uniforms, material ) {\n\n\t\t\tuniforms.diffuse.value.copy( material.color );\n\t\t\tuniforms.opacity.value = material.opacity;\n\n\t\t}\n\n\t\tfunction refreshUniformsDash( uniforms, material ) {\n\n\t\t\tuniforms.dashSize.value = material.dashSize;\n\t\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\n\t\t\tuniforms.scale.value = material.scale;\n\n\t\t}\n\n\t\tfunction refreshUniformsPoints( uniforms, material ) {\n\n\t\t\tuniforms.diffuse.value.copy( material.color );\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\tuniforms.size.value = material.size * _pixelRatio;\n\t\t\tuniforms.scale.value = _height * 0.5;\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuniforms.map.value = material.map;\n\n\t\t\t}\n\n\t\t\tif ( material.alphaMap ) {\n\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t\t}\n\n\t\t\t// uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. alpha map\n\n\t\t\tvar uvScaleMap;\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuvScaleMap = material.map;\n\n\t\t\t} else if ( material.alphaMap ) {\n\n\t\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t\t}\n\n\t\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsSprites( uniforms, material ) {\n\n\t\t\tuniforms.diffuse.value.copy( material.color );\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\tuniforms.rotation.value = material.rotation;\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuniforms.map.value = material.map;\n\n\t\t\t}\n\n\t\t\tif ( material.alphaMap ) {\n\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t\t}\n\n\t\t\t// uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. alpha map\n\n\t\t\tvar uvScaleMap;\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuvScaleMap = material.map;\n\n\t\t\t} else if ( material.alphaMap ) {\n\n\t\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t\t}\n\n\t\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsFog( uniforms, fog ) {\n\n\t\t\tuniforms.fogColor.value.copy( fog.color );\n\n\t\t\tif ( fog.isFog ) {\n\n\t\t\t\tuniforms.fogNear.value = fog.near;\n\t\t\t\tuniforms.fogFar.value = fog.far;\n\n\t\t\t} else if ( fog.isFogExp2 ) {\n\n\t\t\t\tuniforms.fogDensity.value = fog.density;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsLambert( uniforms, material ) {\n\n\t\t\tif ( material.emissiveMap ) {\n\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsPhong( uniforms, material ) {\n\n\t\t\tuniforms.specular.value.copy( material.specular );\n\t\t\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\n\n\t\t\tif ( material.emissiveMap ) {\n\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t\t}\n\n\t\t\tif ( material.bumpMap ) {\n\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }\n\n\t\t\t}\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\t\tif ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }\n\n\t\t\t}\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsToon( uniforms, material ) {\n\n\t\t\tuniforms.specular.value.copy( material.specular );\n\t\t\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\n\n\t\t\tif ( material.gradientMap ) {\n\n\t\t\t\tuniforms.gradientMap.value = material.gradientMap;\n\n\t\t\t}\n\n\t\t\tif ( material.emissiveMap ) {\n\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t\t}\n\n\t\t\tif ( material.bumpMap ) {\n\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }\n\n\t\t\t}\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\t\tif ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }\n\n\t\t\t}\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsStandard( uniforms, material, environment ) {\n\n\t\t\tuniforms.roughness.value = material.roughness;\n\t\t\tuniforms.metalness.value = material.metalness;\n\n\t\t\tif ( material.roughnessMap ) {\n\n\t\t\t\tuniforms.roughnessMap.value = material.roughnessMap;\n\n\t\t\t}\n\n\t\t\tif ( material.metalnessMap ) {\n\n\t\t\t\tuniforms.metalnessMap.value = material.metalnessMap;\n\n\t\t\t}\n\n\t\t\tif ( material.emissiveMap ) {\n\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t\t}\n\n\t\t\tif ( material.bumpMap ) {\n\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }\n\n\t\t\t}\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\t\tif ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }\n\n\t\t\t}\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t\tif ( material.envMap || environment ) {\n\n\t\t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\n\t\t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsPhysical( uniforms, material, environment ) {\n\n\t\t\trefreshUniformsStandard( uniforms, material, environment );\n\n\t\t\tuniforms.reflectivity.value = material.reflectivity; // also part of uniforms common\n\n\t\t\tuniforms.clearcoat.value = material.clearcoat;\n\t\t\tuniforms.clearcoatRoughness.value = material.clearcoatRoughness;\n\t\t\tif ( material.sheen ) { uniforms.sheen.value.copy( material.sheen ); }\n\n\t\t\tif ( material.clearcoatNormalMap ) {\n\n\t\t\t\tuniforms.clearcoatNormalScale.value.copy( material.clearcoatNormalScale );\n\t\t\t\tuniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;\n\n\t\t\t\tif ( material.side === BackSide ) {\n\n\t\t\t\t\tuniforms.clearcoatNormalScale.value.negate();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tuniforms.transparency.value = material.transparency;\n\n\t\t}\n\n\t\tfunction refreshUniformsMatcap( uniforms, material ) {\n\n\t\t\tif ( material.matcap ) {\n\n\t\t\t\tuniforms.matcap.value = material.matcap;\n\n\t\t\t}\n\n\t\t\tif ( material.bumpMap ) {\n\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }\n\n\t\t\t}\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\t\tif ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }\n\n\t\t\t}\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsDepth( uniforms, material ) {\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsDistance( uniforms, material ) {\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t\tuniforms.referencePosition.value.copy( material.referencePosition );\n\t\t\tuniforms.nearDistance.value = material.nearDistance;\n\t\t\tuniforms.farDistance.value = material.farDistance;\n\n\t\t}\n\n\t\tfunction refreshUniformsNormal( uniforms, material ) {\n\n\t\t\tif ( material.bumpMap ) {\n\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }\n\n\t\t\t}\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\t\tif ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }\n\n\t\t\t}\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\n\t\tfunction markUniformsLightsNeedsUpdate( uniforms, value ) {\n\n\t\t\tuniforms.ambientLightColor.needsUpdate = value;\n\t\t\tuniforms.lightProbe.needsUpdate = value;\n\n\t\t\tuniforms.directionalLights.needsUpdate = value;\n\t\t\tuniforms.pointLights.needsUpdate = value;\n\t\t\tuniforms.spotLights.needsUpdate = value;\n\t\t\tuniforms.rectAreaLights.needsUpdate = value;\n\t\t\tuniforms.hemisphereLights.needsUpdate = value;\n\n\t\t}\n\n\t\tfunction materialNeedsLights( material ) {\n\n\t\t\treturn material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial ||\n\t\t\t\tmaterial.isMeshStandardMaterial || material.isShadowMaterial ||\n\t\t\t\t( material.isShaderMaterial && material.lights === true );\n\n\t\t}\n\n\t\t//\n\t\tthis.setFramebuffer = function ( value ) {\n\n\t\t\tif ( _framebuffer !== value && _currentRenderTarget === null ) { _gl.bindFramebuffer( 36160, value ); }\n\n\t\t\t_framebuffer = value;\n\n\t\t};\n\n\t\tthis.getActiveCubeFace = function () {\n\n\t\t\treturn _currentActiveCubeFace;\n\n\t\t};\n\n\t\tthis.getActiveMipmapLevel = function () {\n\n\t\t\treturn _currentActiveMipmapLevel;\n\n\t\t};\n\n\t\tthis.getRenderTarget = function () {\n\n\t\t\treturn _currentRenderTarget;\n\n\t\t};\n\n\t\tthis.setRenderTarget = function ( renderTarget, activeCubeFace, activeMipmapLevel ) {\n\n\t\t\t_currentRenderTarget = renderTarget;\n\t\t\t_currentActiveCubeFace = activeCubeFace;\n\t\t\t_currentActiveMipmapLevel = activeMipmapLevel;\n\n\t\t\tif ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {\n\n\t\t\t\ttextures.setupRenderTarget( renderTarget );\n\n\t\t\t}\n\n\t\t\tvar framebuffer = _framebuffer;\n\t\t\tvar isCube = false;\n\n\t\t\tif ( renderTarget ) {\n\n\t\t\t\tvar __webglFramebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n\t\t\t\tif ( renderTarget.isWebGLCubeRenderTarget ) {\n\n\t\t\t\t\tframebuffer = __webglFramebuffer[ activeCubeFace || 0 ];\n\t\t\t\t\tisCube = true;\n\n\t\t\t\t} else if ( renderTarget.isWebGLMultisampleRenderTarget ) {\n\n\t\t\t\t\tframebuffer = properties.get( renderTarget ).__webglMultisampledFramebuffer;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tframebuffer = __webglFramebuffer;\n\n\t\t\t\t}\n\n\t\t\t\t_currentViewport.copy( renderTarget.viewport );\n\t\t\t\t_currentScissor.copy( renderTarget.scissor );\n\t\t\t\t_currentScissorTest = renderTarget.scissorTest;\n\n\t\t\t} else {\n\n\t\t\t\t_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor();\n\t\t\t\t_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor();\n\t\t\t\t_currentScissorTest = _scissorTest;\n\n\t\t\t}\n\n\t\t\tif ( _currentFramebuffer !== framebuffer ) {\n\n\t\t\t\t_gl.bindFramebuffer( 36160, framebuffer );\n\t\t\t\t_currentFramebuffer = framebuffer;\n\n\t\t\t}\n\n\t\t\tstate.viewport( _currentViewport );\n\t\t\tstate.scissor( _currentScissor );\n\t\t\tstate.setScissorTest( _currentScissorTest );\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\t\t\t\t_gl.framebufferTexture2D( 36160, 36064, 34069 + ( activeCubeFace || 0 ), textureProperties.__webglTexture, activeMipmapLevel || 0 );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer, activeCubeFaceIndex ) {\n\n\t\t\tif ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar framebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n\t\t\tif ( renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== undefined ) {\n\n\t\t\t\tframebuffer = framebuffer[ activeCubeFaceIndex ];\n\n\t\t\t}\n\n\t\t\tif ( framebuffer ) {\n\n\t\t\t\tvar restore = false;\n\n\t\t\t\tif ( framebuffer !== _currentFramebuffer ) {\n\n\t\t\t\t\t_gl.bindFramebuffer( 36160, framebuffer );\n\n\t\t\t\t\trestore = true;\n\n\t\t\t\t}\n\n\t\t\t\ttry {\n\n\t\t\t\t\tvar texture = renderTarget.texture;\n\t\t\t\t\tvar textureFormat = texture.format;\n\t\t\t\t\tvar textureType = texture.type;\n\n\t\t\t\t\tif ( textureFormat !== RGBAFormat && utils.convert( textureFormat ) !== _gl.getParameter( 35739 ) ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( textureType !== UnsignedByteType && utils.convert( textureType ) !== _gl.getParameter( 35738 ) && // IE11, Edge and Chrome Mac < 52 (#9513)\n\t\t\t\t\t\t! ( textureType === FloatType && ( capabilities.isWebGL2 || extensions.get( 'OES_texture_float' ) || extensions.get( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox\n\t\t\t\t\t\t! ( textureType === HalfFloatType && ( capabilities.isWebGL2 ? extensions.get( 'EXT_color_buffer_float' ) : extensions.get( 'EXT_color_buffer_half_float' ) ) ) ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( _gl.checkFramebufferStatus( 36160 ) === 36053 ) {\n\n\t\t\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n\n\t\t\t\t\t\tif ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {\n\n\t\t\t\t\t\t\t_gl.readPixels( x, y, width, height, utils.convert( textureFormat ), utils.convert( textureType ), buffer );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t} finally {\n\n\t\t\t\t\tif ( restore ) {\n\n\t\t\t\t\t\t_gl.bindFramebuffer( 36160, _currentFramebuffer );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.copyFramebufferToTexture = function ( position, texture, level ) {\n\n\t\t\tif ( level === undefined ) { level = 0; }\n\n\t\t\tvar levelScale = Math.pow( 2, - level );\n\t\t\tvar width = Math.floor( texture.image.width * levelScale );\n\t\t\tvar height = Math.floor( texture.image.height * levelScale );\n\t\t\tvar glFormat = utils.convert( texture.format );\n\n\t\t\ttextures.setTexture2D( texture, 0 );\n\n\t\t\t_gl.copyTexImage2D( 3553, level, glFormat, position.x, position.y, width, height, 0 );\n\n\t\t\tstate.unbindTexture();\n\n\t\t};\n\n\t\tthis.copyTextureToTexture = function ( position, srcTexture, dstTexture, level ) {\n\n\t\t\tvar width = srcTexture.image.width;\n\t\t\tvar height = srcTexture.image.height;\n\t\t\tvar glFormat = utils.convert( dstTexture.format );\n\t\t\tvar glType = utils.convert( dstTexture.type );\n\n\t\t\ttextures.setTexture2D( dstTexture, 0 );\n\n\t\t\tif ( srcTexture.isDataTexture ) {\n\n\t\t\t\t_gl.texSubImage2D( 3553, level || 0, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.texSubImage2D( 3553, level || 0, position.x, position.y, glFormat, glType, srcTexture.image );\n\n\t\t\t}\n\n\t\t\tstate.unbindTexture();\n\n\t\t};\n\n\t\tthis.initTexture = function ( texture ) {\n\n\t\t\ttextures.setTexture2D( texture, 0 );\n\n\t\t\tstate.unbindTexture();\n\n\t\t};\n\n\t\tif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n\n\t\t\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) ); // eslint-disable-line no-undef\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction FogExp2( color, density ) {\n\n\t\tthis.name = '';\n\n\t\tthis.color = new Color( color );\n\t\tthis.density = ( density !== undefined ) ? density : 0.00025;\n\n\t}\n\n\tObject.assign( FogExp2.prototype, {\n\n\t\tisFogExp2: true,\n\n\t\tclone: function () {\n\n\t\t\treturn new FogExp2( this.color, this.density );\n\n\t\t},\n\n\t\ttoJSON: function ( /* meta */ ) {\n\n\t\t\treturn {\n\t\t\t\ttype: 'FogExp2',\n\t\t\t\tcolor: this.color.getHex(),\n\t\t\t\tdensity: this.density\n\t\t\t};\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Fog( color, near, far ) {\n\n\t\tthis.name = '';\n\n\t\tthis.color = new Color( color );\n\n\t\tthis.near = ( near !== undefined ) ? near : 1;\n\t\tthis.far = ( far !== undefined ) ? far : 1000;\n\n\t}\n\n\tObject.assign( Fog.prototype, {\n\n\t\tisFog: true,\n\n\t\tclone: function () {\n\n\t\t\treturn new Fog( this.color, this.near, this.far );\n\n\t\t},\n\n\t\ttoJSON: function ( /* meta */ ) {\n\n\t\t\treturn {\n\t\t\t\ttype: 'Fog',\n\t\t\t\tcolor: this.color.getHex(),\n\t\t\t\tnear: this.near,\n\t\t\t\tfar: this.far\n\t\t\t};\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction InterleavedBuffer( array, stride ) {\n\n\t\tthis.array = array;\n\t\tthis.stride = stride;\n\t\tthis.count = array !== undefined ? array.length / stride : 0;\n\n\t\tthis.usage = StaticDrawUsage;\n\t\tthis.updateRange = { offset: 0, count: - 1 };\n\n\t\tthis.version = 0;\n\n\t}\n\n\tObject.defineProperty( InterleavedBuffer.prototype, 'needsUpdate', {\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value === true ) { this.version ++; }\n\n\t\t}\n\n\t} );\n\n\tObject.assign( InterleavedBuffer.prototype, {\n\n\t\tisInterleavedBuffer: true,\n\n\t\tonUploadCallback: function () {},\n\n\t\tsetUsage: function ( value ) {\n\n\t\t\tthis.usage = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.array = new source.array.constructor( source.array );\n\t\t\tthis.count = source.count;\n\t\t\tthis.stride = source.stride;\n\t\t\tthis.usage = source.usage;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyAt: function ( index1, attribute, index2 ) {\n\n\t\t\tindex1 *= this.stride;\n\t\t\tindex2 *= attribute.stride;\n\n\t\t\tfor ( var i = 0, l = this.stride; i < l; i ++ ) {\n\n\t\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tset: function ( value, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tthis.array.set( value, offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tonUpload: function ( callback ) {\n\n\t\t\tthis.onUploadCallback = callback;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tvar _vector$6 = new Vector3();\n\n\tfunction InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, normalized ) {\n\n\t\tthis.data = interleavedBuffer;\n\t\tthis.itemSize = itemSize;\n\t\tthis.offset = offset;\n\n\t\tthis.normalized = normalized === true;\n\n\t}\n\n\tObject.defineProperties( InterleavedBufferAttribute.prototype, {\n\n\t\tcount: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.data.count;\n\n\t\t\t}\n\n\t\t},\n\n\t\tarray: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.data.array;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tObject.assign( InterleavedBufferAttribute.prototype, {\n\n\t\tisInterleavedBufferAttribute: true,\n\n\t\tapplyMatrix4: function ( m ) {\n\n\t\t\tfor ( var i = 0, l = this.data.count; i < l; i ++ ) {\n\n\t\t\t\t_vector$6.x = this.getX( i );\n\t\t\t\t_vector$6.y = this.getY( i );\n\t\t\t\t_vector$6.z = this.getZ( i );\n\n\t\t\t\t_vector$6.applyMatrix4( m );\n\n\t\t\t\tthis.setXYZ( i, _vector$6.x, _vector$6.y, _vector$6.z );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetX: function ( index, x ) {\n\n\t\t\tthis.data.array[ index * this.data.stride + this.offset ] = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetY: function ( index, y ) {\n\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 1 ] = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetZ: function ( index, z ) {\n\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 2 ] = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetW: function ( index, w ) {\n\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 3 ] = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetX: function ( index ) {\n\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset ];\n\n\t\t},\n\n\t\tgetY: function ( index ) {\n\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 1 ];\n\n\t\t},\n\n\t\tgetZ: function ( index ) {\n\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 2 ];\n\n\t\t},\n\n\t\tgetW: function ( index ) {\n\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 3 ];\n\n\t\t},\n\n\t\tsetXY: function ( index, x, y ) {\n\n\t\t\tindex = index * this.data.stride + this.offset;\n\n\t\t\tthis.data.array[ index + 0 ] = x;\n\t\t\tthis.data.array[ index + 1 ] = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXYZ: function ( index, x, y, z ) {\n\n\t\t\tindex = index * this.data.stride + this.offset;\n\n\t\t\tthis.data.array[ index + 0 ] = x;\n\t\t\tthis.data.array[ index + 1 ] = y;\n\t\t\tthis.data.array[ index + 2 ] = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXYZW: function ( index, x, y, z, w ) {\n\n\t\t\tindex = index * this.data.stride + this.offset;\n\n\t\t\tthis.data.array[ index + 0 ] = x;\n\t\t\tthis.data.array[ index + 1 ] = y;\n\t\t\tthis.data.array[ index + 2 ] = z;\n\t\t\tthis.data.array[ index + 3 ] = w;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  map: new THREE.Texture( <Image> ),\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *  rotation: <float>,\n\t *  sizeAttenuation: <bool>\n\t * }\n\t */\n\n\tfunction SpriteMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'SpriteMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.rotation = 0;\n\n\t\tthis.sizeAttenuation = true;\n\n\t\tthis.transparent = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tSpriteMaterial.prototype = Object.create( Material.prototype );\n\tSpriteMaterial.prototype.constructor = SpriteMaterial;\n\tSpriteMaterial.prototype.isSpriteMaterial = true;\n\n\tSpriteMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.rotation = source.rotation;\n\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tvar _geometry;\n\n\tvar _intersectPoint = new Vector3();\n\tvar _worldScale = new Vector3();\n\tvar _mvPosition = new Vector3();\n\n\tvar _alignedPosition = new Vector2();\n\tvar _rotatedPosition = new Vector2();\n\tvar _viewWorldMatrix = new Matrix4();\n\n\tvar _vA$1 = new Vector3();\n\tvar _vB$1 = new Vector3();\n\tvar _vC$1 = new Vector3();\n\n\tvar _uvA$1 = new Vector2();\n\tvar _uvB$1 = new Vector2();\n\tvar _uvC$1 = new Vector2();\n\n\tfunction Sprite( material ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Sprite';\n\n\t\tif ( _geometry === undefined ) {\n\n\t\t\t_geometry = new BufferGeometry();\n\n\t\t\tvar float32Array = new Float32Array( [\n\t\t\t\t- 0.5, - 0.5, 0, 0, 0,\n\t\t\t\t0.5, - 0.5, 0, 1, 0,\n\t\t\t\t0.5, 0.5, 0, 1, 1,\n\t\t\t\t- 0.5, 0.5, 0, 0, 1\n\t\t\t] );\n\n\t\t\tvar interleavedBuffer = new InterleavedBuffer( float32Array, 5 );\n\n\t\t\t_geometry.setIndex( [ 0, 1, 2,\t0, 2, 3 ] );\n\t\t\t_geometry.setAttribute( 'position', new InterleavedBufferAttribute( interleavedBuffer, 3, 0, false ) );\n\t\t\t_geometry.setAttribute( 'uv', new InterleavedBufferAttribute( interleavedBuffer, 2, 3, false ) );\n\n\t\t}\n\n\t\tthis.geometry = _geometry;\n\t\tthis.material = ( material !== undefined ) ? material : new SpriteMaterial();\n\n\t\tthis.center = new Vector2( 0.5, 0.5 );\n\n\t}\n\n\tSprite.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Sprite,\n\n\t\tisSprite: true,\n\n\t\traycast: function ( raycaster, intersects ) {\n\n\t\t\tif ( raycaster.camera === null ) {\n\n\t\t\t\tconsole.error( 'THREE.Sprite: \"Raycaster.camera\" needs to be set in order to raycast against sprites.' );\n\n\t\t\t}\n\n\t\t\t_worldScale.setFromMatrixScale( this.matrixWorld );\n\n\t\t\t_viewWorldMatrix.copy( raycaster.camera.matrixWorld );\n\t\t\tthis.modelViewMatrix.multiplyMatrices( raycaster.camera.matrixWorldInverse, this.matrixWorld );\n\n\t\t\t_mvPosition.setFromMatrixPosition( this.modelViewMatrix );\n\n\t\t\tif ( raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false ) {\n\n\t\t\t\t_worldScale.multiplyScalar( - _mvPosition.z );\n\n\t\t\t}\n\n\t\t\tvar rotation = this.material.rotation;\n\t\t\tvar sin, cos;\n\t\t\tif ( rotation !== 0 ) {\n\n\t\t\t\tcos = Math.cos( rotation );\n\t\t\t\tsin = Math.sin( rotation );\n\n\t\t\t}\n\n\t\t\tvar center = this.center;\n\n\t\t\ttransformVertex( _vA$1.set( - 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\t\ttransformVertex( _vB$1.set( 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\t\ttransformVertex( _vC$1.set( 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\n\t\t\t_uvA$1.set( 0, 0 );\n\t\t\t_uvB$1.set( 1, 0 );\n\t\t\t_uvC$1.set( 1, 1 );\n\n\t\t\t// check first triangle\n\t\t\tvar intersect = raycaster.ray.intersectTriangle( _vA$1, _vB$1, _vC$1, false, _intersectPoint );\n\n\t\t\tif ( intersect === null ) {\n\n\t\t\t\t// check second triangle\n\t\t\t\ttransformVertex( _vB$1.set( - 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\t\t\t_uvB$1.set( 0, 1 );\n\n\t\t\t\tintersect = raycaster.ray.intersectTriangle( _vA$1, _vC$1, _vB$1, false, _intersectPoint );\n\t\t\t\tif ( intersect === null ) {\n\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar distance = raycaster.ray.origin.distanceTo( _intersectPoint );\n\n\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) { return; }\n\n\t\t\tintersects.push( {\n\n\t\t\t\tdistance: distance,\n\t\t\t\tpoint: _intersectPoint.clone(),\n\t\t\t\tuv: Triangle.getUV( _intersectPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2() ),\n\t\t\t\tface: null,\n\t\t\t\tobject: this\n\n\t\t\t} );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.material ).copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source );\n\n\t\t\tif ( source.center !== undefined ) { this.center.copy( source.center ); }\n\n\t\t\treturn this;\n\n\t\t}\n\n\n\t} );\n\n\tfunction transformVertex( vertexPosition, mvPosition, center, scale, sin, cos ) {\n\n\t\t// compute position in camera space\n\t\t_alignedPosition.subVectors( vertexPosition, center ).addScalar( 0.5 ).multiply( scale );\n\n\t\t// to check if rotation is not zero\n\t\tif ( sin !== undefined ) {\n\n\t\t\t_rotatedPosition.x = ( cos * _alignedPosition.x ) - ( sin * _alignedPosition.y );\n\t\t\t_rotatedPosition.y = ( sin * _alignedPosition.x ) + ( cos * _alignedPosition.y );\n\n\t\t} else {\n\n\t\t\t_rotatedPosition.copy( _alignedPosition );\n\n\t\t}\n\n\n\t\tvertexPosition.copy( mvPosition );\n\t\tvertexPosition.x += _rotatedPosition.x;\n\t\tvertexPosition.y += _rotatedPosition.y;\n\n\t\t// transform to world space\n\t\tvertexPosition.applyMatrix4( _viewWorldMatrix );\n\n\t}\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _v1$4 = new Vector3();\n\tvar _v2$2 = new Vector3();\n\n\tfunction LOD() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'LOD';\n\n\t\tObject.defineProperties( this, {\n\t\t\tlevels: {\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: []\n\t\t\t}\n\t\t} );\n\n\t\tthis.autoUpdate = true;\n\n\t}\n\n\tLOD.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: LOD,\n\n\t\tisLOD: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source, false );\n\n\t\t\tvar levels = source.levels;\n\n\t\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tvar level = levels[ i ];\n\n\t\t\t\tthis.addLevel( level.object.clone(), level.distance );\n\n\t\t\t}\n\n\t\t\tthis.autoUpdate = source.autoUpdate;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddLevel: function ( object, distance ) {\n\n\t\t\tif ( distance === undefined ) { distance = 0; }\n\n\t\t\tdistance = Math.abs( distance );\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\n\t\t\t\tif ( distance < levels[ l ].distance ) {\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tlevels.splice( l, 0, { distance: distance, object: object } );\n\n\t\t\tthis.add( object );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetObjectForDistance: function ( distance ) {\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tif ( levels.length > 0 ) {\n\n\t\t\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\t\tif ( distance < levels[ i ].distance ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn levels[ i - 1 ].object;\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t},\n\n\t\traycast: function ( raycaster, intersects ) {\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tif ( levels.length > 0 ) {\n\n\t\t\t\t_v1$4.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( _v1$4 );\n\n\t\t\t\tthis.getObjectForDistance( distance ).raycast( raycaster, intersects );\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdate: function ( camera ) {\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tif ( levels.length > 1 ) {\n\n\t\t\t\t_v1$4.setFromMatrixPosition( camera.matrixWorld );\n\t\t\t\t_v2$2.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\t\tvar distance = _v1$4.distanceTo( _v2$2 );\n\n\t\t\t\tlevels[ 0 ].object.visible = true;\n\n\t\t\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\t\tif ( distance >= levels[ i ].distance ) {\n\n\t\t\t\t\t\tlevels[ i - 1 ].object.visible = false;\n\t\t\t\t\t\tlevels[ i ].object.visible = true;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tfor ( ; i < l; i ++ ) {\n\n\t\t\t\t\tlevels[ i ].object.visible = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tif ( this.autoUpdate === false ) { data.object.autoUpdate = false; }\n\n\t\t\tdata.object.levels = [];\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tvar level = levels[ i ];\n\n\t\t\t\tdata.object.levels.push( {\n\t\t\t\t\tobject: level.object.uuid,\n\t\t\t\t\tdistance: level.distance\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author ikerr / http://verold.com\n\t */\n\n\tfunction SkinnedMesh( geometry, material ) {\n\n\t\tif ( geometry && geometry.isGeometry ) {\n\n\t\t\tconsole.error( 'THREE.SkinnedMesh no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );\n\n\t\t}\n\n\t\tMesh.call( this, geometry, material );\n\n\t\tthis.type = 'SkinnedMesh';\n\n\t\tthis.bindMode = 'attached';\n\t\tthis.bindMatrix = new Matrix4();\n\t\tthis.bindMatrixInverse = new Matrix4();\n\n\t}\n\n\tSkinnedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {\n\n\t\tconstructor: SkinnedMesh,\n\n\t\tisSkinnedMesh: true,\n\n\t\tbind: function ( skeleton, bindMatrix ) {\n\n\t\t\tthis.skeleton = skeleton;\n\n\t\t\tif ( bindMatrix === undefined ) {\n\n\t\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\t\tthis.skeleton.calculateInverses();\n\n\t\t\t\tbindMatrix = this.matrixWorld;\n\n\t\t\t}\n\n\t\t\tthis.bindMatrix.copy( bindMatrix );\n\t\t\tthis.bindMatrixInverse.getInverse( bindMatrix );\n\n\t\t},\n\n\t\tpose: function () {\n\n\t\t\tthis.skeleton.pose();\n\n\t\t},\n\n\t\tnormalizeSkinWeights: function () {\n\n\t\t\tvar vector = new Vector4();\n\n\t\t\tvar skinWeight = this.geometry.attributes.skinWeight;\n\n\t\t\tfor ( var i = 0, l = skinWeight.count; i < l; i ++ ) {\n\n\t\t\t\tvector.x = skinWeight.getX( i );\n\t\t\t\tvector.y = skinWeight.getY( i );\n\t\t\t\tvector.z = skinWeight.getZ( i );\n\t\t\t\tvector.w = skinWeight.getW( i );\n\n\t\t\t\tvar scale = 1.0 / vector.manhattanLength();\n\n\t\t\t\tif ( scale !== Infinity ) {\n\n\t\t\t\t\tvector.multiplyScalar( scale );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvector.set( 1, 0, 0, 0 ); // do something reasonable\n\n\t\t\t\t}\n\n\t\t\t\tskinWeight.setXYZW( i, vector.x, vector.y, vector.z, vector.w );\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdateMatrixWorld: function ( force ) {\n\n\t\t\tMesh.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\tif ( this.bindMode === 'attached' ) {\n\n\t\t\t\tthis.bindMatrixInverse.getInverse( this.matrixWorld );\n\n\t\t\t} else if ( this.bindMode === 'detached' ) {\n\n\t\t\t\tthis.bindMatrixInverse.getInverse( this.bindMatrix );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode );\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author michael guerrero / http://realitymeltdown.com\n\t * @author ikerr / http://verold.com\n\t */\n\n\tvar _offsetMatrix = new Matrix4();\n\tvar _identityMatrix = new Matrix4();\n\n\tfunction Skeleton( bones, boneInverses ) {\n\n\t\t// copy the bone array\n\n\t\tbones = bones || [];\n\n\t\tthis.bones = bones.slice( 0 );\n\t\tthis.boneMatrices = new Float32Array( this.bones.length * 16 );\n\n\t\tthis.frame = - 1;\n\n\t\t// use the supplied bone inverses or calculate the inverses\n\n\t\tif ( boneInverses === undefined ) {\n\n\t\t\tthis.calculateInverses();\n\n\t\t} else {\n\n\t\t\tif ( this.bones.length === boneInverses.length ) {\n\n\t\t\t\tthis.boneInverses = boneInverses.slice( 0 );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.Skeleton boneInverses is the wrong length.' );\n\n\t\t\t\tthis.boneInverses = [];\n\n\t\t\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\t\tthis.boneInverses.push( new Matrix4() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tObject.assign( Skeleton.prototype, {\n\n\t\tcalculateInverses: function () {\n\n\t\t\tthis.boneInverses = [];\n\n\t\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\tvar inverse = new Matrix4();\n\n\t\t\t\tif ( this.bones[ i ] ) {\n\n\t\t\t\t\tinverse.getInverse( this.bones[ i ].matrixWorld );\n\n\t\t\t\t}\n\n\t\t\t\tthis.boneInverses.push( inverse );\n\n\t\t\t}\n\n\t\t},\n\n\t\tpose: function () {\n\n\t\t\tvar bone, i, il;\n\n\t\t\t// recover the bind-time world matrices\n\n\t\t\tfor ( i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\tbone = this.bones[ i ];\n\n\t\t\t\tif ( bone ) {\n\n\t\t\t\t\tbone.matrixWorld.getInverse( this.boneInverses[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// compute the local matrices, positions, rotations and scales\n\n\t\t\tfor ( i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\tbone = this.bones[ i ];\n\n\t\t\t\tif ( bone ) {\n\n\t\t\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\t\t\tbone.matrix.getInverse( bone.parent.matrixWorld );\n\t\t\t\t\t\tbone.matrix.multiply( bone.matrixWorld );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tbone.matrix.copy( bone.matrixWorld );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbone.matrix.decompose( bone.position, bone.quaternion, bone.scale );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdate: function () {\n\n\t\t\tvar bones = this.bones;\n\t\t\tvar boneInverses = this.boneInverses;\n\t\t\tvar boneMatrices = this.boneMatrices;\n\t\t\tvar boneTexture = this.boneTexture;\n\n\t\t\t// flatten bone matrices to array\n\n\t\t\tfor ( var i = 0, il = bones.length; i < il; i ++ ) {\n\n\t\t\t\t// compute the offset between the current and the original transform\n\n\t\t\t\tvar matrix = bones[ i ] ? bones[ i ].matrixWorld : _identityMatrix;\n\n\t\t\t\t_offsetMatrix.multiplyMatrices( matrix, boneInverses[ i ] );\n\t\t\t\t_offsetMatrix.toArray( boneMatrices, i * 16 );\n\n\t\t\t}\n\n\t\t\tif ( boneTexture !== undefined ) {\n\n\t\t\t\tboneTexture.needsUpdate = true;\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new Skeleton( this.bones, this.boneInverses );\n\n\t\t},\n\n\t\tgetBoneByName: function ( name ) {\n\n\t\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\tvar bone = this.bones[ i ];\n\n\t\t\t\tif ( bone.name === name ) {\n\n\t\t\t\t\treturn bone;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn undefined;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author ikerr / http://verold.com\n\t */\n\n\tfunction Bone() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Bone';\n\n\t}\n\n\tBone.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Bone,\n\n\t\tisBone: true\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _instanceLocalMatrix = new Matrix4();\n\tvar _instanceWorldMatrix = new Matrix4();\n\n\tvar _instanceIntersects = [];\n\n\tvar _mesh = new Mesh();\n\n\tfunction InstancedMesh( geometry, material, count ) {\n\n\t\tMesh.call( this, geometry, material );\n\n\t\tthis.instanceMatrix = new BufferAttribute( new Float32Array( count * 16 ), 16 );\n\n\t\tthis.count = count;\n\n\t\tthis.frustumCulled = false;\n\n\t}\n\n\tInstancedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {\n\n\t\tconstructor: InstancedMesh,\n\n\t\tisInstancedMesh: true,\n\n\t\tgetMatrixAt: function ( index, matrix ) {\n\n\t\t\tmatrix.fromArray( this.instanceMatrix.array, index * 16 );\n\n\t\t},\n\n\t\traycast: function ( raycaster, intersects ) {\n\n\t\t\tvar matrixWorld = this.matrixWorld;\n\t\t\tvar raycastTimes = this.count;\n\n\t\t\t_mesh.geometry = this.geometry;\n\t\t\t_mesh.material = this.material;\n\n\t\t\tif ( _mesh.material === undefined ) { return; }\n\n\t\t\tfor ( var instanceId = 0; instanceId < raycastTimes; instanceId ++ ) {\n\n\t\t\t\t// calculate the world matrix for each instance\n\n\t\t\t\tthis.getMatrixAt( instanceId, _instanceLocalMatrix );\n\n\t\t\t\t_instanceWorldMatrix.multiplyMatrices( matrixWorld, _instanceLocalMatrix );\n\n\t\t\t\t// the mesh represents this single instance\n\n\t\t\t\t_mesh.matrixWorld = _instanceWorldMatrix;\n\n\t\t\t\t_mesh.raycast( raycaster, _instanceIntersects );\n\n\t\t\t\t// process the result of raycast\n\n\t\t\t\tif ( _instanceIntersects.length > 0 ) {\n\n\t\t\t\t\t_instanceIntersects[ 0 ].instanceId = instanceId;\n\t\t\t\t\t_instanceIntersects[ 0 ].object = this;\n\n\t\t\t\t\tintersects.push( _instanceIntersects[ 0 ] );\n\n\t\t\t\t\t_instanceIntersects.length = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tsetMatrixAt: function ( index, matrix ) {\n\n\t\t\tmatrix.toArray( this.instanceMatrix.array, index * 16 );\n\n\t\t},\n\n\t\tupdateMorphTargets: function () {\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *\n\t *  linewidth: <float>,\n\t *  linecap: \"round\",\n\t *  linejoin: \"round\"\n\t * }\n\t */\n\n\tfunction LineBasicMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'LineBasicMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.linewidth = 1;\n\t\tthis.linecap = 'round';\n\t\tthis.linejoin = 'round';\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tLineBasicMaterial.prototype = Object.create( Material.prototype );\n\tLineBasicMaterial.prototype.constructor = LineBasicMaterial;\n\n\tLineBasicMaterial.prototype.isLineBasicMaterial = true;\n\n\tLineBasicMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.linewidth = source.linewidth;\n\t\tthis.linecap = source.linecap;\n\t\tthis.linejoin = source.linejoin;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _start = new Vector3();\n\tvar _end = new Vector3();\n\tvar _inverseMatrix$1 = new Matrix4();\n\tvar _ray$1 = new Ray();\n\tvar _sphere$2 = new Sphere();\n\n\tfunction Line( geometry, material, mode ) {\n\n\t\tif ( mode === 1 ) {\n\n\t\t\tconsole.error( 'THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.LineSegments instead.' );\n\n\t\t}\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Line';\n\n\t\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\t\tthis.material = material !== undefined ? material : new LineBasicMaterial();\n\n\t}\n\n\tLine.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Line,\n\n\t\tisLine: true,\n\n\t\tcomputeLineDistances: function () {\n\n\t\t\tvar geometry = this.geometry;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\t// we assume non-indexed geometry\n\n\t\t\t\tif ( geometry.index === null ) {\n\n\t\t\t\t\tvar positionAttribute = geometry.attributes.position;\n\t\t\t\t\tvar lineDistances = [ 0 ];\n\n\t\t\t\t\tfor ( var i = 1, l = positionAttribute.count; i < l; i ++ ) {\n\n\t\t\t\t\t\t_start.fromBufferAttribute( positionAttribute, i - 1 );\n\t\t\t\t\t\t_end.fromBufferAttribute( positionAttribute, i );\n\n\t\t\t\t\t\tlineDistances[ i ] = lineDistances[ i - 1 ];\n\t\t\t\t\t\tlineDistances[ i ] += _start.distanceTo( _end );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\n\n\t\t\t\t}\n\n\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\tvar lineDistances = geometry.lineDistances;\n\n\t\t\t\tlineDistances[ 0 ] = 0;\n\n\t\t\t\tfor ( var i = 1, l = vertices.length; i < l; i ++ ) {\n\n\t\t\t\t\tlineDistances[ i ] = lineDistances[ i - 1 ];\n\t\t\t\t\tlineDistances[ i ] += vertices[ i - 1 ].distanceTo( vertices[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\traycast: function ( raycaster, intersects ) {\n\n\t\t\tvar precision = raycaster.linePrecision;\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\n\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\tif ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }\n\n\t\t\t_sphere$2.copy( geometry.boundingSphere );\n\t\t\t_sphere$2.applyMatrix4( matrixWorld );\n\t\t\t_sphere$2.radius += precision;\n\n\t\t\tif ( raycaster.ray.intersectsSphere( _sphere$2 ) === false ) { return; }\n\n\t\t\t//\n\n\t\t\t_inverseMatrix$1.getInverse( matrixWorld );\n\t\t\t_ray$1.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$1 );\n\n\t\t\tvar localPrecision = precision / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n\t\t\tvar localPrecisionSq = localPrecision * localPrecision;\n\n\t\t\tvar vStart = new Vector3();\n\t\t\tvar vEnd = new Vector3();\n\t\t\tvar interSegment = new Vector3();\n\t\t\tvar interRay = new Vector3();\n\t\t\tvar step = ( this && this.isLineSegments ) ? 2 : 1;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\tfor ( var i = 0, l = indices.length - 1; i < l; i += step ) {\n\n\t\t\t\t\t\tvar a = indices[ i ];\n\t\t\t\t\t\tvar b = indices[ i + 1 ];\n\n\t\t\t\t\t\tvStart.fromArray( positions, a * 3 );\n\t\t\t\t\t\tvEnd.fromArray( positions, b * 3 );\n\n\t\t\t\t\t\tvar distSq = _ray$1.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n\t\t\t\t\t\tif ( distSq > localPrecisionSq ) { continue; }\n\n\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) { continue; }\n\n\t\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfor ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {\n\n\t\t\t\t\t\tvStart.fromArray( positions, 3 * i );\n\t\t\t\t\t\tvEnd.fromArray( positions, 3 * i + 3 );\n\n\t\t\t\t\t\tvar distSq = _ray$1.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n\t\t\t\t\t\tif ( distSq > localPrecisionSq ) { continue; }\n\n\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) { continue; }\n\n\t\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\tvar nbVertices = vertices.length;\n\n\t\t\t\tfor ( var i = 0; i < nbVertices - 1; i += step ) {\n\n\t\t\t\t\tvar distSq = _ray$1.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );\n\n\t\t\t\t\tif ( distSq > localPrecisionSq ) { continue; }\n\n\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) { continue; }\n\n\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\tface: null,\n\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _start$1 = new Vector3();\n\tvar _end$1 = new Vector3();\n\n\tfunction LineSegments( geometry, material ) {\n\n\t\tLine.call( this, geometry, material );\n\n\t\tthis.type = 'LineSegments';\n\n\t}\n\n\tLineSegments.prototype = Object.assign( Object.create( Line.prototype ), {\n\n\t\tconstructor: LineSegments,\n\n\t\tisLineSegments: true,\n\n\t\tcomputeLineDistances: function () {\n\n\t\t\tvar geometry = this.geometry;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\t// we assume non-indexed geometry\n\n\t\t\t\tif ( geometry.index === null ) {\n\n\t\t\t\t\tvar positionAttribute = geometry.attributes.position;\n\t\t\t\t\tvar lineDistances = [];\n\n\t\t\t\t\tfor ( var i = 0, l = positionAttribute.count; i < l; i += 2 ) {\n\n\t\t\t\t\t\t_start$1.fromBufferAttribute( positionAttribute, i );\n\t\t\t\t\t\t_end$1.fromBufferAttribute( positionAttribute, i + 1 );\n\n\t\t\t\t\t\tlineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];\n\t\t\t\t\t\tlineDistances[ i + 1 ] = lineDistances[ i ] + _start$1.distanceTo( _end$1 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\n\n\t\t\t\t}\n\n\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\tvar lineDistances = geometry.lineDistances;\n\n\t\t\t\tfor ( var i = 0, l = vertices.length; i < l; i += 2 ) {\n\n\t\t\t\t\t_start$1.copy( vertices[ i ] );\n\t\t\t\t\t_end$1.copy( vertices[ i + 1 ] );\n\n\t\t\t\t\tlineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];\n\t\t\t\t\tlineDistances[ i + 1 ] = lineDistances[ i ] + _start$1.distanceTo( _end$1 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mgreter / http://github.com/mgreter\n\t */\n\n\tfunction LineLoop( geometry, material ) {\n\n\t\tLine.call( this, geometry, material );\n\n\t\tthis.type = 'LineLoop';\n\n\t}\n\n\tLineLoop.prototype = Object.assign( Object.create( Line.prototype ), {\n\n\t\tconstructor: LineLoop,\n\n\t\tisLineLoop: true,\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *  map: new THREE.Texture( <Image> ),\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  size: <float>,\n\t *  sizeAttenuation: <bool>\n\t *\n\t *  morphTargets: <bool>\n\t * }\n\t */\n\n\tfunction PointsMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'PointsMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.size = 1;\n\t\tthis.sizeAttenuation = true;\n\n\t\tthis.morphTargets = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tPointsMaterial.prototype = Object.create( Material.prototype );\n\tPointsMaterial.prototype.constructor = PointsMaterial;\n\n\tPointsMaterial.prototype.isPointsMaterial = true;\n\n\tPointsMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.size = source.size;\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\n\t\tthis.morphTargets = source.morphTargets;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tvar _inverseMatrix$2 = new Matrix4();\n\tvar _ray$2 = new Ray();\n\tvar _sphere$3 = new Sphere();\n\tvar _position$1 = new Vector3();\n\n\tfunction Points( geometry, material ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Points';\n\n\t\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\t\tthis.material = material !== undefined ? material : new PointsMaterial();\n\n\t\tthis.updateMorphTargets();\n\n\t}\n\n\tPoints.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Points,\n\n\t\tisPoints: true,\n\n\t\traycast: function ( raycaster, intersects ) {\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\t\t\tvar threshold = raycaster.params.Points.threshold;\n\n\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\tif ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }\n\n\t\t\t_sphere$3.copy( geometry.boundingSphere );\n\t\t\t_sphere$3.applyMatrix4( matrixWorld );\n\t\t\t_sphere$3.radius += threshold;\n\n\t\t\tif ( raycaster.ray.intersectsSphere( _sphere$3 ) === false ) { return; }\n\n\t\t\t//\n\n\t\t\t_inverseMatrix$2.getInverse( matrixWorld );\n\t\t\t_ray$2.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$2 );\n\n\t\t\tvar localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n\t\t\tvar localThresholdSq = localThreshold * localThreshold;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\tfor ( var i = 0, il = indices.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar a = indices[ i ];\n\n\t\t\t\t\t\t_position$1.fromArray( positions, a * 3 );\n\n\t\t\t\t\t\ttestPoint( _position$1, a, localThresholdSq, matrixWorld, raycaster, intersects, this );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfor ( var i = 0, l = positions.length / 3; i < l; i ++ ) {\n\n\t\t\t\t\t\t_position$1.fromArray( positions, i * 3 );\n\n\t\t\t\t\t\ttestPoint( _position$1, i, localThresholdSq, matrixWorld, raycaster, intersects, this );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar vertices = geometry.vertices;\n\n\t\t\t\tfor ( var i = 0, l = vertices.length; i < l; i ++ ) {\n\n\t\t\t\t\ttestPoint( vertices[ i ], i, localThresholdSq, matrixWorld, raycaster, intersects, this );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdateMorphTargets: function () {\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar m, ml, name;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tvar morphAttributes = geometry.morphAttributes;\n\t\t\t\tvar keys = Object.keys( morphAttributes );\n\n\t\t\t\tif ( keys.length > 0 ) {\n\n\t\t\t\t\tvar morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\t\tfor ( m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\t\tname = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar morphTargets = geometry.morphTargets;\n\n\t\t\t\tif ( morphTargets !== undefined && morphTargets.length > 0 ) {\n\n\t\t\t\t\tconsole.error( 'THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t\t}\n\n\t} );\n\n\tfunction testPoint( point, index, localThresholdSq, matrixWorld, raycaster, intersects, object ) {\n\n\t\tvar rayPointDistanceSq = _ray$2.distanceSqToPoint( point );\n\n\t\tif ( rayPointDistanceSq < localThresholdSq ) {\n\n\t\t\tvar intersectPoint = new Vector3();\n\n\t\t\t_ray$2.closestPointToPoint( point, intersectPoint );\n\t\t\tintersectPoint.applyMatrix4( matrixWorld );\n\n\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectPoint );\n\n\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) { return; }\n\n\t\t\tintersects.push( {\n\n\t\t\t\tdistance: distance,\n\t\t\t\tdistanceToRay: Math.sqrt( rayPointDistanceSq ),\n\t\t\t\tpoint: intersectPoint,\n\t\t\t\tindex: index,\n\t\t\t\tface: null,\n\t\t\t\tobject: object\n\n\t\t\t} );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction VideoTexture( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\t\tTexture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.format = format !== undefined ? format : RGBFormat;\n\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : LinearFilter;\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\n\n\t\tthis.generateMipmaps = false;\n\n\t}\n\n\tVideoTexture.prototype = Object.assign( Object.create( Texture.prototype ), {\n\n\t\tconstructor: VideoTexture,\n\n\t\tisVideoTexture: true,\n\n\t\tupdate: function () {\n\n\t\t\tvar video = this.image;\n\n\t\t\tif ( video.readyState >= video.HAVE_CURRENT_DATA ) {\n\n\t\t\t\tthis.needsUpdate = true;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction CompressedTexture( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\n\t\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\t\tthis.image = { width: width, height: height };\n\t\tthis.mipmaps = mipmaps;\n\n\t\t// no flipping for cube textures\n\t\t// (also flipping doesn't work for compressed textures )\n\n\t\tthis.flipY = false;\n\n\t\t// can't generate mipmaps for compressed textures\n\t\t// mips must be embedded in DDS files\n\n\t\tthis.generateMipmaps = false;\n\n\t}\n\n\tCompressedTexture.prototype = Object.create( Texture.prototype );\n\tCompressedTexture.prototype.constructor = CompressedTexture;\n\n\tCompressedTexture.prototype.isCompressedTexture = true;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction CanvasTexture( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\t\tTexture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n\tCanvasTexture.prototype = Object.create( Texture.prototype );\n\tCanvasTexture.prototype.constructor = CanvasTexture;\n\tCanvasTexture.prototype.isCanvasTexture = true;\n\n\t/**\n\t * @author Matt DesLauriers / @mattdesl\n\t * @author atix / arthursilber.de\n\t */\n\n\tfunction DepthTexture( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {\n\n\t\tformat = format !== undefined ? format : DepthFormat;\n\n\t\tif ( format !== DepthFormat && format !== DepthStencilFormat ) {\n\n\t\t\tthrow new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' );\n\n\t\t}\n\n\t\tif ( type === undefined && format === DepthFormat ) { type = UnsignedShortType; }\n\t\tif ( type === undefined && format === DepthStencilFormat ) { type = UnsignedInt248Type; }\n\n\t\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.image = { width: width, height: height };\n\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\n\t\tthis.flipY = false;\n\t\tthis.generateMipmaps\t= false;\n\n\t}\n\n\tDepthTexture.prototype = Object.create( Texture.prototype );\n\tDepthTexture.prototype.constructor = DepthTexture;\n\tDepthTexture.prototype.isDepthTexture = true;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction WireframeGeometry( geometry ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'WireframeGeometry';\n\n\t\t// buffer\n\n\t\tvar vertices = [];\n\n\t\t// helper variables\n\n\t\tvar i, j, l, o, ol;\n\t\tvar edge = [ 0, 0 ], edges = {}, e, edge1, edge2;\n\t\tvar key, keys = [ 'a', 'b', 'c' ];\n\t\tvar vertex;\n\n\t\t// different logic for Geometry and BufferGeometry\n\n\t\tif ( geometry && geometry.isGeometry ) {\n\n\t\t\t// create a data structure that contains all edges without duplicates\n\n\t\t\tvar faces = geometry.faces;\n\n\t\t\tfor ( i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\tedge1 = face[ keys[ j ] ];\n\t\t\t\t\tedge2 = face[ keys[ ( j + 1 ) % 3 ] ];\n\t\t\t\t\tedge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates\n\t\t\t\t\tedge[ 1 ] = Math.max( edge1, edge2 );\n\n\t\t\t\t\tkey = edge[ 0 ] + ',' + edge[ 1 ];\n\n\t\t\t\t\tif ( edges[ key ] === undefined ) {\n\n\t\t\t\t\t\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// generate vertices\n\n\t\t\tfor ( key in edges ) {\n\n\t\t\t\te = edges[ key ];\n\n\t\t\t\tvertex = geometry.vertices[ e.index1 ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\tvertex = geometry.vertices[ e.index2 ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t} else if ( geometry && geometry.isBufferGeometry ) {\n\n\t\t\tvar position, indices, groups;\n\t\t\tvar group, start, count;\n\t\t\tvar index1, index2;\n\n\t\t\tvertex = new Vector3();\n\n\t\t\tif ( geometry.index !== null ) {\n\n\t\t\t\t// indexed BufferGeometry\n\n\t\t\t\tposition = geometry.attributes.position;\n\t\t\t\tindices = geometry.index;\n\t\t\t\tgroups = geometry.groups;\n\n\t\t\t\tif ( groups.length === 0 ) {\n\n\t\t\t\t\tgroups = [ { start: 0, count: indices.count, materialIndex: 0 } ];\n\n\t\t\t\t}\n\n\t\t\t\t// create a data structure that contains all eges without duplicates\n\n\t\t\t\tfor ( o = 0, ol = groups.length; o < ol; ++ o ) {\n\n\t\t\t\t\tgroup = groups[ o ];\n\n\t\t\t\t\tstart = group.start;\n\t\t\t\t\tcount = group.count;\n\n\t\t\t\t\tfor ( i = start, l = ( start + count ); i < l; i += 3 ) {\n\n\t\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\t\tedge1 = indices.getX( i + j );\n\t\t\t\t\t\t\tedge2 = indices.getX( i + ( j + 1 ) % 3 );\n\t\t\t\t\t\t\tedge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates\n\t\t\t\t\t\t\tedge[ 1 ] = Math.max( edge1, edge2 );\n\n\t\t\t\t\t\t\tkey = edge[ 0 ] + ',' + edge[ 1 ];\n\n\t\t\t\t\t\t\tif ( edges[ key ] === undefined ) {\n\n\t\t\t\t\t\t\t\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// generate vertices\n\n\t\t\t\tfor ( key in edges ) {\n\n\t\t\t\t\te = edges[ key ];\n\n\t\t\t\t\tvertex.fromBufferAttribute( position, e.index1 );\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\tvertex.fromBufferAttribute( position, e.index2 );\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// non-indexed BufferGeometry\n\n\t\t\t\tposition = geometry.attributes.position;\n\n\t\t\t\tfor ( i = 0, l = ( position.count / 3 ); i < l; i ++ ) {\n\n\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\t// three edges per triangle, an edge is represented as (index1, index2)\n\t\t\t\t\t\t// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)\n\n\t\t\t\t\t\tindex1 = 3 * i + j;\n\t\t\t\t\t\tvertex.fromBufferAttribute( position, index1 );\n\t\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\t\tindex2 = 3 * i + ( ( j + 1 ) % 3 );\n\t\t\t\t\t\tvertex.fromBufferAttribute( position, index2 );\n\t\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\n\t}\n\n\tWireframeGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tWireframeGeometry.prototype.constructor = WireframeGeometry;\n\n\t/**\n\t * @author zz85 / https://github.com/zz85\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t * Parametric Surfaces Geometry\n\t * based on the brilliant article by @prideout https://prideout.net/blog/old/blog/index.html@p=44.html\n\t */\n\n\t// ParametricGeometry\n\n\tfunction ParametricGeometry( func, slices, stacks ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'ParametricGeometry';\n\n\t\tthis.parameters = {\n\t\t\tfunc: func,\n\t\t\tslices: slices,\n\t\t\tstacks: stacks\n\t\t};\n\n\t\tthis.fromBufferGeometry( new ParametricBufferGeometry( func, slices, stacks ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tParametricGeometry.prototype = Object.create( Geometry.prototype );\n\tParametricGeometry.prototype.constructor = ParametricGeometry;\n\n\t// ParametricBufferGeometry\n\n\tfunction ParametricBufferGeometry( func, slices, stacks ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'ParametricBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tfunc: func,\n\t\t\tslices: slices,\n\t\t\tstacks: stacks\n\t\t};\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\tvar EPS = 0.00001;\n\n\t\tvar normal = new Vector3();\n\n\t\tvar p0 = new Vector3(), p1 = new Vector3();\n\t\tvar pu = new Vector3(), pv = new Vector3();\n\n\t\tvar i, j;\n\n\t\tif ( func.length < 3 ) {\n\n\t\t\tconsole.error( 'THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.' );\n\n\t\t}\n\n\t\t// generate vertices, normals and uvs\n\n\t\tvar sliceCount = slices + 1;\n\n\t\tfor ( i = 0; i <= stacks; i ++ ) {\n\n\t\t\tvar v = i / stacks;\n\n\t\t\tfor ( j = 0; j <= slices; j ++ ) {\n\n\t\t\t\tvar u = j / slices;\n\n\t\t\t\t// vertex\n\n\t\t\t\tfunc( u, v, p0 );\n\t\t\t\tvertices.push( p0.x, p0.y, p0.z );\n\n\t\t\t\t// normal\n\n\t\t\t\t// approximate tangent vectors via finite differences\n\n\t\t\t\tif ( u - EPS >= 0 ) {\n\n\t\t\t\t\tfunc( u - EPS, v, p1 );\n\t\t\t\t\tpu.subVectors( p0, p1 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfunc( u + EPS, v, p1 );\n\t\t\t\t\tpu.subVectors( p1, p0 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( v - EPS >= 0 ) {\n\n\t\t\t\t\tfunc( u, v - EPS, p1 );\n\t\t\t\t\tpv.subVectors( p0, p1 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfunc( u, v + EPS, p1 );\n\t\t\t\t\tpv.subVectors( p1, p0 );\n\n\t\t\t\t}\n\n\t\t\t\t// cross product of tangent vectors returns surface normal\n\n\t\t\t\tnormal.crossVectors( pu, pv ).normalize();\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( u, v );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( i = 0; i < stacks; i ++ ) {\n\n\t\t\tfor ( j = 0; j < slices; j ++ ) {\n\n\t\t\t\tvar a = i * sliceCount + j;\n\t\t\t\tvar b = i * sliceCount + j + 1;\n\t\t\t\tvar c = ( i + 1 ) * sliceCount + j + 1;\n\t\t\t\tvar d = ( i + 1 ) * sliceCount + j;\n\n\t\t\t\t// faces one and two\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tParametricBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tParametricBufferGeometry.prototype.constructor = ParametricBufferGeometry;\n\n\t/**\n\t * @author clockworkgeek / https://github.com/clockworkgeek\n\t * @author timothypratley / https://github.com/timothypratley\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// PolyhedronGeometry\n\n\tfunction PolyhedronGeometry( vertices, indices, radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'PolyhedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tvertices: vertices,\n\t\t\tindices: indices,\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new PolyhedronBufferGeometry( vertices, indices, radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tPolyhedronGeometry.prototype = Object.create( Geometry.prototype );\n\tPolyhedronGeometry.prototype.constructor = PolyhedronGeometry;\n\n\t// PolyhedronBufferGeometry\n\n\tfunction PolyhedronBufferGeometry( vertices, indices, radius, detail ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'PolyhedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tvertices: vertices,\n\t\t\tindices: indices,\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tradius = radius || 1;\n\t\tdetail = detail || 0;\n\n\t\t// default buffer data\n\n\t\tvar vertexBuffer = [];\n\t\tvar uvBuffer = [];\n\n\t\t// the subdivision creates the vertex buffer data\n\n\t\tsubdivide( detail );\n\n\t\t// all vertices should lie on a conceptual sphere with a given radius\n\n\t\tapplyRadius( radius );\n\n\t\t// finally, create the uv data\n\n\t\tgenerateUVs();\n\n\t\t// build non-indexed geometry\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertexBuffer, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( vertexBuffer.slice(), 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvBuffer, 2 ) );\n\n\t\tif ( detail === 0 ) {\n\n\t\t\tthis.computeVertexNormals(); // flat normals\n\n\t\t} else {\n\n\t\t\tthis.normalizeNormals(); // smooth normals\n\n\t\t}\n\n\t\t// helper functions\n\n\t\tfunction subdivide( detail ) {\n\n\t\t\tvar a = new Vector3();\n\t\t\tvar b = new Vector3();\n\t\t\tvar c = new Vector3();\n\n\t\t\t// iterate over all faces and apply a subdivison with the given detail value\n\n\t\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\n\n\t\t\t\t// get the vertices of the face\n\n\t\t\t\tgetVertexByIndex( indices[ i + 0 ], a );\n\t\t\t\tgetVertexByIndex( indices[ i + 1 ], b );\n\t\t\t\tgetVertexByIndex( indices[ i + 2 ], c );\n\n\t\t\t\t// perform subdivision\n\n\t\t\t\tsubdivideFace( a, b, c, detail );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction subdivideFace( a, b, c, detail ) {\n\n\t\t\tvar cols = Math.pow( 2, detail );\n\n\t\t\t// we use this multidimensional array as a data structure for creating the subdivision\n\n\t\t\tvar v = [];\n\n\t\t\tvar i, j;\n\n\t\t\t// construct all of the vertices for this subdivision\n\n\t\t\tfor ( i = 0; i <= cols; i ++ ) {\n\n\t\t\t\tv[ i ] = [];\n\n\t\t\t\tvar aj = a.clone().lerp( c, i / cols );\n\t\t\t\tvar bj = b.clone().lerp( c, i / cols );\n\n\t\t\t\tvar rows = cols - i;\n\n\t\t\t\tfor ( j = 0; j <= rows; j ++ ) {\n\n\t\t\t\t\tif ( j === 0 && i === cols ) {\n\n\t\t\t\t\t\tv[ i ][ j ] = aj;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tv[ i ][ j ] = aj.clone().lerp( bj, j / rows );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// construct all of the faces\n\n\t\t\tfor ( i = 0; i < cols; i ++ ) {\n\n\t\t\t\tfor ( j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {\n\n\t\t\t\t\tvar k = Math.floor( j / 2 );\n\n\t\t\t\t\tif ( j % 2 === 0 ) {\n\n\t\t\t\t\t\tpushVertex( v[ i ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k ] );\n\t\t\t\t\t\tpushVertex( v[ i ][ k ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tpushVertex( v[ i ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction applyRadius( radius ) {\n\n\t\t\tvar vertex = new Vector3();\n\n\t\t\t// iterate over the entire buffer and apply the radius to each vertex\n\n\t\t\tfor ( var i = 0; i < vertexBuffer.length; i += 3 ) {\n\n\t\t\t\tvertex.x = vertexBuffer[ i + 0 ];\n\t\t\t\tvertex.y = vertexBuffer[ i + 1 ];\n\t\t\t\tvertex.z = vertexBuffer[ i + 2 ];\n\n\t\t\t\tvertex.normalize().multiplyScalar( radius );\n\n\t\t\t\tvertexBuffer[ i + 0 ] = vertex.x;\n\t\t\t\tvertexBuffer[ i + 1 ] = vertex.y;\n\t\t\t\tvertexBuffer[ i + 2 ] = vertex.z;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateUVs() {\n\n\t\t\tvar vertex = new Vector3();\n\n\t\t\tfor ( var i = 0; i < vertexBuffer.length; i += 3 ) {\n\n\t\t\t\tvertex.x = vertexBuffer[ i + 0 ];\n\t\t\t\tvertex.y = vertexBuffer[ i + 1 ];\n\t\t\t\tvertex.z = vertexBuffer[ i + 2 ];\n\n\t\t\t\tvar u = azimuth( vertex ) / 2 / Math.PI + 0.5;\n\t\t\t\tvar v = inclination( vertex ) / Math.PI + 0.5;\n\t\t\t\tuvBuffer.push( u, 1 - v );\n\n\t\t\t}\n\n\t\t\tcorrectUVs();\n\n\t\t\tcorrectSeam();\n\n\t\t}\n\n\t\tfunction correctSeam() {\n\n\t\t\t// handle case when face straddles the seam, see #3269\n\n\t\t\tfor ( var i = 0; i < uvBuffer.length; i += 6 ) {\n\n\t\t\t\t// uv data of a single face\n\n\t\t\t\tvar x0 = uvBuffer[ i + 0 ];\n\t\t\t\tvar x1 = uvBuffer[ i + 2 ];\n\t\t\t\tvar x2 = uvBuffer[ i + 4 ];\n\n\t\t\t\tvar max = Math.max( x0, x1, x2 );\n\t\t\t\tvar min = Math.min( x0, x1, x2 );\n\n\t\t\t\t// 0.9 is somewhat arbitrary\n\n\t\t\t\tif ( max > 0.9 && min < 0.1 ) {\n\n\t\t\t\t\tif ( x0 < 0.2 ) { uvBuffer[ i + 0 ] += 1; }\n\t\t\t\t\tif ( x1 < 0.2 ) { uvBuffer[ i + 2 ] += 1; }\n\t\t\t\t\tif ( x2 < 0.2 ) { uvBuffer[ i + 4 ] += 1; }\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction pushVertex( vertex ) {\n\n\t\t\tvertexBuffer.push( vertex.x, vertex.y, vertex.z );\n\n\t\t}\n\n\t\tfunction getVertexByIndex( index, vertex ) {\n\n\t\t\tvar stride = index * 3;\n\n\t\t\tvertex.x = vertices[ stride + 0 ];\n\t\t\tvertex.y = vertices[ stride + 1 ];\n\t\t\tvertex.z = vertices[ stride + 2 ];\n\n\t\t}\n\n\t\tfunction correctUVs() {\n\n\t\t\tvar a = new Vector3();\n\t\t\tvar b = new Vector3();\n\t\t\tvar c = new Vector3();\n\n\t\t\tvar centroid = new Vector3();\n\n\t\t\tvar uvA = new Vector2();\n\t\t\tvar uvB = new Vector2();\n\t\t\tvar uvC = new Vector2();\n\n\t\t\tfor ( var i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6 ) {\n\n\t\t\t\ta.set( vertexBuffer[ i + 0 ], vertexBuffer[ i + 1 ], vertexBuffer[ i + 2 ] );\n\t\t\t\tb.set( vertexBuffer[ i + 3 ], vertexBuffer[ i + 4 ], vertexBuffer[ i + 5 ] );\n\t\t\t\tc.set( vertexBuffer[ i + 6 ], vertexBuffer[ i + 7 ], vertexBuffer[ i + 8 ] );\n\n\t\t\t\tuvA.set( uvBuffer[ j + 0 ], uvBuffer[ j + 1 ] );\n\t\t\t\tuvB.set( uvBuffer[ j + 2 ], uvBuffer[ j + 3 ] );\n\t\t\t\tuvC.set( uvBuffer[ j + 4 ], uvBuffer[ j + 5 ] );\n\n\t\t\t\tcentroid.copy( a ).add( b ).add( c ).divideScalar( 3 );\n\n\t\t\t\tvar azi = azimuth( centroid );\n\n\t\t\t\tcorrectUV( uvA, j + 0, a, azi );\n\t\t\t\tcorrectUV( uvB, j + 2, b, azi );\n\t\t\t\tcorrectUV( uvC, j + 4, c, azi );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction correctUV( uv, stride, vector, azimuth ) {\n\n\t\t\tif ( ( azimuth < 0 ) && ( uv.x === 1 ) ) {\n\n\t\t\t\tuvBuffer[ stride ] = uv.x - 1;\n\n\t\t\t}\n\n\t\t\tif ( ( vector.x === 0 ) && ( vector.z === 0 ) ) {\n\n\t\t\t\tuvBuffer[ stride ] = azimuth / 2 / Math.PI + 0.5;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Angle around the Y axis, counter-clockwise when looking from above.\n\n\t\tfunction azimuth( vector ) {\n\n\t\t\treturn Math.atan2( vector.z, - vector.x );\n\n\t\t}\n\n\n\t\t// Angle above the XZ plane.\n\n\t\tfunction inclination( vector ) {\n\n\t\t\treturn Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );\n\n\t\t}\n\n\t}\n\n\tPolyhedronBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tPolyhedronBufferGeometry.prototype.constructor = PolyhedronBufferGeometry;\n\n\t/**\n\t * @author timothypratley / https://github.com/timothypratley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// TetrahedronGeometry\n\n\tfunction TetrahedronGeometry( radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TetrahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new TetrahedronBufferGeometry( radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTetrahedronGeometry.prototype = Object.create( Geometry.prototype );\n\tTetrahedronGeometry.prototype.constructor = TetrahedronGeometry;\n\n\t// TetrahedronBufferGeometry\n\n\tfunction TetrahedronBufferGeometry( radius, detail ) {\n\n\t\tvar vertices = [\n\t\t\t1, 1, 1, \t- 1, - 1, 1, \t- 1, 1, - 1, \t1, - 1, - 1\n\t\t];\n\n\t\tvar indices = [\n\t\t\t2, 1, 0, \t0, 3, 2,\t1, 3, 0,\t2, 3, 1\n\t\t];\n\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\t\tthis.type = 'TetrahedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tTetrahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\n\tTetrahedronBufferGeometry.prototype.constructor = TetrahedronBufferGeometry;\n\n\t/**\n\t * @author timothypratley / https://github.com/timothypratley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// OctahedronGeometry\n\n\tfunction OctahedronGeometry( radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'OctahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new OctahedronBufferGeometry( radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tOctahedronGeometry.prototype = Object.create( Geometry.prototype );\n\tOctahedronGeometry.prototype.constructor = OctahedronGeometry;\n\n\t// OctahedronBufferGeometry\n\n\tfunction OctahedronBufferGeometry( radius, detail ) {\n\n\t\tvar vertices = [\n\t\t\t1, 0, 0, \t- 1, 0, 0,\t0, 1, 0,\n\t\t\t0, - 1, 0, \t0, 0, 1,\t0, 0, - 1\n\t\t];\n\n\t\tvar indices = [\n\t\t\t0, 2, 4,\t0, 4, 3,\t0, 3, 5,\n\t\t\t0, 5, 2,\t1, 2, 5,\t1, 5, 3,\n\t\t\t1, 3, 4,\t1, 4, 2\n\t\t];\n\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\t\tthis.type = 'OctahedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tOctahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\n\tOctahedronBufferGeometry.prototype.constructor = OctahedronBufferGeometry;\n\n\t/**\n\t * @author timothypratley / https://github.com/timothypratley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// IcosahedronGeometry\n\n\tfunction IcosahedronGeometry( radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'IcosahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new IcosahedronBufferGeometry( radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tIcosahedronGeometry.prototype = Object.create( Geometry.prototype );\n\tIcosahedronGeometry.prototype.constructor = IcosahedronGeometry;\n\n\t// IcosahedronBufferGeometry\n\n\tfunction IcosahedronBufferGeometry( radius, detail ) {\n\n\t\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\n\t\tvar vertices = [\n\t\t\t- 1, t, 0, \t1, t, 0, \t- 1, - t, 0, \t1, - t, 0,\n\t\t\t 0, - 1, t, \t0, 1, t,\t0, - 1, - t, \t0, 1, - t,\n\t\t\t t, 0, - 1, \tt, 0, 1, \t- t, 0, - 1, \t- t, 0, 1\n\t\t];\n\n\t\tvar indices = [\n\t\t\t 0, 11, 5, \t0, 5, 1, \t0, 1, 7, \t0, 7, 10, \t0, 10, 11,\n\t\t\t 1, 5, 9, \t5, 11, 4,\t11, 10, 2,\t10, 7, 6,\t7, 1, 8,\n\t\t\t 3, 9, 4, \t3, 4, 2,\t3, 2, 6,\t3, 6, 8,\t3, 8, 9,\n\t\t\t 4, 9, 5, \t2, 4, 11,\t6, 2, 10,\t8, 6, 7,\t9, 8, 1\n\t\t];\n\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\t\tthis.type = 'IcosahedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tIcosahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\n\tIcosahedronBufferGeometry.prototype.constructor = IcosahedronBufferGeometry;\n\n\t/**\n\t * @author Abe Pazos / https://hamoid.com\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// DodecahedronGeometry\n\n\tfunction DodecahedronGeometry( radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'DodecahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new DodecahedronBufferGeometry( radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tDodecahedronGeometry.prototype = Object.create( Geometry.prototype );\n\tDodecahedronGeometry.prototype.constructor = DodecahedronGeometry;\n\n\t// DodecahedronBufferGeometry\n\n\tfunction DodecahedronBufferGeometry( radius, detail ) {\n\n\t\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\t\tvar r = 1 / t;\n\n\t\tvar vertices = [\n\n\t\t\t// (±1, ±1, ±1)\n\t\t\t- 1, - 1, - 1,\t- 1, - 1, 1,\n\t\t\t- 1, 1, - 1, - 1, 1, 1,\n\t\t\t1, - 1, - 1, 1, - 1, 1,\n\t\t\t1, 1, - 1, 1, 1, 1,\n\n\t\t\t// (0, ±1/φ, ±φ)\n\t\t\t 0, - r, - t, 0, - r, t,\n\t\t\t 0, r, - t, 0, r, t,\n\n\t\t\t// (±1/φ, ±φ, 0)\n\t\t\t- r, - t, 0, - r, t, 0,\n\t\t\t r, - t, 0, r, t, 0,\n\n\t\t\t// (±φ, 0, ±1/φ)\n\t\t\t- t, 0, - r, t, 0, - r,\n\t\t\t- t, 0, r, t, 0, r\n\t\t];\n\n\t\tvar indices = [\n\t\t\t3, 11, 7, \t3, 7, 15, \t3, 15, 13,\n\t\t\t7, 19, 17, \t7, 17, 6, \t7, 6, 15,\n\t\t\t17, 4, 8, \t17, 8, 10, \t17, 10, 6,\n\t\t\t8, 0, 16, \t8, 16, 2, \t8, 2, 10,\n\t\t\t0, 12, 1, \t0, 1, 18, \t0, 18, 16,\n\t\t\t6, 10, 2, \t6, 2, 13, \t6, 13, 15,\n\t\t\t2, 16, 18, \t2, 18, 3, \t2, 3, 13,\n\t\t\t18, 1, 9, \t18, 9, 11, \t18, 11, 3,\n\t\t\t4, 14, 12, \t4, 12, 0, \t4, 0, 8,\n\t\t\t11, 9, 5, \t11, 5, 19, \t11, 19, 7,\n\t\t\t19, 5, 14, \t19, 14, 4, \t19, 4, 17,\n\t\t\t1, 12, 14, \t1, 14, 5, \t1, 5, 9\n\t\t];\n\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\t\tthis.type = 'DodecahedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tDodecahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\n\tDodecahedronBufferGeometry.prototype.constructor = DodecahedronBufferGeometry;\n\n\t/**\n\t * @author oosmoxiecode / https://github.com/oosmoxiecode\n\t * @author WestLangley / https://github.com/WestLangley\n\t * @author zz85 / https://github.com/zz85\n\t * @author miningold / https://github.com/miningold\n\t * @author jonobr1 / https://github.com/jonobr1\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t */\n\n\t// TubeGeometry\n\n\tfunction TubeGeometry( path, tubularSegments, radius, radialSegments, closed, taper ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TubeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpath: path,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradius: radius,\n\t\t\tradialSegments: radialSegments,\n\t\t\tclosed: closed\n\t\t};\n\n\t\tif ( taper !== undefined ) { console.warn( 'THREE.TubeGeometry: taper has been removed.' ); }\n\n\t\tvar bufferGeometry = new TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed );\n\n\t\t// expose internals\n\n\t\tthis.tangents = bufferGeometry.tangents;\n\t\tthis.normals = bufferGeometry.normals;\n\t\tthis.binormals = bufferGeometry.binormals;\n\n\t\t// create geometry\n\n\t\tthis.fromBufferGeometry( bufferGeometry );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTubeGeometry.prototype = Object.create( Geometry.prototype );\n\tTubeGeometry.prototype.constructor = TubeGeometry;\n\n\t// TubeBufferGeometry\n\n\tfunction TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'TubeBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpath: path,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradius: radius,\n\t\t\tradialSegments: radialSegments,\n\t\t\tclosed: closed\n\t\t};\n\n\t\ttubularSegments = tubularSegments || 64;\n\t\tradius = radius || 1;\n\t\tradialSegments = radialSegments || 8;\n\t\tclosed = closed || false;\n\n\t\tvar frames = path.computeFrenetFrames( tubularSegments, closed );\n\n\t\t// expose internals\n\n\t\tthis.tangents = frames.tangents;\n\t\tthis.normals = frames.normals;\n\t\tthis.binormals = frames.binormals;\n\n\t\t// helper variables\n\n\t\tvar vertex = new Vector3();\n\t\tvar normal = new Vector3();\n\t\tvar uv = new Vector2();\n\t\tvar P = new Vector3();\n\n\t\tvar i, j;\n\n\t\t// buffer\n\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\t\tvar indices = [];\n\n\t\t// create buffer data\n\n\t\tgenerateBufferData();\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t// functions\n\n\t\tfunction generateBufferData() {\n\n\t\t\tfor ( i = 0; i < tubularSegments; i ++ ) {\n\n\t\t\t\tgenerateSegment( i );\n\n\t\t\t}\n\n\t\t\t// if the geometry is not closed, generate the last row of vertices and normals\n\t\t\t// at the regular position on the given path\n\t\t\t//\n\t\t\t// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)\n\n\t\t\tgenerateSegment( ( closed === false ) ? tubularSegments : 0 );\n\n\t\t\t// uvs are generated in a separate function.\n\t\t\t// this makes it easy compute correct values for closed geometries\n\n\t\t\tgenerateUVs();\n\n\t\t\t// finally create faces\n\n\t\t\tgenerateIndices();\n\n\t\t}\n\n\t\tfunction generateSegment( i ) {\n\n\t\t\t// we use getPointAt to sample evenly distributed points from the given path\n\n\t\t\tP = path.getPointAt( i / tubularSegments, P );\n\n\t\t\t// retrieve corresponding normal and binormal\n\n\t\t\tvar N = frames.normals[ i ];\n\t\t\tvar B = frames.binormals[ i ];\n\n\t\t\t// generate normals and vertices for the current segment\n\n\t\t\tfor ( j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\n\t\t\t\tvar sin = Math.sin( v );\n\t\t\t\tvar cos = - Math.cos( v );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormal.x = ( cos * N.x + sin * B.x );\n\t\t\t\tnormal.y = ( cos * N.y + sin * B.y );\n\t\t\t\tnormal.z = ( cos * N.z + sin * B.z );\n\t\t\t\tnormal.normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = P.x + radius * normal.x;\n\t\t\t\tvertex.y = P.y + radius * normal.y;\n\t\t\t\tvertex.z = P.z + radius * normal.z;\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateIndices() {\n\n\t\t\tfor ( j = 1; j <= tubularSegments; j ++ ) {\n\n\t\t\t\tfor ( i = 1; i <= radialSegments; i ++ ) {\n\n\t\t\t\t\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t\t\t\t\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t\t\t\t\tvar c = ( radialSegments + 1 ) * j + i;\n\t\t\t\t\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateUVs() {\n\n\t\t\tfor ( i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\t\tfor ( j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\t\t\tuv.x = i / tubularSegments;\n\t\t\t\t\tuv.y = j / radialSegments;\n\n\t\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tTubeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tTubeBufferGeometry.prototype.constructor = TubeBufferGeometry;\n\n\tTubeBufferGeometry.prototype.toJSON = function () {\n\n\t\tvar data = BufferGeometry.prototype.toJSON.call( this );\n\n\t\tdata.path = this.parameters.path.toJSON();\n\n\t\treturn data;\n\n\t};\n\n\t/**\n\t * @author oosmoxiecode\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t * based on http://www.blackpawn.com/texts/pqtorus/\n\t */\n\n\t// TorusKnotGeometry\n\n\tfunction TorusKnotGeometry( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TorusKnotGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradialSegments: radialSegments,\n\t\t\tp: p,\n\t\t\tq: q\n\t\t};\n\n\t\tif ( heightScale !== undefined ) { console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' ); }\n\n\t\tthis.fromBufferGeometry( new TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTorusKnotGeometry.prototype = Object.create( Geometry.prototype );\n\tTorusKnotGeometry.prototype.constructor = TorusKnotGeometry;\n\n\t// TorusKnotBufferGeometry\n\n\tfunction TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'TorusKnotBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradialSegments: radialSegments,\n\t\t\tp: p,\n\t\t\tq: q\n\t\t};\n\n\t\tradius = radius || 1;\n\t\ttube = tube || 0.4;\n\t\ttubularSegments = Math.floor( tubularSegments ) || 64;\n\t\tradialSegments = Math.floor( radialSegments ) || 8;\n\t\tp = p || 2;\n\t\tq = q || 3;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar i, j;\n\n\t\tvar vertex = new Vector3();\n\t\tvar normal = new Vector3();\n\n\t\tvar P1 = new Vector3();\n\t\tvar P2 = new Vector3();\n\n\t\tvar B = new Vector3();\n\t\tvar T = new Vector3();\n\t\tvar N = new Vector3();\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( i = 0; i <= tubularSegments; ++ i ) {\n\n\t\t\t// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segement\n\n\t\t\tvar u = i / tubularSegments * p * Math.PI * 2;\n\n\t\t\t// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n\t\t\t// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\n\n\t\t\tcalculatePositionOnCurve( u, p, q, radius, P1 );\n\t\t\tcalculatePositionOnCurve( u + 0.01, p, q, radius, P2 );\n\n\t\t\t// calculate orthonormal basis\n\n\t\t\tT.subVectors( P2, P1 );\n\t\t\tN.addVectors( P2, P1 );\n\t\t\tB.crossVectors( T, N );\n\t\t\tN.crossVectors( B, T );\n\n\t\t\t// normalize B, N. T can be ignored, we don't use it\n\n\t\t\tB.normalize();\n\t\t\tN.normalize();\n\n\t\t\tfor ( j = 0; j <= radialSegments; ++ j ) {\n\n\t\t\t\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n\t\t\t\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\n\n\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\t\t\t\tvar cx = - tube * Math.cos( v );\n\t\t\t\tvar cy = tube * Math.sin( v );\n\n\t\t\t\t// now calculate the final vertex position.\n\t\t\t\t// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve\n\n\t\t\t\tvertex.x = P1.x + ( cx * N.x + cy * B.x );\n\t\t\t\tvertex.y = P1.y + ( cx * N.y + cy * B.y );\n\t\t\t\tvertex.z = P1.z + ( cx * N.z + cy * B.z );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\n\n\t\t\t\tnormal.subVectors( vertex, P1 ).normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( i / tubularSegments );\n\t\t\t\tuvs.push( j / radialSegments );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( j = 1; j <= tubularSegments; j ++ ) {\n\n\t\t\tfor ( i = 1; i <= radialSegments; i ++ ) {\n\n\t\t\t\t// indices\n\n\t\t\t\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t\t\t\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t\t\t\tvar c = ( radialSegments + 1 ) * j + i;\n\t\t\t\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t// this function calculates the current position on the torus curve\n\n\t\tfunction calculatePositionOnCurve( u, p, q, radius, position ) {\n\n\t\t\tvar cu = Math.cos( u );\n\t\t\tvar su = Math.sin( u );\n\t\t\tvar quOverP = q / p * u;\n\t\t\tvar cs = Math.cos( quOverP );\n\n\t\t\tposition.x = radius * ( 2 + cs ) * 0.5 * cu;\n\t\t\tposition.y = radius * ( 2 + cs ) * su * 0.5;\n\t\t\tposition.z = radius * Math.sin( quOverP ) * 0.5;\n\n\t\t}\n\n\t}\n\n\tTorusKnotBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tTorusKnotBufferGeometry.prototype.constructor = TorusKnotBufferGeometry;\n\n\t/**\n\t * @author oosmoxiecode\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// TorusGeometry\n\n\tfunction TorusGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TorusGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\tradialSegments: radialSegments,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tarc: arc\n\t\t};\n\n\t\tthis.fromBufferGeometry( new TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTorusGeometry.prototype = Object.create( Geometry.prototype );\n\tTorusGeometry.prototype.constructor = TorusGeometry;\n\n\t// TorusBufferGeometry\n\n\tfunction TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'TorusBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\tradialSegments: radialSegments,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tarc: arc\n\t\t};\n\n\t\tradius = radius || 1;\n\t\ttube = tube || 0.4;\n\t\tradialSegments = Math.floor( radialSegments ) || 8;\n\t\ttubularSegments = Math.floor( tubularSegments ) || 6;\n\t\tarc = arc || Math.PI * 2;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar center = new Vector3();\n\t\tvar vertex = new Vector3();\n\t\tvar normal = new Vector3();\n\n\t\tvar j, i;\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\tfor ( i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\t\tvar u = i / tubularSegments * arc;\n\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\n\t\t\t\tvertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\n\t\t\t\tvertex.z = tube * Math.sin( v );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tcenter.x = radius * Math.cos( u );\n\t\t\t\tcenter.y = radius * Math.sin( u );\n\t\t\t\tnormal.subVectors( vertex, center ).normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( i / tubularSegments );\n\t\t\t\tuvs.push( j / radialSegments );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( j = 1; j <= radialSegments; j ++ ) {\n\n\t\t\tfor ( i = 1; i <= tubularSegments; i ++ ) {\n\n\t\t\t\t// indices\n\n\t\t\t\tvar a = ( tubularSegments + 1 ) * j + i - 1;\n\t\t\t\tvar b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\n\t\t\t\tvar c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\n\t\t\t\tvar d = ( tubularSegments + 1 ) * j + i;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tTorusBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tTorusBufferGeometry.prototype.constructor = TorusBufferGeometry;\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t * Port from https://github.com/mapbox/earcut (v2.1.5)\n\t */\n\n\tvar Earcut = {\n\n\t\ttriangulate: function ( data, holeIndices, dim ) {\n\n\t\t\tdim = dim || 2;\n\n\t\t\tvar hasHoles = holeIndices && holeIndices.length,\n\t\t\t\touterLen = hasHoles ? holeIndices[ 0 ] * dim : data.length,\n\t\t\t\touterNode = linkedList( data, 0, outerLen, dim, true ),\n\t\t\t\ttriangles = [];\n\n\t\t\tif ( ! outerNode || outerNode.next === outerNode.prev ) { return triangles; }\n\n\t\t\tvar minX, minY, maxX, maxY, x, y, invSize;\n\n\t\t\tif ( hasHoles ) { outerNode = eliminateHoles( data, holeIndices, outerNode, dim ); }\n\n\t\t\t// if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n\t\t\tif ( data.length > 80 * dim ) {\n\n\t\t\t\tminX = maxX = data[ 0 ];\n\t\t\t\tminY = maxY = data[ 1 ];\n\n\t\t\t\tfor ( var i = dim; i < outerLen; i += dim ) {\n\n\t\t\t\t\tx = data[ i ];\n\t\t\t\t\ty = data[ i + 1 ];\n\t\t\t\t\tif ( x < minX ) { minX = x; }\n\t\t\t\t\tif ( y < minY ) { minY = y; }\n\t\t\t\t\tif ( x > maxX ) { maxX = x; }\n\t\t\t\t\tif ( y > maxY ) { maxY = y; }\n\n\t\t\t\t}\n\n\t\t\t\t// minX, minY and invSize are later used to transform coords into integers for z-order calculation\n\t\t\t\tinvSize = Math.max( maxX - minX, maxY - minY );\n\t\t\t\tinvSize = invSize !== 0 ? 1 / invSize : 0;\n\n\t\t\t}\n\n\t\t\tearcutLinked( outerNode, triangles, dim, minX, minY, invSize );\n\n\t\t\treturn triangles;\n\n\t\t}\n\n\t};\n\n\t// create a circular doubly linked list from polygon points in the specified winding order\n\tfunction linkedList( data, start, end, dim, clockwise ) {\n\n\t\tvar i, last;\n\n\t\tif ( clockwise === ( signedArea( data, start, end, dim ) > 0 ) ) {\n\n\t\t\tfor ( i = start; i < end; i += dim ) { last = insertNode( i, data[ i ], data[ i + 1 ], last ); }\n\n\t\t} else {\n\n\t\t\tfor ( i = end - dim; i >= start; i -= dim ) { last = insertNode( i, data[ i ], data[ i + 1 ], last ); }\n\n\t\t}\n\n\t\tif ( last && equals( last, last.next ) ) {\n\n\t\t\tremoveNode( last );\n\t\t\tlast = last.next;\n\n\t\t}\n\n\t\treturn last;\n\n\t}\n\n\t// eliminate colinear or duplicate points\n\tfunction filterPoints( start, end ) {\n\n\t\tif ( ! start ) { return start; }\n\t\tif ( ! end ) { end = start; }\n\n\t\tvar p = start,\n\t\t\tagain;\n\t\tdo {\n\n\t\t\tagain = false;\n\n\t\t\tif ( ! p.steiner && ( equals( p, p.next ) || area( p.prev, p, p.next ) === 0 ) ) {\n\n\t\t\t\tremoveNode( p );\n\t\t\t\tp = end = p.prev;\n\t\t\t\tif ( p === p.next ) { break; }\n\t\t\t\tagain = true;\n\n\t\t\t} else {\n\n\t\t\t\tp = p.next;\n\n\t\t\t}\n\n\t\t} while ( again || p !== end );\n\n\t\treturn end;\n\n\t}\n\n\t// main ear slicing loop which triangulates a polygon (given as a linked list)\n\tfunction earcutLinked( ear, triangles, dim, minX, minY, invSize, pass ) {\n\n\t\tif ( ! ear ) { return; }\n\n\t\t// interlink polygon nodes in z-order\n\t\tif ( ! pass && invSize ) { indexCurve( ear, minX, minY, invSize ); }\n\n\t\tvar stop = ear,\n\t\t\tprev, next;\n\n\t\t// iterate through ears, slicing them one by one\n\t\twhile ( ear.prev !== ear.next ) {\n\n\t\t\tprev = ear.prev;\n\t\t\tnext = ear.next;\n\n\t\t\tif ( invSize ? isEarHashed( ear, minX, minY, invSize ) : isEar( ear ) ) {\n\n\t\t\t\t// cut off the triangle\n\t\t\t\ttriangles.push( prev.i / dim );\n\t\t\t\ttriangles.push( ear.i / dim );\n\t\t\t\ttriangles.push( next.i / dim );\n\n\t\t\t\tremoveNode( ear );\n\n\t\t\t\t// skipping the next vertex leads to less sliver triangles\n\t\t\t\tear = next.next;\n\t\t\t\tstop = next.next;\n\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tear = next;\n\n\t\t\t// if we looped through the whole remaining polygon and can't find any more ears\n\t\t\tif ( ear === stop ) {\n\n\t\t\t\t// try filtering points and slicing again\n\t\t\t\tif ( ! pass ) {\n\n\t\t\t\t\tearcutLinked( filterPoints( ear ), triangles, dim, minX, minY, invSize, 1 );\n\n\t\t\t\t\t// if this didn't work, try curing all small self-intersections locally\n\n\t\t\t\t} else if ( pass === 1 ) {\n\n\t\t\t\t\tear = cureLocalIntersections( ear, triangles, dim );\n\t\t\t\t\tearcutLinked( ear, triangles, dim, minX, minY, invSize, 2 );\n\n\t\t\t\t\t// as a last resort, try splitting the remaining polygon into two\n\n\t\t\t\t} else if ( pass === 2 ) {\n\n\t\t\t\t\tsplitEarcut( ear, triangles, dim, minX, minY, invSize );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// check whether a polygon node forms a valid ear with adjacent nodes\n\tfunction isEar( ear ) {\n\n\t\tvar a = ear.prev,\n\t\t\tb = ear,\n\t\t\tc = ear.next;\n\n\t\tif ( area( a, b, c ) >= 0 ) { return false; } // reflex, can't be an ear\n\n\t\t// now make sure we don't have other points inside the potential ear\n\t\tvar p = ear.next.next;\n\n\t\twhile ( p !== ear.prev ) {\n\n\t\t\tif ( pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\n\t\t\t\tarea( p.prev, p, p.next ) >= 0 ) { return false; }\n\t\t\tp = p.next;\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tfunction isEarHashed( ear, minX, minY, invSize ) {\n\n\t\tvar a = ear.prev,\n\t\t\tb = ear,\n\t\t\tc = ear.next;\n\n\t\tif ( area( a, b, c ) >= 0 ) { return false; } // reflex, can't be an ear\n\n\t\t// triangle bbox; min & max are calculated like this for speed\n\t\tvar minTX = a.x < b.x ? ( a.x < c.x ? a.x : c.x ) : ( b.x < c.x ? b.x : c.x ),\n\t\t\tminTY = a.y < b.y ? ( a.y < c.y ? a.y : c.y ) : ( b.y < c.y ? b.y : c.y ),\n\t\t\tmaxTX = a.x > b.x ? ( a.x > c.x ? a.x : c.x ) : ( b.x > c.x ? b.x : c.x ),\n\t\t\tmaxTY = a.y > b.y ? ( a.y > c.y ? a.y : c.y ) : ( b.y > c.y ? b.y : c.y );\n\n\t\t// z-order range for the current triangle bbox;\n\t\tvar minZ = zOrder( minTX, minTY, minX, minY, invSize ),\n\t\t\tmaxZ = zOrder( maxTX, maxTY, minX, minY, invSize );\n\n\t\tvar p = ear.prevZ,\n\t\t\tn = ear.nextZ;\n\n\t\t// look for points inside the triangle in both directions\n\t\twhile ( p && p.z >= minZ && n && n.z <= maxZ ) {\n\n\t\t\tif ( p !== ear.prev && p !== ear.next &&\n\t\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\n\t\t\t\tarea( p.prev, p, p.next ) >= 0 ) { return false; }\n\t\t\tp = p.prevZ;\n\n\t\t\tif ( n !== ear.prev && n !== ear.next &&\n\t\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y ) &&\n\t\t\t\tarea( n.prev, n, n.next ) >= 0 ) { return false; }\n\t\t\tn = n.nextZ;\n\n\t\t}\n\n\t\t// look for remaining points in decreasing z-order\n\t\twhile ( p && p.z >= minZ ) {\n\n\t\t\tif ( p !== ear.prev && p !== ear.next &&\n\t\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\n\t\t\t\tarea( p.prev, p, p.next ) >= 0 ) { return false; }\n\t\t\tp = p.prevZ;\n\n\t\t}\n\n\t\t// look for remaining points in increasing z-order\n\t\twhile ( n && n.z <= maxZ ) {\n\n\t\t\tif ( n !== ear.prev && n !== ear.next &&\n\t\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y ) &&\n\t\t\t\tarea( n.prev, n, n.next ) >= 0 ) { return false; }\n\t\t\tn = n.nextZ;\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\t// go through all polygon nodes and cure small local self-intersections\n\tfunction cureLocalIntersections( start, triangles, dim ) {\n\n\t\tvar p = start;\n\t\tdo {\n\n\t\t\tvar a = p.prev,\n\t\t\t\tb = p.next.next;\n\n\t\t\tif ( ! equals( a, b ) && intersects( a, p, p.next, b ) && locallyInside( a, b ) && locallyInside( b, a ) ) {\n\n\t\t\t\ttriangles.push( a.i / dim );\n\t\t\t\ttriangles.push( p.i / dim );\n\t\t\t\ttriangles.push( b.i / dim );\n\n\t\t\t\t// remove two nodes involved\n\t\t\t\tremoveNode( p );\n\t\t\t\tremoveNode( p.next );\n\n\t\t\t\tp = start = b;\n\n\t\t\t}\n\n\t\t\tp = p.next;\n\n\t\t} while ( p !== start );\n\n\t\treturn p;\n\n\t}\n\n\t// try splitting polygon into two and triangulate them independently\n\tfunction splitEarcut( start, triangles, dim, minX, minY, invSize ) {\n\n\t\t// look for a valid diagonal that divides the polygon into two\n\t\tvar a = start;\n\t\tdo {\n\n\t\t\tvar b = a.next.next;\n\t\t\twhile ( b !== a.prev ) {\n\n\t\t\t\tif ( a.i !== b.i && isValidDiagonal( a, b ) ) {\n\n\t\t\t\t\t// split the polygon in two by the diagonal\n\t\t\t\t\tvar c = splitPolygon( a, b );\n\n\t\t\t\t\t// filter colinear points around the cuts\n\t\t\t\t\ta = filterPoints( a, a.next );\n\t\t\t\t\tc = filterPoints( c, c.next );\n\n\t\t\t\t\t// run earcut on each half\n\t\t\t\t\tearcutLinked( a, triangles, dim, minX, minY, invSize );\n\t\t\t\t\tearcutLinked( c, triangles, dim, minX, minY, invSize );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tb = b.next;\n\n\t\t\t}\n\n\t\t\ta = a.next;\n\n\t\t} while ( a !== start );\n\n\t}\n\n\t// link every hole into the outer loop, producing a single-ring polygon without holes\n\tfunction eliminateHoles( data, holeIndices, outerNode, dim ) {\n\n\t\tvar queue = [],\n\t\t\ti, len, start, end, list;\n\n\t\tfor ( i = 0, len = holeIndices.length; i < len; i ++ ) {\n\n\t\t\tstart = holeIndices[ i ] * dim;\n\t\t\tend = i < len - 1 ? holeIndices[ i + 1 ] * dim : data.length;\n\t\t\tlist = linkedList( data, start, end, dim, false );\n\t\t\tif ( list === list.next ) { list.steiner = true; }\n\t\t\tqueue.push( getLeftmost( list ) );\n\n\t\t}\n\n\t\tqueue.sort( compareX );\n\n\t\t// process holes from left to right\n\t\tfor ( i = 0; i < queue.length; i ++ ) {\n\n\t\t\teliminateHole( queue[ i ], outerNode );\n\t\t\touterNode = filterPoints( outerNode, outerNode.next );\n\n\t\t}\n\n\t\treturn outerNode;\n\n\t}\n\n\tfunction compareX( a, b ) {\n\n\t\treturn a.x - b.x;\n\n\t}\n\n\t// find a bridge between vertices that connects hole with an outer ring and and link it\n\tfunction eliminateHole( hole, outerNode ) {\n\n\t\touterNode = findHoleBridge( hole, outerNode );\n\t\tif ( outerNode ) {\n\n\t\t\tvar b = splitPolygon( outerNode, hole );\n\t\t\tfilterPoints( b, b.next );\n\n\t\t}\n\n\t}\n\n\t// David Eberly's algorithm for finding a bridge between hole and outer polygon\n\tfunction findHoleBridge( hole, outerNode ) {\n\n\t\tvar p = outerNode,\n\t\t\thx = hole.x,\n\t\t\thy = hole.y,\n\t\t\tqx = - Infinity,\n\t\t\tm;\n\n\t\t// find a segment intersected by a ray from the hole's leftmost point to the left;\n\t\t// segment's endpoint with lesser x will be potential connection point\n\t\tdo {\n\n\t\t\tif ( hy <= p.y && hy >= p.next.y && p.next.y !== p.y ) {\n\n\t\t\t\tvar x = p.x + ( hy - p.y ) * ( p.next.x - p.x ) / ( p.next.y - p.y );\n\t\t\t\tif ( x <= hx && x > qx ) {\n\n\t\t\t\t\tqx = x;\n\t\t\t\t\tif ( x === hx ) {\n\n\t\t\t\t\t\tif ( hy === p.y ) { return p; }\n\t\t\t\t\t\tif ( hy === p.next.y ) { return p.next; }\n\n\t\t\t\t\t}\n\n\t\t\t\t\tm = p.x < p.next.x ? p : p.next;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tp = p.next;\n\n\t\t} while ( p !== outerNode );\n\n\t\tif ( ! m ) { return null; }\n\n\t\tif ( hx === qx ) { return m.prev; } // hole touches outer segment; pick lower endpoint\n\n\t\t// look for points inside the triangle of hole point, segment intersection and endpoint;\n\t\t// if there are no points found, we have a valid connection;\n\t\t// otherwise choose the point of the minimum angle with the ray as connection point\n\n\t\tvar stop = m,\n\t\t\tmx = m.x,\n\t\t\tmy = m.y,\n\t\t\ttanMin = Infinity,\n\t\t\ttan;\n\n\t\tp = m.next;\n\n\t\twhile ( p !== stop ) {\n\n\t\t\tif ( hx >= p.x && p.x >= mx && hx !== p.x &&\n\t\t\t\t\tpointInTriangle( hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y ) ) {\n\n\t\t\t\ttan = Math.abs( hy - p.y ) / ( hx - p.x ); // tangential\n\n\t\t\t\tif ( ( tan < tanMin || ( tan === tanMin && p.x > m.x ) ) && locallyInside( p, hole ) ) {\n\n\t\t\t\t\tm = p;\n\t\t\t\t\ttanMin = tan;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tp = p.next;\n\n\t\t}\n\n\t\treturn m;\n\n\t}\n\n\t// interlink polygon nodes in z-order\n\tfunction indexCurve( start, minX, minY, invSize ) {\n\n\t\tvar p = start;\n\t\tdo {\n\n\t\t\tif ( p.z === null ) { p.z = zOrder( p.x, p.y, minX, minY, invSize ); }\n\t\t\tp.prevZ = p.prev;\n\t\t\tp.nextZ = p.next;\n\t\t\tp = p.next;\n\n\t\t} while ( p !== start );\n\n\t\tp.prevZ.nextZ = null;\n\t\tp.prevZ = null;\n\n\t\tsortLinked( p );\n\n\t}\n\n\t// Simon Tatham's linked list merge sort algorithm\n\t// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\n\tfunction sortLinked( list ) {\n\n\t\tvar i, p, q, e, tail, numMerges, pSize, qSize,\n\t\t\tinSize = 1;\n\n\t\tdo {\n\n\t\t\tp = list;\n\t\t\tlist = null;\n\t\t\ttail = null;\n\t\t\tnumMerges = 0;\n\n\t\t\twhile ( p ) {\n\n\t\t\t\tnumMerges ++;\n\t\t\t\tq = p;\n\t\t\t\tpSize = 0;\n\t\t\t\tfor ( i = 0; i < inSize; i ++ ) {\n\n\t\t\t\t\tpSize ++;\n\t\t\t\t\tq = q.nextZ;\n\t\t\t\t\tif ( ! q ) { break; }\n\n\t\t\t\t}\n\n\t\t\t\tqSize = inSize;\n\n\t\t\t\twhile ( pSize > 0 || ( qSize > 0 && q ) ) {\n\n\t\t\t\t\tif ( pSize !== 0 && ( qSize === 0 || ! q || p.z <= q.z ) ) {\n\n\t\t\t\t\t\te = p;\n\t\t\t\t\t\tp = p.nextZ;\n\t\t\t\t\t\tpSize --;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\te = q;\n\t\t\t\t\t\tq = q.nextZ;\n\t\t\t\t\t\tqSize --;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( tail ) { tail.nextZ = e; }\n\t\t\t\t\telse { list = e; }\n\n\t\t\t\t\te.prevZ = tail;\n\t\t\t\t\ttail = e;\n\n\t\t\t\t}\n\n\t\t\t\tp = q;\n\n\t\t\t}\n\n\t\t\ttail.nextZ = null;\n\t\t\tinSize *= 2;\n\n\t\t} while ( numMerges > 1 );\n\n\t\treturn list;\n\n\t}\n\n\t// z-order of a point given coords and inverse of the longer side of data bbox\n\tfunction zOrder( x, y, minX, minY, invSize ) {\n\n\t\t// coords are transformed into non-negative 15-bit integer range\n\t\tx = 32767 * ( x - minX ) * invSize;\n\t\ty = 32767 * ( y - minY ) * invSize;\n\n\t\tx = ( x | ( x << 8 ) ) & 0x00FF00FF;\n\t\tx = ( x | ( x << 4 ) ) & 0x0F0F0F0F;\n\t\tx = ( x | ( x << 2 ) ) & 0x33333333;\n\t\tx = ( x | ( x << 1 ) ) & 0x55555555;\n\n\t\ty = ( y | ( y << 8 ) ) & 0x00FF00FF;\n\t\ty = ( y | ( y << 4 ) ) & 0x0F0F0F0F;\n\t\ty = ( y | ( y << 2 ) ) & 0x33333333;\n\t\ty = ( y | ( y << 1 ) ) & 0x55555555;\n\n\t\treturn x | ( y << 1 );\n\n\t}\n\n\t// find the leftmost node of a polygon ring\n\tfunction getLeftmost( start ) {\n\n\t\tvar p = start,\n\t\t\tleftmost = start;\n\t\tdo {\n\n\t\t\tif ( p.x < leftmost.x || ( p.x === leftmost.x && p.y < leftmost.y ) ) { leftmost = p; }\n\t\t\tp = p.next;\n\n\t\t} while ( p !== start );\n\n\t\treturn leftmost;\n\n\t}\n\n\t// check if a point lies within a convex triangle\n\tfunction pointInTriangle( ax, ay, bx, by, cx, cy, px, py ) {\n\n\t\treturn ( cx - px ) * ( ay - py ) - ( ax - px ) * ( cy - py ) >= 0 &&\n\t\t\t   ( ax - px ) * ( by - py ) - ( bx - px ) * ( ay - py ) >= 0 &&\n\t\t\t   ( bx - px ) * ( cy - py ) - ( cx - px ) * ( by - py ) >= 0;\n\n\t}\n\n\t// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\n\tfunction isValidDiagonal( a, b ) {\n\n\t\treturn a.next.i !== b.i && a.prev.i !== b.i && ! intersectsPolygon( a, b ) &&\n\t\t\t   locallyInside( a, b ) && locallyInside( b, a ) && middleInside( a, b );\n\n\t}\n\n\t// signed area of a triangle\n\tfunction area( p, q, r ) {\n\n\t\treturn ( q.y - p.y ) * ( r.x - q.x ) - ( q.x - p.x ) * ( r.y - q.y );\n\n\t}\n\n\t// check if two points are equal\n\tfunction equals( p1, p2 ) {\n\n\t\treturn p1.x === p2.x && p1.y === p2.y;\n\n\t}\n\n\t// check if two segments intersect\n\tfunction intersects( p1, q1, p2, q2 ) {\n\n\t\tif ( ( equals( p1, p2 ) && equals( q1, q2 ) ) ||\n\t\t\t( equals( p1, q2 ) && equals( p2, q1 ) ) ) { return true; }\n\t\treturn area( p1, q1, p2 ) > 0 !== area( p1, q1, q2 ) > 0 &&\n\t\t\t   area( p2, q2, p1 ) > 0 !== area( p2, q2, q1 ) > 0;\n\n\t}\n\n\t// check if a polygon diagonal intersects any polygon segments\n\tfunction intersectsPolygon( a, b ) {\n\n\t\tvar p = a;\n\t\tdo {\n\n\t\t\tif ( p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\n\t\t\t\t\tintersects( p, p.next, a, b ) ) { return true; }\n\t\t\tp = p.next;\n\n\t\t} while ( p !== a );\n\n\t\treturn false;\n\n\t}\n\n\t// check if a polygon diagonal is locally inside the polygon\n\tfunction locallyInside( a, b ) {\n\n\t\treturn area( a.prev, a, a.next ) < 0 ?\n\t\t\tarea( a, b, a.next ) >= 0 && area( a, a.prev, b ) >= 0 :\n\t\t\tarea( a, b, a.prev ) < 0 || area( a, a.next, b ) < 0;\n\n\t}\n\n\t// check if the middle point of a polygon diagonal is inside the polygon\n\tfunction middleInside( a, b ) {\n\n\t\tvar p = a,\n\t\t\tinside = false,\n\t\t\tpx = ( a.x + b.x ) / 2,\n\t\t\tpy = ( a.y + b.y ) / 2;\n\t\tdo {\n\n\t\t\tif ( ( ( p.y > py ) !== ( p.next.y > py ) ) && p.next.y !== p.y &&\n\t\t\t\t\t( px < ( p.next.x - p.x ) * ( py - p.y ) / ( p.next.y - p.y ) + p.x ) )\n\t\t\t\t{ inside = ! inside; }\n\t\t\tp = p.next;\n\n\t\t} while ( p !== a );\n\n\t\treturn inside;\n\n\t}\n\n\t// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n\t// if one belongs to the outer ring and another to a hole, it merges it into a single ring\n\tfunction splitPolygon( a, b ) {\n\n\t\tvar a2 = new Node( a.i, a.x, a.y ),\n\t\t\tb2 = new Node( b.i, b.x, b.y ),\n\t\t\tan = a.next,\n\t\t\tbp = b.prev;\n\n\t\ta.next = b;\n\t\tb.prev = a;\n\n\t\ta2.next = an;\n\t\tan.prev = a2;\n\n\t\tb2.next = a2;\n\t\ta2.prev = b2;\n\n\t\tbp.next = b2;\n\t\tb2.prev = bp;\n\n\t\treturn b2;\n\n\t}\n\n\t// create a node and optionally link it with previous one (in a circular doubly linked list)\n\tfunction insertNode( i, x, y, last ) {\n\n\t\tvar p = new Node( i, x, y );\n\n\t\tif ( ! last ) {\n\n\t\t\tp.prev = p;\n\t\t\tp.next = p;\n\n\t\t} else {\n\n\t\t\tp.next = last.next;\n\t\t\tp.prev = last;\n\t\t\tlast.next.prev = p;\n\t\t\tlast.next = p;\n\n\t\t}\n\n\t\treturn p;\n\n\t}\n\n\tfunction removeNode( p ) {\n\n\t\tp.next.prev = p.prev;\n\t\tp.prev.next = p.next;\n\n\t\tif ( p.prevZ ) { p.prevZ.nextZ = p.nextZ; }\n\t\tif ( p.nextZ ) { p.nextZ.prevZ = p.prevZ; }\n\n\t}\n\n\tfunction Node( i, x, y ) {\n\n\t\t// vertex index in coordinates array\n\t\tthis.i = i;\n\n\t\t// vertex coordinates\n\t\tthis.x = x;\n\t\tthis.y = y;\n\n\t\t// previous and next vertex nodes in a polygon ring\n\t\tthis.prev = null;\n\t\tthis.next = null;\n\n\t\t// z-order curve value\n\t\tthis.z = null;\n\n\t\t// previous and next nodes in z-order\n\t\tthis.prevZ = null;\n\t\tthis.nextZ = null;\n\n\t\t// indicates whether this is a steiner point\n\t\tthis.steiner = false;\n\n\t}\n\n\tfunction signedArea( data, start, end, dim ) {\n\n\t\tvar sum = 0;\n\t\tfor ( var i = start, j = end - dim; i < end; i += dim ) {\n\n\t\t\tsum += ( data[ j ] - data[ i ] ) * ( data[ i + 1 ] + data[ j + 1 ] );\n\t\t\tj = i;\n\n\t\t}\n\n\t\treturn sum;\n\n\t}\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t */\n\n\tvar ShapeUtils = {\n\n\t\t// calculate area of the contour polygon\n\n\t\tarea: function ( contour ) {\n\n\t\t\tvar n = contour.length;\n\t\t\tvar a = 0.0;\n\n\t\t\tfor ( var p = n - 1, q = 0; q < n; p = q ++ ) {\n\n\t\t\t\ta += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;\n\n\t\t\t}\n\n\t\t\treturn a * 0.5;\n\n\t\t},\n\n\t\tisClockWise: function ( pts ) {\n\n\t\t\treturn ShapeUtils.area( pts ) < 0;\n\n\t\t},\n\n\t\ttriangulateShape: function ( contour, holes ) {\n\n\t\t\tvar vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]\n\t\t\tvar holeIndices = []; // array of hole indices\n\t\t\tvar faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]\n\n\t\t\tremoveDupEndPts( contour );\n\t\t\taddContour( vertices, contour );\n\n\t\t\t//\n\n\t\t\tvar holeIndex = contour.length;\n\n\t\t\tholes.forEach( removeDupEndPts );\n\n\t\t\tfor ( var i = 0; i < holes.length; i ++ ) {\n\n\t\t\t\tholeIndices.push( holeIndex );\n\t\t\t\tholeIndex += holes[ i ].length;\n\t\t\t\taddContour( vertices, holes[ i ] );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar triangles = Earcut.triangulate( vertices, holeIndices );\n\n\t\t\t//\n\n\t\t\tfor ( var i = 0; i < triangles.length; i += 3 ) {\n\n\t\t\t\tfaces.push( triangles.slice( i, i + 3 ) );\n\n\t\t\t}\n\n\t\t\treturn faces;\n\n\t\t}\n\n\t};\n\n\tfunction removeDupEndPts( points ) {\n\n\t\tvar l = points.length;\n\n\t\tif ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {\n\n\t\t\tpoints.pop();\n\n\t\t}\n\n\t}\n\n\tfunction addContour( vertices, contour ) {\n\n\t\tfor ( var i = 0; i < contour.length; i ++ ) {\n\n\t\t\tvertices.push( contour[ i ].x );\n\t\t\tvertices.push( contour[ i ].y );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t *\n\t * Creates extruded geometry from a path shape.\n\t *\n\t * parameters = {\n\t *\n\t *  curveSegments: <int>, // number of points on the curves\n\t *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\n\t *  depth: <float>, // Depth to extrude the shape\n\t *\n\t *  bevelEnabled: <bool>, // turn on bevel\n\t *  bevelThickness: <float>, // how deep into the original shape bevel goes\n\t *  bevelSize: <float>, // how far from shape outline (including bevelOffset) is bevel\n\t *  bevelOffset: <float>, // how far from shape outline does bevel start\n\t *  bevelSegments: <int>, // number of bevel layers\n\t *\n\t *  extrudePath: <THREE.Curve> // curve to extrude shape along\n\t *\n\t *  UVGenerator: <Object> // object that provides UV generator functions\n\t *\n\t * }\n\t */\n\n\t// ExtrudeGeometry\n\n\tfunction ExtrudeGeometry( shapes, options ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'ExtrudeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\toptions: options\n\t\t};\n\n\t\tthis.fromBufferGeometry( new ExtrudeBufferGeometry( shapes, options ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tExtrudeGeometry.prototype = Object.create( Geometry.prototype );\n\tExtrudeGeometry.prototype.constructor = ExtrudeGeometry;\n\n\tExtrudeGeometry.prototype.toJSON = function () {\n\n\t\tvar data = Geometry.prototype.toJSON.call( this );\n\n\t\tvar shapes = this.parameters.shapes;\n\t\tvar options = this.parameters.options;\n\n\t\treturn toJSON( shapes, options, data );\n\n\t};\n\n\t// ExtrudeBufferGeometry\n\n\tfunction ExtrudeBufferGeometry( shapes, options ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'ExtrudeBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\toptions: options\n\t\t};\n\n\t\tshapes = Array.isArray( shapes ) ? shapes : [ shapes ];\n\n\t\tvar scope = this;\n\n\t\tvar verticesArray = [];\n\t\tvar uvArray = [];\n\n\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\tvar shape = shapes[ i ];\n\t\t\taddShape( shape );\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( verticesArray, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvArray, 2 ) );\n\n\t\tthis.computeVertexNormals();\n\n\t\t// functions\n\n\t\tfunction addShape( shape ) {\n\n\t\t\tvar placeholder = [];\n\n\t\t\t// options\n\n\t\t\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\t\t\tvar steps = options.steps !== undefined ? options.steps : 1;\n\t\t\tvar depth = options.depth !== undefined ? options.depth : 100;\n\n\t\t\tvar bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;\n\t\t\tvar bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6;\n\t\t\tvar bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2;\n\t\t\tvar bevelOffset = options.bevelOffset !== undefined ? options.bevelOffset : 0;\n\t\t\tvar bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n\n\t\t\tvar extrudePath = options.extrudePath;\n\n\t\t\tvar uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator;\n\n\t\t\t// deprecated options\n\n\t\t\tif ( options.amount !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.ExtrudeBufferGeometry: amount has been renamed to depth.' );\n\t\t\t\tdepth = options.amount;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar extrudePts, extrudeByPath = false;\n\t\t\tvar splineTube, binormal, normal, position2;\n\n\t\t\tif ( extrudePath ) {\n\n\t\t\t\textrudePts = extrudePath.getSpacedPoints( steps );\n\n\t\t\t\textrudeByPath = true;\n\t\t\t\tbevelEnabled = false; // bevels not supported for path extrusion\n\n\t\t\t\t// SETUP TNB variables\n\n\t\t\t\t// TODO1 - have a .isClosed in spline?\n\n\t\t\t\tsplineTube = extrudePath.computeFrenetFrames( steps, false );\n\n\t\t\t\t// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\n\t\t\t\tbinormal = new Vector3();\n\t\t\t\tnormal = new Vector3();\n\t\t\t\tposition2 = new Vector3();\n\n\t\t\t}\n\n\t\t\t// Safeguards if bevels are not enabled\n\n\t\t\tif ( ! bevelEnabled ) {\n\n\t\t\t\tbevelSegments = 0;\n\t\t\t\tbevelThickness = 0;\n\t\t\t\tbevelSize = 0;\n\t\t\t\tbevelOffset = 0;\n\n\t\t\t}\n\n\t\t\t// Variables initialization\n\n\t\t\tvar ahole, h, hl; // looping of holes\n\n\t\t\tvar shapePoints = shape.extractPoints( curveSegments );\n\n\t\t\tvar vertices = shapePoints.shape;\n\t\t\tvar holes = shapePoints.holes;\n\n\t\t\tvar reverse = ! ShapeUtils.isClockWise( vertices );\n\n\t\t\tif ( reverse ) {\n\n\t\t\t\tvertices = vertices.reverse();\n\n\t\t\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\n\t\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tahole = holes[ h ];\n\n\t\t\t\t\tif ( ShapeUtils.isClockWise( ahole ) ) {\n\n\t\t\t\t\t\tholes[ h ] = ahole.reverse();\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\tvar faces = ShapeUtils.triangulateShape( vertices, holes );\n\n\t\t\t/* Vertices */\n\n\t\t\tvar contour = vertices; // vertices has all points but contour has only points of circumference\n\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tahole = holes[ h ];\n\n\t\t\t\tvertices = vertices.concat( ahole );\n\n\t\t\t}\n\n\n\t\t\tfunction scalePt2( pt, vec, size ) {\n\n\t\t\t\tif ( ! vec ) { console.error( \"THREE.ExtrudeGeometry: vec does not exist\" ); }\n\n\t\t\t\treturn vec.clone().multiplyScalar( size ).add( pt );\n\n\t\t\t}\n\n\t\t\tvar b, bs, t, z,\n\t\t\t\tvert, vlen = vertices.length,\n\t\t\t\tface, flen = faces.length;\n\n\n\t\t\t// Find directions for point movement\n\n\n\t\t\tfunction getBevelVec( inPt, inPrev, inNext ) {\n\n\t\t\t\t// computes for inPt the corresponding point inPt' on a new contour\n\t\t\t\t//   shifted by 1 unit (length of normalized vector) to the left\n\t\t\t\t// if we walk along contour clockwise, this new contour is outside the old one\n\t\t\t\t//\n\t\t\t\t// inPt' is the intersection of the two lines parallel to the two\n\t\t\t\t//  adjacent edges of inPt at a distance of 1 unit on the left side.\n\n\t\t\t\tvar v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt\n\n\t\t\t\t// good reading for geometry algorithms (here: line-line intersection)\n\t\t\t\t// http://geomalgorithms.com/a05-_intersect-1.html\n\n\t\t\t\tvar v_prev_x = inPt.x - inPrev.x,\n\t\t\t\t\tv_prev_y = inPt.y - inPrev.y;\n\t\t\t\tvar v_next_x = inNext.x - inPt.x,\n\t\t\t\t\tv_next_y = inNext.y - inPt.y;\n\n\t\t\t\tvar v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );\n\n\t\t\t\t// check for collinear edges\n\t\t\t\tvar collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\t\t\tif ( Math.abs( collinear0 ) > Number.EPSILON ) {\n\n\t\t\t\t\t// not collinear\n\n\t\t\t\t\t// length of vectors for normalizing\n\n\t\t\t\t\tvar v_prev_len = Math.sqrt( v_prev_lensq );\n\t\t\t\t\tvar v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );\n\n\t\t\t\t\t// shift adjacent points by unit vectors to the left\n\n\t\t\t\t\tvar ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );\n\t\t\t\t\tvar ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );\n\n\t\t\t\t\tvar ptNextShift_x = ( inNext.x - v_next_y / v_next_len );\n\t\t\t\t\tvar ptNextShift_y = ( inNext.y + v_next_x / v_next_len );\n\n\t\t\t\t\t// scaling factor for v_prev to intersection point\n\n\t\t\t\t\tvar sf = ( ( ptNextShift_x - ptPrevShift_x ) * v_next_y -\n\t\t\t\t\t\t\t( ptNextShift_y - ptPrevShift_y ) * v_next_x ) /\n\t\t\t\t\t\t( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\t\t\t\t// vector from inPt to intersection point\n\n\t\t\t\t\tv_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );\n\t\t\t\t\tv_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );\n\n\t\t\t\t\t// Don't normalize!, otherwise sharp corners become ugly\n\t\t\t\t\t//  but prevent crazy spikes\n\t\t\t\t\tvar v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );\n\t\t\t\t\tif ( v_trans_lensq <= 2 ) {\n\n\t\t\t\t\t\treturn new Vector2( v_trans_x, v_trans_y );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_trans_lensq / 2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// handle special case of collinear edges\n\n\t\t\t\t\tvar direction_eq = false; // assumes: opposite\n\t\t\t\t\tif ( v_prev_x > Number.EPSILON ) {\n\n\t\t\t\t\t\tif ( v_next_x > Number.EPSILON ) {\n\n\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( v_prev_x < - Number.EPSILON ) {\n\n\t\t\t\t\t\t\tif ( v_next_x < - Number.EPSILON ) {\n\n\t\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {\n\n\t\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( direction_eq ) {\n\n\t\t\t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\n\t\t\t\t\t\tv_trans_x = - v_prev_y;\n\t\t\t\t\t\tv_trans_y = v_prev_x;\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// console.log(\"Warning: lines are a straight spike\");\n\t\t\t\t\t\tv_trans_x = v_prev_x;\n\t\t\t\t\t\tv_trans_y = v_prev_y;\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq / 2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn new Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );\n\n\t\t\t}\n\n\n\t\t\tvar contourMovements = [];\n\n\t\t\tfor ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\t\t\tif ( j === il ) { j = 0; }\n\t\t\t\tif ( k === il ) { k = 0; }\n\n\t\t\t\t//  (j)---(i)---(k)\n\t\t\t\t// console.log('i,j,k', i, j , k)\n\n\t\t\t\tcontourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );\n\n\t\t\t}\n\n\t\t\tvar holesMovements = [],\n\t\t\t\toneHoleMovements, verticesMovements = contourMovements.concat();\n\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tahole = holes[ h ];\n\n\t\t\t\toneHoleMovements = [];\n\n\t\t\t\tfor ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\t\t\t\tif ( j === il ) { j = 0; }\n\t\t\t\t\tif ( k === il ) { k = 0; }\n\n\t\t\t\t\t//  (j)---(i)---(k)\n\t\t\t\t\toneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );\n\n\t\t\t\t}\n\n\t\t\t\tholesMovements.push( oneHoleMovements );\n\t\t\t\tverticesMovements = verticesMovements.concat( oneHoleMovements );\n\n\t\t\t}\n\n\n\t\t\t// Loop bevelSegments, 1 for the front, 1 for the back\n\n\t\t\tfor ( b = 0; b < bevelSegments; b ++ ) {\n\n\t\t\t\t//for ( b = bevelSegments; b > 0; b -- ) {\n\n\t\t\t\tt = b / bevelSegments;\n\t\t\t\tz = bevelThickness * Math.cos( t * Math.PI / 2 );\n\t\t\t\tbs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;\n\n\t\t\t\t// contract shape\n\n\t\t\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\n\t\t\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\n\t\t\t\t\tv( vert.x, vert.y, - z );\n\n\t\t\t\t}\n\n\t\t\t\t// expand holes\n\n\t\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tahole = holes[ h ];\n\t\t\t\t\toneHoleMovements = holesMovements[ h ];\n\n\t\t\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n\t\t\t\t\t\tv( vert.x, vert.y, - z );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tbs = bevelSize + bevelOffset;\n\n\t\t\t// Back facing vertices\n\n\t\t\tfor ( i = 0; i < vlen; i ++ ) {\n\n\t\t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\tv( vert.x, vert.y, 0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n\n\t\t\t\t\tnormal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );\n\t\t\t\t\tbinormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );\n\n\t\t\t\t\tposition2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );\n\n\t\t\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Add stepped vertices...\n\t\t\t// Including front facing vertices\n\n\t\t\tvar s;\n\n\t\t\tfor ( s = 1; s <= steps; s ++ ) {\n\n\t\t\t\tfor ( i = 0; i < vlen; i ++ ) {\n\n\t\t\t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n\t\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\t\tv( vert.x, vert.y, depth / steps * s );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n\n\t\t\t\t\t\tnormal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );\n\t\t\t\t\t\tbinormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );\n\n\t\t\t\t\t\tposition2.copy( extrudePts[ s ] ).add( normal ).add( binormal );\n\n\t\t\t\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\t// Add bevel segments planes\n\n\t\t\t//for ( b = 1; b <= bevelSegments; b ++ ) {\n\t\t\tfor ( b = bevelSegments - 1; b >= 0; b -- ) {\n\n\t\t\t\tt = b / bevelSegments;\n\t\t\t\tz = bevelThickness * Math.cos( t * Math.PI / 2 );\n\t\t\t\tbs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;\n\n\t\t\t\t// contract shape\n\n\t\t\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\n\t\t\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\t\t\t\t\tv( vert.x, vert.y, depth + z );\n\n\t\t\t\t}\n\n\t\t\t\t// expand holes\n\n\t\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tahole = holes[ h ];\n\t\t\t\t\toneHoleMovements = holesMovements[ h ];\n\n\t\t\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n\t\t\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\t\t\tv( vert.x, vert.y, depth + z );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tv( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t/* Faces */\n\n\t\t\t// Top and bottom faces\n\n\t\t\tbuildLidFaces();\n\n\t\t\t// Sides faces\n\n\t\t\tbuildSideFaces();\n\n\n\t\t\t/////  Internal functions\n\n\t\t\tfunction buildLidFaces() {\n\n\t\t\t\tvar start = verticesArray.length / 3;\n\n\t\t\t\tif ( bevelEnabled ) {\n\n\t\t\t\t\tvar layer = 0; // steps + 1\n\t\t\t\t\tvar offset = vlen * layer;\n\n\t\t\t\t\t// Bottom faces\n\n\t\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\t\tf3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tlayer = steps + bevelSegments * 2;\n\t\t\t\t\toffset = vlen * layer;\n\n\t\t\t\t\t// Top faces\n\n\t\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\t\tf3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// Bottom faces\n\n\t\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\t\tf3( face[ 2 ], face[ 1 ], face[ 0 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Top faces\n\n\t\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\t\tf3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tscope.addGroup( start, verticesArray.length / 3 - start, 0 );\n\n\t\t\t}\n\n\t\t\t// Create faces for the z-sides of the shape\n\n\t\t\tfunction buildSideFaces() {\n\n\t\t\t\tvar start = verticesArray.length / 3;\n\t\t\t\tvar layeroffset = 0;\n\t\t\t\tsidewalls( contour, layeroffset );\n\t\t\t\tlayeroffset += contour.length;\n\n\t\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tahole = holes[ h ];\n\t\t\t\t\tsidewalls( ahole, layeroffset );\n\n\t\t\t\t\t//, true\n\t\t\t\t\tlayeroffset += ahole.length;\n\n\t\t\t\t}\n\n\n\t\t\t\tscope.addGroup( start, verticesArray.length / 3 - start, 1 );\n\n\n\t\t\t}\n\n\t\t\tfunction sidewalls( contour, layeroffset ) {\n\n\t\t\t\tvar j, k;\n\t\t\t\ti = contour.length;\n\n\t\t\t\twhile ( -- i >= 0 ) {\n\n\t\t\t\t\tj = i;\n\t\t\t\t\tk = i - 1;\n\t\t\t\t\tif ( k < 0 ) { k = contour.length - 1; }\n\n\t\t\t\t\t//console.log('b', i,j, i-1, k,vertices.length);\n\n\t\t\t\t\tvar s = 0,\n\t\t\t\t\t\tsl = steps + bevelSegments * 2;\n\n\t\t\t\t\tfor ( s = 0; s < sl; s ++ ) {\n\n\t\t\t\t\t\tvar slen1 = vlen * s;\n\t\t\t\t\t\tvar slen2 = vlen * ( s + 1 );\n\n\t\t\t\t\t\tvar a = layeroffset + j + slen1,\n\t\t\t\t\t\t\tb = layeroffset + k + slen1,\n\t\t\t\t\t\t\tc = layeroffset + k + slen2,\n\t\t\t\t\t\t\td = layeroffset + j + slen2;\n\n\t\t\t\t\t\tf4( a, b, c, d );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction v( x, y, z ) {\n\n\t\t\t\tplaceholder.push( x );\n\t\t\t\tplaceholder.push( y );\n\t\t\t\tplaceholder.push( z );\n\n\t\t\t}\n\n\n\t\t\tfunction f3( a, b, c ) {\n\n\t\t\t\taddVertex( a );\n\t\t\t\taddVertex( b );\n\t\t\t\taddVertex( c );\n\n\t\t\t\tvar nextIndex = verticesArray.length / 3;\n\t\t\t\tvar uvs = uvgen.generateTopUV( scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\n\n\t\t\t\taddUV( uvs[ 0 ] );\n\t\t\t\taddUV( uvs[ 1 ] );\n\t\t\t\taddUV( uvs[ 2 ] );\n\n\t\t\t}\n\n\t\t\tfunction f4( a, b, c, d ) {\n\n\t\t\t\taddVertex( a );\n\t\t\t\taddVertex( b );\n\t\t\t\taddVertex( d );\n\n\t\t\t\taddVertex( b );\n\t\t\t\taddVertex( c );\n\t\t\t\taddVertex( d );\n\n\n\t\t\t\tvar nextIndex = verticesArray.length / 3;\n\t\t\t\tvar uvs = uvgen.generateSideWallUV( scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\n\n\t\t\t\taddUV( uvs[ 0 ] );\n\t\t\t\taddUV( uvs[ 1 ] );\n\t\t\t\taddUV( uvs[ 3 ] );\n\n\t\t\t\taddUV( uvs[ 1 ] );\n\t\t\t\taddUV( uvs[ 2 ] );\n\t\t\t\taddUV( uvs[ 3 ] );\n\n\t\t\t}\n\n\t\t\tfunction addVertex( index ) {\n\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 0 ] );\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 1 ] );\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 2 ] );\n\n\t\t\t}\n\n\n\t\t\tfunction addUV( vector2 ) {\n\n\t\t\t\tuvArray.push( vector2.x );\n\t\t\t\tuvArray.push( vector2.y );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tExtrudeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tExtrudeBufferGeometry.prototype.constructor = ExtrudeBufferGeometry;\n\n\tExtrudeBufferGeometry.prototype.toJSON = function () {\n\n\t\tvar data = BufferGeometry.prototype.toJSON.call( this );\n\n\t\tvar shapes = this.parameters.shapes;\n\t\tvar options = this.parameters.options;\n\n\t\treturn toJSON( shapes, options, data );\n\n\t};\n\n\t//\n\n\tvar WorldUVGenerator = {\n\n\t\tgenerateTopUV: function ( geometry, vertices, indexA, indexB, indexC ) {\n\n\t\t\tvar a_x = vertices[ indexA * 3 ];\n\t\t\tvar a_y = vertices[ indexA * 3 + 1 ];\n\t\t\tvar b_x = vertices[ indexB * 3 ];\n\t\t\tvar b_y = vertices[ indexB * 3 + 1 ];\n\t\t\tvar c_x = vertices[ indexC * 3 ];\n\t\t\tvar c_y = vertices[ indexC * 3 + 1 ];\n\n\t\t\treturn [\n\t\t\t\tnew Vector2( a_x, a_y ),\n\t\t\t\tnew Vector2( b_x, b_y ),\n\t\t\t\tnew Vector2( c_x, c_y )\n\t\t\t];\n\n\t\t},\n\n\t\tgenerateSideWallUV: function ( geometry, vertices, indexA, indexB, indexC, indexD ) {\n\n\t\t\tvar a_x = vertices[ indexA * 3 ];\n\t\t\tvar a_y = vertices[ indexA * 3 + 1 ];\n\t\t\tvar a_z = vertices[ indexA * 3 + 2 ];\n\t\t\tvar b_x = vertices[ indexB * 3 ];\n\t\t\tvar b_y = vertices[ indexB * 3 + 1 ];\n\t\t\tvar b_z = vertices[ indexB * 3 + 2 ];\n\t\t\tvar c_x = vertices[ indexC * 3 ];\n\t\t\tvar c_y = vertices[ indexC * 3 + 1 ];\n\t\t\tvar c_z = vertices[ indexC * 3 + 2 ];\n\t\t\tvar d_x = vertices[ indexD * 3 ];\n\t\t\tvar d_y = vertices[ indexD * 3 + 1 ];\n\t\t\tvar d_z = vertices[ indexD * 3 + 2 ];\n\n\t\t\tif ( Math.abs( a_y - b_y ) < 0.01 ) {\n\n\t\t\t\treturn [\n\t\t\t\t\tnew Vector2( a_x, 1 - a_z ),\n\t\t\t\t\tnew Vector2( b_x, 1 - b_z ),\n\t\t\t\t\tnew Vector2( c_x, 1 - c_z ),\n\t\t\t\t\tnew Vector2( d_x, 1 - d_z )\n\t\t\t\t];\n\n\t\t\t} else {\n\n\t\t\t\treturn [\n\t\t\t\t\tnew Vector2( a_y, 1 - a_z ),\n\t\t\t\t\tnew Vector2( b_y, 1 - b_z ),\n\t\t\t\t\tnew Vector2( c_y, 1 - c_z ),\n\t\t\t\t\tnew Vector2( d_y, 1 - d_z )\n\t\t\t\t];\n\n\t\t\t}\n\n\t\t}\n\t};\n\n\tfunction toJSON( shapes, options, data ) {\n\n\t\t//\n\n\t\tdata.shapes = [];\n\n\t\tif ( Array.isArray( shapes ) ) {\n\n\t\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\t\tvar shape = shapes[ i ];\n\n\t\t\t\tdata.shapes.push( shape.uuid );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tdata.shapes.push( shapes.uuid );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( options.extrudePath !== undefined ) { data.options.extrudePath = options.extrudePath.toJSON(); }\n\n\t\treturn data;\n\n\t}\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * Text = 3D Text\n\t *\n\t * parameters = {\n\t *  font: <THREE.Font>, // font\n\t *\n\t *  size: <float>, // size of the text\n\t *  height: <float>, // thickness to extrude text\n\t *  curveSegments: <int>, // number of points on the curves\n\t *\n\t *  bevelEnabled: <bool>, // turn on bevel\n\t *  bevelThickness: <float>, // how deep into text bevel goes\n\t *  bevelSize: <float>, // how far from text outline (including bevelOffset) is bevel\n\t *  bevelOffset: <float> // how far from text outline does bevel start\n\t * }\n\t */\n\n\t// TextGeometry\n\n\tfunction TextGeometry( text, parameters ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TextGeometry';\n\n\t\tthis.parameters = {\n\t\t\ttext: text,\n\t\t\tparameters: parameters\n\t\t};\n\n\t\tthis.fromBufferGeometry( new TextBufferGeometry( text, parameters ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTextGeometry.prototype = Object.create( Geometry.prototype );\n\tTextGeometry.prototype.constructor = TextGeometry;\n\n\t// TextBufferGeometry\n\n\tfunction TextBufferGeometry( text, parameters ) {\n\n\t\tparameters = parameters || {};\n\n\t\tvar font = parameters.font;\n\n\t\tif ( ! ( font && font.isFont ) ) {\n\n\t\t\tconsole.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );\n\t\t\treturn new Geometry();\n\n\t\t}\n\n\t\tvar shapes = font.generateShapes( text, parameters.size );\n\n\t\t// translate parameters to ExtrudeGeometry API\n\n\t\tparameters.depth = parameters.height !== undefined ? parameters.height : 50;\n\n\t\t// defaults\n\n\t\tif ( parameters.bevelThickness === undefined ) { parameters.bevelThickness = 10; }\n\t\tif ( parameters.bevelSize === undefined ) { parameters.bevelSize = 8; }\n\t\tif ( parameters.bevelEnabled === undefined ) { parameters.bevelEnabled = false; }\n\n\t\tExtrudeBufferGeometry.call( this, shapes, parameters );\n\n\t\tthis.type = 'TextBufferGeometry';\n\n\t}\n\n\tTextBufferGeometry.prototype = Object.create( ExtrudeBufferGeometry.prototype );\n\tTextBufferGeometry.prototype.constructor = TextBufferGeometry;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// SphereGeometry\n\n\tfunction SphereGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'SphereGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tSphereGeometry.prototype = Object.create( Geometry.prototype );\n\tSphereGeometry.prototype.constructor = SphereGeometry;\n\n\t// SphereBufferGeometry\n\n\tfunction SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'SphereBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tradius = radius || 1;\n\n\t\twidthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );\n\t\theightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );\n\n\t\tphiStart = phiStart !== undefined ? phiStart : 0;\n\t\tphiLength = phiLength !== undefined ? phiLength : Math.PI * 2;\n\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI;\n\n\t\tvar thetaEnd = Math.min( thetaStart + thetaLength, Math.PI );\n\n\t\tvar ix, iy;\n\n\t\tvar index = 0;\n\t\tvar grid = [];\n\n\t\tvar vertex = new Vector3();\n\t\tvar normal = new Vector3();\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( iy = 0; iy <= heightSegments; iy ++ ) {\n\n\t\t\tvar verticesRow = [];\n\n\t\t\tvar v = iy / heightSegments;\n\n\t\t\t// special case for the poles\n\n\t\t\tvar uOffset = 0;\n\n\t\t\tif ( iy == 0 && thetaStart == 0 ) {\n\n\t\t\t\tuOffset = 0.5 / widthSegments;\n\n\t\t\t} else if ( iy == heightSegments && thetaEnd == Math.PI ) {\n\n\t\t\t\tuOffset = - 0.5 / widthSegments;\n\n\t\t\t}\n\n\t\t\tfor ( ix = 0; ix <= widthSegments; ix ++ ) {\n\n\t\t\t\tvar u = ix / widthSegments;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\t\t\t\tvertex.y = radius * Math.cos( thetaStart + v * thetaLength );\n\t\t\t\tvertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormal.copy( vertex ).normalize();\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( u + uOffset, 1 - v );\n\n\t\t\t\tverticesRow.push( index ++ );\n\n\t\t\t}\n\n\t\t\tgrid.push( verticesRow );\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( iy = 0; iy < heightSegments; iy ++ ) {\n\n\t\t\tfor ( ix = 0; ix < widthSegments; ix ++ ) {\n\n\t\t\t\tvar a = grid[ iy ][ ix + 1 ];\n\t\t\t\tvar b = grid[ iy ][ ix ];\n\t\t\t\tvar c = grid[ iy + 1 ][ ix ];\n\t\t\t\tvar d = grid[ iy + 1 ][ ix + 1 ];\n\n\t\t\t\tif ( iy !== 0 || thetaStart > 0 ) { indices.push( a, b, d ); }\n\t\t\t\tif ( iy !== heightSegments - 1 || thetaEnd < Math.PI ) { indices.push( b, c, d ); }\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tSphereBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tSphereBufferGeometry.prototype.constructor = SphereBufferGeometry;\n\n\t/**\n\t * @author Kaleb Murphy\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// RingGeometry\n\n\tfunction RingGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'RingGeometry';\n\n\t\tthis.parameters = {\n\t\t\tinnerRadius: innerRadius,\n\t\t\touterRadius: outerRadius,\n\t\t\tthetaSegments: thetaSegments,\n\t\t\tphiSegments: phiSegments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tRingGeometry.prototype = Object.create( Geometry.prototype );\n\tRingGeometry.prototype.constructor = RingGeometry;\n\n\t// RingBufferGeometry\n\n\tfunction RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'RingBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tinnerRadius: innerRadius,\n\t\t\touterRadius: outerRadius,\n\t\t\tthetaSegments: thetaSegments,\n\t\t\tphiSegments: phiSegments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tinnerRadius = innerRadius || 0.5;\n\t\touterRadius = outerRadius || 1;\n\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\t\tthetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;\n\t\tphiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// some helper variables\n\n\t\tvar segment;\n\t\tvar radius = innerRadius;\n\t\tvar radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );\n\t\tvar vertex = new Vector3();\n\t\tvar uv = new Vector2();\n\t\tvar j, i;\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( j = 0; j <= phiSegments; j ++ ) {\n\n\t\t\tfor ( i = 0; i <= thetaSegments; i ++ ) {\n\n\t\t\t\t// values are generate from the inside of the ring to the outside\n\n\t\t\t\tsegment = thetaStart + i / thetaSegments * thetaLength;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = radius * Math.cos( segment );\n\t\t\t\tvertex.y = radius * Math.sin( segment );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = ( vertex.x / outerRadius + 1 ) / 2;\n\t\t\t\tuv.y = ( vertex.y / outerRadius + 1 ) / 2;\n\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t}\n\n\t\t\t// increase the radius for next row of vertices\n\n\t\t\tradius += radiusStep;\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( j = 0; j < phiSegments; j ++ ) {\n\n\t\t\tvar thetaSegmentLevel = j * ( thetaSegments + 1 );\n\n\t\t\tfor ( i = 0; i < thetaSegments; i ++ ) {\n\n\t\t\t\tsegment = i + thetaSegmentLevel;\n\n\t\t\t\tvar a = segment;\n\t\t\t\tvar b = segment + thetaSegments + 1;\n\t\t\t\tvar c = segment + thetaSegments + 2;\n\t\t\t\tvar d = segment + 1;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tRingBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tRingBufferGeometry.prototype.constructor = RingBufferGeometry;\n\n\t/**\n\t * @author zz85 / https://github.com/zz85\n\t * @author bhouston / http://clara.io\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// LatheGeometry\n\n\tfunction LatheGeometry( points, segments, phiStart, phiLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'LatheGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpoints: points,\n\t\t\tsegments: segments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new LatheBufferGeometry( points, segments, phiStart, phiLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tLatheGeometry.prototype = Object.create( Geometry.prototype );\n\tLatheGeometry.prototype.constructor = LatheGeometry;\n\n\t// LatheBufferGeometry\n\n\tfunction LatheBufferGeometry( points, segments, phiStart, phiLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'LatheBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpoints: points,\n\t\t\tsegments: segments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength\n\t\t};\n\n\t\tsegments = Math.floor( segments ) || 12;\n\t\tphiStart = phiStart || 0;\n\t\tphiLength = phiLength || Math.PI * 2;\n\n\t\t// clamp phiLength so it's in range of [ 0, 2PI ]\n\n\t\tphiLength = MathUtils.clamp( phiLength, 0, Math.PI * 2 );\n\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar base;\n\t\tvar inverseSegments = 1.0 / segments;\n\t\tvar vertex = new Vector3();\n\t\tvar uv = new Vector2();\n\t\tvar i, j;\n\n\t\t// generate vertices and uvs\n\n\t\tfor ( i = 0; i <= segments; i ++ ) {\n\n\t\t\tvar phi = phiStart + i * inverseSegments * phiLength;\n\n\t\t\tvar sin = Math.sin( phi );\n\t\t\tvar cos = Math.cos( phi );\n\n\t\t\tfor ( j = 0; j <= ( points.length - 1 ); j ++ ) {\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = points[ j ].x * sin;\n\t\t\t\tvertex.y = points[ j ].y;\n\t\t\t\tvertex.z = points[ j ].x * cos;\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = i / segments;\n\t\t\t\tuv.y = j / ( points.length - 1 );\n\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\n\t\t\t}\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( i = 0; i < segments; i ++ ) {\n\n\t\t\tfor ( j = 0; j < ( points.length - 1 ); j ++ ) {\n\n\t\t\t\tbase = j + i * points.length;\n\n\t\t\t\tvar a = base;\n\t\t\t\tvar b = base + points.length;\n\t\t\t\tvar c = base + points.length + 1;\n\t\t\t\tvar d = base + 1;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t// generate normals\n\n\t\tthis.computeVertexNormals();\n\n\t\t// if the geometry is closed, we need to average the normals along the seam.\n\t\t// because the corresponding vertices are identical (but still have different UVs).\n\n\t\tif ( phiLength === Math.PI * 2 ) {\n\n\t\t\tvar normals = this.attributes.normal.array;\n\t\t\tvar n1 = new Vector3();\n\t\t\tvar n2 = new Vector3();\n\t\t\tvar n = new Vector3();\n\n\t\t\t// this is the buffer offset for the last line of vertices\n\n\t\t\tbase = segments * points.length * 3;\n\n\t\t\tfor ( i = 0, j = 0; i < points.length; i ++, j += 3 ) {\n\n\t\t\t\t// select the normal of the vertex in the first line\n\n\t\t\t\tn1.x = normals[ j + 0 ];\n\t\t\t\tn1.y = normals[ j + 1 ];\n\t\t\t\tn1.z = normals[ j + 2 ];\n\n\t\t\t\t// select the normal of the vertex in the last line\n\n\t\t\t\tn2.x = normals[ base + j + 0 ];\n\t\t\t\tn2.y = normals[ base + j + 1 ];\n\t\t\t\tn2.z = normals[ base + j + 2 ];\n\n\t\t\t\t// average normals\n\n\t\t\t\tn.addVectors( n1, n2 ).normalize();\n\n\t\t\t\t// assign the new values to both normals\n\n\t\t\t\tnormals[ j + 0 ] = normals[ base + j + 0 ] = n.x;\n\t\t\t\tnormals[ j + 1 ] = normals[ base + j + 1 ] = n.y;\n\t\t\t\tnormals[ j + 2 ] = normals[ base + j + 2 ] = n.z;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tLatheBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tLatheBufferGeometry.prototype.constructor = LatheBufferGeometry;\n\n\t/**\n\t * @author jonobr1 / http://jonobr1.com\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// ShapeGeometry\n\n\tfunction ShapeGeometry( shapes, curveSegments ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'ShapeGeometry';\n\n\t\tif ( typeof curveSegments === 'object' ) {\n\n\t\t\tconsole.warn( 'THREE.ShapeGeometry: Options parameter has been removed.' );\n\n\t\t\tcurveSegments = curveSegments.curveSegments;\n\n\t\t}\n\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\tcurveSegments: curveSegments\n\t\t};\n\n\t\tthis.fromBufferGeometry( new ShapeBufferGeometry( shapes, curveSegments ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tShapeGeometry.prototype = Object.create( Geometry.prototype );\n\tShapeGeometry.prototype.constructor = ShapeGeometry;\n\n\tShapeGeometry.prototype.toJSON = function () {\n\n\t\tvar data = Geometry.prototype.toJSON.call( this );\n\n\t\tvar shapes = this.parameters.shapes;\n\n\t\treturn toJSON$1( shapes, data );\n\n\t};\n\n\t// ShapeBufferGeometry\n\n\tfunction ShapeBufferGeometry( shapes, curveSegments ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'ShapeBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\tcurveSegments: curveSegments\n\t\t};\n\n\t\tcurveSegments = curveSegments || 12;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar groupStart = 0;\n\t\tvar groupCount = 0;\n\n\t\t// allow single and array values for \"shapes\" parameter\n\n\t\tif ( Array.isArray( shapes ) === false ) {\n\n\t\t\taddShape( shapes );\n\n\t\t} else {\n\n\t\t\tfor ( var i = 0; i < shapes.length; i ++ ) {\n\n\t\t\t\taddShape( shapes[ i ] );\n\n\t\t\t\tthis.addGroup( groupStart, groupCount, i ); // enables MultiMaterial support\n\n\t\t\t\tgroupStart += groupCount;\n\t\t\t\tgroupCount = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\n\t\t// helper functions\n\n\t\tfunction addShape( shape ) {\n\n\t\t\tvar i, l, shapeHole;\n\n\t\t\tvar indexOffset = vertices.length / 3;\n\t\t\tvar points = shape.extractPoints( curveSegments );\n\n\t\t\tvar shapeVertices = points.shape;\n\t\t\tvar shapeHoles = points.holes;\n\n\t\t\t// check direction of vertices\n\n\t\t\tif ( ShapeUtils.isClockWise( shapeVertices ) === false ) {\n\n\t\t\t\tshapeVertices = shapeVertices.reverse();\n\n\t\t\t}\n\n\t\t\tfor ( i = 0, l = shapeHoles.length; i < l; i ++ ) {\n\n\t\t\t\tshapeHole = shapeHoles[ i ];\n\n\t\t\t\tif ( ShapeUtils.isClockWise( shapeHole ) === true ) {\n\n\t\t\t\t\tshapeHoles[ i ] = shapeHole.reverse();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar faces = ShapeUtils.triangulateShape( shapeVertices, shapeHoles );\n\n\t\t\t// join vertices of inner and outer paths to a single array\n\n\t\t\tfor ( i = 0, l = shapeHoles.length; i < l; i ++ ) {\n\n\t\t\t\tshapeHole = shapeHoles[ i ];\n\t\t\t\tshapeVertices = shapeVertices.concat( shapeHole );\n\n\t\t\t}\n\n\t\t\t// vertices, normals, uvs\n\n\t\t\tfor ( i = 0, l = shapeVertices.length; i < l; i ++ ) {\n\n\t\t\t\tvar vertex = shapeVertices[ i ];\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, 0 );\n\t\t\t\tnormals.push( 0, 0, 1 );\n\t\t\t\tuvs.push( vertex.x, vertex.y ); // world uvs\n\n\t\t\t}\n\n\t\t\t// incides\n\n\t\t\tfor ( i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\tvar a = face[ 0 ] + indexOffset;\n\t\t\t\tvar b = face[ 1 ] + indexOffset;\n\t\t\t\tvar c = face[ 2 ] + indexOffset;\n\n\t\t\t\tindices.push( a, b, c );\n\t\t\t\tgroupCount += 3;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tShapeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tShapeBufferGeometry.prototype.constructor = ShapeBufferGeometry;\n\n\tShapeBufferGeometry.prototype.toJSON = function () {\n\n\t\tvar data = BufferGeometry.prototype.toJSON.call( this );\n\n\t\tvar shapes = this.parameters.shapes;\n\n\t\treturn toJSON$1( shapes, data );\n\n\t};\n\n\t//\n\n\tfunction toJSON$1( shapes, data ) {\n\n\t\tdata.shapes = [];\n\n\t\tif ( Array.isArray( shapes ) ) {\n\n\t\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\t\tvar shape = shapes[ i ];\n\n\t\t\t\tdata.shapes.push( shape.uuid );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tdata.shapes.push( shapes.uuid );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction EdgesGeometry( geometry, thresholdAngle ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'EdgesGeometry';\n\n\t\tthis.parameters = {\n\t\t\tthresholdAngle: thresholdAngle\n\t\t};\n\n\t\tthresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;\n\n\t\t// buffer\n\n\t\tvar vertices = [];\n\n\t\t// helper variables\n\n\t\tvar thresholdDot = Math.cos( MathUtils.DEG2RAD * thresholdAngle );\n\t\tvar edge = [ 0, 0 ], edges = {}, edge1, edge2;\n\t\tvar key, keys = [ 'a', 'b', 'c' ];\n\n\t\t// prepare source geometry\n\n\t\tvar geometry2;\n\n\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\tgeometry2 = new Geometry();\n\t\t\tgeometry2.fromBufferGeometry( geometry );\n\n\t\t} else {\n\n\t\t\tgeometry2 = geometry.clone();\n\n\t\t}\n\n\t\tgeometry2.mergeVertices();\n\t\tgeometry2.computeFaceNormals();\n\n\t\tvar sourceVertices = geometry2.vertices;\n\t\tvar faces = geometry2.faces;\n\n\t\t// now create a data structure where each entry represents an edge with its adjoining faces\n\n\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n\t\t\t\tedge1 = face[ keys[ j ] ];\n\t\t\t\tedge2 = face[ keys[ ( j + 1 ) % 3 ] ];\n\t\t\t\tedge[ 0 ] = Math.min( edge1, edge2 );\n\t\t\t\tedge[ 1 ] = Math.max( edge1, edge2 );\n\n\t\t\t\tkey = edge[ 0 ] + ',' + edge[ 1 ];\n\n\t\t\t\tif ( edges[ key ] === undefined ) {\n\n\t\t\t\t\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ], face1: i, face2: undefined };\n\n\t\t\t\t} else {\n\n\t\t\t\t\tedges[ key ].face2 = i;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate vertices\n\n\t\tfor ( key in edges ) {\n\n\t\t\tvar e = edges[ key ];\n\n\t\t\t// an edge is only rendered if the angle (in degrees) between the face normals of the adjoining faces exceeds this value. default = 1 degree.\n\n\t\t\tif ( e.face2 === undefined || faces[ e.face1 ].normal.dot( faces[ e.face2 ].normal ) <= thresholdDot ) {\n\n\t\t\t\tvar vertex = sourceVertices[ e.index1 ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\tvertex = sourceVertices[ e.index2 ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\n\t}\n\n\tEdgesGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tEdgesGeometry.prototype.constructor = EdgesGeometry;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// CylinderGeometry\n\n\tfunction CylinderGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'CylinderGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradiusTop: radiusTop,\n\t\t\tradiusBottom: radiusBottom,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tCylinderGeometry.prototype = Object.create( Geometry.prototype );\n\tCylinderGeometry.prototype.constructor = CylinderGeometry;\n\n\t// CylinderBufferGeometry\n\n\tfunction CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'CylinderBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradiusTop: radiusTop,\n\t\t\tradiusBottom: radiusBottom,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tvar scope = this;\n\n\t\tradiusTop = radiusTop !== undefined ? radiusTop : 1;\n\t\tradiusBottom = radiusBottom !== undefined ? radiusBottom : 1;\n\t\theight = height || 1;\n\n\t\tradialSegments = Math.floor( radialSegments ) || 8;\n\t\theightSegments = Math.floor( heightSegments ) || 1;\n\n\t\topenEnded = openEnded !== undefined ? openEnded : false;\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0.0;\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar index = 0;\n\t\tvar indexArray = [];\n\t\tvar halfHeight = height / 2;\n\t\tvar groupStart = 0;\n\n\t\t// generate geometry\n\n\t\tgenerateTorso();\n\n\t\tif ( openEnded === false ) {\n\n\t\t\tif ( radiusTop > 0 ) { generateCap( true ); }\n\t\t\tif ( radiusBottom > 0 ) { generateCap( false ); }\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\tfunction generateTorso() {\n\n\t\t\tvar x, y;\n\t\t\tvar normal = new Vector3();\n\t\t\tvar vertex = new Vector3();\n\n\t\t\tvar groupCount = 0;\n\n\t\t\t// this will be used to calculate the normal\n\t\t\tvar slope = ( radiusBottom - radiusTop ) / height;\n\n\t\t\t// generate vertices, normals and uvs\n\n\t\t\tfor ( y = 0; y <= heightSegments; y ++ ) {\n\n\t\t\t\tvar indexRow = [];\n\n\t\t\t\tvar v = y / heightSegments;\n\n\t\t\t\t// calculate the radius of the current row\n\n\t\t\t\tvar radius = v * ( radiusBottom - radiusTop ) + radiusTop;\n\n\t\t\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\t\t\tvar u = x / radialSegments;\n\n\t\t\t\t\tvar theta = u * thetaLength + thetaStart;\n\n\t\t\t\t\tvar sinTheta = Math.sin( theta );\n\t\t\t\t\tvar cosTheta = Math.cos( theta );\n\n\t\t\t\t\t// vertex\n\n\t\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\t\tvertex.y = - v * height + halfHeight;\n\t\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\t// normal\n\n\t\t\t\t\tnormal.set( sinTheta, slope, cosTheta ).normalize();\n\t\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t\t// uv\n\n\t\t\t\t\tuvs.push( u, 1 - v );\n\n\t\t\t\t\t// save index of vertex in respective row\n\n\t\t\t\t\tindexRow.push( index ++ );\n\n\t\t\t\t}\n\n\t\t\t\t// now save vertices of the row in our index array\n\n\t\t\t\tindexArray.push( indexRow );\n\n\t\t\t}\n\n\t\t\t// generate indices\n\n\t\t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\n\t\t\t\tfor ( y = 0; y < heightSegments; y ++ ) {\n\n\t\t\t\t\t// we use the index array to access the correct indices\n\n\t\t\t\t\tvar a = indexArray[ y ][ x ];\n\t\t\t\t\tvar b = indexArray[ y + 1 ][ x ];\n\t\t\t\t\tvar c = indexArray[ y + 1 ][ x + 1 ];\n\t\t\t\t\tvar d = indexArray[ y ][ x + 1 ];\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t\t// update group counter\n\n\t\t\t\t\tgroupCount += 6;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\tscope.addGroup( groupStart, groupCount, 0 );\n\n\t\t\t// calculate new start value for groups\n\n\t\t\tgroupStart += groupCount;\n\n\t\t}\n\n\t\tfunction generateCap( top ) {\n\n\t\t\tvar x, centerIndexStart, centerIndexEnd;\n\n\t\t\tvar uv = new Vector2();\n\t\t\tvar vertex = new Vector3();\n\n\t\t\tvar groupCount = 0;\n\n\t\t\tvar radius = ( top === true ) ? radiusTop : radiusBottom;\n\t\t\tvar sign = ( top === true ) ? 1 : - 1;\n\n\t\t\t// save the index of the first center vertex\n\t\t\tcenterIndexStart = index;\n\n\t\t\t// first we generate the center vertex data of the cap.\n\t\t\t// because the geometry needs one set of uvs per face,\n\t\t\t// we must generate a center vertex per face/segment\n\n\t\t\tfor ( x = 1; x <= radialSegments; x ++ ) {\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertices.push( 0, halfHeight * sign, 0 );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, sign, 0 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( 0.5, 0.5 );\n\n\t\t\t\t// increase index\n\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t\t// save the index of the last center vertex\n\n\t\t\tcenterIndexEnd = index;\n\n\t\t\t// now we generate the surrounding vertices, normals and uvs\n\n\t\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\t\tvar u = x / radialSegments;\n\t\t\t\tvar theta = u * thetaLength + thetaStart;\n\n\t\t\t\tvar cosTheta = Math.cos( theta );\n\t\t\t\tvar sinTheta = Math.sin( theta );\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\tvertex.y = halfHeight * sign;\n\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, sign, 0 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = ( cosTheta * 0.5 ) + 0.5;\n\t\t\t\tuv.y = ( sinTheta * 0.5 * sign ) + 0.5;\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\t// increase index\n\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t\t// generate indices\n\n\t\t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\n\t\t\t\tvar c = centerIndexStart + x;\n\t\t\t\tvar i = centerIndexEnd + x;\n\n\t\t\t\tif ( top === true ) {\n\n\t\t\t\t\t// face top\n\n\t\t\t\t\tindices.push( i, i + 1, c );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// face bottom\n\n\t\t\t\t\tindices.push( i + 1, i, c );\n\n\t\t\t\t}\n\n\t\t\t\tgroupCount += 3;\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\tscope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );\n\n\t\t\t// calculate new start value for groups\n\n\t\t\tgroupStart += groupCount;\n\n\t\t}\n\n\t}\n\n\tCylinderBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tCylinderBufferGeometry.prototype.constructor = CylinderBufferGeometry;\n\n\t/**\n\t * @author abelnation / http://github.com/abelnation\n\t */\n\n\t// ConeGeometry\n\n\tfunction ConeGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\tCylinderGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\n\n\t\tthis.type = 'ConeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t}\n\n\tConeGeometry.prototype = Object.create( CylinderGeometry.prototype );\n\tConeGeometry.prototype.constructor = ConeGeometry;\n\n\t// ConeBufferGeometry\n\n\tfunction ConeBufferGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\tCylinderBufferGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\n\n\t\tthis.type = 'ConeBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t}\n\n\tConeBufferGeometry.prototype = Object.create( CylinderBufferGeometry.prototype );\n\tConeBufferGeometry.prototype.constructor = ConeBufferGeometry;\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t * @author Mugen87 / https://github.com/Mugen87\n\t * @author hughes\n\t */\n\n\t// CircleGeometry\n\n\tfunction CircleGeometry( radius, segments, thetaStart, thetaLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'CircleGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tsegments: segments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tCircleGeometry.prototype = Object.create( Geometry.prototype );\n\tCircleGeometry.prototype.constructor = CircleGeometry;\n\n\t// CircleBufferGeometry\n\n\tfunction CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'CircleBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tsegments: segments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tradius = radius || 1;\n\t\tsegments = segments !== undefined ? Math.max( 3, segments ) : 8;\n\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar i, s;\n\t\tvar vertex = new Vector3();\n\t\tvar uv = new Vector2();\n\n\t\t// center point\n\n\t\tvertices.push( 0, 0, 0 );\n\t\tnormals.push( 0, 0, 1 );\n\t\tuvs.push( 0.5, 0.5 );\n\n\t\tfor ( s = 0, i = 3; s <= segments; s ++, i += 3 ) {\n\n\t\t\tvar segment = thetaStart + s / segments * thetaLength;\n\n\t\t\t// vertex\n\n\t\t\tvertex.x = radius * Math.cos( segment );\n\t\t\tvertex.y = radius * Math.sin( segment );\n\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t// normal\n\n\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t// uvs\n\n\t\t\tuv.x = ( vertices[ i ] / radius + 1 ) / 2;\n\t\t\tuv.y = ( vertices[ i + 1 ] / radius + 1 ) / 2;\n\n\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( i = 1; i <= segments; i ++ ) {\n\n\t\t\tindices.push( i, i + 1, 0 );\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tCircleBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tCircleBufferGeometry.prototype.constructor = CircleBufferGeometry;\n\n\n\n\tvar Geometries = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tWireframeGeometry: WireframeGeometry,\n\t\tParametricGeometry: ParametricGeometry,\n\t\tParametricBufferGeometry: ParametricBufferGeometry,\n\t\tTetrahedronGeometry: TetrahedronGeometry,\n\t\tTetrahedronBufferGeometry: TetrahedronBufferGeometry,\n\t\tOctahedronGeometry: OctahedronGeometry,\n\t\tOctahedronBufferGeometry: OctahedronBufferGeometry,\n\t\tIcosahedronGeometry: IcosahedronGeometry,\n\t\tIcosahedronBufferGeometry: IcosahedronBufferGeometry,\n\t\tDodecahedronGeometry: DodecahedronGeometry,\n\t\tDodecahedronBufferGeometry: DodecahedronBufferGeometry,\n\t\tPolyhedronGeometry: PolyhedronGeometry,\n\t\tPolyhedronBufferGeometry: PolyhedronBufferGeometry,\n\t\tTubeGeometry: TubeGeometry,\n\t\tTubeBufferGeometry: TubeBufferGeometry,\n\t\tTorusKnotGeometry: TorusKnotGeometry,\n\t\tTorusKnotBufferGeometry: TorusKnotBufferGeometry,\n\t\tTorusGeometry: TorusGeometry,\n\t\tTorusBufferGeometry: TorusBufferGeometry,\n\t\tTextGeometry: TextGeometry,\n\t\tTextBufferGeometry: TextBufferGeometry,\n\t\tSphereGeometry: SphereGeometry,\n\t\tSphereBufferGeometry: SphereBufferGeometry,\n\t\tRingGeometry: RingGeometry,\n\t\tRingBufferGeometry: RingBufferGeometry,\n\t\tPlaneGeometry: PlaneGeometry,\n\t\tPlaneBufferGeometry: PlaneBufferGeometry,\n\t\tLatheGeometry: LatheGeometry,\n\t\tLatheBufferGeometry: LatheBufferGeometry,\n\t\tShapeGeometry: ShapeGeometry,\n\t\tShapeBufferGeometry: ShapeBufferGeometry,\n\t\tExtrudeGeometry: ExtrudeGeometry,\n\t\tExtrudeBufferGeometry: ExtrudeBufferGeometry,\n\t\tEdgesGeometry: EdgesGeometry,\n\t\tConeGeometry: ConeGeometry,\n\t\tConeBufferGeometry: ConeBufferGeometry,\n\t\tCylinderGeometry: CylinderGeometry,\n\t\tCylinderBufferGeometry: CylinderBufferGeometry,\n\t\tCircleGeometry: CircleGeometry,\n\t\tCircleBufferGeometry: CircleBufferGeometry,\n\t\tBoxGeometry: BoxGeometry,\n\t\tBoxBufferGeometry: BoxBufferGeometry\n\t});\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t *\n\t * parameters = {\n\t *  color: <THREE.Color>\n\t * }\n\t */\n\n\tfunction ShadowMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'ShadowMaterial';\n\n\t\tthis.color = new Color( 0x000000 );\n\t\tthis.transparent = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tShadowMaterial.prototype = Object.create( Material.prototype );\n\tShadowMaterial.prototype.constructor = ShadowMaterial;\n\n\tShadowMaterial.prototype.isShadowMaterial = true;\n\n\tShadowMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction RawShaderMaterial( parameters ) {\n\n\t\tShaderMaterial.call( this, parameters );\n\n\t\tthis.type = 'RawShaderMaterial';\n\n\t}\n\n\tRawShaderMaterial.prototype = Object.create( ShaderMaterial.prototype );\n\tRawShaderMaterial.prototype.constructor = RawShaderMaterial;\n\n\tRawShaderMaterial.prototype.isRawShaderMaterial = true;\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  roughness: <float>,\n\t *  metalness: <float>,\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  emissive: <hex>,\n\t *  emissiveIntensity: <float>\n\t *  emissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  roughnessMap: new THREE.Texture( <Image> ),\n\t *\n\t *  metalnessMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *  envMapIntensity: <float>\n\t *\n\t *  refractionRatio: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshStandardMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.defines = { 'STANDARD': '' };\n\n\t\tthis.type = 'MeshStandardMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\t\tthis.roughness = 1.0;\n\t\tthis.metalness = 0.0;\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.roughnessMap = null;\n\n\t\tthis.metalnessMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.envMapIntensity = 1.0;\n\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshStandardMaterial.prototype = Object.create( Material.prototype );\n\tMeshStandardMaterial.prototype.constructor = MeshStandardMaterial;\n\n\tMeshStandardMaterial.prototype.isMeshStandardMaterial = true;\n\n\tMeshStandardMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.defines = { 'STANDARD': '' };\n\n\t\tthis.color.copy( source.color );\n\t\tthis.roughness = source.roughness;\n\t\tthis.metalness = source.metalness;\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.roughnessMap = source.roughnessMap;\n\n\t\tthis.metalnessMap = source.metalnessMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.envMapIntensity = source.envMapIntensity;\n\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *  reflectivity: <float>\n\t *  clearcoat: <float>\n\t *  clearcoatRoughness: <float>\n\t *\n\t *  sheen: <Color>\n\t *\n\t *  clearcoatNormalScale: <Vector2>,\n\t *  clearcoatNormalMap: new THREE.Texture( <Image> ),\n\t * }\n\t */\n\n\tfunction MeshPhysicalMaterial( parameters ) {\n\n\t\tMeshStandardMaterial.call( this );\n\n\t\tthis.defines = {\n\n\t\t\t'STANDARD': '',\n\t\t\t'PHYSICAL': ''\n\n\t\t};\n\n\t\tthis.type = 'MeshPhysicalMaterial';\n\n\t\tthis.reflectivity = 0.5; // maps to F0 = 0.04\n\n\t\tthis.clearcoat = 0.0;\n\t\tthis.clearcoatRoughness = 0.0;\n\n\t\tthis.sheen = null; // null will disable sheen bsdf\n\n\t\tthis.clearcoatNormalScale = new Vector2( 1, 1 );\n\t\tthis.clearcoatNormalMap = null;\n\n\t\tthis.transparency = 0.0;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshPhysicalMaterial.prototype = Object.create( MeshStandardMaterial.prototype );\n\tMeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;\n\n\tMeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;\n\n\tMeshPhysicalMaterial.prototype.copy = function ( source ) {\n\n\t\tMeshStandardMaterial.prototype.copy.call( this, source );\n\n\t\tthis.defines = {\n\n\t\t\t'STANDARD': '',\n\t\t\t'PHYSICAL': ''\n\n\t\t};\n\n\t\tthis.reflectivity = source.reflectivity;\n\n\t\tthis.clearcoat = source.clearcoat;\n\t\tthis.clearcoatRoughness = source.clearcoatRoughness;\n\n\t\tif ( source.sheen ) { this.sheen = ( this.sheen || new Color() ).copy( source.sheen ); }\n\t\telse { this.sheen = null; }\n\n\t\tthis.clearcoatNormalMap = source.clearcoatNormalMap;\n\t\tthis.clearcoatNormalScale.copy( source.clearcoatNormalScale );\n\n\t\tthis.transparency = source.transparency;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  specular: <hex>,\n\t *  shininess: <float>,\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  emissive: <hex>,\n\t *  emissiveIntensity: <float>\n\t *  emissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  specularMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *  combine: THREE.MultiplyOperation,\n\t *  reflectivity: <float>,\n\t *  refractionRatio: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshPhongMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshPhongMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\t\tthis.specular = new Color( 0x111111 );\n\t\tthis.shininess = 30;\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshPhongMaterial.prototype = Object.create( Material.prototype );\n\tMeshPhongMaterial.prototype.constructor = MeshPhongMaterial;\n\n\tMeshPhongMaterial.prototype.isMeshPhongMaterial = true;\n\n\tMeshPhongMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\t\tthis.specular.copy( source.specular );\n\t\tthis.shininess = source.shininess;\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author takahirox / http://github.com/takahirox\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  specular: <hex>,\n\t *  shininess: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *  gradientMap: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  emissive: <hex>,\n\t *  emissiveIntensity: <float>\n\t *  emissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  specularMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshToonMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.defines = { 'TOON': '' };\n\n\t\tthis.type = 'MeshToonMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\t\tthis.specular = new Color( 0x111111 );\n\t\tthis.shininess = 30;\n\n\t\tthis.map = null;\n\t\tthis.gradientMap = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshToonMaterial.prototype = Object.create( Material.prototype );\n\tMeshToonMaterial.prototype.constructor = MeshToonMaterial;\n\n\tMeshToonMaterial.prototype.isMeshToonMaterial = true;\n\n\tMeshToonMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\t\tthis.specular.copy( source.specular );\n\t\tthis.shininess = source.shininess;\n\n\t\tthis.map = source.map;\n\t\tthis.gradientMap = source.gradientMap;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *  opacity: <float>,\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshNormalMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshNormalMaterial';\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false;\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshNormalMaterial.prototype = Object.create( Material.prototype );\n\tMeshNormalMaterial.prototype.constructor = MeshNormalMaterial;\n\n\tMeshNormalMaterial.prototype.isMeshNormalMaterial = true;\n\n\tMeshNormalMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  emissive: <hex>,\n\t *  emissiveIntensity: <float>\n\t *  emissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *  specularMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *  combine: THREE.Multiply,\n\t *  reflectivity: <float>,\n\t *  refractionRatio: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshLambertMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshLambertMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshLambertMaterial.prototype = Object.create( Material.prototype );\n\tMeshLambertMaterial.prototype.constructor = MeshLambertMaterial;\n\n\tMeshLambertMaterial.prototype.isMeshLambertMaterial = true;\n\n\tMeshLambertMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *\n\t *  matcap: new THREE.Texture( <Image> ),\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshMatcapMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.defines = { 'MATCAP': '' };\n\n\t\tthis.type = 'MeshMatcapMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\n\t\tthis.matcap = null;\n\n\t\tthis.map = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshMatcapMaterial.prototype = Object.create( Material.prototype );\n\tMeshMatcapMaterial.prototype.constructor = MeshMatcapMaterial;\n\n\tMeshMatcapMaterial.prototype.isMeshMatcapMaterial = true;\n\n\tMeshMatcapMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.defines = { 'MATCAP': '' };\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.matcap = source.matcap;\n\n\t\tthis.map = source.map;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *\n\t *  linewidth: <float>,\n\t *\n\t *  scale: <float>,\n\t *  dashSize: <float>,\n\t *  gapSize: <float>\n\t * }\n\t */\n\n\tfunction LineDashedMaterial( parameters ) {\n\n\t\tLineBasicMaterial.call( this );\n\n\t\tthis.type = 'LineDashedMaterial';\n\n\t\tthis.scale = 1;\n\t\tthis.dashSize = 3;\n\t\tthis.gapSize = 1;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tLineDashedMaterial.prototype = Object.create( LineBasicMaterial.prototype );\n\tLineDashedMaterial.prototype.constructor = LineDashedMaterial;\n\n\tLineDashedMaterial.prototype.isLineDashedMaterial = true;\n\n\tLineDashedMaterial.prototype.copy = function ( source ) {\n\n\t\tLineBasicMaterial.prototype.copy.call( this, source );\n\n\t\tthis.scale = source.scale;\n\t\tthis.dashSize = source.dashSize;\n\t\tthis.gapSize = source.gapSize;\n\n\t\treturn this;\n\n\t};\n\n\n\n\tvar Materials = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tShadowMaterial: ShadowMaterial,\n\t\tSpriteMaterial: SpriteMaterial,\n\t\tRawShaderMaterial: RawShaderMaterial,\n\t\tShaderMaterial: ShaderMaterial,\n\t\tPointsMaterial: PointsMaterial,\n\t\tMeshPhysicalMaterial: MeshPhysicalMaterial,\n\t\tMeshStandardMaterial: MeshStandardMaterial,\n\t\tMeshPhongMaterial: MeshPhongMaterial,\n\t\tMeshToonMaterial: MeshToonMaterial,\n\t\tMeshNormalMaterial: MeshNormalMaterial,\n\t\tMeshLambertMaterial: MeshLambertMaterial,\n\t\tMeshDepthMaterial: MeshDepthMaterial,\n\t\tMeshDistanceMaterial: MeshDistanceMaterial,\n\t\tMeshBasicMaterial: MeshBasicMaterial,\n\t\tMeshMatcapMaterial: MeshMatcapMaterial,\n\t\tLineDashedMaterial: LineDashedMaterial,\n\t\tLineBasicMaterial: LineBasicMaterial,\n\t\tMaterial: Material\n\t});\n\n\t/**\n\t * @author tschw\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t */\n\n\tvar AnimationUtils = {\n\n\t\t// same as Array.prototype.slice, but also works on typed arrays\n\t\tarraySlice: function ( array, from, to ) {\n\n\t\t\tif ( AnimationUtils.isTypedArray( array ) ) {\n\n\t\t\t\t// in ios9 array.subarray(from, undefined) will return empty array\n\t\t\t\t// but array.subarray(from) or array.subarray(from, len) is correct\n\t\t\t\treturn new array.constructor( array.subarray( from, to !== undefined ? to : array.length ) );\n\n\t\t\t}\n\n\t\t\treturn array.slice( from, to );\n\n\t\t},\n\n\t\t// converts an array to a specific type\n\t\tconvertArray: function ( array, type, forceClone ) {\n\n\t\t\tif ( ! array || // let 'undefined' and 'null' pass\n\t\t\t\t! forceClone && array.constructor === type ) { return array; }\n\n\t\t\tif ( typeof type.BYTES_PER_ELEMENT === 'number' ) {\n\n\t\t\t\treturn new type( array ); // create typed array\n\n\t\t\t}\n\n\t\t\treturn Array.prototype.slice.call( array ); // create Array\n\n\t\t},\n\n\t\tisTypedArray: function ( object ) {\n\n\t\t\treturn ArrayBuffer.isView( object ) &&\n\t\t\t\t! ( object instanceof DataView );\n\n\t\t},\n\n\t\t// returns an array by which times and values can be sorted\n\t\tgetKeyframeOrder: function ( times ) {\n\n\t\t\tfunction compareTime( i, j ) {\n\n\t\t\t\treturn times[ i ] - times[ j ];\n\n\t\t\t}\n\n\t\t\tvar n = times.length;\n\t\t\tvar result = new Array( n );\n\t\t\tfor ( var i = 0; i !== n; ++ i ) { result[ i ] = i; }\n\n\t\t\tresult.sort( compareTime );\n\n\t\t\treturn result;\n\n\t\t},\n\n\t\t// uses the array previously returned by 'getKeyframeOrder' to sort data\n\t\tsortedArray: function ( values, stride, order ) {\n\n\t\t\tvar nValues = values.length;\n\t\t\tvar result = new values.constructor( nValues );\n\n\t\t\tfor ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {\n\n\t\t\t\tvar srcOffset = order[ i ] * stride;\n\n\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\tresult[ dstOffset ++ ] = values[ srcOffset + j ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t},\n\n\t\t// function for parsing AOS keyframe formats\n\t\tflattenJSON: function ( jsonKeys, times, values, valuePropertyName ) {\n\n\t\t\tvar i = 1, key = jsonKeys[ 0 ];\n\n\t\t\twhile ( key !== undefined && key[ valuePropertyName ] === undefined ) {\n\n\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t}\n\n\t\t\tif ( key === undefined ) { return; } // no data\n\n\t\t\tvar value = key[ valuePropertyName ];\n\t\t\tif ( value === undefined ) { return; } // no data\n\n\t\t\tif ( Array.isArray( value ) ) {\n\n\t\t\t\tdo {\n\n\t\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\t\tvalues.push.apply( values, value ); // push all elements\n\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t\t} while ( key !== undefined );\n\n\t\t\t} else if ( value.toArray !== undefined ) {\n\n\t\t\t\t// ...assume THREE.Math-ish\n\n\t\t\t\tdo {\n\n\t\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\t\tvalue.toArray( values, values.length );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t\t} while ( key !== undefined );\n\n\t\t\t} else {\n\n\t\t\t\t// otherwise push as-is\n\n\t\t\t\tdo {\n\n\t\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\t\tvalues.push( value );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t\t} while ( key !== undefined );\n\n\t\t\t}\n\n\t\t},\n\n\t\tsubclip: function ( sourceClip, name, startFrame, endFrame, fps ) {\n\n\t\t\tfps = fps || 30;\n\n\t\t\tvar clip = sourceClip.clone();\n\n\t\t\tclip.name = name;\n\n\t\t\tvar tracks = [];\n\n\t\t\tfor ( var i = 0; i < clip.tracks.length; ++ i ) {\n\n\t\t\t\tvar track = clip.tracks[ i ];\n\t\t\t\tvar valueSize = track.getValueSize();\n\n\t\t\t\tvar times = [];\n\t\t\t\tvar values = [];\n\n\t\t\t\tfor ( var j = 0; j < track.times.length; ++ j ) {\n\n\t\t\t\t\tvar frame = track.times[ j ] * fps;\n\n\t\t\t\t\tif ( frame < startFrame || frame >= endFrame ) { continue; }\n\n\t\t\t\t\ttimes.push( track.times[ j ] );\n\n\t\t\t\t\tfor ( var k = 0; k < valueSize; ++ k ) {\n\n\t\t\t\t\t\tvalues.push( track.values[ j * valueSize + k ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( times.length === 0 ) { continue; }\n\n\t\t\t\ttrack.times = AnimationUtils.convertArray( times, track.times.constructor );\n\t\t\t\ttrack.values = AnimationUtils.convertArray( values, track.values.constructor );\n\n\t\t\t\ttracks.push( track );\n\n\t\t\t}\n\n\t\t\tclip.tracks = tracks;\n\n\t\t\t// find minimum .times value across all tracks in the trimmed clip\n\n\t\t\tvar minStartTime = Infinity;\n\n\t\t\tfor ( var i = 0; i < clip.tracks.length; ++ i ) {\n\n\t\t\t\tif ( minStartTime > clip.tracks[ i ].times[ 0 ] ) {\n\n\t\t\t\t\tminStartTime = clip.tracks[ i ].times[ 0 ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// shift all tracks such that clip begins at t=0\n\n\t\t\tfor ( var i = 0; i < clip.tracks.length; ++ i ) {\n\n\t\t\t\tclip.tracks[ i ].shift( - 1 * minStartTime );\n\n\t\t\t}\n\n\t\t\tclip.resetDuration();\n\n\t\t\treturn clip;\n\n\t\t}\n\n\t};\n\n\t/**\n\t * Abstract base class of interpolants over parametric samples.\n\t *\n\t * The parameter domain is one dimensional, typically the time or a path\n\t * along a curve defined by the data.\n\t *\n\t * The sample values can have any dimensionality and derived classes may\n\t * apply special interpretations to the data.\n\t *\n\t * This class provides the interval seek in a Template Method, deferring\n\t * the actual interpolation to derived classes.\n\t *\n\t * Time complexity is O(1) for linear access crossing at most two points\n\t * and O(log N) for random access, where N is the number of positions.\n\t *\n\t * References:\n\t *\n\t * \t\thttp://www.oodesign.com/template-method-pattern.html\n\t *\n\t * @author tschw\n\t */\n\n\tfunction Interpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tthis.parameterPositions = parameterPositions;\n\t\tthis._cachedIndex = 0;\n\n\t\tthis.resultBuffer = resultBuffer !== undefined ?\n\t\t\tresultBuffer : new sampleValues.constructor( sampleSize );\n\t\tthis.sampleValues = sampleValues;\n\t\tthis.valueSize = sampleSize;\n\n\t}\n\n\tObject.assign( Interpolant.prototype, {\n\n\t\tevaluate: function ( t ) {\n\n\t\t\tvar pp = this.parameterPositions,\n\t\t\t\ti1 = this._cachedIndex,\n\n\t\t\t\tt1 = pp[ i1 ],\n\t\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\t\tvalidate_interval: {\n\n\t\t\t\tseek: {\n\n\t\t\t\t\tvar right;\n\n\t\t\t\t\tlinear_scan: {\n\n\t\t\t\t\t\t//- See http://jsperf.com/comparison-to-undefined/3\n\t\t\t\t\t\t//- slower code:\n\t\t\t\t\t\t//-\n\t\t\t\t\t\t//- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\n\t\t\t\t\t\tforward_scan: if ( ! ( t < t1 ) ) {\n\n\t\t\t\t\t\t\tfor ( var giveUpAt = i1 + 2; ; ) {\n\n\t\t\t\t\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\t\t\t\t\tif ( t < t0 ) { break forward_scan; }\n\n\t\t\t\t\t\t\t\t\t// after end\n\n\t\t\t\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t, t0 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif ( i1 === giveUpAt ) { break; } // this loop\n\n\t\t\t\t\t\t\t\tt0 = t1;\n\t\t\t\t\t\t\t\tt1 = pp[ ++ i1 ];\n\n\t\t\t\t\t\t\t\tif ( t < t1 ) {\n\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// prepare binary search on the right side of the index\n\t\t\t\t\t\t\tright = pp.length;\n\t\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t//- slower code:\n\t\t\t\t\t\t//-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\n\t\t\t\t\t\tif ( ! ( t >= t0 ) ) {\n\n\t\t\t\t\t\t\t// looping?\n\n\t\t\t\t\t\t\tvar t1global = pp[ 1 ];\n\n\t\t\t\t\t\t\tif ( t < t1global ) {\n\n\t\t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\n\t\t\t\t\t\t\t\tt0 = t1global;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// linear reverse scan\n\n\t\t\t\t\t\t\tfor ( var giveUpAt = i1 - 2; ; ) {\n\n\t\t\t\t\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\t\t\t\t\t// before start\n\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif ( i1 === giveUpAt ) { break; } // this loop\n\n\t\t\t\t\t\t\t\tt1 = t0;\n\t\t\t\t\t\t\t\tt0 = pp[ -- i1 - 1 ];\n\n\t\t\t\t\t\t\t\tif ( t >= t0 ) {\n\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// prepare binary search on the left side of the index\n\t\t\t\t\t\t\tright = i1;\n\t\t\t\t\t\t\ti1 = 0;\n\t\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// the interval is valid\n\n\t\t\t\t\t\tbreak validate_interval;\n\n\t\t\t\t\t} // linear scan\n\n\t\t\t\t\t// binary search\n\n\t\t\t\t\twhile ( i1 < right ) {\n\n\t\t\t\t\t\tvar mid = ( i1 + right ) >>> 1;\n\n\t\t\t\t\t\tif ( t < pp[ mid ] ) {\n\n\t\t\t\t\t\t\tright = mid;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\ti1 = mid + 1;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tt1 = pp[ i1 ];\n\t\t\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\t\t\t\t// check boundary cases, again\n\n\t\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t0, t );\n\n\t\t\t\t\t}\n\n\t\t\t\t} // seek\n\n\t\t\t\tthis._cachedIndex = i1;\n\n\t\t\t\tthis.intervalChanged_( i1, t0, t1 );\n\n\t\t\t} // validate_interval\n\n\t\t\treturn this.interpolate_( i1, t0, t, t1 );\n\n\t\t},\n\n\t\tsettings: null, // optional, subclass-specific settings structure\n\t\t// Note: The indirection allows central control of many interpolants.\n\n\t\t// --- Protected interface\n\n\t\tDefaultSettings_: {},\n\n\t\tgetSettings_: function () {\n\n\t\t\treturn this.settings || this.DefaultSettings_;\n\n\t\t},\n\n\t\tcopySampleValue_: function ( index ) {\n\n\t\t\t// copies a sample value to the result buffer\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\t\t\t\toffset = index * stride;\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tresult[ i ] = values[ offset + i ];\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t},\n\n\t\t// Template methods for derived classes:\n\n\t\tinterpolate_: function ( /* i1, t0, t, t1 */ ) {\n\n\t\t\tthrow new Error( 'call to abstract method' );\n\t\t\t// implementations shall return this.resultBuffer\n\n\t\t},\n\n\t\tintervalChanged_: function ( /* i1, t0, t1 */ ) {\n\n\t\t\t// empty\n\n\t\t}\n\n\t} );\n\n\t//!\\ DECLARE ALIAS AFTER assign prototype !\n\tObject.assign( Interpolant.prototype, {\n\n\t\t//( 0, t, t0 ), returns this.resultBuffer\n\t\tbeforeStart_: Interpolant.prototype.copySampleValue_,\n\n\t\t//( N-1, tN-1, t ), returns this.resultBuffer\n\t\tafterEnd_: Interpolant.prototype.copySampleValue_,\n\n\t} );\n\n\t/**\n\t * Fast and simple cubic spline interpolant.\n\t *\n\t * It was derived from a Hermitian construction setting the first derivative\n\t * at each sample position to the linear slope between neighboring positions\n\t * over their parameter interval.\n\t *\n\t * @author tschw\n\t */\n\n\tfunction CubicInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t\tthis._weightPrev = - 0;\n\t\tthis._offsetPrev = - 0;\n\t\tthis._weightNext = - 0;\n\t\tthis._offsetNext = - 0;\n\n\t}\n\n\tCubicInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\t\tconstructor: CubicInterpolant,\n\n\t\tDefaultSettings_: {\n\n\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\tendingEnd: ZeroCurvatureEnding\n\n\t\t},\n\n\t\tintervalChanged_: function ( i1, t0, t1 ) {\n\n\t\t\tvar pp = this.parameterPositions,\n\t\t\t\tiPrev = i1 - 2,\n\t\t\t\tiNext = i1 + 1,\n\n\t\t\t\ttPrev = pp[ iPrev ],\n\t\t\t\ttNext = pp[ iNext ];\n\n\t\t\tif ( tPrev === undefined ) {\n\n\t\t\t\tswitch ( this.getSettings_().endingStart ) {\n\n\t\t\t\t\tcase ZeroSlopeEnding:\n\n\t\t\t\t\t\t// f'(t0) = 0\n\t\t\t\t\t\tiPrev = i1;\n\t\t\t\t\t\ttPrev = 2 * t0 - t1;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase WrapAroundEnding:\n\n\t\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\t\tiPrev = pp.length - 2;\n\t\t\t\t\t\ttPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\n\t\t\t\t\t\tiPrev = i1;\n\t\t\t\t\t\ttPrev = t1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( tNext === undefined ) {\n\n\t\t\t\tswitch ( this.getSettings_().endingEnd ) {\n\n\t\t\t\t\tcase ZeroSlopeEnding:\n\n\t\t\t\t\t\t// f'(tN) = 0\n\t\t\t\t\t\tiNext = i1;\n\t\t\t\t\t\ttNext = 2 * t1 - t0;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase WrapAroundEnding:\n\n\t\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\t\tiNext = 1;\n\t\t\t\t\t\ttNext = t1 + pp[ 1 ] - pp[ 0 ];\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\n\t\t\t\t\t\tiNext = i1 - 1;\n\t\t\t\t\t\ttNext = t0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar halfDt = ( t1 - t0 ) * 0.5,\n\t\t\t\tstride = this.valueSize;\n\n\t\t\tthis._weightPrev = halfDt / ( t0 - tPrev );\n\t\t\tthis._weightNext = halfDt / ( tNext - t1 );\n\t\t\tthis._offsetPrev = iPrev * stride;\n\t\t\tthis._offsetNext = iNext * stride;\n\n\t\t},\n\n\t\tinterpolate_: function ( i1, t0, t, t1 ) {\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\n\t\t\t\to1 = i1 * stride,\t\to0 = o1 - stride,\n\t\t\t\toP = this._offsetPrev, \toN = this._offsetNext,\n\t\t\t\twP = this._weightPrev,\twN = this._weightNext,\n\n\t\t\t\tp = ( t - t0 ) / ( t1 - t0 ),\n\t\t\t\tpp = p * p,\n\t\t\t\tppp = pp * p;\n\n\t\t\t// evaluate polynomials\n\n\t\t\tvar sP = - wP * ppp + 2 * wP * pp - wP * p;\n\t\t\tvar s0 = ( 1 + wP ) * ppp + ( - 1.5 - 2 * wP ) * pp + ( - 0.5 + wP ) * p + 1;\n\t\t\tvar s1 = ( - 1 - wN ) * ppp + ( 1.5 + wN ) * pp + 0.5 * p;\n\t\t\tvar sN = wN * ppp - wN * pp;\n\n\t\t\t// combine data linearly\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tresult[ i ] =\n\t\t\t\t\t\tsP * values[ oP + i ] +\n\t\t\t\t\t\ts0 * values[ o0 + i ] +\n\t\t\t\t\t\ts1 * values[ o1 + i ] +\n\t\t\t\t\t\tsN * values[ oN + i ];\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author tschw\n\t */\n\n\tfunction LinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\t\tconstructor: LinearInterpolant,\n\n\t\tinterpolate_: function ( i1, t0, t, t1 ) {\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\n\t\t\t\toffset1 = i1 * stride,\n\t\t\t\toffset0 = offset1 - stride,\n\n\t\t\t\tweight1 = ( t - t0 ) / ( t1 - t0 ),\n\t\t\t\tweight0 = 1 - weight1;\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tresult[ i ] =\n\t\t\t\t\t\tvalues[ offset0 + i ] * weight0 +\n\t\t\t\t\t\tvalues[ offset1 + i ] * weight1;\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * Interpolant that evaluates to the sample value at the position preceeding\n\t * the parameter.\n\t *\n\t * @author tschw\n\t */\n\n\tfunction DiscreteInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tDiscreteInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\t\tconstructor: DiscreteInterpolant,\n\n\t\tinterpolate_: function ( i1 /*, t0, t, t1 */ ) {\n\n\t\t\treturn this.copySampleValue_( i1 - 1 );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * A timed sequence of keyframes for a specific property.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction KeyframeTrack( name, times, values, interpolation ) {\n\n\t\tif ( name === undefined ) { throw new Error( 'THREE.KeyframeTrack: track name is undefined' ); }\n\t\tif ( times === undefined || times.length === 0 ) { throw new Error( 'THREE.KeyframeTrack: no keyframes in track named ' + name ); }\n\n\t\tthis.name = name;\n\n\t\tthis.times = AnimationUtils.convertArray( times, this.TimeBufferType );\n\t\tthis.values = AnimationUtils.convertArray( values, this.ValueBufferType );\n\n\t\tthis.setInterpolation( interpolation || this.DefaultInterpolation );\n\n\t}\n\n\t// Static methods\n\n\tObject.assign( KeyframeTrack, {\n\n\t\t// Serialization (in static context, because of constructor invocation\n\t\t// and automatic invocation of .toJSON):\n\n\t\ttoJSON: function ( track ) {\n\n\t\t\tvar trackType = track.constructor;\n\n\t\t\tvar json;\n\n\t\t\t// derived classes can define a static toJSON method\n\t\t\tif ( trackType.toJSON !== undefined ) {\n\n\t\t\t\tjson = trackType.toJSON( track );\n\n\t\t\t} else {\n\n\t\t\t\t// by default, we assume the data can be serialized as-is\n\t\t\t\tjson = {\n\n\t\t\t\t\t'name': track.name,\n\t\t\t\t\t'times': AnimationUtils.convertArray( track.times, Array ),\n\t\t\t\t\t'values': AnimationUtils.convertArray( track.values, Array )\n\n\t\t\t\t};\n\n\t\t\t\tvar interpolation = track.getInterpolation();\n\n\t\t\t\tif ( interpolation !== track.DefaultInterpolation ) {\n\n\t\t\t\t\tjson.interpolation = interpolation;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tjson.type = track.ValueTypeName; // mandatory\n\n\t\t\treturn json;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( KeyframeTrack.prototype, {\n\n\t\tconstructor: KeyframeTrack,\n\n\t\tTimeBufferType: Float32Array,\n\n\t\tValueBufferType: Float32Array,\n\n\t\tDefaultInterpolation: InterpolateLinear,\n\n\t\tInterpolantFactoryMethodDiscrete: function ( result ) {\n\n\t\t\treturn new DiscreteInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t\t},\n\n\t\tInterpolantFactoryMethodLinear: function ( result ) {\n\n\t\t\treturn new LinearInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t\t},\n\n\t\tInterpolantFactoryMethodSmooth: function ( result ) {\n\n\t\t\treturn new CubicInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t\t},\n\n\t\tsetInterpolation: function ( interpolation ) {\n\n\t\t\tvar factoryMethod;\n\n\t\t\tswitch ( interpolation ) {\n\n\t\t\t\tcase InterpolateDiscrete:\n\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase InterpolateLinear:\n\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase InterpolateSmooth:\n\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( factoryMethod === undefined ) {\n\n\t\t\t\tvar message = \"unsupported interpolation for \" +\n\t\t\t\t\tthis.ValueTypeName + \" keyframe track named \" + this.name;\n\n\t\t\t\tif ( this.createInterpolant === undefined ) {\n\n\t\t\t\t\t// fall back to default, unless the default itself is messed up\n\t\t\t\t\tif ( interpolation !== this.DefaultInterpolation ) {\n\n\t\t\t\t\t\tthis.setInterpolation( this.DefaultInterpolation );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthrow new Error( message ); // fatal, in this case\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tconsole.warn( 'THREE.KeyframeTrack:', message );\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tthis.createInterpolant = factoryMethod;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetInterpolation: function () {\n\n\t\t\tswitch ( this.createInterpolant ) {\n\n\t\t\t\tcase this.InterpolantFactoryMethodDiscrete:\n\n\t\t\t\t\treturn InterpolateDiscrete;\n\n\t\t\t\tcase this.InterpolantFactoryMethodLinear:\n\n\t\t\t\t\treturn InterpolateLinear;\n\n\t\t\t\tcase this.InterpolantFactoryMethodSmooth:\n\n\t\t\t\t\treturn InterpolateSmooth;\n\n\t\t\t}\n\n\t\t},\n\n\t\tgetValueSize: function () {\n\n\t\t\treturn this.values.length / this.times.length;\n\n\t\t},\n\n\t\t// move all keyframes either forwards or backwards in time\n\t\tshift: function ( timeOffset ) {\n\n\t\t\tif ( timeOffset !== 0.0 ) {\n\n\t\t\t\tvar times = this.times;\n\n\t\t\t\tfor ( var i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\t\ttimes[ i ] += timeOffset;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// scale all keyframe times by a factor (useful for frame <-> seconds conversions)\n\t\tscale: function ( timeScale ) {\n\n\t\t\tif ( timeScale !== 1.0 ) {\n\n\t\t\t\tvar times = this.times;\n\n\t\t\t\tfor ( var i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\t\ttimes[ i ] *= timeScale;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// removes keyframes before and after animation without changing any values within the range [startTime, endTime].\n\t\t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\n\t\ttrim: function ( startTime, endTime ) {\n\n\t\t\tvar times = this.times,\n\t\t\t\tnKeys = times.length,\n\t\t\t\tfrom = 0,\n\t\t\t\tto = nKeys - 1;\n\n\t\t\twhile ( from !== nKeys && times[ from ] < startTime ) {\n\n\t\t\t\t++ from;\n\n\t\t\t}\n\n\t\t\twhile ( to !== - 1 && times[ to ] > endTime ) {\n\n\t\t\t\t-- to;\n\n\t\t\t}\n\n\t\t\t++ to; // inclusive -> exclusive bound\n\n\t\t\tif ( from !== 0 || to !== nKeys ) {\n\n\t\t\t\t// empty tracks are forbidden, so keep at least one keyframe\n\t\t\t\tif ( from >= to ) { to = Math.max( to, 1 ), from = to - 1; }\n\n\t\t\t\tvar stride = this.getValueSize();\n\t\t\t\tthis.times = AnimationUtils.arraySlice( times, from, to );\n\t\t\t\tthis.values = AnimationUtils.arraySlice( this.values, from * stride, to * stride );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\n\t\tvalidate: function () {\n\n\t\t\tvar valid = true;\n\n\t\t\tvar valueSize = this.getValueSize();\n\t\t\tif ( valueSize - Math.floor( valueSize ) !== 0 ) {\n\n\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Invalid value size in track.', this );\n\t\t\t\tvalid = false;\n\n\t\t\t}\n\n\t\t\tvar times = this.times,\n\t\t\t\tvalues = this.values,\n\n\t\t\t\tnKeys = times.length;\n\n\t\t\tif ( nKeys === 0 ) {\n\n\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Track is empty.', this );\n\t\t\t\tvalid = false;\n\n\t\t\t}\n\n\t\t\tvar prevTime = null;\n\n\t\t\tfor ( var i = 0; i !== nKeys; i ++ ) {\n\n\t\t\t\tvar currTime = times[ i ];\n\n\t\t\t\tif ( typeof currTime === 'number' && isNaN( currTime ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime );\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tif ( prevTime !== null && prevTime > currTime ) {\n\n\t\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime );\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tprevTime = currTime;\n\n\t\t\t}\n\n\t\t\tif ( values !== undefined ) {\n\n\t\t\t\tif ( AnimationUtils.isTypedArray( values ) ) {\n\n\t\t\t\t\tfor ( var i = 0, n = values.length; i !== n; ++ i ) {\n\n\t\t\t\t\t\tvar value = values[ i ];\n\n\t\t\t\t\t\tif ( isNaN( value ) ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Value is not a valid number.', this, i, value );\n\t\t\t\t\t\t\tvalid = false;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn valid;\n\n\t\t},\n\n\t\t// removes equivalent sequential keys as common in morph target sequences\n\t\t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n\t\toptimize: function () {\n\n\t\t\t// times or values may be shared with other tracks, so overwriting is unsafe\n\t\t\tvar times = AnimationUtils.arraySlice( this.times ),\n\t\t\t\tvalues = AnimationUtils.arraySlice( this.values ),\n\t\t\t\tstride = this.getValueSize(),\n\n\t\t\t\tsmoothInterpolation = this.getInterpolation() === InterpolateSmooth,\n\n\t\t\t\twriteIndex = 1,\n\t\t\t\tlastIndex = times.length - 1;\n\n\t\t\tfor ( var i = 1; i < lastIndex; ++ i ) {\n\n\t\t\t\tvar keep = false;\n\n\t\t\t\tvar time = times[ i ];\n\t\t\t\tvar timeNext = times[ i + 1 ];\n\n\t\t\t\t// remove adjacent keyframes scheduled at the same time\n\n\t\t\t\tif ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {\n\n\t\t\t\t\tif ( ! smoothInterpolation ) {\n\n\t\t\t\t\t\t// remove unnecessary keyframes same as their neighbors\n\n\t\t\t\t\t\tvar offset = i * stride,\n\t\t\t\t\t\t\toffsetP = offset - stride,\n\t\t\t\t\t\t\toffsetN = offset + stride;\n\n\t\t\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\t\t\tvar value = values[ offset + j ];\n\n\t\t\t\t\t\t\tif ( value !== values[ offsetP + j ] ||\n\t\t\t\t\t\t\t\tvalue !== values[ offsetN + j ] ) {\n\n\t\t\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tkeep = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// in-place compaction\n\n\t\t\t\tif ( keep ) {\n\n\t\t\t\t\tif ( i !== writeIndex ) {\n\n\t\t\t\t\t\ttimes[ writeIndex ] = times[ i ];\n\n\t\t\t\t\t\tvar readOffset = i * stride,\n\t\t\t\t\t\t\twriteOffset = writeIndex * stride;\n\n\t\t\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t++ writeIndex;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// flush last keyframe (compaction looks ahead)\n\n\t\t\tif ( lastIndex > 0 ) {\n\n\t\t\t\ttimes[ writeIndex ] = times[ lastIndex ];\n\n\t\t\t\tfor ( var readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n\t\t\t\t}\n\n\t\t\t\t++ writeIndex;\n\n\t\t\t}\n\n\t\t\tif ( writeIndex !== times.length ) {\n\n\t\t\t\tthis.times = AnimationUtils.arraySlice( times, 0, writeIndex );\n\t\t\t\tthis.values = AnimationUtils.arraySlice( values, 0, writeIndex * stride );\n\n\t\t\t} else {\n\n\t\t\t\tthis.times = times;\n\t\t\t\tthis.values = values;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\tvar times = AnimationUtils.arraySlice( this.times, 0 );\n\t\t\tvar values = AnimationUtils.arraySlice( this.values, 0 );\n\n\t\t\tvar TypedKeyframeTrack = this.constructor;\n\t\t\tvar track = new TypedKeyframeTrack( this.name, times, values );\n\n\t\t\t// Interpolant argument to constructor is not saved, so copy the factory method directly.\n\t\t\ttrack.createInterpolant = this.createInterpolant;\n\n\t\t\treturn track;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of Boolean keyframe values.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction BooleanKeyframeTrack( name, times, values ) {\n\n\t\tKeyframeTrack.call( this, name, times, values );\n\n\t}\n\n\tBooleanKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: BooleanKeyframeTrack,\n\n\t\tValueTypeName: 'bool',\n\t\tValueBufferType: Array,\n\n\t\tDefaultInterpolation: InterpolateDiscrete,\n\n\t\tInterpolantFactoryMethodLinear: undefined,\n\t\tInterpolantFactoryMethodSmooth: undefined\n\n\t\t// Note: Actually this track could have a optimized / compressed\n\t\t// representation of a single value and a custom interpolant that\n\t\t// computes \"firstValue ^ isOdd( index )\".\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of keyframe values that represent color.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction ColorKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n\t}\n\n\tColorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: ColorKeyframeTrack,\n\n\t\tValueTypeName: 'color'\n\n\t\t// ValueBufferType is inherited\n\n\t\t// DefaultInterpolation is inherited\n\n\t\t// Note: Very basic implementation and nothing special yet.\n\t\t// However, this is the place for color space parameterization.\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of numeric keyframe values.\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction NumberKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n\t}\n\n\tNumberKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: NumberKeyframeTrack,\n\n\t\tValueTypeName: 'number'\n\n\t\t// ValueBufferType is inherited\n\n\t\t// DefaultInterpolation is inherited\n\n\t} );\n\n\t/**\n\t * Spherical linear unit quaternion interpolant.\n\t *\n\t * @author tschw\n\t */\n\n\tfunction QuaternionLinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tQuaternionLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\t\tconstructor: QuaternionLinearInterpolant,\n\n\t\tinterpolate_: function ( i1, t0, t, t1 ) {\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\n\t\t\t\toffset = i1 * stride,\n\n\t\t\t\talpha = ( t - t0 ) / ( t1 - t0 );\n\n\t\t\tfor ( var end = offset + stride; offset !== end; offset += 4 ) {\n\n\t\t\t\tQuaternion.slerpFlat( result, 0, values, offset - stride, values, offset, alpha );\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of quaternion keyframe values.\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction QuaternionKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n\t}\n\n\tQuaternionKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: QuaternionKeyframeTrack,\n\n\t\tValueTypeName: 'quaternion',\n\n\t\t// ValueBufferType is inherited\n\n\t\tDefaultInterpolation: InterpolateLinear,\n\n\t\tInterpolantFactoryMethodLinear: function ( result ) {\n\n\t\t\treturn new QuaternionLinearInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t\t},\n\n\t\tInterpolantFactoryMethodSmooth: undefined // not yet implemented\n\n\t} );\n\n\t/**\n\t *\n\t * A Track that interpolates Strings\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction StringKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n\t}\n\n\tStringKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: StringKeyframeTrack,\n\n\t\tValueTypeName: 'string',\n\t\tValueBufferType: Array,\n\n\t\tDefaultInterpolation: InterpolateDiscrete,\n\n\t\tInterpolantFactoryMethodLinear: undefined,\n\n\t\tInterpolantFactoryMethodSmooth: undefined\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of vectored keyframe values.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction VectorKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n\t}\n\n\tVectorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: VectorKeyframeTrack,\n\n\t\tValueTypeName: 'vector'\n\n\t\t// ValueBufferType is inherited\n\n\t\t// DefaultInterpolation is inherited\n\n\t} );\n\n\t/**\n\t *\n\t * Reusable set of Tracks that represent an animation.\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t */\n\n\tfunction AnimationClip( name, duration, tracks ) {\n\n\t\tthis.name = name;\n\t\tthis.tracks = tracks;\n\t\tthis.duration = ( duration !== undefined ) ? duration : - 1;\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\t// this means it should figure out its duration by scanning the tracks\n\t\tif ( this.duration < 0 ) {\n\n\t\t\tthis.resetDuration();\n\n\t\t}\n\n\t}\n\n\tfunction getTrackTypeForValueTypeName( typeName ) {\n\n\t\tswitch ( typeName.toLowerCase() ) {\n\n\t\t\tcase 'scalar':\n\t\t\tcase 'double':\n\t\t\tcase 'float':\n\t\t\tcase 'number':\n\t\t\tcase 'integer':\n\n\t\t\t\treturn NumberKeyframeTrack;\n\n\t\t\tcase 'vector':\n\t\t\tcase 'vector2':\n\t\t\tcase 'vector3':\n\t\t\tcase 'vector4':\n\n\t\t\t\treturn VectorKeyframeTrack;\n\n\t\t\tcase 'color':\n\n\t\t\t\treturn ColorKeyframeTrack;\n\n\t\t\tcase 'quaternion':\n\n\t\t\t\treturn QuaternionKeyframeTrack;\n\n\t\t\tcase 'bool':\n\t\t\tcase 'boolean':\n\n\t\t\t\treturn BooleanKeyframeTrack;\n\n\t\t\tcase 'string':\n\n\t\t\t\treturn StringKeyframeTrack;\n\n\t\t}\n\n\t\tthrow new Error( 'THREE.KeyframeTrack: Unsupported typeName: ' + typeName );\n\n\t}\n\n\tfunction parseKeyframeTrack( json ) {\n\n\t\tif ( json.type === undefined ) {\n\n\t\t\tthrow new Error( 'THREE.KeyframeTrack: track type undefined, can not parse' );\n\n\t\t}\n\n\t\tvar trackType = getTrackTypeForValueTypeName( json.type );\n\n\t\tif ( json.times === undefined ) {\n\n\t\t\tvar times = [], values = [];\n\n\t\t\tAnimationUtils.flattenJSON( json.keys, times, values, 'value' );\n\n\t\t\tjson.times = times;\n\t\t\tjson.values = values;\n\n\t\t}\n\n\t\t// derived classes can define a static parse method\n\t\tif ( trackType.parse !== undefined ) {\n\n\t\t\treturn trackType.parse( json );\n\n\t\t} else {\n\n\t\t\t// by default, we assume a constructor compatible with the base\n\t\t\treturn new trackType( json.name, json.times, json.values, json.interpolation );\n\n\t\t}\n\n\t}\n\n\tObject.assign( AnimationClip, {\n\n\t\tparse: function ( json ) {\n\n\t\t\tvar tracks = [],\n\t\t\t\tjsonTracks = json.tracks,\n\t\t\t\tframeTime = 1.0 / ( json.fps || 1.0 );\n\n\t\t\tfor ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {\n\n\t\t\t\ttracks.push( parseKeyframeTrack( jsonTracks[ i ] ).scale( frameTime ) );\n\n\t\t\t}\n\n\t\t\treturn new AnimationClip( json.name, json.duration, tracks );\n\n\t\t},\n\n\t\ttoJSON: function ( clip ) {\n\n\t\t\tvar tracks = [],\n\t\t\t\tclipTracks = clip.tracks;\n\n\t\t\tvar json = {\n\n\t\t\t\t'name': clip.name,\n\t\t\t\t'duration': clip.duration,\n\t\t\t\t'tracks': tracks,\n\t\t\t\t'uuid': clip.uuid\n\n\t\t\t};\n\n\t\t\tfor ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {\n\n\t\t\t\ttracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );\n\n\t\t\t}\n\n\t\t\treturn json;\n\n\t\t},\n\n\t\tCreateFromMorphTargetSequence: function ( name, morphTargetSequence, fps, noLoop ) {\n\n\t\t\tvar numMorphTargets = morphTargetSequence.length;\n\t\t\tvar tracks = [];\n\n\t\t\tfor ( var i = 0; i < numMorphTargets; i ++ ) {\n\n\t\t\t\tvar times = [];\n\t\t\t\tvar values = [];\n\n\t\t\t\ttimes.push(\n\t\t\t\t\t( i + numMorphTargets - 1 ) % numMorphTargets,\n\t\t\t\t\ti,\n\t\t\t\t\t( i + 1 ) % numMorphTargets );\n\n\t\t\t\tvalues.push( 0, 1, 0 );\n\n\t\t\t\tvar order = AnimationUtils.getKeyframeOrder( times );\n\t\t\t\ttimes = AnimationUtils.sortedArray( times, 1, order );\n\t\t\t\tvalues = AnimationUtils.sortedArray( values, 1, order );\n\n\t\t\t\t// if there is a key at the first frame, duplicate it as the\n\t\t\t\t// last frame as well for perfect loop.\n\t\t\t\tif ( ! noLoop && times[ 0 ] === 0 ) {\n\n\t\t\t\t\ttimes.push( numMorphTargets );\n\t\t\t\t\tvalues.push( values[ 0 ] );\n\n\t\t\t\t}\n\n\t\t\t\ttracks.push(\n\t\t\t\t\tnew NumberKeyframeTrack(\n\t\t\t\t\t\t'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',\n\t\t\t\t\t\ttimes, values\n\t\t\t\t\t).scale( 1.0 / fps ) );\n\n\t\t\t}\n\n\t\t\treturn new AnimationClip( name, - 1, tracks );\n\n\t\t},\n\n\t\tfindByName: function ( objectOrClipArray, name ) {\n\n\t\t\tvar clipArray = objectOrClipArray;\n\n\t\t\tif ( ! Array.isArray( objectOrClipArray ) ) {\n\n\t\t\t\tvar o = objectOrClipArray;\n\t\t\t\tclipArray = o.geometry && o.geometry.animations || o.animations;\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < clipArray.length; i ++ ) {\n\n\t\t\t\tif ( clipArray[ i ].name === name ) {\n\n\t\t\t\t\treturn clipArray[ i ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t},\n\n\t\tCreateClipsFromMorphTargetSequences: function ( morphTargets, fps, noLoop ) {\n\n\t\t\tvar animationToMorphTargets = {};\n\n\t\t\t// tested with https://regex101.com/ on trick sequences\n\t\t\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n\t\t\tvar pattern = /^([\\w-]*?)([\\d]+)$/;\n\n\t\t\t// sort morph target names into animation groups based\n\t\t\t// patterns like Walk_001, Walk_002, Run_001, Run_002\n\t\t\tfor ( var i = 0, il = morphTargets.length; i < il; i ++ ) {\n\n\t\t\t\tvar morphTarget = morphTargets[ i ];\n\t\t\t\tvar parts = morphTarget.name.match( pattern );\n\n\t\t\t\tif ( parts && parts.length > 1 ) {\n\n\t\t\t\t\tvar name = parts[ 1 ];\n\n\t\t\t\t\tvar animationMorphTargets = animationToMorphTargets[ name ];\n\t\t\t\t\tif ( ! animationMorphTargets ) {\n\n\t\t\t\t\t\tanimationToMorphTargets[ name ] = animationMorphTargets = [];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tanimationMorphTargets.push( morphTarget );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar clips = [];\n\n\t\t\tfor ( var name in animationToMorphTargets ) {\n\n\t\t\t\tclips.push( AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );\n\n\t\t\t}\n\n\t\t\treturn clips;\n\n\t\t},\n\n\t\t// parse the animation.hierarchy format\n\t\tparseAnimation: function ( animation, bones ) {\n\n\t\t\tif ( ! animation ) {\n\n\t\t\t\tconsole.error( 'THREE.AnimationClip: No animation in JSONLoader data.' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar addNonemptyTrack = function ( trackType, trackName, animationKeys, propertyName, destTracks ) {\n\n\t\t\t\t// only return track if there are actually keys.\n\t\t\t\tif ( animationKeys.length !== 0 ) {\n\n\t\t\t\t\tvar times = [];\n\t\t\t\t\tvar values = [];\n\n\t\t\t\t\tAnimationUtils.flattenJSON( animationKeys, times, values, propertyName );\n\n\t\t\t\t\t// empty keys are filtered out, so check again\n\t\t\t\t\tif ( times.length !== 0 ) {\n\n\t\t\t\t\t\tdestTracks.push( new trackType( trackName, times, values ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t\tvar tracks = [];\n\n\t\t\tvar clipName = animation.name || 'default';\n\t\t\t// automatic length determination in AnimationClip.\n\t\t\tvar duration = animation.length || - 1;\n\t\t\tvar fps = animation.fps || 30;\n\n\t\t\tvar hierarchyTracks = animation.hierarchy || [];\n\n\t\t\tfor ( var h = 0; h < hierarchyTracks.length; h ++ ) {\n\n\t\t\t\tvar animationKeys = hierarchyTracks[ h ].keys;\n\n\t\t\t\t// skip empty tracks\n\t\t\t\tif ( ! animationKeys || animationKeys.length === 0 ) { continue; }\n\n\t\t\t\t// process morph targets\n\t\t\t\tif ( animationKeys[ 0 ].morphTargets ) {\n\n\t\t\t\t\t// figure out all morph targets used in this track\n\t\t\t\t\tvar morphTargetNames = {};\n\n\t\t\t\t\tfor ( var k = 0; k < animationKeys.length; k ++ ) {\n\n\t\t\t\t\t\tif ( animationKeys[ k ].morphTargets ) {\n\n\t\t\t\t\t\t\tfor ( var m = 0; m < animationKeys[ k ].morphTargets.length; m ++ ) {\n\n\t\t\t\t\t\t\t\tmorphTargetNames[ animationKeys[ k ].morphTargets[ m ] ] = - 1;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// create a track for each morph target with all zero\n\t\t\t\t\t// morphTargetInfluences except for the keys in which\n\t\t\t\t\t// the morphTarget is named.\n\t\t\t\t\tfor ( var morphTargetName in morphTargetNames ) {\n\n\t\t\t\t\t\tvar times = [];\n\t\t\t\t\t\tvar values = [];\n\n\t\t\t\t\t\tfor ( var m = 0; m !== animationKeys[ k ].morphTargets.length; ++ m ) {\n\n\t\t\t\t\t\t\tvar animationKey = animationKeys[ k ];\n\n\t\t\t\t\t\t\ttimes.push( animationKey.time );\n\t\t\t\t\t\t\tvalues.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttracks.push( new NumberKeyframeTrack( '.morphTargetInfluence[' + morphTargetName + ']', times, values ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tduration = morphTargetNames.length * ( fps || 1.0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// ...assume skeletal animation\n\n\t\t\t\t\tvar boneName = '.bones[' + bones[ h ].name + ']';\n\n\t\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\tVectorKeyframeTrack, boneName + '.position',\n\t\t\t\t\t\tanimationKeys, 'pos', tracks );\n\n\t\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\tQuaternionKeyframeTrack, boneName + '.quaternion',\n\t\t\t\t\t\tanimationKeys, 'rot', tracks );\n\n\t\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\tVectorKeyframeTrack, boneName + '.scale',\n\t\t\t\t\t\tanimationKeys, 'scl', tracks );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( tracks.length === 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar clip = new AnimationClip( clipName, duration, tracks );\n\n\t\t\treturn clip;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( AnimationClip.prototype, {\n\n\t\tresetDuration: function () {\n\n\t\t\tvar tracks = this.tracks, duration = 0;\n\n\t\t\tfor ( var i = 0, n = tracks.length; i !== n; ++ i ) {\n\n\t\t\t\tvar track = this.tracks[ i ];\n\n\t\t\t\tduration = Math.max( duration, track.times[ track.times.length - 1 ] );\n\n\t\t\t}\n\n\t\t\tthis.duration = duration;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttrim: function () {\n\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\t\tthis.tracks[ i ].trim( 0, this.duration );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tvalidate: function () {\n\n\t\t\tvar valid = true;\n\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\t\tvalid = valid && this.tracks[ i ].validate();\n\n\t\t\t}\n\n\t\t\treturn valid;\n\n\t\t},\n\n\t\toptimize: function () {\n\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\t\tthis.tracks[ i ].optimize();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\tvar tracks = [];\n\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\t\ttracks.push( this.tracks[ i ].clone() );\n\n\t\t\t}\n\n\t\t\treturn new AnimationClip( this.name, this.duration, tracks );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar Cache = {\n\n\t\tenabled: false,\n\n\t\tfiles: {},\n\n\t\tadd: function ( key, file ) {\n\n\t\t\tif ( this.enabled === false ) { return; }\n\n\t\t\t// console.log( 'THREE.Cache', 'Adding key:', key );\n\n\t\t\tthis.files[ key ] = file;\n\n\t\t},\n\n\t\tget: function ( key ) {\n\n\t\t\tif ( this.enabled === false ) { return; }\n\n\t\t\t// console.log( 'THREE.Cache', 'Checking key:', key );\n\n\t\t\treturn this.files[ key ];\n\n\t\t},\n\n\t\tremove: function ( key ) {\n\n\t\t\tdelete this.files[ key ];\n\n\t\t},\n\n\t\tclear: function () {\n\n\t\t\tthis.files = {};\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction LoadingManager( onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar isLoading = false;\n\t\tvar itemsLoaded = 0;\n\t\tvar itemsTotal = 0;\n\t\tvar urlModifier = undefined;\n\t\tvar handlers = [];\n\n\t\t// Refer to #5689 for the reason why we don't set .onStart\n\t\t// in the constructor\n\n\t\tthis.onStart = undefined;\n\t\tthis.onLoad = onLoad;\n\t\tthis.onProgress = onProgress;\n\t\tthis.onError = onError;\n\n\t\tthis.itemStart = function ( url ) {\n\n\t\t\titemsTotal ++;\n\n\t\t\tif ( isLoading === false ) {\n\n\t\t\t\tif ( scope.onStart !== undefined ) {\n\n\t\t\t\t\tscope.onStart( url, itemsLoaded, itemsTotal );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tisLoading = true;\n\n\t\t};\n\n\t\tthis.itemEnd = function ( url ) {\n\n\t\t\titemsLoaded ++;\n\n\t\t\tif ( scope.onProgress !== undefined ) {\n\n\t\t\t\tscope.onProgress( url, itemsLoaded, itemsTotal );\n\n\t\t\t}\n\n\t\t\tif ( itemsLoaded === itemsTotal ) {\n\n\t\t\t\tisLoading = false;\n\n\t\t\t\tif ( scope.onLoad !== undefined ) {\n\n\t\t\t\t\tscope.onLoad();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.itemError = function ( url ) {\n\n\t\t\tif ( scope.onError !== undefined ) {\n\n\t\t\t\tscope.onError( url );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.resolveURL = function ( url ) {\n\n\t\t\tif ( urlModifier ) {\n\n\t\t\t\treturn urlModifier( url );\n\n\t\t\t}\n\n\t\t\treturn url;\n\n\t\t};\n\n\t\tthis.setURLModifier = function ( transform ) {\n\n\t\t\turlModifier = transform;\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tthis.addHandler = function ( regex, loader ) {\n\n\t\t\thandlers.push( regex, loader );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tthis.removeHandler = function ( regex ) {\n\n\t\t\tvar index = handlers.indexOf( regex );\n\n\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\thandlers.splice( index, 2 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tthis.getHandler = function ( file ) {\n\n\t\t\tfor ( var i = 0, l = handlers.length; i < l; i += 2 ) {\n\n\t\t\t\tvar regex = handlers[ i ];\n\t\t\t\tvar loader = handlers[ i + 1 ];\n\n\t\t\t\tif ( regex.global ) { regex.lastIndex = 0; } // see #17920\n\n\t\t\t\tif ( regex.test( file ) ) {\n\n\t\t\t\t\treturn loader;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t};\n\n\t}\n\n\tvar DefaultLoadingManager = new LoadingManager();\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Loader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t\tthis.crossOrigin = 'anonymous';\n\t\tthis.path = '';\n\t\tthis.resourcePath = '';\n\n\t}\n\n\tObject.assign( Loader.prototype, {\n\n\t\tload: function ( /* url, onLoad, onProgress, onError */ ) {},\n\n\t\tparse: function ( /* data */ ) {},\n\n\t\tsetCrossOrigin: function ( crossOrigin ) {\n\n\t\t\tthis.crossOrigin = crossOrigin;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetPath: function ( path ) {\n\n\t\t\tthis.path = path;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetResourcePath: function ( resourcePath ) {\n\n\t\t\tthis.resourcePath = resourcePath;\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar loading = {};\n\n\tfunction FileLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tFileLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: FileLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tif ( url === undefined ) { url = ''; }\n\n\t\t\tif ( this.path !== undefined ) { url = this.path + url; }\n\n\t\t\turl = this.manager.resolveURL( url );\n\n\t\t\tvar scope = this;\n\n\t\t\tvar cached = Cache.get( url );\n\n\t\t\tif ( cached !== undefined ) {\n\n\t\t\t\tscope.manager.itemStart( url );\n\n\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\tif ( onLoad ) { onLoad( cached ); }\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, 0 );\n\n\t\t\t\treturn cached;\n\n\t\t\t}\n\n\t\t\t// Check if request is duplicate\n\n\t\t\tif ( loading[ url ] !== undefined ) {\n\n\t\t\t\tloading[ url ].push( {\n\n\t\t\t\t\tonLoad: onLoad,\n\t\t\t\t\tonProgress: onProgress,\n\t\t\t\t\tonError: onError\n\n\t\t\t\t} );\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t// Check for data: URI\n\t\t\tvar dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;\n\t\t\tvar dataUriRegexResult = url.match( dataUriRegex );\n\n\t\t\t// Safari can not handle Data URIs through XMLHttpRequest so process manually\n\t\t\tif ( dataUriRegexResult ) {\n\n\t\t\t\tvar mimeType = dataUriRegexResult[ 1 ];\n\t\t\t\tvar isBase64 = !! dataUriRegexResult[ 2 ];\n\t\t\t\tvar data = dataUriRegexResult[ 3 ];\n\n\t\t\t\tdata = decodeURIComponent( data );\n\n\t\t\t\tif ( isBase64 ) { data = atob( data ); }\n\n\t\t\t\ttry {\n\n\t\t\t\t\tvar response;\n\t\t\t\t\tvar responseType = ( this.responseType || '' ).toLowerCase();\n\n\t\t\t\t\tswitch ( responseType ) {\n\n\t\t\t\t\t\tcase 'arraybuffer':\n\t\t\t\t\t\tcase 'blob':\n\n\t\t\t\t\t\t\tvar view = new Uint8Array( data.length );\n\n\t\t\t\t\t\t\tfor ( var i = 0; i < data.length; i ++ ) {\n\n\t\t\t\t\t\t\t\tview[ i ] = data.charCodeAt( i );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( responseType === 'blob' ) {\n\n\t\t\t\t\t\t\t\tresponse = new Blob( [ view.buffer ], { type: mimeType } );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tresponse = view.buffer;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'document':\n\n\t\t\t\t\t\t\tvar parser = new DOMParser();\n\t\t\t\t\t\t\tresponse = parser.parseFromString( data, mimeType );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'json':\n\n\t\t\t\t\t\t\tresponse = JSON.parse( data );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault: // 'text' or other\n\n\t\t\t\t\t\t\tresponse = data;\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Wait for next browser tick like standard XMLHttpRequest event dispatching does\n\t\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\t\tif ( onLoad ) { onLoad( response ); }\n\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t\t}, 0 );\n\n\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\t// Wait for next browser tick like standard XMLHttpRequest event dispatching does\n\t\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\t\tif ( onError ) { onError( error ); }\n\n\t\t\t\t\t\tscope.manager.itemError( url );\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t\t}, 0 );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// Initialise array for duplicate requests\n\n\t\t\t\tloading[ url ] = [];\n\n\t\t\t\tloading[ url ].push( {\n\n\t\t\t\t\tonLoad: onLoad,\n\t\t\t\t\tonProgress: onProgress,\n\t\t\t\t\tonError: onError\n\n\t\t\t\t} );\n\n\t\t\t\tvar request = new XMLHttpRequest();\n\n\t\t\t\trequest.open( 'GET', url, true );\n\n\t\t\t\trequest.addEventListener( 'load', function ( event ) {\n\n\t\t\t\t\tvar response = this.response;\n\n\t\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\t\tdelete loading[ url ];\n\n\t\t\t\t\tif ( this.status === 200 || this.status === 0 ) {\n\n\t\t\t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\n\t\t\t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\n\n\t\t\t\t\t\tif ( this.status === 0 ) { console.warn( 'THREE.FileLoader: HTTP Status 0 received.' ); }\n\n\t\t\t\t\t\t// Add to cache only on HTTP success, so that we do not cache\n\t\t\t\t\t\t// error response bodies as proper responses to requests.\n\t\t\t\t\t\tCache.add( url, response );\n\n\t\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\t\tif ( callback.onLoad ) { callback.onLoad( response ); }\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\t\tif ( callback.onError ) { callback.onError( event ); }\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tscope.manager.itemError( url );\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t\t}\n\n\t\t\t\t}, false );\n\n\t\t\t\trequest.addEventListener( 'progress', function ( event ) {\n\n\t\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\tif ( callback.onProgress ) { callback.onProgress( event ); }\n\n\t\t\t\t\t}\n\n\t\t\t\t}, false );\n\n\t\t\t\trequest.addEventListener( 'error', function ( event ) {\n\n\t\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\t\tdelete loading[ url ];\n\n\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\tif ( callback.onError ) { callback.onError( event ); }\n\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError( url );\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, false );\n\n\t\t\t\trequest.addEventListener( 'abort', function ( event ) {\n\n\t\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\t\tdelete loading[ url ];\n\n\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\tif ( callback.onError ) { callback.onError( event ); }\n\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError( url );\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, false );\n\n\t\t\t\tif ( this.responseType !== undefined ) { request.responseType = this.responseType; }\n\t\t\t\tif ( this.withCredentials !== undefined ) { request.withCredentials = this.withCredentials; }\n\n\t\t\t\tif ( request.overrideMimeType ) { request.overrideMimeType( this.mimeType !== undefined ? this.mimeType : 'text/plain' ); }\n\n\t\t\t\tfor ( var header in this.requestHeader ) {\n\n\t\t\t\t\trequest.setRequestHeader( header, this.requestHeader[ header ] );\n\n\t\t\t\t}\n\n\t\t\t\trequest.send( null );\n\n\t\t\t}\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\treturn request;\n\n\t\t},\n\n\t\tsetResponseType: function ( value ) {\n\n\t\t\tthis.responseType = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetWithCredentials: function ( value ) {\n\n\t\t\tthis.withCredentials = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetMimeType: function ( value ) {\n\n\t\t\tthis.mimeType = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetRequestHeader: function ( value ) {\n\n\t\t\tthis.requestHeader = value;\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io/\n\t */\n\n\tfunction AnimationLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tAnimationLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: AnimationLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( scope.manager );\n\t\t\tloader.setPath( scope.path );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( json ) {\n\n\t\t\tvar animations = [];\n\n\t\t\tfor ( var i = 0; i < json.length; i ++ ) {\n\n\t\t\t\tvar clip = AnimationClip.parse( json[ i ] );\n\n\t\t\t\tanimations.push( clip );\n\n\t\t\t}\n\n\t\t\treturn animations;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t *\n\t * Abstract Base class to block based textures loader (dds, pvr, ...)\n\t *\n\t * Sub classes have to implement the parse() method which will be used in load().\n\t */\n\n\tfunction CompressedTextureLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tCompressedTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: CompressedTextureLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar images = [];\n\n\t\t\tvar texture = new CompressedTexture();\n\t\t\ttexture.image = images;\n\n\t\t\tvar loader = new FileLoader( this.manager );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\t\tfunction loadTexture( i ) {\n\n\t\t\t\tloader.load( url[ i ], function ( buffer ) {\n\n\t\t\t\t\tvar texDatas = scope.parse( buffer, true );\n\n\t\t\t\t\timages[ i ] = {\n\t\t\t\t\t\twidth: texDatas.width,\n\t\t\t\t\t\theight: texDatas.height,\n\t\t\t\t\t\tformat: texDatas.format,\n\t\t\t\t\t\tmipmaps: texDatas.mipmaps\n\t\t\t\t\t};\n\n\t\t\t\t\tloaded += 1;\n\n\t\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\t\tif ( texDatas.mipmapCount === 1 )\n\t\t\t\t\t\t\t{ texture.minFilter = LinearFilter; }\n\n\t\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\t\tif ( onLoad ) { onLoad( texture ); }\n\n\t\t\t\t\t}\n\n\t\t\t\t}, onProgress, onError );\n\n\t\t\t}\n\n\t\t\tif ( Array.isArray( url ) ) {\n\n\t\t\t\tvar loaded = 0;\n\n\t\t\t\tfor ( var i = 0, il = url.length; i < il; ++ i ) {\n\n\t\t\t\t\tloadTexture( i );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// compressed cubemap texture stored in a single DDS file\n\n\t\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\t\tvar texDatas = scope.parse( buffer, true );\n\n\t\t\t\t\tif ( texDatas.isCubemap ) {\n\n\t\t\t\t\t\tvar faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n\n\t\t\t\t\t\tfor ( var f = 0; f < faces; f ++ ) {\n\n\t\t\t\t\t\t\timages[ f ] = { mipmaps: [] };\n\n\t\t\t\t\t\t\tfor ( var i = 0; i < texDatas.mipmapCount; i ++ ) {\n\n\t\t\t\t\t\t\t\timages[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );\n\t\t\t\t\t\t\t\timages[ f ].format = texDatas.format;\n\t\t\t\t\t\t\t\timages[ f ].width = texDatas.width;\n\t\t\t\t\t\t\t\timages[ f ].height = texDatas.height;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttexture.image.width = texDatas.width;\n\t\t\t\t\t\ttexture.image.height = texDatas.height;\n\t\t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( texDatas.mipmapCount === 1 ) {\n\n\t\t\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\tif ( onLoad ) { onLoad( texture ); }\n\n\t\t\t\t}, onProgress, onError );\n\n\t\t\t}\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author Nikos M. / https://github.com/foo123/\n\t *\n\t * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n\t *\n\t * Sub classes have to implement the parse() method which will be used in load().\n\t */\n\n\tfunction DataTextureLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tDataTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: DataTextureLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar texture = new DataTexture();\n\n\t\t\tvar loader = new FileLoader( this.manager );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\tvar texData = scope.parse( buffer );\n\n\t\t\t\tif ( ! texData ) { return; }\n\n\t\t\t\tif ( texData.image !== undefined ) {\n\n\t\t\t\t\ttexture.image = texData.image;\n\n\t\t\t\t} else if ( texData.data !== undefined ) {\n\n\t\t\t\t\ttexture.image.width = texData.width;\n\t\t\t\t\ttexture.image.height = texData.height;\n\t\t\t\t\ttexture.image.data = texData.data;\n\n\t\t\t\t}\n\n\t\t\t\ttexture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;\n\t\t\t\ttexture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;\n\n\t\t\t\ttexture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;\n\t\t\t\ttexture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearFilter;\n\n\t\t\t\ttexture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;\n\n\t\t\t\tif ( texData.format !== undefined ) {\n\n\t\t\t\t\ttexture.format = texData.format;\n\n\t\t\t\t}\n\t\t\t\tif ( texData.type !== undefined ) {\n\n\t\t\t\t\ttexture.type = texData.type;\n\n\t\t\t\t}\n\n\t\t\t\tif ( texData.mipmaps !== undefined ) {\n\n\t\t\t\t\ttexture.mipmaps = texData.mipmaps;\n\t\t\t\t\ttexture.minFilter = LinearMipmapLinearFilter; // presumably...\n\n\t\t\t\t}\n\n\t\t\t\tif ( texData.mipmapCount === 1 ) {\n\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t\t}\n\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif ( onLoad ) { onLoad( texture, texData ); }\n\n\t\t\t}, onProgress, onError );\n\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction ImageLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tImageLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: ImageLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tif ( this.path !== undefined ) { url = this.path + url; }\n\n\t\t\turl = this.manager.resolveURL( url );\n\n\t\t\tvar scope = this;\n\n\t\t\tvar cached = Cache.get( url );\n\n\t\t\tif ( cached !== undefined ) {\n\n\t\t\t\tscope.manager.itemStart( url );\n\n\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\tif ( onLoad ) { onLoad( cached ); }\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, 0 );\n\n\t\t\t\treturn cached;\n\n\t\t\t}\n\n\t\t\tvar image = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'img' );\n\n\t\t\tfunction onImageLoad() {\n\n\t\t\t\timage.removeEventListener( 'load', onImageLoad, false );\n\t\t\t\timage.removeEventListener( 'error', onImageError, false );\n\n\t\t\t\tCache.add( url, this );\n\n\t\t\t\tif ( onLoad ) { onLoad( this ); }\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}\n\n\t\t\tfunction onImageError( event ) {\n\n\t\t\t\timage.removeEventListener( 'load', onImageLoad, false );\n\t\t\t\timage.removeEventListener( 'error', onImageError, false );\n\n\t\t\t\tif ( onError ) { onError( event ); }\n\n\t\t\t\tscope.manager.itemError( url );\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}\n\n\t\t\timage.addEventListener( 'load', onImageLoad, false );\n\t\t\timage.addEventListener( 'error', onImageError, false );\n\n\t\t\tif ( url.substr( 0, 5 ) !== 'data:' ) {\n\n\t\t\t\tif ( this.crossOrigin !== undefined ) { image.crossOrigin = this.crossOrigin; }\n\n\t\t\t}\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\timage.src = url;\n\n\t\t\treturn image;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\n\tfunction CubeTextureLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tCubeTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: CubeTextureLoader,\n\n\t\tload: function ( urls, onLoad, onProgress, onError ) {\n\n\t\t\tvar texture = new CubeTexture();\n\n\t\t\tvar loader = new ImageLoader( this.manager );\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\t\tloader.setPath( this.path );\n\n\t\t\tvar loaded = 0;\n\n\t\t\tfunction loadTexture( i ) {\n\n\t\t\t\tloader.load( urls[ i ], function ( image ) {\n\n\t\t\t\t\ttexture.images[ i ] = image;\n\n\t\t\t\t\tloaded ++;\n\n\t\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\t\tif ( onLoad ) { onLoad( texture ); }\n\n\t\t\t\t\t}\n\n\t\t\t\t}, undefined, onError );\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < urls.length; ++ i ) {\n\n\t\t\t\tloadTexture( i );\n\n\t\t\t}\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction TextureLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: TextureLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar texture = new Texture();\n\n\t\t\tvar loader = new ImageLoader( this.manager );\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\t\tloader.setPath( this.path );\n\n\t\t\tloader.load( url, function ( image ) {\n\n\t\t\t\ttexture.image = image;\n\n\t\t\t\t// JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.\n\t\t\t\tvar isJPEG = url.search( /\\.jpe?g($|\\?)/i ) > 0 || url.search( /^data\\:image\\/jpeg/ ) === 0;\n\n\t\t\t\ttexture.format = isJPEG ? RGBFormat : RGBAFormat;\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif ( onLoad !== undefined ) {\n\n\t\t\t\t\tonLoad( texture );\n\n\t\t\t\t}\n\n\t\t\t}, onProgress, onError );\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * Extensible curve object\n\t *\n\t * Some common of curve methods:\n\t * .getPoint( t, optionalTarget ), .getTangent( t )\n\t * .getPointAt( u, optionalTarget ), .getTangentAt( u )\n\t * .getPoints(), .getSpacedPoints()\n\t * .getLength()\n\t * .updateArcLengths()\n\t *\n\t * This following curves inherit from THREE.Curve:\n\t *\n\t * -- 2D curves --\n\t * THREE.ArcCurve\n\t * THREE.CubicBezierCurve\n\t * THREE.EllipseCurve\n\t * THREE.LineCurve\n\t * THREE.QuadraticBezierCurve\n\t * THREE.SplineCurve\n\t *\n\t * -- 3D curves --\n\t * THREE.CatmullRomCurve3\n\t * THREE.CubicBezierCurve3\n\t * THREE.LineCurve3\n\t * THREE.QuadraticBezierCurve3\n\t *\n\t * A series of curves can be represented as a THREE.CurvePath.\n\t *\n\t **/\n\n\t/**************************************************************\n\t *\tAbstract Curve base class\n\t **************************************************************/\n\n\tfunction Curve() {\n\n\t\tthis.type = 'Curve';\n\n\t\tthis.arcLengthDivisions = 200;\n\n\t}\n\n\tObject.assign( Curve.prototype, {\n\n\t\t// Virtual base class method to overwrite and implement in subclasses\n\t\t//\t- t [0 .. 1]\n\n\t\tgetPoint: function ( /* t, optionalTarget */ ) {\n\n\t\t\tconsole.warn( 'THREE.Curve: .getPoint() not implemented.' );\n\t\t\treturn null;\n\n\t\t},\n\n\t\t// Get point at relative position in curve according to arc length\n\t\t// - u [0 .. 1]\n\n\t\tgetPointAt: function ( u, optionalTarget ) {\n\n\t\t\tvar t = this.getUtoTmapping( u );\n\t\t\treturn this.getPoint( t, optionalTarget );\n\n\t\t},\n\n\t\t// Get sequence of points using getPoint( t )\n\n\t\tgetPoints: function ( divisions ) {\n\n\t\t\tif ( divisions === undefined ) { divisions = 5; }\n\n\t\t\tvar points = [];\n\n\t\t\tfor ( var d = 0; d <= divisions; d ++ ) {\n\n\t\t\t\tpoints.push( this.getPoint( d / divisions ) );\n\n\t\t\t}\n\n\t\t\treturn points;\n\n\t\t},\n\n\t\t// Get sequence of points using getPointAt( u )\n\n\t\tgetSpacedPoints: function ( divisions ) {\n\n\t\t\tif ( divisions === undefined ) { divisions = 5; }\n\n\t\t\tvar points = [];\n\n\t\t\tfor ( var d = 0; d <= divisions; d ++ ) {\n\n\t\t\t\tpoints.push( this.getPointAt( d / divisions ) );\n\n\t\t\t}\n\n\t\t\treturn points;\n\n\t\t},\n\n\t\t// Get total curve arc length\n\n\t\tgetLength: function () {\n\n\t\t\tvar lengths = this.getLengths();\n\t\t\treturn lengths[ lengths.length - 1 ];\n\n\t\t},\n\n\t\t// Get list of cumulative segment lengths\n\n\t\tgetLengths: function ( divisions ) {\n\n\t\t\tif ( divisions === undefined ) { divisions = this.arcLengthDivisions; }\n\n\t\t\tif ( this.cacheArcLengths &&\n\t\t\t\t( this.cacheArcLengths.length === divisions + 1 ) &&\n\t\t\t\t! this.needsUpdate ) {\n\n\t\t\t\treturn this.cacheArcLengths;\n\n\t\t\t}\n\n\t\t\tthis.needsUpdate = false;\n\n\t\t\tvar cache = [];\n\t\t\tvar current, last = this.getPoint( 0 );\n\t\t\tvar p, sum = 0;\n\n\t\t\tcache.push( 0 );\n\n\t\t\tfor ( p = 1; p <= divisions; p ++ ) {\n\n\t\t\t\tcurrent = this.getPoint( p / divisions );\n\t\t\t\tsum += current.distanceTo( last );\n\t\t\t\tcache.push( sum );\n\t\t\t\tlast = current;\n\n\t\t\t}\n\n\t\t\tthis.cacheArcLengths = cache;\n\n\t\t\treturn cache; // { sums: cache, sum: sum }; Sum is in the last element.\n\n\t\t},\n\n\t\tupdateArcLengths: function () {\n\n\t\t\tthis.needsUpdate = true;\n\t\t\tthis.getLengths();\n\n\t\t},\n\n\t\t// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\n\n\t\tgetUtoTmapping: function ( u, distance ) {\n\n\t\t\tvar arcLengths = this.getLengths();\n\n\t\t\tvar i = 0, il = arcLengths.length;\n\n\t\t\tvar targetArcLength; // The targeted u distance value to get\n\n\t\t\tif ( distance ) {\n\n\t\t\t\ttargetArcLength = distance;\n\n\t\t\t} else {\n\n\t\t\t\ttargetArcLength = u * arcLengths[ il - 1 ];\n\n\t\t\t}\n\n\t\t\t// binary search for the index with largest value smaller than target u distance\n\n\t\t\tvar low = 0, high = il - 1, comparison;\n\n\t\t\twhile ( low <= high ) {\n\n\t\t\t\ti = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\n\t\t\t\tcomparison = arcLengths[ i ] - targetArcLength;\n\n\t\t\t\tif ( comparison < 0 ) {\n\n\t\t\t\t\tlow = i + 1;\n\n\t\t\t\t} else if ( comparison > 0 ) {\n\n\t\t\t\t\thigh = i - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\thigh = i;\n\t\t\t\t\tbreak;\n\n\t\t\t\t\t// DONE\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\ti = high;\n\n\t\t\tif ( arcLengths[ i ] === targetArcLength ) {\n\n\t\t\t\treturn i / ( il - 1 );\n\n\t\t\t}\n\n\t\t\t// we could get finer grain at lengths, or use simple interpolation between two points\n\n\t\t\tvar lengthBefore = arcLengths[ i ];\n\t\t\tvar lengthAfter = arcLengths[ i + 1 ];\n\n\t\t\tvar segmentLength = lengthAfter - lengthBefore;\n\n\t\t\t// determine where we are between the 'before' and 'after' points\n\n\t\t\tvar segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;\n\n\t\t\t// add that fractional amount to t\n\n\t\t\tvar t = ( i + segmentFraction ) / ( il - 1 );\n\n\t\t\treturn t;\n\n\t\t},\n\n\t\t// Returns a unit vector tangent at t\n\t\t// In case any sub curve does not implement its tangent derivation,\n\t\t// 2 points a small delta apart will be used to find its gradient\n\t\t// which seems to give a reasonable approximation\n\n\t\tgetTangent: function ( t ) {\n\n\t\t\tvar delta = 0.0001;\n\t\t\tvar t1 = t - delta;\n\t\t\tvar t2 = t + delta;\n\n\t\t\t// Capping in case of danger\n\n\t\t\tif ( t1 < 0 ) { t1 = 0; }\n\t\t\tif ( t2 > 1 ) { t2 = 1; }\n\n\t\t\tvar pt1 = this.getPoint( t1 );\n\t\t\tvar pt2 = this.getPoint( t2 );\n\n\t\t\tvar vec = pt2.clone().sub( pt1 );\n\t\t\treturn vec.normalize();\n\n\t\t},\n\n\t\tgetTangentAt: function ( u ) {\n\n\t\t\tvar t = this.getUtoTmapping( u );\n\t\t\treturn this.getTangent( t );\n\n\t\t},\n\n\t\tcomputeFrenetFrames: function ( segments, closed ) {\n\n\t\t\t// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n\n\t\t\tvar normal = new Vector3();\n\n\t\t\tvar tangents = [];\n\t\t\tvar normals = [];\n\t\t\tvar binormals = [];\n\n\t\t\tvar vec = new Vector3();\n\t\t\tvar mat = new Matrix4();\n\n\t\t\tvar i, u, theta;\n\n\t\t\t// compute the tangent vectors for each segment on the curve\n\n\t\t\tfor ( i = 0; i <= segments; i ++ ) {\n\n\t\t\t\tu = i / segments;\n\n\t\t\t\ttangents[ i ] = this.getTangentAt( u );\n\t\t\t\ttangents[ i ].normalize();\n\n\t\t\t}\n\n\t\t\t// select an initial normal vector perpendicular to the first tangent vector,\n\t\t\t// and in the direction of the minimum tangent xyz component\n\n\t\t\tnormals[ 0 ] = new Vector3();\n\t\t\tbinormals[ 0 ] = new Vector3();\n\t\t\tvar min = Number.MAX_VALUE;\n\t\t\tvar tx = Math.abs( tangents[ 0 ].x );\n\t\t\tvar ty = Math.abs( tangents[ 0 ].y );\n\t\t\tvar tz = Math.abs( tangents[ 0 ].z );\n\n\t\t\tif ( tx <= min ) {\n\n\t\t\t\tmin = tx;\n\t\t\t\tnormal.set( 1, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( ty <= min ) {\n\n\t\t\t\tmin = ty;\n\t\t\t\tnormal.set( 0, 1, 0 );\n\n\t\t\t}\n\n\t\t\tif ( tz <= min ) {\n\n\t\t\t\tnormal.set( 0, 0, 1 );\n\n\t\t\t}\n\n\t\t\tvec.crossVectors( tangents[ 0 ], normal ).normalize();\n\n\t\t\tnormals[ 0 ].crossVectors( tangents[ 0 ], vec );\n\t\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\n\n\n\t\t\t// compute the slowly-varying normal and binormal vectors for each segment on the curve\n\n\t\t\tfor ( i = 1; i <= segments; i ++ ) {\n\n\t\t\t\tnormals[ i ] = normals[ i - 1 ].clone();\n\n\t\t\t\tbinormals[ i ] = binormals[ i - 1 ].clone();\n\n\t\t\t\tvec.crossVectors( tangents[ i - 1 ], tangents[ i ] );\n\n\t\t\t\tif ( vec.length() > Number.EPSILON ) {\n\n\t\t\t\t\tvec.normalize();\n\n\t\t\t\t\ttheta = Math.acos( MathUtils.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors\n\n\t\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\n\n\t\t\t\t}\n\n\t\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n\t\t\t}\n\n\t\t\t// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\n\t\t\tif ( closed === true ) {\n\n\t\t\t\ttheta = Math.acos( MathUtils.clamp( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );\n\t\t\t\ttheta /= segments;\n\n\t\t\t\tif ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {\n\n\t\t\t\t\ttheta = - theta;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( i = 1; i <= segments; i ++ ) {\n\n\t\t\t\t\t// twist a little...\n\t\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );\n\t\t\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\ttangents: tangents,\n\t\t\t\tnormals: normals,\n\t\t\t\tbinormals: binormals\n\t\t\t};\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.arcLengthDivisions = source.arcLengthDivisions;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Curve',\n\t\t\t\t\tgenerator: 'Curve.toJSON'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tdata.arcLengthDivisions = this.arcLengthDivisions;\n\t\t\tdata.type = this.type;\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tfromJSON: function ( json ) {\n\n\t\t\tthis.arcLengthDivisions = json.arcLengthDivisions;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\tfunction EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'EllipseCurve';\n\n\t\tthis.aX = aX || 0;\n\t\tthis.aY = aY || 0;\n\n\t\tthis.xRadius = xRadius || 1;\n\t\tthis.yRadius = yRadius || 1;\n\n\t\tthis.aStartAngle = aStartAngle || 0;\n\t\tthis.aEndAngle = aEndAngle || 2 * Math.PI;\n\n\t\tthis.aClockwise = aClockwise || false;\n\n\t\tthis.aRotation = aRotation || 0;\n\n\t}\n\n\tEllipseCurve.prototype = Object.create( Curve.prototype );\n\tEllipseCurve.prototype.constructor = EllipseCurve;\n\n\tEllipseCurve.prototype.isEllipseCurve = true;\n\n\tEllipseCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector2();\n\n\t\tvar twoPi = Math.PI * 2;\n\t\tvar deltaAngle = this.aEndAngle - this.aStartAngle;\n\t\tvar samePoints = Math.abs( deltaAngle ) < Number.EPSILON;\n\n\t\t// ensures that deltaAngle is 0 .. 2 PI\n\t\twhile ( deltaAngle < 0 ) { deltaAngle += twoPi; }\n\t\twhile ( deltaAngle > twoPi ) { deltaAngle -= twoPi; }\n\n\t\tif ( deltaAngle < Number.EPSILON ) {\n\n\t\t\tif ( samePoints ) {\n\n\t\t\t\tdeltaAngle = 0;\n\n\t\t\t} else {\n\n\t\t\t\tdeltaAngle = twoPi;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.aClockwise === true && ! samePoints ) {\n\n\t\t\tif ( deltaAngle === twoPi ) {\n\n\t\t\t\tdeltaAngle = - twoPi;\n\n\t\t\t} else {\n\n\t\t\t\tdeltaAngle = deltaAngle - twoPi;\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar angle = this.aStartAngle + t * deltaAngle;\n\t\tvar x = this.aX + this.xRadius * Math.cos( angle );\n\t\tvar y = this.aY + this.yRadius * Math.sin( angle );\n\n\t\tif ( this.aRotation !== 0 ) {\n\n\t\t\tvar cos = Math.cos( this.aRotation );\n\t\t\tvar sin = Math.sin( this.aRotation );\n\n\t\t\tvar tx = x - this.aX;\n\t\t\tvar ty = y - this.aY;\n\n\t\t\t// Rotate the point about the center of the ellipse.\n\t\t\tx = tx * cos - ty * sin + this.aX;\n\t\t\ty = tx * sin + ty * cos + this.aY;\n\n\t\t}\n\n\t\treturn point.set( x, y );\n\n\t};\n\n\tEllipseCurve.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.aX = source.aX;\n\t\tthis.aY = source.aY;\n\n\t\tthis.xRadius = source.xRadius;\n\t\tthis.yRadius = source.yRadius;\n\n\t\tthis.aStartAngle = source.aStartAngle;\n\t\tthis.aEndAngle = source.aEndAngle;\n\n\t\tthis.aClockwise = source.aClockwise;\n\n\t\tthis.aRotation = source.aRotation;\n\n\t\treturn this;\n\n\t};\n\n\n\tEllipseCurve.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.aX = this.aX;\n\t\tdata.aY = this.aY;\n\n\t\tdata.xRadius = this.xRadius;\n\t\tdata.yRadius = this.yRadius;\n\n\t\tdata.aStartAngle = this.aStartAngle;\n\t\tdata.aEndAngle = this.aEndAngle;\n\n\t\tdata.aClockwise = this.aClockwise;\n\n\t\tdata.aRotation = this.aRotation;\n\n\t\treturn data;\n\n\t};\n\n\tEllipseCurve.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.aX = json.aX;\n\t\tthis.aY = json.aY;\n\n\t\tthis.xRadius = json.xRadius;\n\t\tthis.yRadius = json.yRadius;\n\n\t\tthis.aStartAngle = json.aStartAngle;\n\t\tthis.aEndAngle = json.aEndAngle;\n\n\t\tthis.aClockwise = json.aClockwise;\n\n\t\tthis.aRotation = json.aRotation;\n\n\t\treturn this;\n\n\t};\n\n\tfunction ArcCurve( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\tEllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n\t\tthis.type = 'ArcCurve';\n\n\t}\n\n\tArcCurve.prototype = Object.create( EllipseCurve.prototype );\n\tArcCurve.prototype.constructor = ArcCurve;\n\n\tArcCurve.prototype.isArcCurve = true;\n\n\t/**\n\t * @author zz85 https://github.com/zz85\n\t *\n\t * Centripetal CatmullRom Curve - which is useful for avoiding\n\t * cusps and self-intersections in non-uniform catmull rom curves.\n\t * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n\t *\n\t * curve.type accepts centripetal(default), chordal and catmullrom\n\t * curve.tension is used for catmullrom which defaults to 0.5\n\t */\n\n\n\t/*\n\tBased on an optimized c++ solution in\n\t - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n\t - http://ideone.com/NoEbVM\n\n\tThis CubicPoly class could be used for reusing some variables and calculations,\n\tbut for three.js curve use, it could be possible inlined and flatten into a single function call\n\twhich can be placed in CurveUtils.\n\t*/\n\n\tfunction CubicPoly() {\n\n\t\tvar c0 = 0, c1 = 0, c2 = 0, c3 = 0;\n\n\t\t/*\n\t\t * Compute coefficients for a cubic polynomial\n\t\t *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n\t\t * such that\n\t\t *   p(0) = x0, p(1) = x1\n\t\t *  and\n\t\t *   p'(0) = t0, p'(1) = t1.\n\t\t */\n\t\tfunction init( x0, x1, t0, t1 ) {\n\n\t\t\tc0 = x0;\n\t\t\tc1 = t0;\n\t\t\tc2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;\n\t\t\tc3 = 2 * x0 - 2 * x1 + t0 + t1;\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tinitCatmullRom: function ( x0, x1, x2, x3, tension ) {\n\n\t\t\t\tinit( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );\n\n\t\t\t},\n\n\t\t\tinitNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {\n\n\t\t\t\t// compute tangents when parameterized in [t1,t2]\n\t\t\t\tvar t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;\n\t\t\t\tvar t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;\n\n\t\t\t\t// rescale tangents for parametrization in [0,1]\n\t\t\t\tt1 *= dt1;\n\t\t\t\tt2 *= dt1;\n\n\t\t\t\tinit( x1, x2, t1, t2 );\n\n\t\t\t},\n\n\t\t\tcalc: function ( t ) {\n\n\t\t\t\tvar t2 = t * t;\n\t\t\t\tvar t3 = t2 * t;\n\t\t\t\treturn c0 + c1 * t + c2 * t2 + c3 * t3;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t//\n\n\tvar tmp = new Vector3();\n\tvar px = new CubicPoly(), py = new CubicPoly(), pz = new CubicPoly();\n\n\tfunction CatmullRomCurve3( points, closed, curveType, tension ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'CatmullRomCurve3';\n\n\t\tthis.points = points || [];\n\t\tthis.closed = closed || false;\n\t\tthis.curveType = curveType || 'centripetal';\n\t\tthis.tension = tension || 0.5;\n\n\t}\n\n\tCatmullRomCurve3.prototype = Object.create( Curve.prototype );\n\tCatmullRomCurve3.prototype.constructor = CatmullRomCurve3;\n\n\tCatmullRomCurve3.prototype.isCatmullRomCurve3 = true;\n\n\tCatmullRomCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector3();\n\n\t\tvar points = this.points;\n\t\tvar l = points.length;\n\n\t\tvar p = ( l - ( this.closed ? 0 : 1 ) ) * t;\n\t\tvar intPoint = Math.floor( p );\n\t\tvar weight = p - intPoint;\n\n\t\tif ( this.closed ) {\n\n\t\t\tintPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / l ) + 1 ) * l;\n\n\t\t} else if ( weight === 0 && intPoint === l - 1 ) {\n\n\t\t\tintPoint = l - 2;\n\t\t\tweight = 1;\n\n\t\t}\n\n\t\tvar p0, p1, p2, p3; // 4 points\n\n\t\tif ( this.closed || intPoint > 0 ) {\n\n\t\t\tp0 = points[ ( intPoint - 1 ) % l ];\n\n\t\t} else {\n\n\t\t\t// extrapolate first point\n\t\t\ttmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );\n\t\t\tp0 = tmp;\n\n\t\t}\n\n\t\tp1 = points[ intPoint % l ];\n\t\tp2 = points[ ( intPoint + 1 ) % l ];\n\n\t\tif ( this.closed || intPoint + 2 < l ) {\n\n\t\t\tp3 = points[ ( intPoint + 2 ) % l ];\n\n\t\t} else {\n\n\t\t\t// extrapolate last point\n\t\t\ttmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );\n\t\t\tp3 = tmp;\n\n\t\t}\n\n\t\tif ( this.curveType === 'centripetal' || this.curveType === 'chordal' ) {\n\n\t\t\t// init Centripetal / Chordal Catmull-Rom\n\t\t\tvar pow = this.curveType === 'chordal' ? 0.5 : 0.25;\n\t\t\tvar dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );\n\t\t\tvar dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );\n\t\t\tvar dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );\n\n\t\t\t// safety check for repeated points\n\t\t\tif ( dt1 < 1e-4 ) { dt1 = 1.0; }\n\t\t\tif ( dt0 < 1e-4 ) { dt0 = dt1; }\n\t\t\tif ( dt2 < 1e-4 ) { dt2 = dt1; }\n\n\t\t\tpx.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );\n\t\t\tpy.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );\n\t\t\tpz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );\n\n\t\t} else if ( this.curveType === 'catmullrom' ) {\n\n\t\t\tpx.initCatmullRom( p0.x, p1.x, p2.x, p3.x, this.tension );\n\t\t\tpy.initCatmullRom( p0.y, p1.y, p2.y, p3.y, this.tension );\n\t\t\tpz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, this.tension );\n\n\t\t}\n\n\t\tpoint.set(\n\t\t\tpx.calc( weight ),\n\t\t\tpy.calc( weight ),\n\t\t\tpz.calc( weight )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tCatmullRomCurve3.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.points = [];\n\n\t\tfor ( var i = 0, l = source.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = source.points[ i ];\n\n\t\t\tthis.points.push( point.clone() );\n\n\t\t}\n\n\t\tthis.closed = source.closed;\n\t\tthis.curveType = source.curveType;\n\t\tthis.tension = source.tension;\n\n\t\treturn this;\n\n\t};\n\n\tCatmullRomCurve3.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.points = [];\n\n\t\tfor ( var i = 0, l = this.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = this.points[ i ];\n\t\t\tdata.points.push( point.toArray() );\n\n\t\t}\n\n\t\tdata.closed = this.closed;\n\t\tdata.curveType = this.curveType;\n\t\tdata.tension = this.tension;\n\n\t\treturn data;\n\n\t};\n\n\tCatmullRomCurve3.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.points = [];\n\n\t\tfor ( var i = 0, l = json.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = json.points[ i ];\n\t\t\tthis.points.push( new Vector3().fromArray( point ) );\n\n\t\t}\n\n\t\tthis.closed = json.closed;\n\t\tthis.curveType = json.curveType;\n\t\tthis.tension = json.tension;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t *\n\t * Bezier Curves formulas obtained from\n\t * http://en.wikipedia.org/wiki/Bézier_curve\n\t */\n\n\tfunction CatmullRom( t, p0, p1, p2, p3 ) {\n\n\t\tvar v0 = ( p2 - p0 ) * 0.5;\n\t\tvar v1 = ( p3 - p1 ) * 0.5;\n\t\tvar t2 = t * t;\n\t\tvar t3 = t * t2;\n\t\treturn ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\n\t}\n\n\t//\n\n\tfunction QuadraticBezierP0( t, p ) {\n\n\t\tvar k = 1 - t;\n\t\treturn k * k * p;\n\n\t}\n\n\tfunction QuadraticBezierP1( t, p ) {\n\n\t\treturn 2 * ( 1 - t ) * t * p;\n\n\t}\n\n\tfunction QuadraticBezierP2( t, p ) {\n\n\t\treturn t * t * p;\n\n\t}\n\n\tfunction QuadraticBezier( t, p0, p1, p2 ) {\n\n\t\treturn QuadraticBezierP0( t, p0 ) + QuadraticBezierP1( t, p1 ) +\n\t\t\tQuadraticBezierP2( t, p2 );\n\n\t}\n\n\t//\n\n\tfunction CubicBezierP0( t, p ) {\n\n\t\tvar k = 1 - t;\n\t\treturn k * k * k * p;\n\n\t}\n\n\tfunction CubicBezierP1( t, p ) {\n\n\t\tvar k = 1 - t;\n\t\treturn 3 * k * k * t * p;\n\n\t}\n\n\tfunction CubicBezierP2( t, p ) {\n\n\t\treturn 3 * ( 1 - t ) * t * t * p;\n\n\t}\n\n\tfunction CubicBezierP3( t, p ) {\n\n\t\treturn t * t * t * p;\n\n\t}\n\n\tfunction CubicBezier( t, p0, p1, p2, p3 ) {\n\n\t\treturn CubicBezierP0( t, p0 ) + CubicBezierP1( t, p1 ) + CubicBezierP2( t, p2 ) +\n\t\t\tCubicBezierP3( t, p3 );\n\n\t}\n\n\tfunction CubicBezierCurve( v0, v1, v2, v3 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'CubicBezierCurve';\n\n\t\tthis.v0 = v0 || new Vector2();\n\t\tthis.v1 = v1 || new Vector2();\n\t\tthis.v2 = v2 || new Vector2();\n\t\tthis.v3 = v3 || new Vector2();\n\n\t}\n\n\tCubicBezierCurve.prototype = Object.create( Curve.prototype );\n\tCubicBezierCurve.prototype.constructor = CubicBezierCurve;\n\n\tCubicBezierCurve.prototype.isCubicBezierCurve = true;\n\n\tCubicBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector2();\n\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\n\n\t\tpoint.set(\n\t\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\n\t\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tCubicBezierCurve.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\t\tthis.v3.copy( source.v3 );\n\n\t\treturn this;\n\n\t};\n\n\tCubicBezierCurve.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\t\tdata.v3 = this.v3.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tCubicBezierCurve.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\t\tthis.v3.fromArray( json.v3 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction CubicBezierCurve3( v0, v1, v2, v3 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'CubicBezierCurve3';\n\n\t\tthis.v0 = v0 || new Vector3();\n\t\tthis.v1 = v1 || new Vector3();\n\t\tthis.v2 = v2 || new Vector3();\n\t\tthis.v3 = v3 || new Vector3();\n\n\t}\n\n\tCubicBezierCurve3.prototype = Object.create( Curve.prototype );\n\tCubicBezierCurve3.prototype.constructor = CubicBezierCurve3;\n\n\tCubicBezierCurve3.prototype.isCubicBezierCurve3 = true;\n\n\tCubicBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector3();\n\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\n\n\t\tpoint.set(\n\t\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\n\t\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y ),\n\t\t\tCubicBezier( t, v0.z, v1.z, v2.z, v3.z )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tCubicBezierCurve3.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\t\tthis.v3.copy( source.v3 );\n\n\t\treturn this;\n\n\t};\n\n\tCubicBezierCurve3.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\t\tdata.v3 = this.v3.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tCubicBezierCurve3.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\t\tthis.v3.fromArray( json.v3 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction LineCurve( v1, v2 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'LineCurve';\n\n\t\tthis.v1 = v1 || new Vector2();\n\t\tthis.v2 = v2 || new Vector2();\n\n\t}\n\n\tLineCurve.prototype = Object.create( Curve.prototype );\n\tLineCurve.prototype.constructor = LineCurve;\n\n\tLineCurve.prototype.isLineCurve = true;\n\n\tLineCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector2();\n\n\t\tif ( t === 1 ) {\n\n\t\t\tpoint.copy( this.v2 );\n\n\t\t} else {\n\n\t\t\tpoint.copy( this.v2 ).sub( this.v1 );\n\t\t\tpoint.multiplyScalar( t ).add( this.v1 );\n\n\t\t}\n\n\t\treturn point;\n\n\t};\n\n\t// Line curve is linear, so we can overwrite default getPointAt\n\n\tLineCurve.prototype.getPointAt = function ( u, optionalTarget ) {\n\n\t\treturn this.getPoint( u, optionalTarget );\n\n\t};\n\n\tLineCurve.prototype.getTangent = function ( /* t */ ) {\n\n\t\tvar tangent = this.v2.clone().sub( this.v1 );\n\n\t\treturn tangent.normalize();\n\n\t};\n\n\tLineCurve.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tLineCurve.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tLineCurve.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction LineCurve3( v1, v2 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'LineCurve3';\n\n\t\tthis.v1 = v1 || new Vector3();\n\t\tthis.v2 = v2 || new Vector3();\n\n\t}\n\n\tLineCurve3.prototype = Object.create( Curve.prototype );\n\tLineCurve3.prototype.constructor = LineCurve3;\n\n\tLineCurve3.prototype.isLineCurve3 = true;\n\n\tLineCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector3();\n\n\t\tif ( t === 1 ) {\n\n\t\t\tpoint.copy( this.v2 );\n\n\t\t} else {\n\n\t\t\tpoint.copy( this.v2 ).sub( this.v1 );\n\t\t\tpoint.multiplyScalar( t ).add( this.v1 );\n\n\t\t}\n\n\t\treturn point;\n\n\t};\n\n\t// Line curve is linear, so we can overwrite default getPointAt\n\n\tLineCurve3.prototype.getPointAt = function ( u, optionalTarget ) {\n\n\t\treturn this.getPoint( u, optionalTarget );\n\n\t};\n\n\tLineCurve3.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tLineCurve3.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tLineCurve3.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction QuadraticBezierCurve( v0, v1, v2 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'QuadraticBezierCurve';\n\n\t\tthis.v0 = v0 || new Vector2();\n\t\tthis.v1 = v1 || new Vector2();\n\t\tthis.v2 = v2 || new Vector2();\n\n\t}\n\n\tQuadraticBezierCurve.prototype = Object.create( Curve.prototype );\n\tQuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;\n\n\tQuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;\n\n\tQuadraticBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector2();\n\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2;\n\n\t\tpoint.set(\n\t\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\n\t\t\tQuadraticBezier( t, v0.y, v1.y, v2.y )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tQuadraticBezierCurve.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tQuadraticBezierCurve.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tQuadraticBezierCurve.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction QuadraticBezierCurve3( v0, v1, v2 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'QuadraticBezierCurve3';\n\n\t\tthis.v0 = v0 || new Vector3();\n\t\tthis.v1 = v1 || new Vector3();\n\t\tthis.v2 = v2 || new Vector3();\n\n\t}\n\n\tQuadraticBezierCurve3.prototype = Object.create( Curve.prototype );\n\tQuadraticBezierCurve3.prototype.constructor = QuadraticBezierCurve3;\n\n\tQuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;\n\n\tQuadraticBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector3();\n\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2;\n\n\t\tpoint.set(\n\t\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\n\t\t\tQuadraticBezier( t, v0.y, v1.y, v2.y ),\n\t\t\tQuadraticBezier( t, v0.z, v1.z, v2.z )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tQuadraticBezierCurve3.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tQuadraticBezierCurve3.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tQuadraticBezierCurve3.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction SplineCurve( points /* array of Vector2 */ ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'SplineCurve';\n\n\t\tthis.points = points || [];\n\n\t}\n\n\tSplineCurve.prototype = Object.create( Curve.prototype );\n\tSplineCurve.prototype.constructor = SplineCurve;\n\n\tSplineCurve.prototype.isSplineCurve = true;\n\n\tSplineCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector2();\n\n\t\tvar points = this.points;\n\t\tvar p = ( points.length - 1 ) * t;\n\n\t\tvar intPoint = Math.floor( p );\n\t\tvar weight = p - intPoint;\n\n\t\tvar p0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];\n\t\tvar p1 = points[ intPoint ];\n\t\tvar p2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n\t\tvar p3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\n\t\tpoint.set(\n\t\t\tCatmullRom( weight, p0.x, p1.x, p2.x, p3.x ),\n\t\t\tCatmullRom( weight, p0.y, p1.y, p2.y, p3.y )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tSplineCurve.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.points = [];\n\n\t\tfor ( var i = 0, l = source.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = source.points[ i ];\n\n\t\t\tthis.points.push( point.clone() );\n\n\t\t}\n\n\t\treturn this;\n\n\t};\n\n\tSplineCurve.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.points = [];\n\n\t\tfor ( var i = 0, l = this.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = this.points[ i ];\n\t\t\tdata.points.push( point.toArray() );\n\n\t\t}\n\n\t\treturn data;\n\n\t};\n\n\tSplineCurve.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.points = [];\n\n\t\tfor ( var i = 0, l = json.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = json.points[ i ];\n\t\t\tthis.points.push( new Vector2().fromArray( point ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t};\n\n\n\n\tvar Curves = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tArcCurve: ArcCurve,\n\t\tCatmullRomCurve3: CatmullRomCurve3,\n\t\tCubicBezierCurve: CubicBezierCurve,\n\t\tCubicBezierCurve3: CubicBezierCurve3,\n\t\tEllipseCurve: EllipseCurve,\n\t\tLineCurve: LineCurve,\n\t\tLineCurve3: LineCurve3,\n\t\tQuadraticBezierCurve: QuadraticBezierCurve,\n\t\tQuadraticBezierCurve3: QuadraticBezierCurve3,\n\t\tSplineCurve: SplineCurve\n\t});\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t *\n\t **/\n\n\t/**************************************************************\n\t *\tCurved Path - a curve path is simply a array of connected\n\t *  curves, but retains the api of a curve\n\t **************************************************************/\n\n\tfunction CurvePath() {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'CurvePath';\n\n\t\tthis.curves = [];\n\t\tthis.autoClose = false; // Automatically closes the path\n\n\t}\n\n\tCurvePath.prototype = Object.assign( Object.create( Curve.prototype ), {\n\n\t\tconstructor: CurvePath,\n\n\t\tadd: function ( curve ) {\n\n\t\t\tthis.curves.push( curve );\n\n\t\t},\n\n\t\tclosePath: function () {\n\n\t\t\t// Add a line curve if start and end of lines are not connected\n\t\t\tvar startPoint = this.curves[ 0 ].getPoint( 0 );\n\t\t\tvar endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );\n\n\t\t\tif ( ! startPoint.equals( endPoint ) ) {\n\n\t\t\t\tthis.curves.push( new LineCurve( endPoint, startPoint ) );\n\n\t\t\t}\n\n\t\t},\n\n\t\t// To get accurate point with reference to\n\t\t// entire path distance at time t,\n\t\t// following has to be done:\n\n\t\t// 1. Length of each sub path have to be known\n\t\t// 2. Locate and identify type of curve\n\t\t// 3. Get t for the curve\n\t\t// 4. Return curve.getPointAt(t')\n\n\t\tgetPoint: function ( t ) {\n\n\t\t\tvar d = t * this.getLength();\n\t\t\tvar curveLengths = this.getCurveLengths();\n\t\t\tvar i = 0;\n\n\t\t\t// To think about boundaries points.\n\n\t\t\twhile ( i < curveLengths.length ) {\n\n\t\t\t\tif ( curveLengths[ i ] >= d ) {\n\n\t\t\t\t\tvar diff = curveLengths[ i ] - d;\n\t\t\t\t\tvar curve = this.curves[ i ];\n\n\t\t\t\t\tvar segmentLength = curve.getLength();\n\t\t\t\t\tvar u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n\n\t\t\t\t\treturn curve.getPointAt( u );\n\n\t\t\t\t}\n\n\t\t\t\ti ++;\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t\t// loop where sum != 0, sum > d , sum+1 <d\n\n\t\t},\n\n\t\t// We cannot use the default THREE.Curve getPoint() with getLength() because in\n\t\t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n\t\t// getPoint() depends on getLength\n\n\t\tgetLength: function () {\n\n\t\t\tvar lens = this.getCurveLengths();\n\t\t\treturn lens[ lens.length - 1 ];\n\n\t\t},\n\n\t\t// cacheLengths must be recalculated.\n\t\tupdateArcLengths: function () {\n\n\t\t\tthis.needsUpdate = true;\n\t\t\tthis.cacheLengths = null;\n\t\t\tthis.getCurveLengths();\n\n\t\t},\n\n\t\t// Compute lengths and cache them\n\t\t// We cannot overwrite getLengths() because UtoT mapping uses it.\n\n\t\tgetCurveLengths: function () {\n\n\t\t\t// We use cache values if curves and cache array are same length\n\n\t\t\tif ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {\n\n\t\t\t\treturn this.cacheLengths;\n\n\t\t\t}\n\n\t\t\t// Get length of sub-curve\n\t\t\t// Push sums into cached array\n\n\t\t\tvar lengths = [], sums = 0;\n\n\t\t\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\n\n\t\t\t\tsums += this.curves[ i ].getLength();\n\t\t\t\tlengths.push( sums );\n\n\t\t\t}\n\n\t\t\tthis.cacheLengths = lengths;\n\n\t\t\treturn lengths;\n\n\t\t},\n\n\t\tgetSpacedPoints: function ( divisions ) {\n\n\t\t\tif ( divisions === undefined ) { divisions = 40; }\n\n\t\t\tvar points = [];\n\n\t\t\tfor ( var i = 0; i <= divisions; i ++ ) {\n\n\t\t\t\tpoints.push( this.getPoint( i / divisions ) );\n\n\t\t\t}\n\n\t\t\tif ( this.autoClose ) {\n\n\t\t\t\tpoints.push( points[ 0 ] );\n\n\t\t\t}\n\n\t\t\treturn points;\n\n\t\t},\n\n\t\tgetPoints: function ( divisions ) {\n\n\t\t\tdivisions = divisions || 12;\n\n\t\t\tvar points = [], last;\n\n\t\t\tfor ( var i = 0, curves = this.curves; i < curves.length; i ++ ) {\n\n\t\t\t\tvar curve = curves[ i ];\n\t\t\t\tvar resolution = ( curve && curve.isEllipseCurve ) ? divisions * 2\n\t\t\t\t\t: ( curve && ( curve.isLineCurve || curve.isLineCurve3 ) ) ? 1\n\t\t\t\t\t\t: ( curve && curve.isSplineCurve ) ? divisions * curve.points.length\n\t\t\t\t\t\t\t: divisions;\n\n\t\t\t\tvar pts = curve.getPoints( resolution );\n\n\t\t\t\tfor ( var j = 0; j < pts.length; j ++ ) {\n\n\t\t\t\t\tvar point = pts[ j ];\n\n\t\t\t\t\tif ( last && last.equals( point ) ) { continue; } // ensures no consecutive points are duplicates\n\n\t\t\t\t\tpoints.push( point );\n\t\t\t\t\tlast = point;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.autoClose && points.length > 1 && ! points[ points.length - 1 ].equals( points[ 0 ] ) ) {\n\n\t\t\t\tpoints.push( points[ 0 ] );\n\n\t\t\t}\n\n\t\t\treturn points;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tCurve.prototype.copy.call( this, source );\n\n\t\t\tthis.curves = [];\n\n\t\t\tfor ( var i = 0, l = source.curves.length; i < l; i ++ ) {\n\n\t\t\t\tvar curve = source.curves[ i ];\n\n\t\t\t\tthis.curves.push( curve.clone() );\n\n\t\t\t}\n\n\t\t\tthis.autoClose = source.autoClose;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\t\tdata.autoClose = this.autoClose;\n\t\t\tdata.curves = [];\n\n\t\t\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\n\n\t\t\t\tvar curve = this.curves[ i ];\n\t\t\t\tdata.curves.push( curve.toJSON() );\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tfromJSON: function ( json ) {\n\n\t\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\t\tthis.autoClose = json.autoClose;\n\t\t\tthis.curves = [];\n\n\t\t\tfor ( var i = 0, l = json.curves.length; i < l; i ++ ) {\n\n\t\t\t\tvar curve = json.curves[ i ];\n\t\t\t\tthis.curves.push( new Curves[ curve.type ]().fromJSON( curve ) );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * Creates free form 2d path using series of points, lines or curves.\n\t **/\n\n\tfunction Path( points ) {\n\n\t\tCurvePath.call( this );\n\n\t\tthis.type = 'Path';\n\n\t\tthis.currentPoint = new Vector2();\n\n\t\tif ( points ) {\n\n\t\t\tthis.setFromPoints( points );\n\n\t\t}\n\n\t}\n\n\tPath.prototype = Object.assign( Object.create( CurvePath.prototype ), {\n\n\t\tconstructor: Path,\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tthis.moveTo( points[ 0 ].x, points[ 0 ].y );\n\n\t\t\tfor ( var i = 1, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tthis.lineTo( points[ i ].x, points[ i ].y );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmoveTo: function ( x, y ) {\n\n\t\t\tthis.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlineTo: function ( x, y ) {\n\n\t\t\tvar curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );\n\t\t\tthis.curves.push( curve );\n\n\t\t\tthis.currentPoint.set( x, y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n\n\t\t\tvar curve = new QuadraticBezierCurve(\n\t\t\t\tthis.currentPoint.clone(),\n\t\t\t\tnew Vector2( aCPx, aCPy ),\n\t\t\t\tnew Vector2( aX, aY )\n\t\t\t);\n\n\t\t\tthis.curves.push( curve );\n\n\t\t\tthis.currentPoint.set( aX, aY );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n\t\t\tvar curve = new CubicBezierCurve(\n\t\t\t\tthis.currentPoint.clone(),\n\t\t\t\tnew Vector2( aCP1x, aCP1y ),\n\t\t\t\tnew Vector2( aCP2x, aCP2y ),\n\t\t\t\tnew Vector2( aX, aY )\n\t\t\t);\n\n\t\t\tthis.curves.push( curve );\n\n\t\t\tthis.currentPoint.set( aX, aY );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsplineThru: function ( pts /*Array of Vector*/ ) {\n\n\t\t\tvar npts = [ this.currentPoint.clone() ].concat( pts );\n\n\t\t\tvar curve = new SplineCurve( npts );\n\t\t\tthis.curves.push( curve );\n\n\t\t\tthis.currentPoint.copy( pts[ pts.length - 1 ] );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\t\tvar x0 = this.currentPoint.x;\n\t\t\tvar y0 = this.currentPoint.y;\n\n\t\t\tthis.absarc( aX + x0, aY + y0, aRadius,\n\t\t\t\taStartAngle, aEndAngle, aClockwise );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tabsarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\t\tthis.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\t\tvar x0 = this.currentPoint.x;\n\t\t\tvar y0 = this.currentPoint.y;\n\n\t\t\tthis.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tabsellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\t\tvar curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t\t\tif ( this.curves.length > 0 ) {\n\n\t\t\t\t// if a previous curve is present, attempt to join\n\t\t\t\tvar firstPoint = curve.getPoint( 0 );\n\n\t\t\t\tif ( ! firstPoint.equals( this.currentPoint ) ) {\n\n\t\t\t\t\tthis.lineTo( firstPoint.x, firstPoint.y );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.curves.push( curve );\n\n\t\t\tvar lastPoint = curve.getPoint( 1 );\n\t\t\tthis.currentPoint.copy( lastPoint );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tCurvePath.prototype.copy.call( this, source );\n\n\t\t\tthis.currentPoint.copy( source.currentPoint );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = CurvePath.prototype.toJSON.call( this );\n\n\t\t\tdata.currentPoint = this.currentPoint.toArray();\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tfromJSON: function ( json ) {\n\n\t\t\tCurvePath.prototype.fromJSON.call( this, json );\n\n\t\t\tthis.currentPoint.fromArray( json.currentPoint );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * Defines a 2d shape plane using paths.\n\t **/\n\n\t// STEP 1 Create a path.\n\t// STEP 2 Turn path into shape.\n\t// STEP 3 ExtrudeGeometry takes in Shape/Shapes\n\t// STEP 3a - Extract points from each shape, turn to vertices\n\t// STEP 3b - Triangulate each shape, add faces.\n\n\tfunction Shape( points ) {\n\n\t\tPath.call( this, points );\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\tthis.type = 'Shape';\n\n\t\tthis.holes = [];\n\n\t}\n\n\tShape.prototype = Object.assign( Object.create( Path.prototype ), {\n\n\t\tconstructor: Shape,\n\n\t\tgetPointsHoles: function ( divisions ) {\n\n\t\t\tvar holesPts = [];\n\n\t\t\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\n\n\t\t\t\tholesPts[ i ] = this.holes[ i ].getPoints( divisions );\n\n\t\t\t}\n\n\t\t\treturn holesPts;\n\n\t\t},\n\n\t\t// get points of shape and holes (keypoints based on segments parameter)\n\n\t\textractPoints: function ( divisions ) {\n\n\t\t\treturn {\n\n\t\t\t\tshape: this.getPoints( divisions ),\n\t\t\t\tholes: this.getPointsHoles( divisions )\n\n\t\t\t};\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tPath.prototype.copy.call( this, source );\n\n\t\t\tthis.holes = [];\n\n\t\t\tfor ( var i = 0, l = source.holes.length; i < l; i ++ ) {\n\n\t\t\t\tvar hole = source.holes[ i ];\n\n\t\t\t\tthis.holes.push( hole.clone() );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = Path.prototype.toJSON.call( this );\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.holes = [];\n\n\t\t\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\n\n\t\t\t\tvar hole = this.holes[ i ];\n\t\t\t\tdata.holes.push( hole.toJSON() );\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tfromJSON: function ( json ) {\n\n\t\t\tPath.prototype.fromJSON.call( this, json );\n\n\t\t\tthis.uuid = json.uuid;\n\t\t\tthis.holes = [];\n\n\t\t\tfor ( var i = 0, l = json.holes.length; i < l; i ++ ) {\n\n\t\t\t\tvar hole = json.holes[ i ];\n\t\t\t\tthis.holes.push( new Path().fromJSON( hole ) );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Light( color, intensity ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Light';\n\n\t\tthis.color = new Color( color );\n\t\tthis.intensity = intensity !== undefined ? intensity : 1;\n\n\t\tthis.receiveShadow = undefined;\n\n\t}\n\n\tLight.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Light,\n\n\t\tisLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source );\n\n\t\t\tthis.color.copy( source.color );\n\t\t\tthis.intensity = source.intensity;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.color = this.color.getHex();\n\t\t\tdata.object.intensity = this.intensity;\n\n\t\t\tif ( this.groundColor !== undefined ) { data.object.groundColor = this.groundColor.getHex(); }\n\n\t\t\tif ( this.distance !== undefined ) { data.object.distance = this.distance; }\n\t\t\tif ( this.angle !== undefined ) { data.object.angle = this.angle; }\n\t\t\tif ( this.decay !== undefined ) { data.object.decay = this.decay; }\n\t\t\tif ( this.penumbra !== undefined ) { data.object.penumbra = this.penumbra; }\n\n\t\t\tif ( this.shadow !== undefined ) { data.object.shadow = this.shadow.toJSON(); }\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction HemisphereLight( skyColor, groundColor, intensity ) {\n\n\t\tLight.call( this, skyColor, intensity );\n\n\t\tthis.type = 'HemisphereLight';\n\n\t\tthis.castShadow = undefined;\n\n\t\tthis.position.copy( Object3D.DefaultUp );\n\t\tthis.updateMatrix();\n\n\t\tthis.groundColor = new Color( groundColor );\n\n\t}\n\n\tHemisphereLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: HemisphereLight,\n\n\t\tisHemisphereLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.groundColor.copy( source.groundColor );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction LightShadow( camera ) {\n\n\t\tthis.camera = camera;\n\n\t\tthis.bias = 0;\n\t\tthis.radius = 1;\n\n\t\tthis.mapSize = new Vector2( 512, 512 );\n\n\t\tthis.map = null;\n\t\tthis.mapPass = null;\n\t\tthis.matrix = new Matrix4();\n\n\t\tthis._frustum = new Frustum();\n\t\tthis._frameExtents = new Vector2( 1, 1 );\n\n\t\tthis._viewportCount = 1;\n\n\t\tthis._viewports = [\n\n\t\t\tnew Vector4( 0, 0, 1, 1 )\n\n\t\t];\n\n\t}\n\n\tObject.assign( LightShadow.prototype, {\n\n\t\t_projScreenMatrix: new Matrix4(),\n\n\t\t_lightPositionWorld: new Vector3(),\n\n\t\t_lookTarget: new Vector3(),\n\n\t\tgetViewportCount: function () {\n\n\t\t\treturn this._viewportCount;\n\n\t\t},\n\n\t\tgetFrustum: function () {\n\n\t\t\treturn this._frustum;\n\n\t\t},\n\n\t\tupdateMatrices: function ( light ) {\n\n\t\t\tvar shadowCamera = this.camera,\n\t\t\t\tshadowMatrix = this.matrix,\n\t\t\t\tprojScreenMatrix = this._projScreenMatrix,\n\t\t\t\tlookTarget = this._lookTarget,\n\t\t\t\tlightPositionWorld = this._lightPositionWorld;\n\n\t\t\tlightPositionWorld.setFromMatrixPosition( light.matrixWorld );\n\t\t\tshadowCamera.position.copy( lightPositionWorld );\n\n\t\t\tlookTarget.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\tshadowCamera.lookAt( lookTarget );\n\t\t\tshadowCamera.updateMatrixWorld();\n\n\t\t\tprojScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\n\t\t\tthis._frustum.setFromProjectionMatrix( projScreenMatrix );\n\n\t\t\tshadowMatrix.set(\n\t\t\t\t0.5, 0.0, 0.0, 0.5,\n\t\t\t\t0.0, 0.5, 0.0, 0.5,\n\t\t\t\t0.0, 0.0, 0.5, 0.5,\n\t\t\t\t0.0, 0.0, 0.0, 1.0\n\t\t\t);\n\n\t\t\tshadowMatrix.multiply( shadowCamera.projectionMatrix );\n\t\t\tshadowMatrix.multiply( shadowCamera.matrixWorldInverse );\n\n\t\t},\n\n\t\tgetViewport: function ( viewportIndex ) {\n\n\t\t\treturn this._viewports[ viewportIndex ];\n\n\t\t},\n\n\t\tgetFrameExtents: function () {\n\n\t\t\treturn this._frameExtents;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.camera = source.camera.clone();\n\n\t\t\tthis.bias = source.bias;\n\t\t\tthis.radius = source.radius;\n\n\t\t\tthis.mapSize.copy( source.mapSize );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar object = {};\n\n\t\t\tif ( this.bias !== 0 ) { object.bias = this.bias; }\n\t\t\tif ( this.radius !== 1 ) { object.radius = this.radius; }\n\t\t\tif ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) { object.mapSize = this.mapSize.toArray(); }\n\n\t\t\tobject.camera = this.camera.toJSON( false ).object;\n\t\t\tdelete object.camera.matrix;\n\n\t\t\treturn object;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction SpotLightShadow() {\n\n\t\tLightShadow.call( this, new PerspectiveCamera( 50, 1, 0.5, 500 ) );\n\n\t}\n\n\tSpotLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\n\t\tconstructor: SpotLightShadow,\n\n\t\tisSpotLightShadow: true,\n\n\t\tupdateMatrices: function ( light ) {\n\n\t\t\tvar camera = this.camera;\n\n\t\t\tvar fov = MathUtils.RAD2DEG * 2 * light.angle;\n\t\t\tvar aspect = this.mapSize.width / this.mapSize.height;\n\t\t\tvar far = light.distance || camera.far;\n\n\t\t\tif ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {\n\n\t\t\t\tcamera.fov = fov;\n\t\t\t\tcamera.aspect = aspect;\n\t\t\t\tcamera.far = far;\n\t\t\t\tcamera.updateProjectionMatrix();\n\n\t\t\t}\n\n\t\t\tLightShadow.prototype.updateMatrices.call( this, light );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction SpotLight( color, intensity, distance, angle, penumbra, decay ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'SpotLight';\n\n\t\tthis.position.copy( Object3D.DefaultUp );\n\t\tthis.updateMatrix();\n\n\t\tthis.target = new Object3D();\n\n\t\tObject.defineProperty( this, 'power', {\n\t\t\tget: function () {\n\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\treturn this.intensity * Math.PI;\n\n\t\t\t},\n\t\t\tset: function ( power ) {\n\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\tthis.intensity = power / Math.PI;\n\n\t\t\t}\n\t\t} );\n\n\t\tthis.distance = ( distance !== undefined ) ? distance : 0;\n\t\tthis.angle = ( angle !== undefined ) ? angle : Math.PI / 3;\n\t\tthis.penumbra = ( penumbra !== undefined ) ? penumbra : 0;\n\t\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\n\t\tthis.shadow = new SpotLightShadow();\n\n\t}\n\n\tSpotLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: SpotLight,\n\n\t\tisSpotLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.distance = source.distance;\n\t\t\tthis.angle = source.angle;\n\t\t\tthis.penumbra = source.penumbra;\n\t\t\tthis.decay = source.decay;\n\n\t\t\tthis.target = source.target.clone();\n\n\t\t\tthis.shadow = source.shadow.clone();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\tfunction PointLightShadow() {\n\n\t\tLightShadow.call( this, new PerspectiveCamera( 90, 1, 0.5, 500 ) );\n\n\t\tthis._frameExtents = new Vector2( 4, 2 );\n\n\t\tthis._viewportCount = 6;\n\n\t\tthis._viewports = [\n\t\t\t// These viewports map a cube-map onto a 2D texture with the\n\t\t\t// following orientation:\n\t\t\t//\n\t\t\t//  xzXZ\n\t\t\t//   y Y\n\t\t\t//\n\t\t\t// X - Positive x direction\n\t\t\t// x - Negative x direction\n\t\t\t// Y - Positive y direction\n\t\t\t// y - Negative y direction\n\t\t\t// Z - Positive z direction\n\t\t\t// z - Negative z direction\n\n\t\t\t// positive X\n\t\t\tnew Vector4( 2, 1, 1, 1 ),\n\t\t\t// negative X\n\t\t\tnew Vector4( 0, 1, 1, 1 ),\n\t\t\t// positive Z\n\t\t\tnew Vector4( 3, 1, 1, 1 ),\n\t\t\t// negative Z\n\t\t\tnew Vector4( 1, 1, 1, 1 ),\n\t\t\t// positive Y\n\t\t\tnew Vector4( 3, 0, 1, 1 ),\n\t\t\t// negative Y\n\t\t\tnew Vector4( 1, 0, 1, 1 )\n\t\t];\n\n\t\tthis._cubeDirections = [\n\t\t\tnew Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),\n\t\t\tnew Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )\n\t\t];\n\n\t\tthis._cubeUps = [\n\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),\n\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),\tnew Vector3( 0, 0, - 1 )\n\t\t];\n\n\t}\n\n\tPointLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\n\t\tconstructor: PointLightShadow,\n\n\t\tisPointLightShadow: true,\n\n\t\tupdateMatrices: function ( light, viewportIndex ) {\n\n\t\t\tif ( viewportIndex === undefined ) { viewportIndex = 0; }\n\n\t\t\tvar camera = this.camera,\n\t\t\t\tshadowMatrix = this.matrix,\n\t\t\t\tlightPositionWorld = this._lightPositionWorld,\n\t\t\t\tlookTarget = this._lookTarget,\n\t\t\t\tprojScreenMatrix = this._projScreenMatrix;\n\n\t\t\tlightPositionWorld.setFromMatrixPosition( light.matrixWorld );\n\t\t\tcamera.position.copy( lightPositionWorld );\n\n\t\t\tlookTarget.copy( camera.position );\n\t\t\tlookTarget.add( this._cubeDirections[ viewportIndex ] );\n\t\t\tcamera.up.copy( this._cubeUps[ viewportIndex ] );\n\t\t\tcamera.lookAt( lookTarget );\n\t\t\tcamera.updateMatrixWorld();\n\n\t\t\tshadowMatrix.makeTranslation( - lightPositionWorld.x, - lightPositionWorld.y, - lightPositionWorld.z );\n\n\t\t\tprojScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t\t\tthis._frustum.setFromProjectionMatrix( projScreenMatrix );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\n\tfunction PointLight( color, intensity, distance, decay ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'PointLight';\n\n\t\tObject.defineProperty( this, 'power', {\n\t\t\tget: function () {\n\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\treturn this.intensity * 4 * Math.PI;\n\n\t\t\t},\n\t\t\tset: function ( power ) {\n\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\tthis.intensity = power / ( 4 * Math.PI );\n\n\t\t\t}\n\t\t} );\n\n\t\tthis.distance = ( distance !== undefined ) ? distance : 0;\n\t\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\n\t\tthis.shadow = new PointLightShadow();\n\n\t}\n\n\tPointLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: PointLight,\n\n\t\tisPointLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.distance = source.distance;\n\t\t\tthis.decay = source.decay;\n\n\t\t\tthis.shadow = source.shadow.clone();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author arose / http://github.com/arose\n\t */\n\n\tfunction OrthographicCamera( left, right, top, bottom, near, far ) {\n\n\t\tCamera.call( this );\n\n\t\tthis.type = 'OrthographicCamera';\n\n\t\tthis.zoom = 1;\n\t\tthis.view = null;\n\n\t\tthis.left = ( left !== undefined ) ? left : - 1;\n\t\tthis.right = ( right !== undefined ) ? right : 1;\n\t\tthis.top = ( top !== undefined ) ? top : 1;\n\t\tthis.bottom = ( bottom !== undefined ) ? bottom : - 1;\n\n\t\tthis.near = ( near !== undefined ) ? near : 0.1;\n\t\tthis.far = ( far !== undefined ) ? far : 2000;\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tOrthographicCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\n\n\t\tconstructor: OrthographicCamera,\n\n\t\tisOrthographicCamera: true,\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tCamera.prototype.copy.call( this, source, recursive );\n\n\t\t\tthis.left = source.left;\n\t\t\tthis.right = source.right;\n\t\t\tthis.top = source.top;\n\t\t\tthis.bottom = source.bottom;\n\t\t\tthis.near = source.near;\n\t\t\tthis.far = source.far;\n\n\t\t\tthis.zoom = source.zoom;\n\t\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\t\tif ( this.view === null ) {\n\n\t\t\t\tthis.view = {\n\t\t\t\t\tenabled: true,\n\t\t\t\t\tfullWidth: 1,\n\t\t\t\t\tfullHeight: 1,\n\t\t\t\t\toffsetX: 0,\n\t\t\t\t\toffsetY: 0,\n\t\t\t\t\twidth: 1,\n\t\t\t\t\theight: 1\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tthis.view.enabled = true;\n\t\t\tthis.view.fullWidth = fullWidth;\n\t\t\tthis.view.fullHeight = fullHeight;\n\t\t\tthis.view.offsetX = x;\n\t\t\tthis.view.offsetY = y;\n\t\t\tthis.view.width = width;\n\t\t\tthis.view.height = height;\n\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\tclearViewOffset: function () {\n\n\t\t\tif ( this.view !== null ) {\n\n\t\t\t\tthis.view.enabled = false;\n\n\t\t\t}\n\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\tupdateProjectionMatrix: function () {\n\n\t\t\tvar dx = ( this.right - this.left ) / ( 2 * this.zoom );\n\t\t\tvar dy = ( this.top - this.bottom ) / ( 2 * this.zoom );\n\t\t\tvar cx = ( this.right + this.left ) / 2;\n\t\t\tvar cy = ( this.top + this.bottom ) / 2;\n\n\t\t\tvar left = cx - dx;\n\t\t\tvar right = cx + dx;\n\t\t\tvar top = cy + dy;\n\t\t\tvar bottom = cy - dy;\n\n\t\t\tif ( this.view !== null && this.view.enabled ) {\n\n\t\t\t\tvar scaleW = ( this.right - this.left ) / this.view.fullWidth / this.zoom;\n\t\t\t\tvar scaleH = ( this.top - this.bottom ) / this.view.fullHeight / this.zoom;\n\n\t\t\t\tleft += scaleW * this.view.offsetX;\n\t\t\t\tright = left + scaleW * this.view.width;\n\t\t\t\ttop -= scaleH * this.view.offsetY;\n\t\t\t\tbottom = top - scaleH * this.view.height;\n\n\t\t\t}\n\n\t\t\tthis.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );\n\n\t\t\tthis.projectionMatrixInverse.getInverse( this.projectionMatrix );\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.zoom = this.zoom;\n\t\t\tdata.object.left = this.left;\n\t\t\tdata.object.right = this.right;\n\t\t\tdata.object.top = this.top;\n\t\t\tdata.object.bottom = this.bottom;\n\t\t\tdata.object.near = this.near;\n\t\t\tdata.object.far = this.far;\n\n\t\t\tif ( this.view !== null ) { data.object.view = Object.assign( {}, this.view ); }\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction DirectionalLightShadow() {\n\n\t\tLightShadow.call( this, new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );\n\n\t}\n\n\tDirectionalLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\n\t\tconstructor: DirectionalLightShadow,\n\n\t\tisDirectionalLightShadow: true,\n\n\t\tupdateMatrices: function ( light ) {\n\n\t\t\tLightShadow.prototype.updateMatrices.call( this, light );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction DirectionalLight( color, intensity ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'DirectionalLight';\n\n\t\tthis.position.copy( Object3D.DefaultUp );\n\t\tthis.updateMatrix();\n\n\t\tthis.target = new Object3D();\n\n\t\tthis.shadow = new DirectionalLightShadow();\n\n\t}\n\n\tDirectionalLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: DirectionalLight,\n\n\t\tisDirectionalLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.target = source.target.clone();\n\n\t\t\tthis.shadow = source.shadow.clone();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction AmbientLight( color, intensity ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'AmbientLight';\n\n\t\tthis.castShadow = undefined;\n\n\t}\n\n\tAmbientLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: AmbientLight,\n\n\t\tisAmbientLight: true\n\n\t} );\n\n\t/**\n\t * @author abelnation / http://github.com/abelnation\n\t */\n\n\tfunction RectAreaLight( color, intensity, width, height ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'RectAreaLight';\n\n\t\tthis.width = ( width !== undefined ) ? width : 10;\n\t\tthis.height = ( height !== undefined ) ? height : 10;\n\n\t}\n\n\tRectAreaLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: RectAreaLight,\n\n\t\tisRectAreaLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.width = source.width;\n\t\t\tthis.height = source.height;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Light.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.width = this.width;\n\t\t\tdata.object.height = this.height;\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction MaterialLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t\tthis.textures = {};\n\n\t}\n\n\tMaterialLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: MaterialLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( scope.manager );\n\t\t\tloader.setPath( scope.path );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( json ) {\n\n\t\t\tvar textures = this.textures;\n\n\t\t\tfunction getTexture( name ) {\n\n\t\t\t\tif ( textures[ name ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.MaterialLoader: Undefined texture', name );\n\n\t\t\t\t}\n\n\t\t\t\treturn textures[ name ];\n\n\t\t\t}\n\n\t\t\tvar material = new Materials[ json.type ]();\n\n\t\t\tif ( json.uuid !== undefined ) { material.uuid = json.uuid; }\n\t\t\tif ( json.name !== undefined ) { material.name = json.name; }\n\t\t\tif ( json.color !== undefined ) { material.color.setHex( json.color ); }\n\t\t\tif ( json.roughness !== undefined ) { material.roughness = json.roughness; }\n\t\t\tif ( json.metalness !== undefined ) { material.metalness = json.metalness; }\n\t\t\tif ( json.sheen !== undefined ) { material.sheen = new Color().setHex( json.sheen ); }\n\t\t\tif ( json.emissive !== undefined ) { material.emissive.setHex( json.emissive ); }\n\t\t\tif ( json.specular !== undefined ) { material.specular.setHex( json.specular ); }\n\t\t\tif ( json.shininess !== undefined ) { material.shininess = json.shininess; }\n\t\t\tif ( json.clearcoat !== undefined ) { material.clearcoat = json.clearcoat; }\n\t\t\tif ( json.clearcoatRoughness !== undefined ) { material.clearcoatRoughness = json.clearcoatRoughness; }\n\t\t\tif ( json.vertexColors !== undefined ) { material.vertexColors = json.vertexColors; }\n\t\t\tif ( json.fog !== undefined ) { material.fog = json.fog; }\n\t\t\tif ( json.flatShading !== undefined ) { material.flatShading = json.flatShading; }\n\t\t\tif ( json.blending !== undefined ) { material.blending = json.blending; }\n\t\t\tif ( json.combine !== undefined ) { material.combine = json.combine; }\n\t\t\tif ( json.side !== undefined ) { material.side = json.side; }\n\t\t\tif ( json.opacity !== undefined ) { material.opacity = json.opacity; }\n\t\t\tif ( json.transparent !== undefined ) { material.transparent = json.transparent; }\n\t\t\tif ( json.alphaTest !== undefined ) { material.alphaTest = json.alphaTest; }\n\t\t\tif ( json.depthTest !== undefined ) { material.depthTest = json.depthTest; }\n\t\t\tif ( json.depthWrite !== undefined ) { material.depthWrite = json.depthWrite; }\n\t\t\tif ( json.colorWrite !== undefined ) { material.colorWrite = json.colorWrite; }\n\n\t\t\tif ( json.stencilWrite !== undefined ) { material.stencilWrite = json.stencilWrite; }\n\t\t\tif ( json.stencilWriteMask !== undefined ) { material.stencilWriteMask = json.stencilWriteMask; }\n\t\t\tif ( json.stencilFunc !== undefined ) { material.stencilFunc = json.stencilFunc; }\n\t\t\tif ( json.stencilRef !== undefined ) { material.stencilRef = json.stencilRef; }\n\t\t\tif ( json.stencilFuncMask !== undefined ) { material.stencilFuncMask = json.stencilFuncMask; }\n\t\t\tif ( json.stencilFail !== undefined ) { material.stencilFail = json.stencilFail; }\n\t\t\tif ( json.stencilZFail !== undefined ) { material.stencilZFail = json.stencilZFail; }\n\t\t\tif ( json.stencilZPass !== undefined ) { material.stencilZPass = json.stencilZPass; }\n\n\t\t\tif ( json.wireframe !== undefined ) { material.wireframe = json.wireframe; }\n\t\t\tif ( json.wireframeLinewidth !== undefined ) { material.wireframeLinewidth = json.wireframeLinewidth; }\n\t\t\tif ( json.wireframeLinecap !== undefined ) { material.wireframeLinecap = json.wireframeLinecap; }\n\t\t\tif ( json.wireframeLinejoin !== undefined ) { material.wireframeLinejoin = json.wireframeLinejoin; }\n\n\t\t\tif ( json.rotation !== undefined ) { material.rotation = json.rotation; }\n\n\t\t\tif ( json.linewidth !== 1 ) { material.linewidth = json.linewidth; }\n\t\t\tif ( json.dashSize !== undefined ) { material.dashSize = json.dashSize; }\n\t\t\tif ( json.gapSize !== undefined ) { material.gapSize = json.gapSize; }\n\t\t\tif ( json.scale !== undefined ) { material.scale = json.scale; }\n\n\t\t\tif ( json.polygonOffset !== undefined ) { material.polygonOffset = json.polygonOffset; }\n\t\t\tif ( json.polygonOffsetFactor !== undefined ) { material.polygonOffsetFactor = json.polygonOffsetFactor; }\n\t\t\tif ( json.polygonOffsetUnits !== undefined ) { material.polygonOffsetUnits = json.polygonOffsetUnits; }\n\n\t\t\tif ( json.skinning !== undefined ) { material.skinning = json.skinning; }\n\t\t\tif ( json.morphTargets !== undefined ) { material.morphTargets = json.morphTargets; }\n\t\t\tif ( json.morphNormals !== undefined ) { material.morphNormals = json.morphNormals; }\n\t\t\tif ( json.dithering !== undefined ) { material.dithering = json.dithering; }\n\n\t\t\tif ( json.visible !== undefined ) { material.visible = json.visible; }\n\n\t\t\tif ( json.toneMapped !== undefined ) { material.toneMapped = json.toneMapped; }\n\n\t\t\tif ( json.userData !== undefined ) { material.userData = json.userData; }\n\n\t\t\t// Shader Material\n\n\t\t\tif ( json.uniforms !== undefined ) {\n\n\t\t\t\tfor ( var name in json.uniforms ) {\n\n\t\t\t\t\tvar uniform = json.uniforms[ name ];\n\n\t\t\t\t\tmaterial.uniforms[ name ] = {};\n\n\t\t\t\t\tswitch ( uniform.type ) {\n\n\t\t\t\t\t\tcase 't':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = getTexture( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'c':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Color().setHex( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v2':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector2().fromArray( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v3':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector3().fromArray( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v4':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector4().fromArray( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'm3':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Matrix3().fromArray( uniform.value );\n\n\t\t\t\t\t\tcase 'm4':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Matrix4().fromArray( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = uniform.value;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( json.defines !== undefined ) { material.defines = json.defines; }\n\t\t\tif ( json.vertexShader !== undefined ) { material.vertexShader = json.vertexShader; }\n\t\t\tif ( json.fragmentShader !== undefined ) { material.fragmentShader = json.fragmentShader; }\n\n\t\t\tif ( json.extensions !== undefined ) {\n\n\t\t\t\tfor ( var key in json.extensions ) {\n\n\t\t\t\t\tmaterial.extensions[ key ] = json.extensions[ key ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Deprecated\n\n\t\t\tif ( json.shading !== undefined ) { material.flatShading = json.shading === 1; } // THREE.FlatShading\n\n\t\t\t// for PointsMaterial\n\n\t\t\tif ( json.size !== undefined ) { material.size = json.size; }\n\t\t\tif ( json.sizeAttenuation !== undefined ) { material.sizeAttenuation = json.sizeAttenuation; }\n\n\t\t\t// maps\n\n\t\t\tif ( json.map !== undefined ) { material.map = getTexture( json.map ); }\n\t\t\tif ( json.matcap !== undefined ) { material.matcap = getTexture( json.matcap ); }\n\n\t\t\tif ( json.alphaMap !== undefined ) {\n\n\t\t\t\tmaterial.alphaMap = getTexture( json.alphaMap );\n\t\t\t\tmaterial.transparent = true;\n\n\t\t\t}\n\n\t\t\tif ( json.bumpMap !== undefined ) { material.bumpMap = getTexture( json.bumpMap ); }\n\t\t\tif ( json.bumpScale !== undefined ) { material.bumpScale = json.bumpScale; }\n\n\t\t\tif ( json.normalMap !== undefined ) { material.normalMap = getTexture( json.normalMap ); }\n\t\t\tif ( json.normalMapType !== undefined ) { material.normalMapType = json.normalMapType; }\n\t\t\tif ( json.normalScale !== undefined ) {\n\n\t\t\t\tvar normalScale = json.normalScale;\n\n\t\t\t\tif ( Array.isArray( normalScale ) === false ) {\n\n\t\t\t\t\t// Blender exporter used to export a scalar. See #7459\n\n\t\t\t\t\tnormalScale = [ normalScale, normalScale ];\n\n\t\t\t\t}\n\n\t\t\t\tmaterial.normalScale = new Vector2().fromArray( normalScale );\n\n\t\t\t}\n\n\t\t\tif ( json.displacementMap !== undefined ) { material.displacementMap = getTexture( json.displacementMap ); }\n\t\t\tif ( json.displacementScale !== undefined ) { material.displacementScale = json.displacementScale; }\n\t\t\tif ( json.displacementBias !== undefined ) { material.displacementBias = json.displacementBias; }\n\n\t\t\tif ( json.roughnessMap !== undefined ) { material.roughnessMap = getTexture( json.roughnessMap ); }\n\t\t\tif ( json.metalnessMap !== undefined ) { material.metalnessMap = getTexture( json.metalnessMap ); }\n\n\t\t\tif ( json.emissiveMap !== undefined ) { material.emissiveMap = getTexture( json.emissiveMap ); }\n\t\t\tif ( json.emissiveIntensity !== undefined ) { material.emissiveIntensity = json.emissiveIntensity; }\n\n\t\t\tif ( json.specularMap !== undefined ) { material.specularMap = getTexture( json.specularMap ); }\n\n\t\t\tif ( json.envMap !== undefined ) { material.envMap = getTexture( json.envMap ); }\n\t\t\tif ( json.envMapIntensity !== undefined ) { material.envMapIntensity = json.envMapIntensity; }\n\n\t\t\tif ( json.reflectivity !== undefined ) { material.reflectivity = json.reflectivity; }\n\t\t\tif ( json.refractionRatio !== undefined ) { material.refractionRatio = json.refractionRatio; }\n\n\t\t\tif ( json.lightMap !== undefined ) { material.lightMap = getTexture( json.lightMap ); }\n\t\t\tif ( json.lightMapIntensity !== undefined ) { material.lightMapIntensity = json.lightMapIntensity; }\n\n\t\t\tif ( json.aoMap !== undefined ) { material.aoMap = getTexture( json.aoMap ); }\n\t\t\tif ( json.aoMapIntensity !== undefined ) { material.aoMapIntensity = json.aoMapIntensity; }\n\n\t\t\tif ( json.gradientMap !== undefined ) { material.gradientMap = getTexture( json.gradientMap ); }\n\n\t\t\tif ( json.clearcoatNormalMap !== undefined ) { material.clearcoatNormalMap = getTexture( json.clearcoatNormalMap ); }\n\t\t\tif ( json.clearcoatNormalScale !== undefined ) { material.clearcoatNormalScale = new Vector2().fromArray( json.clearcoatNormalScale ); }\n\n\t\t\treturn material;\n\n\t\t},\n\n\t\tsetTextures: function ( value ) {\n\n\t\t\tthis.textures = value;\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author Don McCurdy / https://www.donmccurdy.com\n\t */\n\n\tvar LoaderUtils = {\n\n\t\tdecodeText: function ( array ) {\n\n\t\t\tif ( typeof TextDecoder !== 'undefined' ) {\n\n\t\t\t\treturn new TextDecoder().decode( array );\n\n\t\t\t}\n\n\t\t\t// Avoid the String.fromCharCode.apply(null, array) shortcut, which\n\t\t\t// throws a \"maximum call stack size exceeded\" error for large arrays.\n\n\t\t\tvar s = '';\n\n\t\t\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\n\n\t\t\t\t// Implicitly assumes little-endian.\n\t\t\t\ts += String.fromCharCode( array[ i ] );\n\n\t\t\t}\n\n\t\t\ttry {\n\n\t\t\t\t// merges multi-byte utf-8 characters.\n\n\t\t\t\treturn decodeURIComponent( escape( s ) );\n\n\t\t\t} catch ( e ) { // see #16358\n\n\t\t\t\treturn s;\n\n\t\t\t}\n\n\t\t},\n\n\t\textractUrlBase: function ( url ) {\n\n\t\t\tvar index = url.lastIndexOf( '/' );\n\n\t\t\tif ( index === - 1 ) { return './'; }\n\n\t\t\treturn url.substr( 0, index + 1 );\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction InstancedBufferGeometry() {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'InstancedBufferGeometry';\n\t\tthis.maxInstancedCount = undefined;\n\n\t}\n\n\tInstancedBufferGeometry.prototype = Object.assign( Object.create( BufferGeometry.prototype ), {\n\n\t\tconstructor: InstancedBufferGeometry,\n\n\t\tisInstancedBufferGeometry: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tBufferGeometry.prototype.copy.call( this, source );\n\n\t\t\tthis.maxInstancedCount = source.maxInstancedCount;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = BufferGeometry.prototype.toJSON.call( this );\n\n\t\t\tdata.maxInstancedCount = this.maxInstancedCount;\n\n\t\t\tdata.isInstancedBufferGeometry = true;\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction InstancedBufferAttribute( array, itemSize, normalized, meshPerAttribute ) {\n\n\t\tif ( typeof ( normalized ) === 'number' ) {\n\n\t\t\tmeshPerAttribute = normalized;\n\n\t\t\tnormalized = false;\n\n\t\t\tconsole.error( 'THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.' );\n\n\t\t}\n\n\t\tBufferAttribute.call( this, array, itemSize, normalized );\n\n\t\tthis.meshPerAttribute = meshPerAttribute || 1;\n\n\t}\n\n\tInstancedBufferAttribute.prototype = Object.assign( Object.create( BufferAttribute.prototype ), {\n\n\t\tconstructor: InstancedBufferAttribute,\n\n\t\tisInstancedBufferAttribute: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tBufferAttribute.prototype.copy.call( this, source );\n\n\t\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ()\t{\n\n\t\t\tvar data = BufferAttribute.prototype.toJSON.call( this );\n\n\t\t\tdata.meshPerAttribute = this.meshPerAttribute;\n\n\t\t\tdata.isInstancedBufferAttribute = true;\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction BufferGeometryLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tBufferGeometryLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: BufferGeometryLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( scope.manager );\n\t\t\tloader.setPath( scope.path );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( json ) {\n\n\t\t\tvar geometry = json.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry();\n\n\t\t\tvar index = json.data.index;\n\n\t\t\tif ( index !== undefined ) {\n\n\t\t\t\tvar typedArray = new TYPED_ARRAYS[ index.type ]( index.array );\n\t\t\t\tgeometry.setIndex( new BufferAttribute( typedArray, 1 ) );\n\n\t\t\t}\n\n\t\t\tvar attributes = json.data.attributes;\n\n\t\t\tfor ( var key in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ key ];\n\t\t\t\tvar typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );\n\t\t\t\tvar bufferAttributeConstr = attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;\n\t\t\t\tvar bufferAttribute = new bufferAttributeConstr( typedArray, attribute.itemSize, attribute.normalized );\n\t\t\t\tif ( attribute.name !== undefined ) { bufferAttribute.name = attribute.name; }\n\t\t\t\tgeometry.setAttribute( key, bufferAttribute );\n\n\t\t\t}\n\n\t\t\tvar morphAttributes = json.data.morphAttributes;\n\n\t\t\tif ( morphAttributes ) {\n\n\t\t\t\tfor ( var key in morphAttributes ) {\n\n\t\t\t\t\tvar attributeArray = morphAttributes[ key ];\n\n\t\t\t\t\tvar array = [];\n\n\t\t\t\t\tfor ( var i = 0, il = attributeArray.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar attribute = attributeArray[ i ];\n\t\t\t\t\t\tvar typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );\n\n\t\t\t\t\t\tvar bufferAttribute = new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized );\n\t\t\t\t\t\tif ( attribute.name !== undefined ) { bufferAttribute.name = attribute.name; }\n\t\t\t\t\t\tarray.push( bufferAttribute );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.morphAttributes[ key ] = array;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar morphTargetsRelative = json.data.morphTargetsRelative;\n\n\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\tgeometry.morphTargetsRelative = true;\n\n\t\t\t}\n\n\t\t\tvar groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n\n\t\t\tif ( groups !== undefined ) {\n\n\t\t\t\tfor ( var i = 0, n = groups.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar group = groups[ i ];\n\n\t\t\t\t\tgeometry.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar boundingSphere = json.data.boundingSphere;\n\n\t\t\tif ( boundingSphere !== undefined ) {\n\n\t\t\t\tvar center = new Vector3();\n\n\t\t\t\tif ( boundingSphere.center !== undefined ) {\n\n\t\t\t\t\tcenter.fromArray( boundingSphere.center );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.boundingSphere = new Sphere( center, boundingSphere.radius );\n\n\t\t\t}\n\n\t\t\tif ( json.name ) { geometry.name = json.name; }\n\t\t\tif ( json.userData ) { geometry.userData = json.userData; }\n\n\t\t\treturn geometry;\n\n\t\t}\n\n\t} );\n\n\tvar TYPED_ARRAYS = {\n\t\tInt8Array: Int8Array,\n\t\tUint8Array: Uint8Array,\n\t\t// Workaround for IE11 pre KB2929437. See #11440\n\t\tUint8ClampedArray: typeof Uint8ClampedArray !== 'undefined' ? Uint8ClampedArray : Uint8Array,\n\t\tInt16Array: Int16Array,\n\t\tUint16Array: Uint16Array,\n\t\tInt32Array: Int32Array,\n\t\tUint32Array: Uint32Array,\n\t\tFloat32Array: Float32Array,\n\t\tFloat64Array: Float64Array\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction ObjectLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tObjectLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: ObjectLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar path = ( this.path === '' ) ? LoaderUtils.extractUrlBase( url ) : this.path;\n\t\t\tthis.resourcePath = this.resourcePath || path;\n\n\t\t\tvar loader = new FileLoader( scope.manager );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tvar json = null;\n\n\t\t\t\ttry {\n\n\t\t\t\t\tjson = JSON.parse( text );\n\n\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\tif ( onError !== undefined ) { onError( error ); }\n\n\t\t\t\t\tconsole.error( 'THREE:ObjectLoader: Can\\'t parse ' + url + '.', error.message );\n\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tvar metadata = json.metadata;\n\n\t\t\t\tif ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {\n\n\t\t\t\t\tconsole.error( 'THREE.ObjectLoader: Can\\'t load ' + url );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tscope.parse( json, onLoad );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( json, onLoad ) {\n\n\t\t\tvar shapes = this.parseShape( json.shapes );\n\t\t\tvar geometries = this.parseGeometries( json.geometries, shapes );\n\n\t\t\tvar images = this.parseImages( json.images, function () {\n\n\t\t\t\tif ( onLoad !== undefined ) { onLoad( object ); }\n\n\t\t\t} );\n\n\t\t\tvar textures = this.parseTextures( json.textures, images );\n\t\t\tvar materials = this.parseMaterials( json.materials, textures );\n\n\t\t\tvar object = this.parseObject( json.object, geometries, materials );\n\n\t\t\tif ( json.animations ) {\n\n\t\t\t\tobject.animations = this.parseAnimations( json.animations );\n\n\t\t\t}\n\n\t\t\tif ( json.images === undefined || json.images.length === 0 ) {\n\n\t\t\t\tif ( onLoad !== undefined ) { onLoad( object ); }\n\n\t\t\t}\n\n\t\t\treturn object;\n\n\t\t},\n\n\t\tparseShape: function ( json ) {\n\n\t\t\tvar shapes = {};\n\n\t\t\tif ( json !== undefined ) {\n\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar shape = new Shape().fromJSON( json[ i ] );\n\n\t\t\t\t\tshapes[ shape.uuid ] = shape;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn shapes;\n\n\t\t},\n\n\t\tparseGeometries: function ( json, shapes ) {\n\n\t\t\tvar geometries = {};\n\n\t\t\tif ( json !== undefined ) {\n\n\t\t\t\tvar bufferGeometryLoader = new BufferGeometryLoader();\n\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar geometry;\n\t\t\t\t\tvar data = json[ i ];\n\n\t\t\t\t\tswitch ( data.type ) {\n\n\t\t\t\t\t\tcase 'PlaneGeometry':\n\t\t\t\t\t\tcase 'PlaneBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.width,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'BoxGeometry':\n\t\t\t\t\t\tcase 'BoxBufferGeometry':\n\t\t\t\t\t\tcase 'CubeGeometry': // backwards compatible\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.width,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.depth,\n\t\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.depthSegments\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'CircleGeometry':\n\t\t\t\t\t\tcase 'CircleBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.segments,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'CylinderGeometry':\n\t\t\t\t\t\tcase 'CylinderBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radiusTop,\n\t\t\t\t\t\t\t\tdata.radiusBottom,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.openEnded,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'ConeGeometry':\n\t\t\t\t\t\tcase 'ConeBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.openEnded,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'SphereGeometry':\n\t\t\t\t\t\tcase 'SphereBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.phiStart,\n\t\t\t\t\t\t\t\tdata.phiLength,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'DodecahedronGeometry':\n\t\t\t\t\t\tcase 'DodecahedronBufferGeometry':\n\t\t\t\t\t\tcase 'IcosahedronGeometry':\n\t\t\t\t\t\tcase 'IcosahedronBufferGeometry':\n\t\t\t\t\t\tcase 'OctahedronGeometry':\n\t\t\t\t\t\tcase 'OctahedronBufferGeometry':\n\t\t\t\t\t\tcase 'TetrahedronGeometry':\n\t\t\t\t\t\tcase 'TetrahedronBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.detail\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'RingGeometry':\n\t\t\t\t\t\tcase 'RingBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.innerRadius,\n\t\t\t\t\t\t\t\tdata.outerRadius,\n\t\t\t\t\t\t\t\tdata.thetaSegments,\n\t\t\t\t\t\t\t\tdata.phiSegments,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TorusGeometry':\n\t\t\t\t\t\tcase 'TorusBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.tube,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\t\tdata.arc\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TorusKnotGeometry':\n\t\t\t\t\t\tcase 'TorusKnotBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.tube,\n\t\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.p,\n\t\t\t\t\t\t\t\tdata.q\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TubeGeometry':\n\t\t\t\t\t\tcase 'TubeBufferGeometry':\n\n\t\t\t\t\t\t\t// This only works for built-in curves (e.g. CatmullRomCurve3).\n\t\t\t\t\t\t\t// User defined curves or instances of CurvePath will not be deserialized.\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tnew Curves[ data.path.type ]().fromJSON( data.path ),\n\t\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.closed\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'LatheGeometry':\n\t\t\t\t\t\tcase 'LatheBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.points,\n\t\t\t\t\t\t\t\tdata.segments,\n\t\t\t\t\t\t\t\tdata.phiStart,\n\t\t\t\t\t\t\t\tdata.phiLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'PolyhedronGeometry':\n\t\t\t\t\t\tcase 'PolyhedronBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.vertices,\n\t\t\t\t\t\t\t\tdata.indices,\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.details\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'ShapeGeometry':\n\t\t\t\t\t\tcase 'ShapeBufferGeometry':\n\n\t\t\t\t\t\t\tvar geometryShapes = [];\n\n\t\t\t\t\t\t\tfor ( var j = 0, jl = data.shapes.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\t\tvar shape = shapes[ data.shapes[ j ] ];\n\n\t\t\t\t\t\t\t\tgeometryShapes.push( shape );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tgeometryShapes,\n\t\t\t\t\t\t\t\tdata.curveSegments\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\n\t\t\t\t\t\tcase 'ExtrudeGeometry':\n\t\t\t\t\t\tcase 'ExtrudeBufferGeometry':\n\n\t\t\t\t\t\t\tvar geometryShapes = [];\n\n\t\t\t\t\t\t\tfor ( var j = 0, jl = data.shapes.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\t\tvar shape = shapes[ data.shapes[ j ] ];\n\n\t\t\t\t\t\t\t\tgeometryShapes.push( shape );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tvar extrudePath = data.options.extrudePath;\n\n\t\t\t\t\t\t\tif ( extrudePath !== undefined ) {\n\n\t\t\t\t\t\t\t\tdata.options.extrudePath = new Curves[ extrudePath.type ]().fromJSON( extrudePath );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tgeometryShapes,\n\t\t\t\t\t\t\t\tdata.options\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'BufferGeometry':\n\t\t\t\t\t\tcase 'InstancedBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = bufferGeometryLoader.parse( data );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'Geometry':\n\n\t\t\t\t\t\t\tif ( 'THREE' in window && 'LegacyJSONLoader' in THREE ) {\n\n\t\t\t\t\t\t\t\tvar geometryLoader = new THREE.LegacyJSONLoader();\n\t\t\t\t\t\t\t\tgeometry = geometryLoader.parse( data, this.resourcePath ).geometry;\n\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tconsole.error( 'THREE.ObjectLoader: You have to import LegacyJSONLoader in order load geometry data of type \"Geometry\".' );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Unsupported geometry type \"' + data.type + '\"' );\n\n\t\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.uuid = data.uuid;\n\n\t\t\t\t\tif ( data.name !== undefined ) { geometry.name = data.name; }\n\t\t\t\t\tif ( geometry.isBufferGeometry === true && data.userData !== undefined ) { geometry.userData = data.userData; }\n\n\t\t\t\t\tgeometries[ data.uuid ] = geometry;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn geometries;\n\n\t\t},\n\n\t\tparseMaterials: function ( json, textures ) {\n\n\t\t\tvar cache = {}; // MultiMaterial\n\t\t\tvar materials = {};\n\n\t\t\tif ( json !== undefined ) {\n\n\t\t\t\tvar loader = new MaterialLoader();\n\t\t\t\tloader.setTextures( textures );\n\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar data = json[ i ];\n\n\t\t\t\t\tif ( data.type === 'MultiMaterial' ) {\n\n\t\t\t\t\t\t// Deprecated\n\n\t\t\t\t\t\tvar array = [];\n\n\t\t\t\t\t\tfor ( var j = 0; j < data.materials.length; j ++ ) {\n\n\t\t\t\t\t\t\tvar material = data.materials[ j ];\n\n\t\t\t\t\t\t\tif ( cache[ material.uuid ] === undefined ) {\n\n\t\t\t\t\t\t\t\tcache[ material.uuid ] = loader.parse( material );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tarray.push( cache[ material.uuid ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaterials[ data.uuid ] = array;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( cache[ data.uuid ] === undefined ) {\n\n\t\t\t\t\t\t\tcache[ data.uuid ] = loader.parse( data );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaterials[ data.uuid ] = cache[ data.uuid ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn materials;\n\n\t\t},\n\n\t\tparseAnimations: function ( json ) {\n\n\t\t\tvar animations = [];\n\n\t\t\tfor ( var i = 0; i < json.length; i ++ ) {\n\n\t\t\t\tvar data = json[ i ];\n\n\t\t\t\tvar clip = AnimationClip.parse( data );\n\n\t\t\t\tif ( data.uuid !== undefined ) { clip.uuid = data.uuid; }\n\n\t\t\t\tanimations.push( clip );\n\n\t\t\t}\n\n\t\t\treturn animations;\n\n\t\t},\n\n\t\tparseImages: function ( json, onLoad ) {\n\n\t\t\tvar scope = this;\n\t\t\tvar images = {};\n\n\t\t\tfunction loadImage( url ) {\n\n\t\t\t\tscope.manager.itemStart( url );\n\n\t\t\t\treturn loader.load( url, function () {\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, undefined, function () {\n\n\t\t\t\t\tscope.manager.itemError( url );\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tif ( json !== undefined && json.length > 0 ) {\n\n\t\t\t\tvar manager = new LoadingManager( onLoad );\n\n\t\t\t\tvar loader = new ImageLoader( manager );\n\t\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\t\t\tfor ( var i = 0, il = json.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar image = json[ i ];\n\t\t\t\t\tvar url = image.url;\n\n\t\t\t\t\tif ( Array.isArray( url ) ) {\n\n\t\t\t\t\t\t// load array of images e.g CubeTexture\n\n\t\t\t\t\t\timages[ image.uuid ] = [];\n\n\t\t\t\t\t\tfor ( var j = 0, jl = url.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\tvar currentUrl = url[ j ];\n\n\t\t\t\t\t\t\tvar path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( currentUrl ) ? currentUrl : scope.resourcePath + currentUrl;\n\n\t\t\t\t\t\t\timages[ image.uuid ].push( loadImage( path ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// load single image\n\n\t\t\t\t\t\tvar path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( image.url ) ? image.url : scope.resourcePath + image.url;\n\n\t\t\t\t\t\timages[ image.uuid ] = loadImage( path );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn images;\n\n\t\t},\n\n\t\tparseTextures: function ( json, images ) {\n\n\t\t\tfunction parseConstant( value, type ) {\n\n\t\t\t\tif ( typeof value === 'number' ) { return value; }\n\n\t\t\t\tconsole.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );\n\n\t\t\t\treturn type[ value ];\n\n\t\t\t}\n\n\t\t\tvar textures = {};\n\n\t\t\tif ( json !== undefined ) {\n\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar data = json[ i ];\n\n\t\t\t\t\tif ( data.image === undefined ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No \"image\" specified for', data.uuid );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( images[ data.image ] === undefined ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined image', data.image );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar texture;\n\n\t\t\t\t\tif ( Array.isArray( images[ data.image ] ) ) {\n\n\t\t\t\t\t\ttexture = new CubeTexture( images[ data.image ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttexture = new Texture( images[ data.image ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\ttexture.uuid = data.uuid;\n\n\t\t\t\t\tif ( data.name !== undefined ) { texture.name = data.name; }\n\n\t\t\t\t\tif ( data.mapping !== undefined ) { texture.mapping = parseConstant( data.mapping, TEXTURE_MAPPING ); }\n\n\t\t\t\t\tif ( data.offset !== undefined ) { texture.offset.fromArray( data.offset ); }\n\t\t\t\t\tif ( data.repeat !== undefined ) { texture.repeat.fromArray( data.repeat ); }\n\t\t\t\t\tif ( data.center !== undefined ) { texture.center.fromArray( data.center ); }\n\t\t\t\t\tif ( data.rotation !== undefined ) { texture.rotation = data.rotation; }\n\n\t\t\t\t\tif ( data.wrap !== undefined ) {\n\n\t\t\t\t\t\ttexture.wrapS = parseConstant( data.wrap[ 0 ], TEXTURE_WRAPPING );\n\t\t\t\t\t\ttexture.wrapT = parseConstant( data.wrap[ 1 ], TEXTURE_WRAPPING );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( data.format !== undefined ) { texture.format = data.format; }\n\t\t\t\t\tif ( data.type !== undefined ) { texture.type = data.type; }\n\t\t\t\t\tif ( data.encoding !== undefined ) { texture.encoding = data.encoding; }\n\n\t\t\t\t\tif ( data.minFilter !== undefined ) { texture.minFilter = parseConstant( data.minFilter, TEXTURE_FILTER ); }\n\t\t\t\t\tif ( data.magFilter !== undefined ) { texture.magFilter = parseConstant( data.magFilter, TEXTURE_FILTER ); }\n\t\t\t\t\tif ( data.anisotropy !== undefined ) { texture.anisotropy = data.anisotropy; }\n\n\t\t\t\t\tif ( data.flipY !== undefined ) { texture.flipY = data.flipY; }\n\n\t\t\t\t\tif ( data.premultiplyAlpha !== undefined ) { texture.premultiplyAlpha = data.premultiplyAlpha; }\n\t\t\t\t\tif ( data.unpackAlignment !== undefined ) { texture.unpackAlignment = data.unpackAlignment; }\n\n\t\t\t\t\ttextures[ data.uuid ] = texture;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn textures;\n\n\t\t},\n\n\t\tparseObject: function ( data, geometries, materials ) {\n\n\t\t\tvar object;\n\n\t\t\tfunction getGeometry( name ) {\n\n\t\t\t\tif ( geometries[ name ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined geometry', name );\n\n\t\t\t\t}\n\n\t\t\t\treturn geometries[ name ];\n\n\t\t\t}\n\n\t\t\tfunction getMaterial( name ) {\n\n\t\t\t\tif ( name === undefined ) { return undefined; }\n\n\t\t\t\tif ( Array.isArray( name ) ) {\n\n\t\t\t\t\tvar array = [];\n\n\t\t\t\t\tfor ( var i = 0, l = name.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tvar uuid = name[ i ];\n\n\t\t\t\t\t\tif ( materials[ uuid ] === undefined ) {\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', uuid );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tarray.push( materials[ uuid ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn array;\n\n\t\t\t\t}\n\n\t\t\t\tif ( materials[ name ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', name );\n\n\t\t\t\t}\n\n\t\t\t\treturn materials[ name ];\n\n\t\t\t}\n\n\t\t\tswitch ( data.type ) {\n\n\t\t\t\tcase 'Scene':\n\n\t\t\t\t\tobject = new Scene();\n\n\t\t\t\t\tif ( data.background !== undefined ) {\n\n\t\t\t\t\t\tif ( Number.isInteger( data.background ) ) {\n\n\t\t\t\t\t\t\tobject.background = new Color( data.background );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( data.fog !== undefined ) {\n\n\t\t\t\t\t\tif ( data.fog.type === 'Fog' ) {\n\n\t\t\t\t\t\t\tobject.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );\n\n\t\t\t\t\t\t} else if ( data.fog.type === 'FogExp2' ) {\n\n\t\t\t\t\t\t\tobject.fog = new FogExp2( data.fog.color, data.fog.density );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PerspectiveCamera':\n\n\t\t\t\t\tobject = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );\n\n\t\t\t\t\tif ( data.focus !== undefined ) { object.focus = data.focus; }\n\t\t\t\t\tif ( data.zoom !== undefined ) { object.zoom = data.zoom; }\n\t\t\t\t\tif ( data.filmGauge !== undefined ) { object.filmGauge = data.filmGauge; }\n\t\t\t\t\tif ( data.filmOffset !== undefined ) { object.filmOffset = data.filmOffset; }\n\t\t\t\t\tif ( data.view !== undefined ) { object.view = Object.assign( {}, data.view ); }\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'OrthographicCamera':\n\n\t\t\t\t\tobject = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );\n\n\t\t\t\t\tif ( data.zoom !== undefined ) { object.zoom = data.zoom; }\n\t\t\t\t\tif ( data.view !== undefined ) { object.view = Object.assign( {}, data.view ); }\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'AmbientLight':\n\n\t\t\t\t\tobject = new AmbientLight( data.color, data.intensity );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'DirectionalLight':\n\n\t\t\t\t\tobject = new DirectionalLight( data.color, data.intensity );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointLight':\n\n\t\t\t\t\tobject = new PointLight( data.color, data.intensity, data.distance, data.decay );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'RectAreaLight':\n\n\t\t\t\t\tobject = new RectAreaLight( data.color, data.intensity, data.width, data.height );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SpotLight':\n\n\t\t\t\t\tobject = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'HemisphereLight':\n\n\t\t\t\t\tobject = new HemisphereLight( data.color, data.groundColor, data.intensity );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SkinnedMesh':\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.' );\n\n\t\t\t\tcase 'Mesh':\n\n\t\t\t\t\tvar geometry = getGeometry( data.geometry );\n\t\t\t\t\tvar material = getMaterial( data.material );\n\n\t\t\t\t\tif ( geometry.bones && geometry.bones.length > 0 ) {\n\n\t\t\t\t\t\tobject = new SkinnedMesh( geometry, material );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tobject = new Mesh( geometry, material );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'InstancedMesh':\n\n\t\t\t\t\tvar geometry = getGeometry( data.geometry );\n\t\t\t\t\tvar material = getMaterial( data.material );\n\t\t\t\t\tvar count = data.count;\n\t\t\t\t\tvar instanceMatrix = data.instanceMatrix;\n\n\t\t\t\t\tobject = new InstancedMesh( geometry, material, count );\n\t\t\t\t\tobject.instanceMatrix = new BufferAttribute( new Float32Array( instanceMatrix.array ), 16 );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LOD':\n\n\t\t\t\t\tobject = new LOD();\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Line':\n\n\t\t\t\t\tobject = new Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LineLoop':\n\n\t\t\t\t\tobject = new LineLoop( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LineSegments':\n\n\t\t\t\t\tobject = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointCloud':\n\t\t\t\tcase 'Points':\n\n\t\t\t\t\tobject = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Sprite':\n\n\t\t\t\t\tobject = new Sprite( getMaterial( data.material ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Group':\n\n\t\t\t\t\tobject = new Group();\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tobject = new Object3D();\n\n\t\t\t}\n\n\t\t\tobject.uuid = data.uuid;\n\n\t\t\tif ( data.name !== undefined ) { object.name = data.name; }\n\n\t\t\tif ( data.matrix !== undefined ) {\n\n\t\t\t\tobject.matrix.fromArray( data.matrix );\n\n\t\t\t\tif ( data.matrixAutoUpdate !== undefined ) { object.matrixAutoUpdate = data.matrixAutoUpdate; }\n\t\t\t\tif ( object.matrixAutoUpdate ) { object.matrix.decompose( object.position, object.quaternion, object.scale ); }\n\n\t\t\t} else {\n\n\t\t\t\tif ( data.position !== undefined ) { object.position.fromArray( data.position ); }\n\t\t\t\tif ( data.rotation !== undefined ) { object.rotation.fromArray( data.rotation ); }\n\t\t\t\tif ( data.quaternion !== undefined ) { object.quaternion.fromArray( data.quaternion ); }\n\t\t\t\tif ( data.scale !== undefined ) { object.scale.fromArray( data.scale ); }\n\n\t\t\t}\n\n\t\t\tif ( data.castShadow !== undefined ) { object.castShadow = data.castShadow; }\n\t\t\tif ( data.receiveShadow !== undefined ) { object.receiveShadow = data.receiveShadow; }\n\n\t\t\tif ( data.shadow ) {\n\n\t\t\t\tif ( data.shadow.bias !== undefined ) { object.shadow.bias = data.shadow.bias; }\n\t\t\t\tif ( data.shadow.radius !== undefined ) { object.shadow.radius = data.shadow.radius; }\n\t\t\t\tif ( data.shadow.mapSize !== undefined ) { object.shadow.mapSize.fromArray( data.shadow.mapSize ); }\n\t\t\t\tif ( data.shadow.camera !== undefined ) { object.shadow.camera = this.parseObject( data.shadow.camera ); }\n\n\t\t\t}\n\n\t\t\tif ( data.visible !== undefined ) { object.visible = data.visible; }\n\t\t\tif ( data.frustumCulled !== undefined ) { object.frustumCulled = data.frustumCulled; }\n\t\t\tif ( data.renderOrder !== undefined ) { object.renderOrder = data.renderOrder; }\n\t\t\tif ( data.userData !== undefined ) { object.userData = data.userData; }\n\t\t\tif ( data.layers !== undefined ) { object.layers.mask = data.layers; }\n\n\t\t\tif ( data.children !== undefined ) {\n\n\t\t\t\tvar children = data.children;\n\n\t\t\t\tfor ( var i = 0; i < children.length; i ++ ) {\n\n\t\t\t\t\tobject.add( this.parseObject( children[ i ], geometries, materials ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( data.type === 'LOD' ) {\n\n\t\t\t\tif ( data.autoUpdate !== undefined ) { object.autoUpdate = data.autoUpdate; }\n\n\t\t\t\tvar levels = data.levels;\n\n\t\t\t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\n\t\t\t\t\tvar level = levels[ l ];\n\t\t\t\t\tvar child = object.getObjectByProperty( 'uuid', level.object );\n\n\t\t\t\t\tif ( child !== undefined ) {\n\n\t\t\t\t\t\tobject.addLevel( child, level.distance );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn object;\n\n\t\t}\n\n\t} );\n\n\tvar TEXTURE_MAPPING = {\n\t\tUVMapping: UVMapping,\n\t\tCubeReflectionMapping: CubeReflectionMapping,\n\t\tCubeRefractionMapping: CubeRefractionMapping,\n\t\tEquirectangularReflectionMapping: EquirectangularReflectionMapping,\n\t\tEquirectangularRefractionMapping: EquirectangularRefractionMapping,\n\t\tSphericalReflectionMapping: SphericalReflectionMapping,\n\t\tCubeUVReflectionMapping: CubeUVReflectionMapping,\n\t\tCubeUVRefractionMapping: CubeUVRefractionMapping\n\t};\n\n\tvar TEXTURE_WRAPPING = {\n\t\tRepeatWrapping: RepeatWrapping,\n\t\tClampToEdgeWrapping: ClampToEdgeWrapping,\n\t\tMirroredRepeatWrapping: MirroredRepeatWrapping\n\t};\n\n\tvar TEXTURE_FILTER = {\n\t\tNearestFilter: NearestFilter,\n\t\tNearestMipmapNearestFilter: NearestMipmapNearestFilter,\n\t\tNearestMipmapLinearFilter: NearestMipmapLinearFilter,\n\t\tLinearFilter: LinearFilter,\n\t\tLinearMipmapNearestFilter: LinearMipmapNearestFilter,\n\t\tLinearMipmapLinearFilter: LinearMipmapLinearFilter\n\t};\n\n\t/**\n\t * @author thespite / http://clicktorelease.com/\n\t */\n\n\n\tfunction ImageBitmapLoader( manager ) {\n\n\t\tif ( typeof createImageBitmap === 'undefined' ) {\n\n\t\t\tconsole.warn( 'THREE.ImageBitmapLoader: createImageBitmap() not supported.' );\n\n\t\t}\n\n\t\tif ( typeof fetch === 'undefined' ) {\n\n\t\t\tconsole.warn( 'THREE.ImageBitmapLoader: fetch() not supported.' );\n\n\t\t}\n\n\t\tLoader.call( this, manager );\n\n\t\tthis.options = undefined;\n\n\t}\n\n\tImageBitmapLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: ImageBitmapLoader,\n\n\t\tsetOptions: function setOptions( options ) {\n\n\t\t\tthis.options = options;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tif ( url === undefined ) { url = ''; }\n\n\t\t\tif ( this.path !== undefined ) { url = this.path + url; }\n\n\t\t\turl = this.manager.resolveURL( url );\n\n\t\t\tvar scope = this;\n\n\t\t\tvar cached = Cache.get( url );\n\n\t\t\tif ( cached !== undefined ) {\n\n\t\t\t\tscope.manager.itemStart( url );\n\n\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\tif ( onLoad ) { onLoad( cached ); }\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, 0 );\n\n\t\t\t\treturn cached;\n\n\t\t\t}\n\n\t\t\tfetch( url ).then( function ( res ) {\n\n\t\t\t\treturn res.blob();\n\n\t\t\t} ).then( function ( blob ) {\n\n\t\t\t\tif ( scope.options === undefined ) {\n\n\t\t\t\t\t// Workaround for FireFox. It causes an error if you pass options.\n\t\t\t\t\treturn createImageBitmap( blob );\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn createImageBitmap( blob, scope.options );\n\n\t\t\t\t}\n\n\t\t\t} ).then( function ( imageBitmap ) {\n\n\t\t\t\tCache.add( url, imageBitmap );\n\n\t\t\t\tif ( onLoad ) { onLoad( imageBitmap ); }\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t} ).catch( function ( e ) {\n\n\t\t\t\tif ( onError ) { onError( e ); }\n\n\t\t\t\tscope.manager.itemError( url );\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t} );\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * minimal class for proxing functions to Path. Replaces old \"extractSubpaths()\"\n\t **/\n\n\tfunction ShapePath() {\n\n\t\tthis.type = 'ShapePath';\n\n\t\tthis.color = new Color();\n\n\t\tthis.subPaths = [];\n\t\tthis.currentPath = null;\n\n\t}\n\n\tObject.assign( ShapePath.prototype, {\n\n\t\tmoveTo: function ( x, y ) {\n\n\t\t\tthis.currentPath = new Path();\n\t\t\tthis.subPaths.push( this.currentPath );\n\t\t\tthis.currentPath.moveTo( x, y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlineTo: function ( x, y ) {\n\n\t\t\tthis.currentPath.lineTo( x, y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n\n\t\t\tthis.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n\t\t\tthis.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsplineThru: function ( pts ) {\n\n\t\t\tthis.currentPath.splineThru( pts );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoShapes: function ( isCCW, noHoles ) {\n\n\t\t\tfunction toShapesNoHoles( inSubpaths ) {\n\n\t\t\t\tvar shapes = [];\n\n\t\t\t\tfor ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar tmpPath = inSubpaths[ i ];\n\n\t\t\t\t\tvar tmpShape = new Shape();\n\t\t\t\t\ttmpShape.curves = tmpPath.curves;\n\n\t\t\t\t\tshapes.push( tmpShape );\n\n\t\t\t\t}\n\n\t\t\t\treturn shapes;\n\n\t\t\t}\n\n\t\t\tfunction isPointInsidePolygon( inPt, inPolygon ) {\n\n\t\t\t\tvar polyLen = inPolygon.length;\n\n\t\t\t\t// inPt on polygon contour => immediate success    or\n\t\t\t\t// toggling of inside/outside at every single! intersection point of an edge\n\t\t\t\t//  with the horizontal line through inPt, left of inPt\n\t\t\t\t//  not counting lowerY endpoints of edges and whole edges on that line\n\t\t\t\tvar inside = false;\n\t\t\t\tfor ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {\n\n\t\t\t\t\tvar edgeLowPt = inPolygon[ p ];\n\t\t\t\t\tvar edgeHighPt = inPolygon[ q ];\n\n\t\t\t\t\tvar edgeDx = edgeHighPt.x - edgeLowPt.x;\n\t\t\t\t\tvar edgeDy = edgeHighPt.y - edgeLowPt.y;\n\n\t\t\t\t\tif ( Math.abs( edgeDy ) > Number.EPSILON ) {\n\n\t\t\t\t\t\t// not parallel\n\t\t\t\t\t\tif ( edgeDy < 0 ) {\n\n\t\t\t\t\t\t\tedgeLowPt = inPolygon[ q ]; edgeDx = - edgeDx;\n\t\t\t\t\t\t\tedgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) \t\t{ continue; }\n\n\t\t\t\t\t\tif ( inPt.y === edgeLowPt.y ) {\n\n\t\t\t\t\t\t\tif ( inPt.x === edgeLowPt.x )\t\t{ return\ttrue; }\t\t// inPt is on contour ?\n\t\t\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tvar perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );\n\t\t\t\t\t\t\tif ( perpEdge === 0 )\t\t\t\t{ return\ttrue; }\t\t// inPt is on contour ?\n\t\t\t\t\t\t\tif ( perpEdge < 0 ) \t\t\t\t{ continue; }\n\t\t\t\t\t\t\tinside = ! inside;\t\t// true intersection left of inPt\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// parallel or collinear\n\t\t\t\t\t\tif ( inPt.y !== edgeLowPt.y ) \t\t{ continue; }\t\t\t// parallel\n\t\t\t\t\t\t// edge lies on the same horizontal line as inPt\n\t\t\t\t\t\tif ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||\n\t\t\t\t\t\t\t ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )\t\t{ return\ttrue; }\t// inPt: Point on contour !\n\t\t\t\t\t\t// continue;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn\tinside;\n\n\t\t\t}\n\n\t\t\tvar isClockWise = ShapeUtils.isClockWise;\n\n\t\t\tvar subPaths = this.subPaths;\n\t\t\tif ( subPaths.length === 0 ) { return []; }\n\n\t\t\tif ( noHoles === true )\t{ return\ttoShapesNoHoles( subPaths ); }\n\n\n\t\t\tvar solid, tmpPath, tmpShape, shapes = [];\n\n\t\t\tif ( subPaths.length === 1 ) {\n\n\t\t\t\ttmpPath = subPaths[ 0 ];\n\t\t\t\ttmpShape = new Shape();\n\t\t\t\ttmpShape.curves = tmpPath.curves;\n\t\t\t\tshapes.push( tmpShape );\n\t\t\t\treturn shapes;\n\n\t\t\t}\n\n\t\t\tvar holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );\n\t\t\tholesFirst = isCCW ? ! holesFirst : holesFirst;\n\n\t\t\t// console.log(\"Holes first\", holesFirst);\n\n\t\t\tvar betterShapeHoles = [];\n\t\t\tvar newShapes = [];\n\t\t\tvar newShapeHoles = [];\n\t\t\tvar mainIdx = 0;\n\t\t\tvar tmpPoints;\n\n\t\t\tnewShapes[ mainIdx ] = undefined;\n\t\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\t\tfor ( var i = 0, l = subPaths.length; i < l; i ++ ) {\n\n\t\t\t\ttmpPath = subPaths[ i ];\n\t\t\t\ttmpPoints = tmpPath.getPoints();\n\t\t\t\tsolid = isClockWise( tmpPoints );\n\t\t\t\tsolid = isCCW ? ! solid : solid;\n\n\t\t\t\tif ( solid ) {\n\n\t\t\t\t\tif ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )\t{ mainIdx ++; }\n\n\t\t\t\t\tnewShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };\n\t\t\t\t\tnewShapes[ mainIdx ].s.curves = tmpPath.curves;\n\n\t\t\t\t\tif ( holesFirst )\t{ mainIdx ++; }\n\t\t\t\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\t\t\t\t//console.log('cw', i);\n\n\t\t\t\t} else {\n\n\t\t\t\t\tnewShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );\n\n\t\t\t\t\t//console.log('ccw', i);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// only Holes? -> probably all Shapes with wrong orientation\n\t\t\tif ( ! newShapes[ 0 ] )\t{ return\ttoShapesNoHoles( subPaths ); }\n\n\n\t\t\tif ( newShapes.length > 1 ) {\n\n\t\t\t\tvar ambiguous = false;\n\t\t\t\tvar toChange = [];\n\n\t\t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\t\t\tbetterShapeHoles[ sIdx ] = [];\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\t\t\tvar sho = newShapeHoles[ sIdx ];\n\n\t\t\t\t\tfor ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {\n\n\t\t\t\t\t\tvar ho = sho[ hIdx ];\n\t\t\t\t\t\tvar hole_unassigned = true;\n\n\t\t\t\t\t\tfor ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {\n\n\t\t\t\t\t\t\tif ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {\n\n\t\t\t\t\t\t\t\tif ( sIdx !== s2Idx )\t{ toChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } ); }\n\t\t\t\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\t\t\t\thole_unassigned = false;\n\t\t\t\t\t\t\t\t\tbetterShapeHoles[ s2Idx ].push( ho );\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tambiguous = true;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\t\tbetterShapeHoles[ sIdx ].push( ho );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\t// console.log(\"ambiguous: \", ambiguous);\n\t\t\t\tif ( toChange.length > 0 ) {\n\n\t\t\t\t\t// console.log(\"to change: \", toChange);\n\t\t\t\t\tif ( ! ambiguous )\t{ newShapeHoles = betterShapeHoles; }\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar tmpHoles;\n\n\t\t\tfor ( var i = 0, il = newShapes.length; i < il; i ++ ) {\n\n\t\t\t\ttmpShape = newShapes[ i ].s;\n\t\t\t\tshapes.push( tmpShape );\n\t\t\t\ttmpHoles = newShapeHoles[ i ];\n\n\t\t\t\tfor ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {\n\n\t\t\t\t\ttmpShape.holes.push( tmpHoles[ j ].h );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//console.log(\"shape\", shapes);\n\n\t\t\treturn shapes;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\n\tfunction Font( data ) {\n\n\t\tthis.type = 'Font';\n\n\t\tthis.data = data;\n\n\t}\n\n\tObject.assign( Font.prototype, {\n\n\t\tisFont: true,\n\n\t\tgenerateShapes: function ( text, size ) {\n\n\t\t\tif ( size === undefined ) { size = 100; }\n\n\t\t\tvar shapes = [];\n\t\t\tvar paths = createPaths( text, size, this.data );\n\n\t\t\tfor ( var p = 0, pl = paths.length; p < pl; p ++ ) {\n\n\t\t\t\tArray.prototype.push.apply( shapes, paths[ p ].toShapes() );\n\n\t\t\t}\n\n\t\t\treturn shapes;\n\n\t\t}\n\n\t} );\n\n\tfunction createPaths( text, size, data ) {\n\n\t\tvar chars = Array.from ? Array.from( text ) : String( text ).split( '' ); // workaround for IE11, see #13988\n\t\tvar scale = size / data.resolution;\n\t\tvar line_height = ( data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness ) * scale;\n\n\t\tvar paths = [];\n\n\t\tvar offsetX = 0, offsetY = 0;\n\n\t\tfor ( var i = 0; i < chars.length; i ++ ) {\n\n\t\t\tvar char = chars[ i ];\n\n\t\t\tif ( char === '\\n' ) {\n\n\t\t\t\toffsetX = 0;\n\t\t\t\toffsetY -= line_height;\n\n\t\t\t} else {\n\n\t\t\t\tvar ret = createPath( char, scale, offsetX, offsetY, data );\n\t\t\t\toffsetX += ret.offsetX;\n\t\t\t\tpaths.push( ret.path );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn paths;\n\n\t}\n\n\tfunction createPath( char, scale, offsetX, offsetY, data ) {\n\n\t\tvar glyph = data.glyphs[ char ] || data.glyphs[ '?' ];\n\n\t\tif ( ! glyph ) {\n\n\t\t\tconsole.error( 'THREE.Font: character \"' + char + '\" does not exists in font family ' + data.familyName + '.' );\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar path = new ShapePath();\n\n\t\tvar x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;\n\n\t\tif ( glyph.o ) {\n\n\t\t\tvar outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );\n\n\t\t\tfor ( var i = 0, l = outline.length; i < l; ) {\n\n\t\t\t\tvar action = outline[ i ++ ];\n\n\t\t\t\tswitch ( action ) {\n\n\t\t\t\t\tcase 'm': // moveTo\n\n\t\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\t\tpath.moveTo( x, y );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'l': // lineTo\n\n\t\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\t\tpath.lineTo( x, y );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'q': // quadraticCurveTo\n\n\t\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\t\tpath.quadraticCurveTo( cpx1, cpy1, cpx, cpy );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'b': // bezierCurveTo\n\n\t\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\t\tcpx2 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\tcpy2 = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\t\tpath.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn { offsetX: glyph.ha * scale, path: path };\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction FontLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tFontLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: FontLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( this.manager );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tvar json;\n\n\t\t\t\ttry {\n\n\t\t\t\t\tjson = JSON.parse( text );\n\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );\n\t\t\t\t\tjson = JSON.parse( text.substring( 65, text.length - 2 ) );\n\n\t\t\t\t}\n\n\t\t\t\tvar font = scope.parse( json );\n\n\t\t\t\tif ( onLoad ) { onLoad( font ); }\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( json ) {\n\n\t\t\treturn new Font( json );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _context;\n\n\tvar AudioContext = {\n\n\t\tgetContext: function () {\n\n\t\t\tif ( _context === undefined ) {\n\n\t\t\t\t_context = new ( window.AudioContext || window.webkitAudioContext )();\n\n\t\t\t}\n\n\t\t\treturn _context;\n\n\t\t},\n\n\t\tsetContext: function ( value ) {\n\n\t\t\t_context = value;\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author Reece Aaron Lecrivain / http://reecenotes.com/\n\t */\n\n\tfunction AudioLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tAudioLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: AudioLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar loader = new FileLoader( this.manager );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\t// Create a copy of the buffer. The `decodeAudioData` method\n\t\t\t\t// detaches the buffer when complete, preventing reuse.\n\t\t\t\tvar bufferCopy = buffer.slice( 0 );\n\n\t\t\t\tvar context = AudioContext.getContext();\n\t\t\t\tcontext.decodeAudioData( bufferCopy, function ( audioBuffer ) {\n\n\t\t\t\t\tonLoad( audioBuffer );\n\n\t\t\t\t} );\n\n\t\t\t}, onProgress, onError );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * Primary reference:\n\t *   https://graphics.stanford.edu/papers/envmap/envmap.pdf\n\t *\n\t * Secondary reference:\n\t *   https://www.ppsloan.org/publications/StupidSH36.pdf\n\t */\n\n\t// 3-band SH defined by 9 coefficients\n\n\tfunction SphericalHarmonics3() {\n\n\t\tthis.coefficients = [];\n\n\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients.push( new Vector3() );\n\n\t\t}\n\n\t}\n\n\tObject.assign( SphericalHarmonics3.prototype, {\n\n\t\tisSphericalHarmonics3: true,\n\n\t\tset: function ( coefficients ) {\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tthis.coefficients[ i ].copy( coefficients[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tzero: function () {\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tthis.coefficients[ i ].set( 0, 0, 0 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// get the radiance in the direction of the normal\n\t\t// target is a Vector3\n\t\tgetAt: function ( normal, target ) {\n\n\t\t\t// normal is assumed to be unit length\n\n\t\t\tvar x = normal.x, y = normal.y, z = normal.z;\n\n\t\t\tvar coeff = this.coefficients;\n\n\t\t\t// band 0\n\t\t\ttarget.copy( coeff[ 0 ] ).multiplyScalar( 0.282095 );\n\n\t\t\t// band 1\n\t\t\ttarget.addScale( coeff[ 1 ], 0.488603 * y );\n\t\t\ttarget.addScale( coeff[ 2 ], 0.488603 * z );\n\t\t\ttarget.addScale( coeff[ 3 ], 0.488603 * x );\n\n\t\t\t// band 2\n\t\t\ttarget.addScale( coeff[ 4 ], 1.092548 * ( x * y ) );\n\t\t\ttarget.addScale( coeff[ 5 ], 1.092548 * ( y * z ) );\n\t\t\ttarget.addScale( coeff[ 6 ], 0.315392 * ( 3.0 * z * z - 1.0 ) );\n\t\t\ttarget.addScale( coeff[ 7 ], 1.092548 * ( x * z ) );\n\t\t\ttarget.addScale( coeff[ 8 ], 0.546274 * ( x * x - y * y ) );\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\t// get the irradiance (radiance convolved with cosine lobe) in the direction of the normal\n\t\t// target is a Vector3\n\t\t// https://graphics.stanford.edu/papers/envmap/envmap.pdf\n\t\tgetIrradianceAt: function ( normal, target ) {\n\n\t\t\t// normal is assumed to be unit length\n\n\t\t\tvar x = normal.x, y = normal.y, z = normal.z;\n\n\t\t\tvar coeff = this.coefficients;\n\n\t\t\t// band 0\n\t\t\ttarget.copy( coeff[ 0 ] ).multiplyScalar( 0.886227 ); // π * 0.282095\n\n\t\t\t// band 1\n\t\t\ttarget.addScale( coeff[ 1 ], 2.0 * 0.511664 * y ); // ( 2 * π / 3 ) * 0.488603\n\t\t\ttarget.addScale( coeff[ 2 ], 2.0 * 0.511664 * z );\n\t\t\ttarget.addScale( coeff[ 3 ], 2.0 * 0.511664 * x );\n\n\t\t\t// band 2\n\t\t\ttarget.addScale( coeff[ 4 ], 2.0 * 0.429043 * x * y ); // ( π / 4 ) * 1.092548\n\t\t\ttarget.addScale( coeff[ 5 ], 2.0 * 0.429043 * y * z );\n\t\t\ttarget.addScale( coeff[ 6 ], 0.743125 * z * z - 0.247708 ); // ( π / 4 ) * 0.315392 * 3\n\t\t\ttarget.addScale( coeff[ 7 ], 2.0 * 0.429043 * x * z );\n\t\t\ttarget.addScale( coeff[ 8 ], 0.429043 * ( x * x - y * y ) ); // ( π / 4 ) * 0.546274\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tadd: function ( sh ) {\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tthis.coefficients[ i ].add( sh.coefficients[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\n\t\tscale: function ( s ) {\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tthis.coefficients[ i ].multiplyScalar( s );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerp: function ( sh, alpha ) {\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tthis.coefficients[ i ].lerp( sh.coefficients[ i ], alpha );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( sh ) {\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tif ( ! this.coefficients[ i ].equals( sh.coefficients[ i ] ) ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tcopy: function ( sh ) {\n\n\t\t\treturn this.set( sh.coefficients );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tvar coefficients = this.coefficients;\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tcoefficients[ i ].fromArray( array, offset + ( i * 3 ) );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tvar coefficients = this.coefficients;\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tcoefficients[ i ].toArray( array, offset + ( i * 3 ) );\n\n\t\t\t}\n\n\t\t\treturn array;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( SphericalHarmonics3, {\n\n\t\t// evaluate the basis functions\n\t\t// shBasis is an Array[ 9 ]\n\t\tgetBasisAt: function ( normal, shBasis ) {\n\n\t\t\t// normal is assumed to be unit length\n\n\t\t\tvar x = normal.x, y = normal.y, z = normal.z;\n\n\t\t\t// band 0\n\t\t\tshBasis[ 0 ] = 0.282095;\n\n\t\t\t// band 1\n\t\t\tshBasis[ 1 ] = 0.488603 * y;\n\t\t\tshBasis[ 2 ] = 0.488603 * z;\n\t\t\tshBasis[ 3 ] = 0.488603 * x;\n\n\t\t\t// band 2\n\t\t\tshBasis[ 4 ] = 1.092548 * x * y;\n\t\t\tshBasis[ 5 ] = 1.092548 * y * z;\n\t\t\tshBasis[ 6 ] = 0.315392 * ( 3 * z * z - 1 );\n\t\t\tshBasis[ 7 ] = 1.092548 * x * z;\n\t\t\tshBasis[ 8 ] = 0.546274 * ( x * x - y * y );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * A LightProbe is a source of indirect-diffuse light\n\t */\n\n\tfunction LightProbe( sh, intensity ) {\n\n\t\tLight.call( this, undefined, intensity );\n\n\t\tthis.sh = ( sh !== undefined ) ? sh : new SphericalHarmonics3();\n\n\t}\n\n\tLightProbe.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: LightProbe,\n\n\t\tisLightProbe: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.sh.copy( source.sh );\n\t\t\tthis.intensity = source.intensity;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Light.prototype.toJSON.call( this, meta );\n\n\t\t\t// data.sh = this.sh.toArray(); // todo\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction HemisphereLightProbe( skyColor, groundColor, intensity ) {\n\n\t\tLightProbe.call( this, undefined, intensity );\n\n\t\tvar color1 = new Color().set( skyColor );\n\t\tvar color2 = new Color().set( groundColor );\n\n\t\tvar sky = new Vector3( color1.r, color1.g, color1.b );\n\t\tvar ground = new Vector3( color2.r, color2.g, color2.b );\n\n\t\t// without extra factor of PI in the shader, should = 1 / Math.sqrt( Math.PI );\n\t\tvar c0 = Math.sqrt( Math.PI );\n\t\tvar c1 = c0 * Math.sqrt( 0.75 );\n\n\t\tthis.sh.coefficients[ 0 ].copy( sky ).add( ground ).multiplyScalar( c0 );\n\t\tthis.sh.coefficients[ 1 ].copy( sky ).sub( ground ).multiplyScalar( c1 );\n\n\t}\n\n\tHemisphereLightProbe.prototype = Object.assign( Object.create( LightProbe.prototype ), {\n\n\t\tconstructor: HemisphereLightProbe,\n\n\t\tisHemisphereLightProbe: true,\n\n\t\tcopy: function ( source ) { // modifying colors not currently supported\n\n\t\t\tLightProbe.prototype.copy.call( this, source );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = LightProbe.prototype.toJSON.call( this, meta );\n\n\t\t\t// data.sh = this.sh.toArray(); // todo\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction AmbientLightProbe( color, intensity ) {\n\n\t\tLightProbe.call( this, undefined, intensity );\n\n\t\tvar color1 = new Color().set( color );\n\n\t\t// without extra factor of PI in the shader, would be 2 / Math.sqrt( Math.PI );\n\t\tthis.sh.coefficients[ 0 ].set( color1.r, color1.g, color1.b ).multiplyScalar( 2 * Math.sqrt( Math.PI ) );\n\n\t}\n\n\tAmbientLightProbe.prototype = Object.assign( Object.create( LightProbe.prototype ), {\n\n\t\tconstructor: AmbientLightProbe,\n\n\t\tisAmbientLightProbe: true,\n\n\t\tcopy: function ( source ) { // modifying color not currently supported\n\n\t\t\tLightProbe.prototype.copy.call( this, source );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = LightProbe.prototype.toJSON.call( this, meta );\n\n\t\t\t// data.sh = this.sh.toArray(); // todo\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\tvar _eyeRight = new Matrix4();\n\tvar _eyeLeft = new Matrix4();\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction StereoCamera() {\n\n\t\tthis.type = 'StereoCamera';\n\n\t\tthis.aspect = 1;\n\n\t\tthis.eyeSep = 0.064;\n\n\t\tthis.cameraL = new PerspectiveCamera();\n\t\tthis.cameraL.layers.enable( 1 );\n\t\tthis.cameraL.matrixAutoUpdate = false;\n\n\t\tthis.cameraR = new PerspectiveCamera();\n\t\tthis.cameraR.layers.enable( 2 );\n\t\tthis.cameraR.matrixAutoUpdate = false;\n\n\t\tthis._cache = {\n\t\t\tfocus: null,\n\t\t\tfov: null,\n\t\t\taspect: null,\n\t\t\tnear: null,\n\t\t\tfar: null,\n\t\t\tzoom: null,\n\t\t\teyeSep: null\n\t\t};\n\n\t}\n\n\tObject.assign( StereoCamera.prototype, {\n\n\t\tupdate: function ( camera ) {\n\n\t\t\tvar cache = this._cache;\n\n\t\t\tvar needsUpdate = cache.focus !== camera.focus || cache.fov !== camera.fov ||\n\t\t\t\tcache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near ||\n\t\t\t\tcache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep;\n\n\t\t\tif ( needsUpdate ) {\n\n\t\t\t\tcache.focus = camera.focus;\n\t\t\t\tcache.fov = camera.fov;\n\t\t\t\tcache.aspect = camera.aspect * this.aspect;\n\t\t\t\tcache.near = camera.near;\n\t\t\t\tcache.far = camera.far;\n\t\t\t\tcache.zoom = camera.zoom;\n\t\t\t\tcache.eyeSep = this.eyeSep;\n\n\t\t\t\t// Off-axis stereoscopic effect based on\n\t\t\t\t// http://paulbourke.net/stereographics/stereorender/\n\n\t\t\t\tvar projectionMatrix = camera.projectionMatrix.clone();\n\t\t\t\tvar eyeSepHalf = cache.eyeSep / 2;\n\t\t\t\tvar eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;\n\t\t\t\tvar ymax = ( cache.near * Math.tan( MathUtils.DEG2RAD * cache.fov * 0.5 ) ) / cache.zoom;\n\t\t\t\tvar xmin, xmax;\n\n\t\t\t\t// translate xOffset\n\n\t\t\t\t_eyeLeft.elements[ 12 ] = - eyeSepHalf;\n\t\t\t\t_eyeRight.elements[ 12 ] = eyeSepHalf;\n\n\t\t\t\t// for left eye\n\n\t\t\t\txmin = - ymax * cache.aspect + eyeSepOnProjection;\n\t\t\t\txmax = ymax * cache.aspect + eyeSepOnProjection;\n\n\t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );\n\t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\t\tthis.cameraL.projectionMatrix.copy( projectionMatrix );\n\n\t\t\t\t// for right eye\n\n\t\t\t\txmin = - ymax * cache.aspect - eyeSepOnProjection;\n\t\t\t\txmax = ymax * cache.aspect - eyeSepOnProjection;\n\n\t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );\n\t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\t\tthis.cameraR.projectionMatrix.copy( projectionMatrix );\n\n\t\t\t}\n\n\t\t\tthis.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeLeft );\n\t\t\tthis.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeRight );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Clock( autoStart ) {\n\n\t\tthis.autoStart = ( autoStart !== undefined ) ? autoStart : true;\n\n\t\tthis.startTime = 0;\n\t\tthis.oldTime = 0;\n\t\tthis.elapsedTime = 0;\n\n\t\tthis.running = false;\n\n\t}\n\n\tObject.assign( Clock.prototype, {\n\n\t\tstart: function () {\n\n\t\t\tthis.startTime = ( typeof performance === 'undefined' ? Date : performance ).now(); // see #10732\n\n\t\t\tthis.oldTime = this.startTime;\n\t\t\tthis.elapsedTime = 0;\n\t\t\tthis.running = true;\n\n\t\t},\n\n\t\tstop: function () {\n\n\t\t\tthis.getElapsedTime();\n\t\t\tthis.running = false;\n\t\t\tthis.autoStart = false;\n\n\t\t},\n\n\t\tgetElapsedTime: function () {\n\n\t\t\tthis.getDelta();\n\t\t\treturn this.elapsedTime;\n\n\t\t},\n\n\t\tgetDelta: function () {\n\n\t\t\tvar diff = 0;\n\n\t\t\tif ( this.autoStart && ! this.running ) {\n\n\t\t\t\tthis.start();\n\t\t\t\treturn 0;\n\n\t\t\t}\n\n\t\t\tif ( this.running ) {\n\n\t\t\t\tvar newTime = ( typeof performance === 'undefined' ? Date : performance ).now();\n\n\t\t\t\tdiff = ( newTime - this.oldTime ) / 1000;\n\t\t\t\tthis.oldTime = newTime;\n\n\t\t\t\tthis.elapsedTime += diff;\n\n\t\t\t}\n\n\t\t\treturn diff;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _position$2 = new Vector3();\n\tvar _quaternion$3 = new Quaternion();\n\tvar _scale$1 = new Vector3();\n\tvar _orientation = new Vector3();\n\n\tfunction AudioListener() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'AudioListener';\n\n\t\tthis.context = AudioContext.getContext();\n\n\t\tthis.gain = this.context.createGain();\n\t\tthis.gain.connect( this.context.destination );\n\n\t\tthis.filter = null;\n\n\t\tthis.timeDelta = 0;\n\n\t\t// private\n\n\t\tthis._clock = new Clock();\n\n\t}\n\n\tAudioListener.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: AudioListener,\n\n\t\tgetInput: function () {\n\n\t\t\treturn this.gain;\n\n\t\t},\n\n\t\tremoveFilter: function ( ) {\n\n\t\t\tif ( this.filter !== null ) {\n\n\t\t\t\tthis.gain.disconnect( this.filter );\n\t\t\t\tthis.filter.disconnect( this.context.destination );\n\t\t\t\tthis.gain.connect( this.context.destination );\n\t\t\t\tthis.filter = null;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetFilter: function () {\n\n\t\t\treturn this.filter;\n\n\t\t},\n\n\t\tsetFilter: function ( value ) {\n\n\t\t\tif ( this.filter !== null ) {\n\n\t\t\t\tthis.gain.disconnect( this.filter );\n\t\t\t\tthis.filter.disconnect( this.context.destination );\n\n\t\t\t} else {\n\n\t\t\t\tthis.gain.disconnect( this.context.destination );\n\n\t\t\t}\n\n\t\t\tthis.filter = value;\n\t\t\tthis.gain.connect( this.filter );\n\t\t\tthis.filter.connect( this.context.destination );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetMasterVolume: function () {\n\n\t\t\treturn this.gain.gain.value;\n\n\t\t},\n\n\t\tsetMasterVolume: function ( value ) {\n\n\t\t\tthis.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tupdateMatrixWorld: function ( force ) {\n\n\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\tvar listener = this.context.listener;\n\t\t\tvar up = this.up;\n\n\t\t\tthis.timeDelta = this._clock.getDelta();\n\n\t\t\tthis.matrixWorld.decompose( _position$2, _quaternion$3, _scale$1 );\n\n\t\t\t_orientation.set( 0, 0, - 1 ).applyQuaternion( _quaternion$3 );\n\n\t\t\tif ( listener.positionX ) {\n\n\t\t\t\t// code path for Chrome (see #14393)\n\n\t\t\t\tvar endTime = this.context.currentTime + this.timeDelta;\n\n\t\t\t\tlistener.positionX.linearRampToValueAtTime( _position$2.x, endTime );\n\t\t\t\tlistener.positionY.linearRampToValueAtTime( _position$2.y, endTime );\n\t\t\t\tlistener.positionZ.linearRampToValueAtTime( _position$2.z, endTime );\n\t\t\t\tlistener.forwardX.linearRampToValueAtTime( _orientation.x, endTime );\n\t\t\t\tlistener.forwardY.linearRampToValueAtTime( _orientation.y, endTime );\n\t\t\t\tlistener.forwardZ.linearRampToValueAtTime( _orientation.z, endTime );\n\t\t\t\tlistener.upX.linearRampToValueAtTime( up.x, endTime );\n\t\t\t\tlistener.upY.linearRampToValueAtTime( up.y, endTime );\n\t\t\t\tlistener.upZ.linearRampToValueAtTime( up.z, endTime );\n\n\t\t\t} else {\n\n\t\t\t\tlistener.setPosition( _position$2.x, _position$2.y, _position$2.z );\n\t\t\t\tlistener.setOrientation( _orientation.x, _orientation.y, _orientation.z, up.x, up.y, up.z );\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Reece Aaron Lecrivain / http://reecenotes.com/\n\t */\n\n\tfunction Audio( listener ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Audio';\n\n\t\tthis.listener = listener;\n\t\tthis.context = listener.context;\n\n\t\tthis.gain = this.context.createGain();\n\t\tthis.gain.connect( listener.getInput() );\n\n\t\tthis.autoplay = false;\n\n\t\tthis.buffer = null;\n\t\tthis.detune = 0;\n\t\tthis.loop = false;\n\t\tthis.loopStart = 0;\n\t\tthis.loopEnd = 0;\n\t\tthis.offset = 0;\n\t\tthis.duration = undefined;\n\t\tthis.playbackRate = 1;\n\t\tthis.isPlaying = false;\n\t\tthis.hasPlaybackControl = true;\n\t\tthis.sourceType = 'empty';\n\n\t\tthis._startedAt = 0;\n\t\tthis._pausedAt = 0;\n\n\t\tthis.filters = [];\n\n\t}\n\n\tAudio.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Audio,\n\n\t\tgetOutput: function () {\n\n\t\t\treturn this.gain;\n\n\t\t},\n\n\t\tsetNodeSource: function ( audioNode ) {\n\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'audioNode';\n\t\t\tthis.source = audioNode;\n\t\t\tthis.connect();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetMediaElementSource: function ( mediaElement ) {\n\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'mediaNode';\n\t\t\tthis.source = this.context.createMediaElementSource( mediaElement );\n\t\t\tthis.connect();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetMediaStreamSource: function ( mediaStream ) {\n\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'mediaStreamNode';\n\t\t\tthis.source = this.context.createMediaStreamSource( mediaStream );\n\t\t\tthis.connect();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetBuffer: function ( audioBuffer ) {\n\n\t\t\tthis.buffer = audioBuffer;\n\t\t\tthis.sourceType = 'buffer';\n\n\t\t\tif ( this.autoplay ) { this.play(); }\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tplay: function ( delay ) {\n\n\t\t\tif ( delay === undefined ) { delay = 0; }\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: Audio is already playing.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis._startedAt = this.context.currentTime + delay;\n\n\t\t\tvar source = this.context.createBufferSource();\n\t\t\tsource.buffer = this.buffer;\n\t\t\tsource.loop = this.loop;\n\t\t\tsource.loopStart = this.loopStart;\n\t\t\tsource.loopEnd = this.loopEnd;\n\t\t\tsource.onended = this.onEnded.bind( this );\n\t\t\tsource.start( this._startedAt, this._pausedAt + this.offset, this.duration );\n\n\t\t\tthis.isPlaying = true;\n\n\t\t\tthis.source = source;\n\n\t\t\tthis.setDetune( this.detune );\n\t\t\tthis.setPlaybackRate( this.playbackRate );\n\n\t\t\treturn this.connect();\n\n\t\t},\n\n\t\tpause: function () {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tthis._pausedAt = ( this.context.currentTime - this._startedAt ) * this.playbackRate;\n\n\t\t\t\tthis.source.stop();\n\t\t\t\tthis.source.onended = null;\n\n\t\t\t\tthis.isPlaying = false;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tstop: function () {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis._pausedAt = 0;\n\n\t\t\tthis.source.stop();\n\t\t\tthis.source.onended = null;\n\t\t\tthis.isPlaying = false;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tconnect: function () {\n\n\t\t\tif ( this.filters.length > 0 ) {\n\n\t\t\t\tthis.source.connect( this.filters[ 0 ] );\n\n\t\t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\t\tthis.filters[ i - 1 ].connect( this.filters[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\tthis.filters[ this.filters.length - 1 ].connect( this.getOutput() );\n\n\t\t\t} else {\n\n\t\t\t\tthis.source.connect( this.getOutput() );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdisconnect: function () {\n\n\t\t\tif ( this.filters.length > 0 ) {\n\n\t\t\t\tthis.source.disconnect( this.filters[ 0 ] );\n\n\t\t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\t\tthis.filters[ i - 1 ].disconnect( this.filters[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\tthis.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );\n\n\t\t\t} else {\n\n\t\t\t\tthis.source.disconnect( this.getOutput() );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetFilters: function () {\n\n\t\t\treturn this.filters;\n\n\t\t},\n\n\t\tsetFilters: function ( value ) {\n\n\t\t\tif ( ! value ) { value = []; }\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tthis.disconnect();\n\t\t\t\tthis.filters = value;\n\t\t\t\tthis.connect();\n\n\t\t\t} else {\n\n\t\t\t\tthis.filters = value;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetDetune: function ( value ) {\n\n\t\t\tthis.detune = value;\n\n\t\t\tif ( this.source.detune === undefined ) { return; } // only set detune when available\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tthis.source.detune.setTargetAtTime( this.detune, this.context.currentTime, 0.01 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetDetune: function () {\n\n\t\t\treturn this.detune;\n\n\t\t},\n\n\t\tgetFilter: function () {\n\n\t\t\treturn this.getFilters()[ 0 ];\n\n\t\t},\n\n\t\tsetFilter: function ( filter ) {\n\n\t\t\treturn this.setFilters( filter ? [ filter ] : [] );\n\n\t\t},\n\n\t\tsetPlaybackRate: function ( value ) {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis.playbackRate = value;\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tthis.source.playbackRate.setTargetAtTime( this.playbackRate, this.context.currentTime, 0.01 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetPlaybackRate: function () {\n\n\t\t\treturn this.playbackRate;\n\n\t\t},\n\n\t\tonEnded: function () {\n\n\t\t\tthis.isPlaying = false;\n\n\t\t},\n\n\t\tgetLoop: function () {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\treturn this.loop;\n\n\t\t},\n\n\t\tsetLoop: function ( value ) {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis.loop = value;\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tthis.source.loop = this.loop;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetLoopStart: function ( value ) {\n\n\t\t\tthis.loopStart = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetLoopEnd: function ( value ) {\n\n\t\t\tthis.loopEnd = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetVolume: function () {\n\n\t\t\treturn this.gain.gain.value;\n\n\t\t},\n\n\t\tsetVolume: function ( value ) {\n\n\t\t\tthis.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _position$3 = new Vector3();\n\tvar _quaternion$4 = new Quaternion();\n\tvar _scale$2 = new Vector3();\n\tvar _orientation$1 = new Vector3();\n\n\tfunction PositionalAudio( listener ) {\n\n\t\tAudio.call( this, listener );\n\n\t\tthis.panner = this.context.createPanner();\n\t\tthis.panner.panningModel = 'HRTF';\n\t\tthis.panner.connect( this.gain );\n\n\t}\n\n\tPositionalAudio.prototype = Object.assign( Object.create( Audio.prototype ), {\n\n\t\tconstructor: PositionalAudio,\n\n\t\tgetOutput: function () {\n\n\t\t\treturn this.panner;\n\n\t\t},\n\n\t\tgetRefDistance: function () {\n\n\t\t\treturn this.panner.refDistance;\n\n\t\t},\n\n\t\tsetRefDistance: function ( value ) {\n\n\t\t\tthis.panner.refDistance = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetRolloffFactor: function () {\n\n\t\t\treturn this.panner.rolloffFactor;\n\n\t\t},\n\n\t\tsetRolloffFactor: function ( value ) {\n\n\t\t\tthis.panner.rolloffFactor = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetDistanceModel: function () {\n\n\t\t\treturn this.panner.distanceModel;\n\n\t\t},\n\n\t\tsetDistanceModel: function ( value ) {\n\n\t\t\tthis.panner.distanceModel = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetMaxDistance: function () {\n\n\t\t\treturn this.panner.maxDistance;\n\n\t\t},\n\n\t\tsetMaxDistance: function ( value ) {\n\n\t\t\tthis.panner.maxDistance = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetDirectionalCone: function ( coneInnerAngle, coneOuterAngle, coneOuterGain ) {\n\n\t\t\tthis.panner.coneInnerAngle = coneInnerAngle;\n\t\t\tthis.panner.coneOuterAngle = coneOuterAngle;\n\t\t\tthis.panner.coneOuterGain = coneOuterGain;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tupdateMatrixWorld: function ( force ) {\n\n\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\tif ( this.hasPlaybackControl === true && this.isPlaying === false ) { return; }\n\n\t\t\tthis.matrixWorld.decompose( _position$3, _quaternion$4, _scale$2 );\n\n\t\t\t_orientation$1.set( 0, 0, 1 ).applyQuaternion( _quaternion$4 );\n\n\t\t\tvar panner = this.panner;\n\n\t\t\tif ( panner.positionX ) {\n\n\t\t\t\t// code path for Chrome and Firefox (see #14393)\n\n\t\t\t\tvar endTime = this.context.currentTime + this.listener.timeDelta;\n\n\t\t\t\tpanner.positionX.linearRampToValueAtTime( _position$3.x, endTime );\n\t\t\t\tpanner.positionY.linearRampToValueAtTime( _position$3.y, endTime );\n\t\t\t\tpanner.positionZ.linearRampToValueAtTime( _position$3.z, endTime );\n\t\t\t\tpanner.orientationX.linearRampToValueAtTime( _orientation$1.x, endTime );\n\t\t\t\tpanner.orientationY.linearRampToValueAtTime( _orientation$1.y, endTime );\n\t\t\t\tpanner.orientationZ.linearRampToValueAtTime( _orientation$1.z, endTime );\n\n\t\t\t} else {\n\n\t\t\t\tpanner.setPosition( _position$3.x, _position$3.y, _position$3.z );\n\t\t\t\tpanner.setOrientation( _orientation$1.x, _orientation$1.y, _orientation$1.z );\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction AudioAnalyser( audio, fftSize ) {\n\n\t\tthis.analyser = audio.context.createAnalyser();\n\t\tthis.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;\n\n\t\tthis.data = new Uint8Array( this.analyser.frequencyBinCount );\n\n\t\taudio.getOutput().connect( this.analyser );\n\n\t}\n\n\tObject.assign( AudioAnalyser.prototype, {\n\n\t\tgetFrequencyData: function () {\n\n\t\t\tthis.analyser.getByteFrequencyData( this.data );\n\n\t\t\treturn this.data;\n\n\t\t},\n\n\t\tgetAverageFrequency: function () {\n\n\t\t\tvar value = 0, data = this.getFrequencyData();\n\n\t\t\tfor ( var i = 0; i < data.length; i ++ ) {\n\n\t\t\t\tvalue += data[ i ];\n\n\t\t\t}\n\n\t\t\treturn value / data.length;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * Buffered scene graph property that allows weighted accumulation.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction PropertyMixer( binding, typeName, valueSize ) {\n\n\t\tthis.binding = binding;\n\t\tthis.valueSize = valueSize;\n\n\t\tvar bufferType = Float64Array,\n\t\t\tmixFunction;\n\n\t\tswitch ( typeName ) {\n\n\t\t\tcase 'quaternion':\n\t\t\t\tmixFunction = this._slerp;\n\t\t\t\tbreak;\n\n\t\t\tcase 'string':\n\t\t\tcase 'bool':\n\t\t\t\tbufferType = Array;\n\t\t\t\tmixFunction = this._select;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tmixFunction = this._lerp;\n\n\t\t}\n\n\t\tthis.buffer = new bufferType( valueSize * 4 );\n\t\t// layout: [ incoming | accu0 | accu1 | orig ]\n\t\t//\n\t\t// interpolators can use .buffer as their .result\n\t\t// the data then goes to 'incoming'\n\t\t//\n\t\t// 'accu0' and 'accu1' are used frame-interleaved for\n\t\t// the cumulative result and are compared to detect\n\t\t// changes\n\t\t//\n\t\t// 'orig' stores the original state of the property\n\n\t\tthis._mixBufferRegion = mixFunction;\n\n\t\tthis.cumulativeWeight = 0;\n\n\t\tthis.useCount = 0;\n\t\tthis.referenceCount = 0;\n\n\t}\n\n\tObject.assign( PropertyMixer.prototype, {\n\n\t\t// accumulate data in the 'incoming' region into 'accu<i>'\n\t\taccumulate: function ( accuIndex, weight ) {\n\n\t\t\t// note: happily accumulating nothing when weight = 0, the caller knows\n\t\t\t// the weight and shouldn't have made the call in the first place\n\n\t\t\tvar buffer = this.buffer,\n\t\t\t\tstride = this.valueSize,\n\t\t\t\toffset = accuIndex * stride + stride,\n\n\t\t\t\tcurrentWeight = this.cumulativeWeight;\n\n\t\t\tif ( currentWeight === 0 ) {\n\n\t\t\t\t// accuN := incoming * weight\n\n\t\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\t\tbuffer[ offset + i ] = buffer[ i ];\n\n\t\t\t\t}\n\n\t\t\t\tcurrentWeight = weight;\n\n\t\t\t} else {\n\n\t\t\t\t// accuN := accuN + incoming * weight\n\n\t\t\t\tcurrentWeight += weight;\n\t\t\t\tvar mix = weight / currentWeight;\n\t\t\t\tthis._mixBufferRegion( buffer, offset, 0, mix, stride );\n\n\t\t\t}\n\n\t\t\tthis.cumulativeWeight = currentWeight;\n\n\t\t},\n\n\t\t// apply the state of 'accu<i>' to the binding when accus differ\n\t\tapply: function ( accuIndex ) {\n\n\t\t\tvar stride = this.valueSize,\n\t\t\t\tbuffer = this.buffer,\n\t\t\t\toffset = accuIndex * stride + stride,\n\n\t\t\t\tweight = this.cumulativeWeight,\n\n\t\t\t\tbinding = this.binding;\n\n\t\t\tthis.cumulativeWeight = 0;\n\n\t\t\tif ( weight < 1 ) {\n\n\t\t\t\t// accuN := accuN + original * ( 1 - cumulativeWeight )\n\n\t\t\t\tvar originalValueOffset = stride * 3;\n\n\t\t\t\tthis._mixBufferRegion(\n\t\t\t\t\tbuffer, offset, originalValueOffset, 1 - weight, stride );\n\n\t\t\t}\n\n\t\t\tfor ( var i = stride, e = stride + stride; i !== e; ++ i ) {\n\n\t\t\t\tif ( buffer[ i ] !== buffer[ i + stride ] ) {\n\n\t\t\t\t\t// value has changed -> update scene graph\n\n\t\t\t\t\tbinding.setValue( buffer, offset );\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t// remember the state of the bound property and copy it to both accus\n\t\tsaveOriginalState: function () {\n\n\t\t\tvar binding = this.binding;\n\n\t\t\tvar buffer = this.buffer,\n\t\t\t\tstride = this.valueSize,\n\n\t\t\t\toriginalValueOffset = stride * 3;\n\n\t\t\tbinding.getValue( buffer, originalValueOffset );\n\n\t\t\t// accu[0..1] := orig -- initially detect changes against the original\n\t\t\tfor ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {\n\n\t\t\t\tbuffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];\n\n\t\t\t}\n\n\t\t\tthis.cumulativeWeight = 0;\n\n\t\t},\n\n\t\t// apply the state previously taken via 'saveOriginalState' to the binding\n\t\trestoreOriginalState: function () {\n\n\t\t\tvar originalValueOffset = this.valueSize * 3;\n\t\t\tthis.binding.setValue( this.buffer, originalValueOffset );\n\n\t\t},\n\n\n\t\t// mix functions\n\n\t\t_select: function ( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\t\tif ( t >= 0.5 ) {\n\n\t\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\t\tbuffer[ dstOffset + i ] = buffer[ srcOffset + i ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t_slerp: function ( buffer, dstOffset, srcOffset, t ) {\n\n\t\t\tQuaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t );\n\n\t\t},\n\n\t\t_lerp: function ( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\t\tvar s = 1 - t;\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tvar j = dstOffset + i;\n\n\t\t\t\tbuffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * A reference to a real property in the scene graph.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\t// Characters [].:/ are reserved for track binding syntax.\n\tvar _RESERVED_CHARS_RE = '\\\\[\\\\]\\\\.:\\\\/';\n\tvar _reservedRe = new RegExp( '[' + _RESERVED_CHARS_RE + ']', 'g' );\n\n\t// Attempts to allow node names from any language. ES5's `\\w` regexp matches\n\t// only latin characters, and the unicode \\p{L} is not yet supported. So\n\t// instead, we exclude reserved characters and match everything else.\n\tvar _wordChar = '[^' + _RESERVED_CHARS_RE + ']';\n\tvar _wordCharOrDot = '[^' + _RESERVED_CHARS_RE.replace( '\\\\.', '' ) + ']';\n\n\t// Parent directories, delimited by '/' or ':'. Currently unused, but must\n\t// be matched to parse the rest of the track name.\n\tvar _directoryRe = /((?:WC+[\\/:])*)/.source.replace( 'WC', _wordChar );\n\n\t// Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.\n\tvar _nodeRe = /(WCOD+)?/.source.replace( 'WCOD', _wordCharOrDot );\n\n\t// Object on target node, and accessor. May not contain reserved\n\t// characters. Accessor may contain any character except closing bracket.\n\tvar _objectRe = /(?:\\.(WC+)(?:\\[(.+)\\])?)?/.source.replace( 'WC', _wordChar );\n\n\t// Property and accessor. May not contain reserved characters. Accessor may\n\t// contain any non-bracket characters.\n\tvar _propertyRe = /\\.(WC+)(?:\\[(.+)\\])?/.source.replace( 'WC', _wordChar );\n\n\tvar _trackRe = new RegExp( ''\n\t\t+ '^'\n\t\t+ _directoryRe\n\t\t+ _nodeRe\n\t\t+ _objectRe\n\t\t+ _propertyRe\n\t\t+ '$'\n\t);\n\n\tvar _supportedObjectNames = [ 'material', 'materials', 'bones' ];\n\n\tfunction Composite( targetGroup, path, optionalParsedPath ) {\n\n\t\tvar parsedPath = optionalParsedPath || PropertyBinding.parseTrackName( path );\n\n\t\tthis._targetGroup = targetGroup;\n\t\tthis._bindings = targetGroup.subscribe_( path, parsedPath );\n\n\t}\n\n\tObject.assign( Composite.prototype, {\n\n\t\tgetValue: function ( array, offset ) {\n\n\t\t\tthis.bind(); // bind all binding\n\n\t\t\tvar firstValidIndex = this._targetGroup.nCachedObjects_,\n\t\t\t\tbinding = this._bindings[ firstValidIndex ];\n\n\t\t\t// and only call .getValue on the first\n\t\t\tif ( binding !== undefined ) { binding.getValue( array, offset ); }\n\n\t\t},\n\n\t\tsetValue: function ( array, offset ) {\n\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tbindings[ i ].setValue( array, offset );\n\n\t\t\t}\n\n\t\t},\n\n\t\tbind: function () {\n\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tbindings[ i ].bind();\n\n\t\t\t}\n\n\t\t},\n\n\t\tunbind: function () {\n\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tbindings[ i ].unbind();\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\n\tfunction PropertyBinding( rootNode, path, parsedPath ) {\n\n\t\tthis.path = path;\n\t\tthis.parsedPath = parsedPath || PropertyBinding.parseTrackName( path );\n\n\t\tthis.node = PropertyBinding.findNode( rootNode, this.parsedPath.nodeName ) || rootNode;\n\n\t\tthis.rootNode = rootNode;\n\n\t}\n\n\tObject.assign( PropertyBinding, {\n\n\t\tComposite: Composite,\n\n\t\tcreate: function ( root, path, parsedPath ) {\n\n\t\t\tif ( ! ( root && root.isAnimationObjectGroup ) ) {\n\n\t\t\t\treturn new PropertyBinding( root, path, parsedPath );\n\n\t\t\t} else {\n\n\t\t\t\treturn new PropertyBinding.Composite( root, path, parsedPath );\n\n\t\t\t}\n\n\t\t},\n\n\t\t/**\n\t\t * Replaces spaces with underscores and removes unsupported characters from\n\t\t * node names, to ensure compatibility with parseTrackName().\n\t\t *\n\t\t * @param {string} name Node name to be sanitized.\n\t\t * @return {string}\n\t\t */\n\t\tsanitizeNodeName: function ( name ) {\n\n\t\t\treturn name.replace( /\\s/g, '_' ).replace( _reservedRe, '' );\n\n\t\t},\n\n\t\tparseTrackName: function ( trackName ) {\n\n\t\t\tvar matches = _trackRe.exec( trackName );\n\n\t\t\tif ( ! matches ) {\n\n\t\t\t\tthrow new Error( 'PropertyBinding: Cannot parse trackName: ' + trackName );\n\n\t\t\t}\n\n\t\t\tvar results = {\n\t\t\t\t// directoryName: matches[ 1 ], // (tschw) currently unused\n\t\t\t\tnodeName: matches[ 2 ],\n\t\t\t\tobjectName: matches[ 3 ],\n\t\t\t\tobjectIndex: matches[ 4 ],\n\t\t\t\tpropertyName: matches[ 5 ], // required\n\t\t\t\tpropertyIndex: matches[ 6 ]\n\t\t\t};\n\n\t\t\tvar lastDot = results.nodeName && results.nodeName.lastIndexOf( '.' );\n\n\t\t\tif ( lastDot !== undefined && lastDot !== - 1 ) {\n\n\t\t\t\tvar objectName = results.nodeName.substring( lastDot + 1 );\n\n\t\t\t\t// Object names must be checked against a whitelist. Otherwise, there\n\t\t\t\t// is no way to parse 'foo.bar.baz': 'baz' must be a property, but\n\t\t\t\t// 'bar' could be the objectName, or part of a nodeName (which can\n\t\t\t\t// include '.' characters).\n\t\t\t\tif ( _supportedObjectNames.indexOf( objectName ) !== - 1 ) {\n\n\t\t\t\t\tresults.nodeName = results.nodeName.substring( 0, lastDot );\n\t\t\t\t\tresults.objectName = objectName;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( results.propertyName === null || results.propertyName.length === 0 ) {\n\n\t\t\t\tthrow new Error( 'PropertyBinding: can not parse propertyName from trackName: ' + trackName );\n\n\t\t\t}\n\n\t\t\treturn results;\n\n\t\t},\n\n\t\tfindNode: function ( root, nodeName ) {\n\n\t\t\tif ( ! nodeName || nodeName === \"\" || nodeName === \"root\" || nodeName === \".\" || nodeName === - 1 || nodeName === root.name || nodeName === root.uuid ) {\n\n\t\t\t\treturn root;\n\n\t\t\t}\n\n\t\t\t// search into skeleton bones.\n\t\t\tif ( root.skeleton ) {\n\n\t\t\t\tvar bone = root.skeleton.getBoneByName( nodeName );\n\n\t\t\t\tif ( bone !== undefined ) {\n\n\t\t\t\t\treturn bone;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// search into node subtree.\n\t\t\tif ( root.children ) {\n\n\t\t\t\tvar searchNodeSubtree = function ( children ) {\n\n\t\t\t\t\tfor ( var i = 0; i < children.length; i ++ ) {\n\n\t\t\t\t\t\tvar childNode = children[ i ];\n\n\t\t\t\t\t\tif ( childNode.name === nodeName || childNode.uuid === nodeName ) {\n\n\t\t\t\t\t\t\treturn childNode;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar result = searchNodeSubtree( childNode.children );\n\n\t\t\t\t\t\tif ( result ) { return result; }\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t};\n\n\t\t\t\tvar subTreeNode = searchNodeSubtree( root.children );\n\n\t\t\t\tif ( subTreeNode ) {\n\n\t\t\t\t\treturn subTreeNode;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( PropertyBinding.prototype, { // prototype, continued\n\n\t\t// these are used to \"bind\" a nonexistent property\n\t\t_getValue_unavailable: function () {},\n\t\t_setValue_unavailable: function () {},\n\n\t\tBindingType: {\n\t\t\tDirect: 0,\n\t\t\tEntireArray: 1,\n\t\t\tArrayElement: 2,\n\t\t\tHasFromToArray: 3\n\t\t},\n\n\t\tVersioning: {\n\t\t\tNone: 0,\n\t\t\tNeedsUpdate: 1,\n\t\t\tMatrixWorldNeedsUpdate: 2\n\t\t},\n\n\t\tGetterByBindingType: [\n\n\t\t\tfunction getValue_direct( buffer, offset ) {\n\n\t\t\t\tbuffer[ offset ] = this.node[ this.propertyName ];\n\n\t\t\t},\n\n\t\t\tfunction getValue_array( buffer, offset ) {\n\n\t\t\t\tvar source = this.resolvedProperty;\n\n\t\t\t\tfor ( var i = 0, n = source.length; i !== n; ++ i ) {\n\n\t\t\t\t\tbuffer[ offset ++ ] = source[ i ];\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tfunction getValue_arrayElement( buffer, offset ) {\n\n\t\t\t\tbuffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];\n\n\t\t\t},\n\n\t\t\tfunction getValue_toArray( buffer, offset ) {\n\n\t\t\t\tthis.resolvedProperty.toArray( buffer, offset );\n\n\t\t\t}\n\n\t\t],\n\n\t\tSetterByBindingTypeAndVersioning: [\n\n\t\t\t[\n\t\t\t\t// Direct\n\n\t\t\t\tfunction setValue_direct( buffer, offset ) {\n\n\t\t\t\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_direct_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t], [\n\n\t\t\t\t// EntireArray\n\n\t\t\t\tfunction setValue_array( buffer, offset ) {\n\n\t\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_array_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t], [\n\n\t\t\t\t// ArrayElement\n\n\t\t\t\tfunction setValue_arrayElement( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_arrayElement_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t], [\n\n\t\t\t\t// HasToFromArray\n\n\t\t\t\tfunction setValue_fromArray( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_fromArray_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t]\n\n\t\t],\n\n\t\tgetValue: function getValue_unbound( targetArray, offset ) {\n\n\t\t\tthis.bind();\n\t\t\tthis.getValue( targetArray, offset );\n\n\t\t\t// Note: This class uses a State pattern on a per-method basis:\n\t\t\t// 'bind' sets 'this.getValue' / 'setValue' and shadows the\n\t\t\t// prototype version of these methods with one that represents\n\t\t\t// the bound state. When the property is not found, the methods\n\t\t\t// become no-ops.\n\n\t\t},\n\n\t\tsetValue: function getValue_unbound( sourceArray, offset ) {\n\n\t\t\tthis.bind();\n\t\t\tthis.setValue( sourceArray, offset );\n\n\t\t},\n\n\t\t// create getter / setter pair for a property in the scene graph\n\t\tbind: function () {\n\n\t\t\tvar targetObject = this.node,\n\t\t\t\tparsedPath = this.parsedPath,\n\n\t\t\t\tobjectName = parsedPath.objectName,\n\t\t\t\tpropertyName = parsedPath.propertyName,\n\t\t\t\tpropertyIndex = parsedPath.propertyIndex;\n\n\t\t\tif ( ! targetObject ) {\n\n\t\t\t\ttargetObject = PropertyBinding.findNode( this.rootNode, parsedPath.nodeName ) || this.rootNode;\n\n\t\t\t\tthis.node = targetObject;\n\n\t\t\t}\n\n\t\t\t// set fail state so we can just 'return' on error\n\t\t\tthis.getValue = this._getValue_unavailable;\n\t\t\tthis.setValue = this._setValue_unavailable;\n\n\t\t\t// ensure there is a value node\n\t\t\tif ( ! targetObject ) {\n\n\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\\'t found.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( objectName ) {\n\n\t\t\t\tvar objectIndex = parsedPath.objectIndex;\n\n\t\t\t\t// special cases were we need to reach deeper into the hierarchy to get the face materials....\n\t\t\t\tswitch ( objectName ) {\n\n\t\t\t\t\tcase 'materials':\n\n\t\t\t\t\t\tif ( ! targetObject.material ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material as node does not have a material.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( ! targetObject.material.materials ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttargetObject = targetObject.material.materials;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'bones':\n\n\t\t\t\t\t\tif ( ! targetObject.skeleton ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// potential future optimization: skip this if propertyIndex is already an integer\n\t\t\t\t\t\t// and convert the integer string to a true integer.\n\n\t\t\t\t\t\ttargetObject = targetObject.skeleton.bones;\n\n\t\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\t\tfor ( var i = 0; i < targetObject.length; i ++ ) {\n\n\t\t\t\t\t\t\tif ( targetObject[ i ].name === objectIndex ) {\n\n\t\t\t\t\t\t\t\tobjectIndex = i;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tif ( targetObject[ objectName ] === undefined ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to objectName of node undefined.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttargetObject = targetObject[ objectName ];\n\n\t\t\t\t}\n\n\n\t\t\t\tif ( objectIndex !== undefined ) {\n\n\t\t\t\t\tif ( targetObject[ objectIndex ] === undefined ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject[ objectIndex ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// resolve property\n\t\t\tvar nodeProperty = targetObject[ propertyName ];\n\n\t\t\tif ( nodeProperty === undefined ) {\n\n\t\t\t\tvar nodeName = parsedPath.nodeName;\n\n\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to update property for track: ' + nodeName +\n\t\t\t\t\t'.' + propertyName + ' but it wasn\\'t found.', targetObject );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t// determine versioning scheme\n\t\t\tvar versioning = this.Versioning.None;\n\n\t\t\tthis.targetObject = targetObject;\n\n\t\t\tif ( targetObject.needsUpdate !== undefined ) { // material\n\n\t\t\t\tversioning = this.Versioning.NeedsUpdate;\n\n\t\t\t} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform\n\n\t\t\t\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\n\n\t\t\t}\n\n\t\t\t// determine how the property gets bound\n\t\t\tvar bindingType = this.BindingType.Direct;\n\n\t\t\tif ( propertyIndex !== undefined ) {\n\n\t\t\t\t// access a sub element of the property array (only primitives are supported right now)\n\n\t\t\t\tif ( propertyName === \"morphTargetInfluences\" ) {\n\n\t\t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n\n\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\tif ( ! targetObject.geometry ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( targetObject.geometry.isBufferGeometry ) {\n\n\t\t\t\t\t\tif ( ! targetObject.geometry.morphAttributes ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor ( var i = 0; i < this.node.geometry.morphAttributes.position.length; i ++ ) {\n\n\t\t\t\t\t\t\tif ( targetObject.geometry.morphAttributes.position[ i ].name === propertyIndex ) {\n\n\t\t\t\t\t\t\t\tpropertyIndex = i;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( ! targetObject.geometry.morphTargets ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {\n\n\t\t\t\t\t\t\tif ( targetObject.geometry.morphTargets[ i ].name === propertyIndex ) {\n\n\t\t\t\t\t\t\t\tpropertyIndex = i;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tbindingType = this.BindingType.ArrayElement;\n\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\t\tthis.propertyIndex = propertyIndex;\n\n\t\t\t} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {\n\n\t\t\t\t// must use copy for Object3D.Euler/Quaternion\n\n\t\t\t\tbindingType = this.BindingType.HasFromToArray;\n\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t\t} else if ( Array.isArray( nodeProperty ) ) {\n\n\t\t\t\tbindingType = this.BindingType.EntireArray;\n\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t\t} else {\n\n\t\t\t\tthis.propertyName = propertyName;\n\n\t\t\t}\n\n\t\t\t// select getter / setter\n\t\t\tthis.getValue = this.GetterByBindingType[ bindingType ];\n\t\t\tthis.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];\n\n\t\t},\n\n\t\tunbind: function () {\n\n\t\t\tthis.node = null;\n\n\t\t\t// back to the prototype version of getValue / setValue\n\t\t\t// note: avoiding to mutate the shape of 'this' via 'delete'\n\t\t\tthis.getValue = this._getValue_unbound;\n\t\t\tthis.setValue = this._setValue_unbound;\n\n\t\t}\n\n\t} );\n\n\t//!\\ DECLARE ALIAS AFTER assign prototype !\n\tObject.assign( PropertyBinding.prototype, {\n\n\t\t// initial state of these methods that calls 'bind'\n\t\t_getValue_unbound: PropertyBinding.prototype.getValue,\n\t\t_setValue_unbound: PropertyBinding.prototype.setValue,\n\n\t} );\n\n\t/**\n\t *\n\t * A group of objects that receives a shared animation state.\n\t *\n\t * Usage:\n\t *\n\t *  - Add objects you would otherwise pass as 'root' to the\n\t *    constructor or the .clipAction method of AnimationMixer.\n\t *\n\t *  - Instead pass this object as 'root'.\n\t *\n\t *  - You can also add and remove objects later when the mixer\n\t *    is running.\n\t *\n\t * Note:\n\t *\n\t *    Objects of this class appear as one object to the mixer,\n\t *    so cache control of the individual objects must be done\n\t *    on the group.\n\t *\n\t * Limitation:\n\t *\n\t *  - The animated properties must be compatible among the\n\t *    all objects in the group.\n\t *\n\t *  - A single property can either be controlled through a\n\t *    target group or directly, but not both.\n\t *\n\t * @author tschw\n\t */\n\n\tfunction AnimationObjectGroup() {\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\t// cached objects followed by the active ones\n\t\tthis._objects = Array.prototype.slice.call( arguments );\n\n\t\tthis.nCachedObjects_ = 0; // threshold\n\t\t// note: read by PropertyBinding.Composite\n\n\t\tvar indices = {};\n\t\tthis._indicesByUUID = indices; // for bookkeeping\n\n\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tindices[ arguments[ i ].uuid ] = i;\n\n\t\t}\n\n\t\tthis._paths = []; // inside: string\n\t\tthis._parsedPaths = []; // inside: { we don't care, here }\n\t\tthis._bindings = []; // inside: Array< PropertyBinding >\n\t\tthis._bindingsIndicesByPath = {}; // inside: indices in these arrays\n\n\t\tvar scope = this;\n\n\t\tthis.stats = {\n\n\t\t\tobjects: {\n\t\t\t\tget total() {\n\n\t\t\t\t\treturn scope._objects.length;\n\n\t\t\t\t},\n\t\t\t\tget inUse() {\n\n\t\t\t\t\treturn this.total - scope.nCachedObjects_;\n\n\t\t\t\t}\n\t\t\t},\n\t\t\tget bindingsPerObject() {\n\n\t\t\t\treturn scope._bindings.length;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tObject.assign( AnimationObjectGroup.prototype, {\n\n\t\tisAnimationObjectGroup: true,\n\n\t\tadd: function () {\n\n\t\t\tvar objects = this._objects,\n\t\t\t\tnObjects = objects.length,\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\tpaths = this._paths,\n\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = bindings.length,\n\t\t\t\tknownObject = undefined;\n\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\t\tvar object = arguments[ i ],\n\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\t\tif ( index === undefined ) {\n\n\t\t\t\t\t// unknown object -> add it to the ACTIVE region\n\n\t\t\t\t\tindex = nObjects ++;\n\t\t\t\t\tindicesByUUID[ uuid ] = index;\n\t\t\t\t\tobjects.push( object );\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tbindings[ j ].push( new PropertyBinding( object, paths[ j ], parsedPaths[ j ] ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( index < nCachedObjects ) {\n\n\t\t\t\t\tknownObject = objects[ index ];\n\n\t\t\t\t\t// move existing object to the ACTIVE region\n\n\t\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ];\n\n\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\t\tindicesByUUID[ uuid ] = firstActiveIndex;\n\t\t\t\t\tobjects[ firstActiveIndex ] = object;\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t\t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\n\t\t\t\t\t\tif ( binding === undefined ) {\n\n\t\t\t\t\t\t\t// since we do not bother to create new bindings\n\t\t\t\t\t\t\t// for objects that are cached, the binding may\n\t\t\t\t\t\t\t// or may not exist\n\n\t\t\t\t\t\t\tbinding = new PropertyBinding( object, paths[ j ], parsedPaths[ j ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = binding;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( objects[ index ] !== knownObject ) {\n\n\t\t\t\t\tconsole.error( 'THREE.AnimationObjectGroup: Different objects with the same UUID ' +\n\t\t\t\t\t\t'detected. Clean the caches or recreate your infrastructure when reloading scenes.' );\n\n\t\t\t\t} // else the object is already where we want it to be\n\n\t\t\t} // for arguments\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t\t},\n\n\t\tremove: function () {\n\n\t\t\tvar objects = this._objects,\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = bindings.length;\n\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\t\tvar object = arguments[ i ],\n\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\t\tif ( index !== undefined && index >= nCachedObjects ) {\n\n\t\t\t\t\t// move existing object into the CACHED region\n\n\t\t\t\t\tvar lastCachedIndex = nCachedObjects ++,\n\t\t\t\t\t\tfirstActiveObject = objects[ lastCachedIndex ];\n\n\t\t\t\t\tindicesByUUID[ firstActiveObject.uuid ] = index;\n\t\t\t\t\tobjects[ index ] = firstActiveObject;\n\n\t\t\t\t\tindicesByUUID[ uuid ] = lastCachedIndex;\n\t\t\t\t\tobjects[ lastCachedIndex ] = object;\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\tfirstActive = bindingsForPath[ lastCachedIndex ],\n\t\t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = firstActive;\n\t\t\t\t\t\tbindingsForPath[ lastCachedIndex ] = binding;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} // for arguments\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t\t},\n\n\t\t// remove & forget\n\t\tuncache: function () {\n\n\t\t\tvar objects = this._objects,\n\t\t\t\tnObjects = objects.length,\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = bindings.length;\n\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\t\tvar object = arguments[ i ],\n\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\t\tif ( index !== undefined ) {\n\n\t\t\t\t\tdelete indicesByUUID[ uuid ];\n\n\t\t\t\t\tif ( index < nCachedObjects ) {\n\n\t\t\t\t\t\t// object is cached, shrink the CACHED region\n\n\t\t\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ],\n\t\t\t\t\t\t\tlastIndex = -- nObjects,\n\t\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n\t\t\t\t\t\t// last cached object takes this object's place\n\t\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\t\t\t// last object goes to the activated slot and pop\n\t\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = firstActiveIndex;\n\t\t\t\t\t\tobjects[ firstActiveIndex ] = lastObject;\n\t\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t\t\t\t\t\t\t\tlast = bindingsForPath[ lastIndex ];\n\n\t\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\t\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = last;\n\t\t\t\t\t\t\tbindingsForPath.pop();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// object is active, just swap with the last and pop\n\n\t\t\t\t\t\tvar lastIndex = -- nObjects,\n\t\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n\t\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = index;\n\t\t\t\t\t\tobjects[ index ] = lastObject;\n\t\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\t\tvar bindingsForPath = bindings[ j ];\n\n\t\t\t\t\t\t\tbindingsForPath[ index ] = bindingsForPath[ lastIndex ];\n\t\t\t\t\t\t\tbindingsForPath.pop();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} // cached or active\n\n\t\t\t\t} // if object is known\n\n\t\t\t} // for arguments\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t\t},\n\n\t\t// Internal interface used by befriended PropertyBinding.Composite:\n\n\t\tsubscribe_: function ( path, parsedPath ) {\n\n\t\t\t// returns an array of bindings for the given path that is changed\n\t\t\t// according to the contained objects in the group\n\n\t\t\tvar indicesByPath = this._bindingsIndicesByPath,\n\t\t\t\tindex = indicesByPath[ path ],\n\t\t\t\tbindings = this._bindings;\n\n\t\t\tif ( index !== undefined ) { return bindings[ index ]; }\n\n\t\t\tvar paths = this._paths,\n\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\tobjects = this._objects,\n\t\t\t\tnObjects = objects.length,\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\tbindingsForPath = new Array( nObjects );\n\n\t\t\tindex = bindings.length;\n\n\t\t\tindicesByPath[ path ] = index;\n\n\t\t\tpaths.push( path );\n\t\t\tparsedPaths.push( parsedPath );\n\t\t\tbindings.push( bindingsForPath );\n\n\t\t\tfor ( var i = nCachedObjects, n = objects.length; i !== n; ++ i ) {\n\n\t\t\t\tvar object = objects[ i ];\n\t\t\t\tbindingsForPath[ i ] = new PropertyBinding( object, path, parsedPath );\n\n\t\t\t}\n\n\t\t\treturn bindingsForPath;\n\n\t\t},\n\n\t\tunsubscribe_: function ( path ) {\n\n\t\t\t// tells the group to forget about a property path and no longer\n\t\t\t// update the array previously obtained with 'subscribe_'\n\n\t\t\tvar indicesByPath = this._bindingsIndicesByPath,\n\t\t\t\tindex = indicesByPath[ path ];\n\n\t\t\tif ( index !== undefined ) {\n\n\t\t\t\tvar paths = this._paths,\n\t\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\tlastBindingsIndex = bindings.length - 1,\n\t\t\t\t\tlastBindings = bindings[ lastBindingsIndex ],\n\t\t\t\t\tlastBindingsPath = path[ lastBindingsIndex ];\n\n\t\t\t\tindicesByPath[ lastBindingsPath ] = index;\n\n\t\t\t\tbindings[ index ] = lastBindings;\n\t\t\t\tbindings.pop();\n\n\t\t\t\tparsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];\n\t\t\t\tparsedPaths.pop();\n\n\t\t\t\tpaths[ index ] = paths[ lastBindingsIndex ];\n\t\t\t\tpaths.pop();\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * Action provided by AnimationMixer for scheduling clip playback on specific\n\t * objects.\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t *\n\t */\n\n\tfunction AnimationAction( mixer, clip, localRoot ) {\n\n\t\tthis._mixer = mixer;\n\t\tthis._clip = clip;\n\t\tthis._localRoot = localRoot || null;\n\n\t\tvar tracks = clip.tracks,\n\t\t\tnTracks = tracks.length,\n\t\t\tinterpolants = new Array( nTracks );\n\n\t\tvar interpolantSettings = {\n\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\tendingEnd: ZeroCurvatureEnding\n\t\t};\n\n\t\tfor ( var i = 0; i !== nTracks; ++ i ) {\n\n\t\t\tvar interpolant = tracks[ i ].createInterpolant( null );\n\t\t\tinterpolants[ i ] = interpolant;\n\t\t\tinterpolant.settings = interpolantSettings;\n\n\t\t}\n\n\t\tthis._interpolantSettings = interpolantSettings;\n\n\t\tthis._interpolants = interpolants; // bound by the mixer\n\n\t\t// inside: PropertyMixer (managed by the mixer)\n\t\tthis._propertyBindings = new Array( nTracks );\n\n\t\tthis._cacheIndex = null; // for the memory manager\n\t\tthis._byClipCacheIndex = null; // for the memory manager\n\n\t\tthis._timeScaleInterpolant = null;\n\t\tthis._weightInterpolant = null;\n\n\t\tthis.loop = LoopRepeat;\n\t\tthis._loopCount = - 1;\n\n\t\t// global mixer time when the action is to be started\n\t\t// it's set back to 'null' upon start of the action\n\t\tthis._startTime = null;\n\n\t\t// scaled local time of the action\n\t\t// gets clamped or wrapped to 0..clip.duration according to loop\n\t\tthis.time = 0;\n\n\t\tthis.timeScale = 1;\n\t\tthis._effectiveTimeScale = 1;\n\n\t\tthis.weight = 1;\n\t\tthis._effectiveWeight = 1;\n\n\t\tthis.repetitions = Infinity; // no. of repetitions when looping\n\n\t\tthis.paused = false; // true -> zero effective time scale\n\t\tthis.enabled = true; // false -> zero effective weight\n\n\t\tthis.clampWhenFinished = false;// keep feeding the last frame?\n\n\t\tthis.zeroSlopeAtStart = true;// for smooth interpolation w/o separate\n\t\tthis.zeroSlopeAtEnd = true;// clips for start, loop and end\n\n\t}\n\n\tObject.assign( AnimationAction.prototype, {\n\n\t\t// State & Scheduling\n\n\t\tplay: function () {\n\n\t\t\tthis._mixer._activateAction( this );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tstop: function () {\n\n\t\t\tthis._mixer._deactivateAction( this );\n\n\t\t\treturn this.reset();\n\n\t\t},\n\n\t\treset: function () {\n\n\t\t\tthis.paused = false;\n\t\t\tthis.enabled = true;\n\n\t\t\tthis.time = 0; // restart clip\n\t\t\tthis._loopCount = - 1;// forget previous loops\n\t\t\tthis._startTime = null;// forget scheduling\n\n\t\t\treturn this.stopFading().stopWarping();\n\n\t\t},\n\n\t\tisRunning: function () {\n\n\t\t\treturn this.enabled && ! this.paused && this.timeScale !== 0 &&\n\t\t\t\tthis._startTime === null && this._mixer._isActiveAction( this );\n\n\t\t},\n\n\t\t// return true when play has been called\n\t\tisScheduled: function () {\n\n\t\t\treturn this._mixer._isActiveAction( this );\n\n\t\t},\n\n\t\tstartAt: function ( time ) {\n\n\t\t\tthis._startTime = time;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetLoop: function ( mode, repetitions ) {\n\n\t\t\tthis.loop = mode;\n\t\t\tthis.repetitions = repetitions;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Weight\n\n\t\t// set the weight stopping any scheduled fading\n\t\t// although .enabled = false yields an effective weight of zero, this\n\t\t// method does *not* change .enabled, because it would be confusing\n\t\tsetEffectiveWeight: function ( weight ) {\n\n\t\t\tthis.weight = weight;\n\n\t\t\t// note: same logic as when updated at runtime\n\t\t\tthis._effectiveWeight = this.enabled ? weight : 0;\n\n\t\t\treturn this.stopFading();\n\n\t\t},\n\n\t\t// return the weight considering fading and .enabled\n\t\tgetEffectiveWeight: function () {\n\n\t\t\treturn this._effectiveWeight;\n\n\t\t},\n\n\t\tfadeIn: function ( duration ) {\n\n\t\t\treturn this._scheduleFading( duration, 0, 1 );\n\n\t\t},\n\n\t\tfadeOut: function ( duration ) {\n\n\t\t\treturn this._scheduleFading( duration, 1, 0 );\n\n\t\t},\n\n\t\tcrossFadeFrom: function ( fadeOutAction, duration, warp ) {\n\n\t\t\tfadeOutAction.fadeOut( duration );\n\t\t\tthis.fadeIn( duration );\n\n\t\t\tif ( warp ) {\n\n\t\t\t\tvar fadeInDuration = this._clip.duration,\n\t\t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\n\n\t\t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\n\t\t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\n\n\t\t\t\tfadeOutAction.warp( 1.0, startEndRatio, duration );\n\t\t\t\tthis.warp( endStartRatio, 1.0, duration );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcrossFadeTo: function ( fadeInAction, duration, warp ) {\n\n\t\t\treturn fadeInAction.crossFadeFrom( this, duration, warp );\n\n\t\t},\n\n\t\tstopFading: function () {\n\n\t\t\tvar weightInterpolant = this._weightInterpolant;\n\n\t\t\tif ( weightInterpolant !== null ) {\n\n\t\t\t\tthis._weightInterpolant = null;\n\t\t\t\tthis._mixer._takeBackControlInterpolant( weightInterpolant );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Time Scale Control\n\n\t\t// set the time scale stopping any scheduled warping\n\t\t// although .paused = true yields an effective time scale of zero, this\n\t\t// method does *not* change .paused, because it would be confusing\n\t\tsetEffectiveTimeScale: function ( timeScale ) {\n\n\t\t\tthis.timeScale = timeScale;\n\t\t\tthis._effectiveTimeScale = this.paused ? 0 : timeScale;\n\n\t\t\treturn this.stopWarping();\n\n\t\t},\n\n\t\t// return the time scale considering warping and .paused\n\t\tgetEffectiveTimeScale: function () {\n\n\t\t\treturn this._effectiveTimeScale;\n\n\t\t},\n\n\t\tsetDuration: function ( duration ) {\n\n\t\t\tthis.timeScale = this._clip.duration / duration;\n\n\t\t\treturn this.stopWarping();\n\n\t\t},\n\n\t\tsyncWith: function ( action ) {\n\n\t\t\tthis.time = action.time;\n\t\t\tthis.timeScale = action.timeScale;\n\n\t\t\treturn this.stopWarping();\n\n\t\t},\n\n\t\thalt: function ( duration ) {\n\n\t\t\treturn this.warp( this._effectiveTimeScale, 0, duration );\n\n\t\t},\n\n\t\twarp: function ( startTimeScale, endTimeScale, duration ) {\n\n\t\t\tvar mixer = this._mixer, now = mixer.time,\n\t\t\t\tinterpolant = this._timeScaleInterpolant,\n\n\t\t\t\ttimeScale = this.timeScale;\n\n\t\t\tif ( interpolant === null ) {\n\n\t\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\t\tthis._timeScaleInterpolant = interpolant;\n\n\t\t\t}\n\n\t\t\tvar times = interpolant.parameterPositions,\n\t\t\t\tvalues = interpolant.sampleValues;\n\n\t\t\ttimes[ 0 ] = now;\n\t\t\ttimes[ 1 ] = now + duration;\n\n\t\t\tvalues[ 0 ] = startTimeScale / timeScale;\n\t\t\tvalues[ 1 ] = endTimeScale / timeScale;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tstopWarping: function () {\n\n\t\t\tvar timeScaleInterpolant = this._timeScaleInterpolant;\n\n\t\t\tif ( timeScaleInterpolant !== null ) {\n\n\t\t\t\tthis._timeScaleInterpolant = null;\n\t\t\t\tthis._mixer._takeBackControlInterpolant( timeScaleInterpolant );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Object Accessors\n\n\t\tgetMixer: function () {\n\n\t\t\treturn this._mixer;\n\n\t\t},\n\n\t\tgetClip: function () {\n\n\t\t\treturn this._clip;\n\n\t\t},\n\n\t\tgetRoot: function () {\n\n\t\t\treturn this._localRoot || this._mixer._root;\n\n\t\t},\n\n\t\t// Interna\n\n\t\t_update: function ( time, deltaTime, timeDirection, accuIndex ) {\n\n\t\t\t// called by the mixer\n\n\t\t\tif ( ! this.enabled ) {\n\n\t\t\t\t// call ._updateWeight() to update ._effectiveWeight\n\n\t\t\t\tthis._updateWeight( time );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar startTime = this._startTime;\n\n\t\t\tif ( startTime !== null ) {\n\n\t\t\t\t// check for scheduled start of action\n\n\t\t\t\tvar timeRunning = ( time - startTime ) * timeDirection;\n\t\t\t\tif ( timeRunning < 0 || timeDirection === 0 ) {\n\n\t\t\t\t\treturn; // yet to come / don't decide when delta = 0\n\n\t\t\t\t}\n\n\t\t\t\t// start\n\n\t\t\t\tthis._startTime = null; // unschedule\n\t\t\t\tdeltaTime = timeDirection * timeRunning;\n\n\t\t\t}\n\n\t\t\t// apply time scale and advance time\n\n\t\t\tdeltaTime *= this._updateTimeScale( time );\n\t\t\tvar clipTime = this._updateTime( deltaTime );\n\n\t\t\t// note: _updateTime may disable the action resulting in\n\t\t\t// an effective weight of 0\n\n\t\t\tvar weight = this._updateWeight( time );\n\n\t\t\tif ( weight > 0 ) {\n\n\t\t\t\tvar interpolants = this._interpolants;\n\t\t\t\tvar propertyMixers = this._propertyBindings;\n\n\t\t\t\tfor ( var j = 0, m = interpolants.length; j !== m; ++ j ) {\n\n\t\t\t\t\tinterpolants[ j ].evaluate( clipTime );\n\t\t\t\t\tpropertyMixers[ j ].accumulate( accuIndex, weight );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t_updateWeight: function ( time ) {\n\n\t\t\tvar weight = 0;\n\n\t\t\tif ( this.enabled ) {\n\n\t\t\t\tweight = this.weight;\n\t\t\t\tvar interpolant = this._weightInterpolant;\n\n\t\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\t\tweight *= interpolantValue;\n\n\t\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\t\tthis.stopFading();\n\n\t\t\t\t\t\tif ( interpolantValue === 0 ) {\n\n\t\t\t\t\t\t\t// faded out, disable\n\t\t\t\t\t\t\tthis.enabled = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._effectiveWeight = weight;\n\t\t\treturn weight;\n\n\t\t},\n\n\t\t_updateTimeScale: function ( time ) {\n\n\t\t\tvar timeScale = 0;\n\n\t\t\tif ( ! this.paused ) {\n\n\t\t\t\ttimeScale = this.timeScale;\n\n\t\t\t\tvar interpolant = this._timeScaleInterpolant;\n\n\t\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\t\ttimeScale *= interpolantValue;\n\n\t\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\t\tthis.stopWarping();\n\n\t\t\t\t\t\tif ( timeScale === 0 ) {\n\n\t\t\t\t\t\t\t// motion has halted, pause\n\t\t\t\t\t\t\tthis.paused = true;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// warp done - apply final time scale\n\t\t\t\t\t\t\tthis.timeScale = timeScale;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._effectiveTimeScale = timeScale;\n\t\t\treturn timeScale;\n\n\t\t},\n\n\t\t_updateTime: function ( deltaTime ) {\n\n\t\t\tvar time = this.time + deltaTime;\n\t\t\tvar duration = this._clip.duration;\n\t\t\tvar loop = this.loop;\n\t\t\tvar loopCount = this._loopCount;\n\n\t\t\tvar pingPong = ( loop === LoopPingPong );\n\n\t\t\tif ( deltaTime === 0 ) {\n\n\t\t\t\tif ( loopCount === - 1 ) { return time; }\n\n\t\t\t\treturn ( pingPong && ( loopCount & 1 ) === 1 ) ? duration - time : time;\n\n\t\t\t}\n\n\t\t\tif ( loop === LoopOnce ) {\n\n\t\t\t\tif ( loopCount === - 1 ) {\n\n\t\t\t\t\t// just started\n\n\t\t\t\t\tthis._loopCount = 0;\n\t\t\t\t\tthis._setEndings( true, true, false );\n\n\t\t\t\t}\n\n\t\t\t\thandle_stop: {\n\n\t\t\t\t\tif ( time >= duration ) {\n\n\t\t\t\t\t\ttime = duration;\n\n\t\t\t\t\t} else if ( time < 0 ) {\n\n\t\t\t\t\t\ttime = 0;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\t\tbreak handle_stop;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.clampWhenFinished ) { this.paused = true; }\n\t\t\t\t\telse { this.enabled = false; }\n\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\t\tdirection: deltaTime < 0 ? - 1 : 1\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t} else { // repetitive Repeat or PingPong\n\n\t\t\t\tif ( loopCount === - 1 ) {\n\n\t\t\t\t\t// just started\n\n\t\t\t\t\tif ( deltaTime >= 0 ) {\n\n\t\t\t\t\t\tloopCount = 0;\n\n\t\t\t\t\t\tthis._setEndings( true, this.repetitions === 0, pingPong );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// when looping in reverse direction, the initial\n\t\t\t\t\t\t// transition through zero counts as a repetition,\n\t\t\t\t\t\t// so leave loopCount at -1\n\n\t\t\t\t\t\tthis._setEndings( this.repetitions === 0, true, pingPong );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( time >= duration || time < 0 ) {\n\n\t\t\t\t\t// wrap around\n\n\t\t\t\t\tvar loopDelta = Math.floor( time / duration ); // signed\n\t\t\t\t\ttime -= duration * loopDelta;\n\n\t\t\t\t\tloopCount += Math.abs( loopDelta );\n\n\t\t\t\t\tvar pending = this.repetitions - loopCount;\n\n\t\t\t\t\tif ( pending <= 0 ) {\n\n\t\t\t\t\t\t// have to stop (switch state, clamp time, fire event)\n\n\t\t\t\t\t\tif ( this.clampWhenFinished ) { this.paused = true; }\n\t\t\t\t\t\telse { this.enabled = false; }\n\n\t\t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\n\n\t\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : - 1\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// keep running\n\n\t\t\t\t\t\tif ( pending === 1 ) {\n\n\t\t\t\t\t\t\t// entering the last round\n\n\t\t\t\t\t\t\tvar atStart = deltaTime < 0;\n\t\t\t\t\t\t\tthis._setEndings( atStart, ! atStart, pingPong );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tthis._setEndings( false, false, pingPong );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis._loopCount = loopCount;\n\n\t\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\t\ttype: 'loop', action: this, loopDelta: loopDelta\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t}\n\n\t\t\t\tif ( pingPong && ( loopCount & 1 ) === 1 ) {\n\n\t\t\t\t\t// invert time for the \"pong round\"\n\n\t\t\t\t\treturn duration - time;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn time;\n\n\t\t},\n\n\t\t_setEndings: function ( atStart, atEnd, pingPong ) {\n\n\t\t\tvar settings = this._interpolantSettings;\n\n\t\t\tif ( pingPong ) {\n\n\t\t\t\tsettings.endingStart = ZeroSlopeEnding;\n\t\t\t\tsettings.endingEnd = ZeroSlopeEnding;\n\n\t\t\t} else {\n\n\t\t\t\t// assuming for LoopOnce atStart == atEnd == true\n\n\t\t\t\tif ( atStart ) {\n\n\t\t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tsettings.endingStart = WrapAroundEnding;\n\n\t\t\t\t}\n\n\t\t\t\tif ( atEnd ) {\n\n\t\t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tsettings.endingEnd \t = WrapAroundEnding;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t_scheduleFading: function ( duration, weightNow, weightThen ) {\n\n\t\t\tvar mixer = this._mixer, now = mixer.time,\n\t\t\t\tinterpolant = this._weightInterpolant;\n\n\t\t\tif ( interpolant === null ) {\n\n\t\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\t\tthis._weightInterpolant = interpolant;\n\n\t\t\t}\n\n\t\t\tvar times = interpolant.parameterPositions,\n\t\t\t\tvalues = interpolant.sampleValues;\n\n\t\t\ttimes[ 0 ] = now;\n\t\t\tvalues[ 0 ] = weightNow;\n\t\t\ttimes[ 1 ] = now + duration;\n\t\t\tvalues[ 1 ] = weightThen;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * Player for AnimationClips.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction AnimationMixer( root ) {\n\n\t\tthis._root = root;\n\t\tthis._initMemoryManager();\n\t\tthis._accuIndex = 0;\n\n\t\tthis.time = 0;\n\n\t\tthis.timeScale = 1.0;\n\n\t}\n\n\tAnimationMixer.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: AnimationMixer,\n\n\t\t_bindAction: function ( action, prototypeAction ) {\n\n\t\t\tvar root = action._localRoot || this._root,\n\t\t\t\ttracks = action._clip.tracks,\n\t\t\t\tnTracks = tracks.length,\n\t\t\t\tbindings = action._propertyBindings,\n\t\t\t\tinterpolants = action._interpolants,\n\t\t\t\trootUuid = root.uuid,\n\t\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindingsByName = bindingsByRoot[ rootUuid ];\n\n\t\t\tif ( bindingsByName === undefined ) {\n\n\t\t\t\tbindingsByName = {};\n\t\t\t\tbindingsByRoot[ rootUuid ] = bindingsByName;\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i !== nTracks; ++ i ) {\n\n\t\t\t\tvar track = tracks[ i ],\n\t\t\t\t\ttrackName = track.name,\n\t\t\t\t\tbinding = bindingsByName[ trackName ];\n\n\t\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbinding = bindings[ i ];\n\n\t\t\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\t\t\t// existing binding, make sure the cache knows\n\n\t\t\t\t\t\tif ( binding._cacheIndex === null ) {\n\n\t\t\t\t\t\t\t++ binding.referenceCount;\n\t\t\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar path = prototypeAction && prototypeAction.\n\t\t\t\t\t\t_propertyBindings[ i ].binding.parsedPath;\n\n\t\t\t\t\tbinding = new PropertyMixer(\n\t\t\t\t\t\tPropertyBinding.create( root, trackName, path ),\n\t\t\t\t\t\ttrack.ValueTypeName, track.getValueSize() );\n\n\t\t\t\t\t++ binding.referenceCount;\n\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t\t}\n\n\t\t\t\tinterpolants[ i ].resultBuffer = binding.buffer;\n\n\t\t\t}\n\n\t\t},\n\n\t\t_activateAction: function ( action ) {\n\n\t\t\tif ( ! this._isActiveAction( action ) ) {\n\n\t\t\t\tif ( action._cacheIndex === null ) {\n\n\t\t\t\t\t// this action has been forgotten by the cache, but the user\n\t\t\t\t\t// appears to be still using it -> rebind\n\n\t\t\t\t\tvar rootUuid = ( action._localRoot || this._root ).uuid,\n\t\t\t\t\t\tclipUuid = action._clip.uuid,\n\t\t\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\t\t\t\tthis._bindAction( action,\n\t\t\t\t\t\tactionsForClip && actionsForClip.knownActions[ 0 ] );\n\n\t\t\t\t\tthis._addInactiveAction( action, clipUuid, rootUuid );\n\n\t\t\t\t}\n\n\t\t\t\tvar bindings = action._propertyBindings;\n\n\t\t\t\t// increment reference counts / sort out state\n\t\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar binding = bindings[ i ];\n\n\t\t\t\t\tif ( binding.useCount ++ === 0 ) {\n\n\t\t\t\t\t\tthis._lendBinding( binding );\n\t\t\t\t\t\tbinding.saveOriginalState();\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis._lendAction( action );\n\n\t\t\t}\n\n\t\t},\n\n\t\t_deactivateAction: function ( action ) {\n\n\t\t\tif ( this._isActiveAction( action ) ) {\n\n\t\t\t\tvar bindings = action._propertyBindings;\n\n\t\t\t\t// decrement reference counts / sort out state\n\t\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar binding = bindings[ i ];\n\n\t\t\t\t\tif ( -- binding.useCount === 0 ) {\n\n\t\t\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\t\t\tthis._takeBackBinding( binding );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis._takeBackAction( action );\n\n\t\t\t}\n\n\t\t},\n\n\t\t// Memory manager\n\n\t\t_initMemoryManager: function () {\n\n\t\t\tthis._actions = []; // 'nActiveActions' followed by inactive ones\n\t\t\tthis._nActiveActions = 0;\n\n\t\t\tthis._actionsByClip = {};\n\t\t\t// inside:\n\t\t\t// {\n\t\t\t// \tknownActions: Array< AnimationAction > - used as prototypes\n\t\t\t// \tactionByRoot: AnimationAction - lookup\n\t\t\t// }\n\n\n\t\t\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\n\t\t\tthis._nActiveBindings = 0;\n\n\t\t\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\n\n\n\t\t\tthis._controlInterpolants = []; // same game as above\n\t\t\tthis._nActiveControlInterpolants = 0;\n\n\t\t\tvar scope = this;\n\n\t\t\tthis.stats = {\n\n\t\t\t\tactions: {\n\t\t\t\t\tget total() {\n\n\t\t\t\t\t\treturn scope._actions.length;\n\n\t\t\t\t\t},\n\t\t\t\t\tget inUse() {\n\n\t\t\t\t\t\treturn scope._nActiveActions;\n\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tbindings: {\n\t\t\t\t\tget total() {\n\n\t\t\t\t\t\treturn scope._bindings.length;\n\n\t\t\t\t\t},\n\t\t\t\t\tget inUse() {\n\n\t\t\t\t\t\treturn scope._nActiveBindings;\n\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tcontrolInterpolants: {\n\t\t\t\t\tget total() {\n\n\t\t\t\t\t\treturn scope._controlInterpolants.length;\n\n\t\t\t\t\t},\n\t\t\t\t\tget inUse() {\n\n\t\t\t\t\t\treturn scope._nActiveControlInterpolants;\n\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t},\n\n\t\t// Memory management for AnimationAction objects\n\n\t\t_isActiveAction: function ( action ) {\n\n\t\t\tvar index = action._cacheIndex;\n\t\t\treturn index !== null && index < this._nActiveActions;\n\n\t\t},\n\n\t\t_addInactiveAction: function ( action, clipUuid, rootUuid ) {\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\n\t\t\tif ( actionsForClip === undefined ) {\n\n\t\t\t\tactionsForClip = {\n\n\t\t\t\t\tknownActions: [ action ],\n\t\t\t\t\tactionByRoot: {}\n\n\t\t\t\t};\n\n\t\t\t\taction._byClipCacheIndex = 0;\n\n\t\t\t\tactionsByClip[ clipUuid ] = actionsForClip;\n\n\t\t\t} else {\n\n\t\t\t\tvar knownActions = actionsForClip.knownActions;\n\n\t\t\t\taction._byClipCacheIndex = knownActions.length;\n\t\t\t\tknownActions.push( action );\n\n\t\t\t}\n\n\t\t\taction._cacheIndex = actions.length;\n\t\t\tactions.push( action );\n\n\t\t\tactionsForClip.actionByRoot[ rootUuid ] = action;\n\n\t\t},\n\n\t\t_removeInactiveAction: function ( action ) {\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ],\n\t\t\t\tcacheIndex = action._cacheIndex;\n\n\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\t\tactions.pop();\n\n\t\t\taction._cacheIndex = null;\n\n\n\t\t\tvar clipUuid = action._clip.uuid,\n\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\tactionsForClip = actionsByClip[ clipUuid ],\n\t\t\t\tknownActionsForClip = actionsForClip.knownActions,\n\n\t\t\t\tlastKnownAction =\n\t\t\t\t\tknownActionsForClip[ knownActionsForClip.length - 1 ],\n\n\t\t\t\tbyClipCacheIndex = action._byClipCacheIndex;\n\n\t\t\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\n\t\t\tknownActionsForClip[ byClipCacheIndex ] = lastKnownAction;\n\t\t\tknownActionsForClip.pop();\n\n\t\t\taction._byClipCacheIndex = null;\n\n\n\t\t\tvar actionByRoot = actionsForClip.actionByRoot,\n\t\t\t\trootUuid = ( action._localRoot || this._root ).uuid;\n\n\t\t\tdelete actionByRoot[ rootUuid ];\n\n\t\t\tif ( knownActionsForClip.length === 0 ) {\n\n\t\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t\t}\n\n\t\t\tthis._removeInactiveBindingsForAction( action );\n\n\t\t},\n\n\t\t_removeInactiveBindingsForAction: function ( action ) {\n\n\t\t\tvar bindings = action._propertyBindings;\n\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tvar binding = bindings[ i ];\n\n\t\t\t\tif ( -- binding.referenceCount === 0 ) {\n\n\t\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t_lendAction: function ( action ) {\n\n\t\t\t// [ active actions |  inactive actions  ]\n\t\t\t// [  active actions >| inactive actions ]\n\t\t\t//                 s        a\n\t\t\t//                  <-swap->\n\t\t\t//                 a        s\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\t\tlastActiveIndex = this._nActiveActions ++,\n\n\t\t\t\tfirstInactiveAction = actions[ lastActiveIndex ];\n\n\t\t\taction._cacheIndex = lastActiveIndex;\n\t\t\tactions[ lastActiveIndex ] = action;\n\n\t\t\tfirstInactiveAction._cacheIndex = prevIndex;\n\t\t\tactions[ prevIndex ] = firstInactiveAction;\n\n\t\t},\n\n\t\t_takeBackAction: function ( action ) {\n\n\t\t\t// [  active actions  | inactive actions ]\n\t\t\t// [ active actions |< inactive actions  ]\n\t\t\t//        a        s\n\t\t\t//         <-swap->\n\t\t\t//        s        a\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\t\tfirstInactiveIndex = -- this._nActiveActions,\n\n\t\t\t\tlastActiveAction = actions[ firstInactiveIndex ];\n\n\t\t\taction._cacheIndex = firstInactiveIndex;\n\t\t\tactions[ firstInactiveIndex ] = action;\n\n\t\t\tlastActiveAction._cacheIndex = prevIndex;\n\t\t\tactions[ prevIndex ] = lastActiveAction;\n\n\t\t},\n\n\t\t// Memory management for PropertyMixer objects\n\n\t\t_addInactiveBinding: function ( binding, rootUuid, trackName ) {\n\n\t\t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\n\t\t\t\tbindings = this._bindings;\n\n\t\t\tif ( bindingByName === undefined ) {\n\n\t\t\t\tbindingByName = {};\n\t\t\t\tbindingsByRoot[ rootUuid ] = bindingByName;\n\n\t\t\t}\n\n\t\t\tbindingByName[ trackName ] = binding;\n\n\t\t\tbinding._cacheIndex = bindings.length;\n\t\t\tbindings.push( binding );\n\n\t\t},\n\n\t\t_removeInactiveBinding: function ( binding ) {\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tpropBinding = binding.binding,\n\t\t\t\trootUuid = propBinding.rootNode.uuid,\n\t\t\t\ttrackName = propBinding.path,\n\t\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\n\t\t\t\tlastInactiveBinding = bindings[ bindings.length - 1 ],\n\t\t\t\tcacheIndex = binding._cacheIndex;\n\n\t\t\tlastInactiveBinding._cacheIndex = cacheIndex;\n\t\t\tbindings[ cacheIndex ] = lastInactiveBinding;\n\t\t\tbindings.pop();\n\n\t\t\tdelete bindingByName[ trackName ];\n\n\t\t\tif ( Object.keys( bindingByName ).length === 0 ) {\n\n\t\t\t\tdelete bindingsByRoot[ rootUuid ];\n\n\t\t\t}\n\n\t\t},\n\n\t\t_lendBinding: function ( binding ) {\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\t\tlastActiveIndex = this._nActiveBindings ++,\n\n\t\t\t\tfirstInactiveBinding = bindings[ lastActiveIndex ];\n\n\t\t\tbinding._cacheIndex = lastActiveIndex;\n\t\t\tbindings[ lastActiveIndex ] = binding;\n\n\t\t\tfirstInactiveBinding._cacheIndex = prevIndex;\n\t\t\tbindings[ prevIndex ] = firstInactiveBinding;\n\n\t\t},\n\n\t\t_takeBackBinding: function ( binding ) {\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\t\tfirstInactiveIndex = -- this._nActiveBindings,\n\n\t\t\t\tlastActiveBinding = bindings[ firstInactiveIndex ];\n\n\t\t\tbinding._cacheIndex = firstInactiveIndex;\n\t\t\tbindings[ firstInactiveIndex ] = binding;\n\n\t\t\tlastActiveBinding._cacheIndex = prevIndex;\n\t\t\tbindings[ prevIndex ] = lastActiveBinding;\n\n\t\t},\n\n\n\t\t// Memory management of Interpolants for weight and time scale\n\n\t\t_lendControlInterpolant: function () {\n\n\t\t\tvar interpolants = this._controlInterpolants,\n\t\t\t\tlastActiveIndex = this._nActiveControlInterpolants ++,\n\t\t\t\tinterpolant = interpolants[ lastActiveIndex ];\n\n\t\t\tif ( interpolant === undefined ) {\n\n\t\t\t\tinterpolant = new LinearInterpolant(\n\t\t\t\t\tnew Float32Array( 2 ), new Float32Array( 2 ),\n\t\t\t\t\t1, this._controlInterpolantsResultBuffer );\n\n\t\t\t\tinterpolant.__cacheIndex = lastActiveIndex;\n\t\t\t\tinterpolants[ lastActiveIndex ] = interpolant;\n\n\t\t\t}\n\n\t\t\treturn interpolant;\n\n\t\t},\n\n\t\t_takeBackControlInterpolant: function ( interpolant ) {\n\n\t\t\tvar interpolants = this._controlInterpolants,\n\t\t\t\tprevIndex = interpolant.__cacheIndex,\n\n\t\t\t\tfirstInactiveIndex = -- this._nActiveControlInterpolants,\n\n\t\t\t\tlastActiveInterpolant = interpolants[ firstInactiveIndex ];\n\n\t\t\tinterpolant.__cacheIndex = firstInactiveIndex;\n\t\t\tinterpolants[ firstInactiveIndex ] = interpolant;\n\n\t\t\tlastActiveInterpolant.__cacheIndex = prevIndex;\n\t\t\tinterpolants[ prevIndex ] = lastActiveInterpolant;\n\n\t\t},\n\n\t\t_controlInterpolantsResultBuffer: new Float32Array( 1 ),\n\n\t\t// return an action for a clip optionally using a custom root target\n\t\t// object (this method allocates a lot of dynamic memory in case a\n\t\t// previously unknown clip/root combination is specified)\n\t\tclipAction: function ( clip, optionalRoot ) {\n\n\t\t\tvar root = optionalRoot || this._root,\n\t\t\t\trootUuid = root.uuid,\n\n\t\t\t\tclipObject = typeof clip === 'string' ?\n\t\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\n\n\t\t\t\tclipUuid = clipObject !== null ? clipObject.uuid : clip,\n\n\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ],\n\t\t\t\tprototypeAction = null;\n\n\t\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t\tvar existingAction =\n\t\t\t\t\t\tactionsForClip.actionByRoot[ rootUuid ];\n\n\t\t\t\tif ( existingAction !== undefined ) {\n\n\t\t\t\t\treturn existingAction;\n\n\t\t\t\t}\n\n\t\t\t\t// we know the clip, so we don't have to parse all\n\t\t\t\t// the bindings again but can just copy\n\t\t\t\tprototypeAction = actionsForClip.knownActions[ 0 ];\n\n\t\t\t\t// also, take the clip from the prototype action\n\t\t\t\tif ( clipObject === null )\n\t\t\t\t\t{ clipObject = prototypeAction._clip; }\n\n\t\t\t}\n\n\t\t\t// clip must be known when specified via string\n\t\t\tif ( clipObject === null ) { return null; }\n\n\t\t\t// allocate all resources required to run it\n\t\t\tvar newAction = new AnimationAction( this, clipObject, optionalRoot );\n\n\t\t\tthis._bindAction( newAction, prototypeAction );\n\n\t\t\t// and make the action known to the memory manager\n\t\t\tthis._addInactiveAction( newAction, clipUuid, rootUuid );\n\n\t\t\treturn newAction;\n\n\t\t},\n\n\t\t// get an existing action\n\t\texistingAction: function ( clip, optionalRoot ) {\n\n\t\t\tvar root = optionalRoot || this._root,\n\t\t\t\trootUuid = root.uuid,\n\n\t\t\t\tclipObject = typeof clip === 'string' ?\n\t\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\n\n\t\t\t\tclipUuid = clipObject ? clipObject.uuid : clip,\n\n\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t\treturn actionsForClip.actionByRoot[ rootUuid ] || null;\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t},\n\n\t\t// deactivates all previously scheduled actions\n\t\tstopAllAction: function () {\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tnActions = this._nActiveActions,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = this._nActiveBindings;\n\n\t\t\tthis._nActiveActions = 0;\n\t\t\tthis._nActiveBindings = 0;\n\n\t\t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\n\t\t\t\tactions[ i ].reset();\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i !== nBindings; ++ i ) {\n\n\t\t\t\tbindings[ i ].useCount = 0;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// advance the time and update apply the animation\n\t\tupdate: function ( deltaTime ) {\n\n\t\t\tdeltaTime *= this.timeScale;\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tnActions = this._nActiveActions,\n\n\t\t\t\ttime = this.time += deltaTime,\n\t\t\t\ttimeDirection = Math.sign( deltaTime ),\n\n\t\t\t\taccuIndex = this._accuIndex ^= 1;\n\n\t\t\t// run active actions\n\n\t\t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\n\t\t\t\tvar action = actions[ i ];\n\n\t\t\t\taction._update( time, deltaTime, timeDirection, accuIndex );\n\n\t\t\t}\n\n\t\t\t// update scene graph\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tnBindings = this._nActiveBindings;\n\n\t\t\tfor ( var i = 0; i !== nBindings; ++ i ) {\n\n\t\t\t\tbindings[ i ].apply( accuIndex );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Allows you to seek to a specific time in an animation.\n\t\tsetTime: function ( timeInSeconds ) {\n\n\t\t\tthis.time = 0; // Zero out time attribute for AnimationMixer object;\n\t\t\tfor ( var i = 0; i < this._actions.length; i ++ ) {\n\n\t\t\t\tthis._actions[ i ].time = 0; // Zero out time attribute for all associated AnimationAction objects.\n\n\t\t\t}\n\n\t\t\treturn this.update( timeInSeconds ); // Update used to set exact time. Returns \"this\" AnimationMixer object.\n\n\t\t},\n\n\t\t// return this mixer's root target object\n\t\tgetRoot: function () {\n\n\t\t\treturn this._root;\n\n\t\t},\n\n\t\t// free all resources specific to a particular clip\n\t\tuncacheClip: function ( clip ) {\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tclipUuid = clip.uuid,\n\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\n\t\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t\t// note: just calling _removeInactiveAction would mess up the\n\t\t\t\t// iteration state and also require updating the state we can\n\t\t\t\t// just throw away\n\n\t\t\t\tvar actionsToRemove = actionsForClip.knownActions;\n\n\t\t\t\tfor ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar action = actionsToRemove[ i ];\n\n\t\t\t\t\tthis._deactivateAction( action );\n\n\t\t\t\t\tvar cacheIndex = action._cacheIndex,\n\t\t\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ];\n\n\t\t\t\t\taction._cacheIndex = null;\n\t\t\t\t\taction._byClipCacheIndex = null;\n\n\t\t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\t\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\t\t\t\tactions.pop();\n\n\t\t\t\t\tthis._removeInactiveBindingsForAction( action );\n\n\t\t\t\t}\n\n\t\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t\t}\n\n\t\t},\n\n\t\t// free all resources specific to a particular root target object\n\t\tuncacheRoot: function ( root ) {\n\n\t\t\tvar rootUuid = root.uuid,\n\t\t\t\tactionsByClip = this._actionsByClip;\n\n\t\t\tfor ( var clipUuid in actionsByClip ) {\n\n\t\t\t\tvar actionByRoot = actionsByClip[ clipUuid ].actionByRoot,\n\t\t\t\t\taction = actionByRoot[ rootUuid ];\n\n\t\t\t\tif ( action !== undefined ) {\n\n\t\t\t\t\tthis._deactivateAction( action );\n\t\t\t\t\tthis._removeInactiveAction( action );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ];\n\n\t\t\tif ( bindingByName !== undefined ) {\n\n\t\t\t\tfor ( var trackName in bindingByName ) {\n\n\t\t\t\t\tvar binding = bindingByName[ trackName ];\n\t\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t// remove a targeted clip from the cache\n\t\tuncacheAction: function ( clip, optionalRoot ) {\n\n\t\t\tvar action = this.existingAction( clip, optionalRoot );\n\n\t\t\tif ( action !== null ) {\n\n\t\t\t\tthis._deactivateAction( action );\n\t\t\t\tthis._removeInactiveAction( action );\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Uniform( value ) {\n\n\t\tif ( typeof value === 'string' ) {\n\n\t\t\tconsole.warn( 'THREE.Uniform: Type parameter is no longer needed.' );\n\t\t\tvalue = arguments[ 1 ];\n\n\t\t}\n\n\t\tthis.value = value;\n\n\t}\n\n\tUniform.prototype.clone = function () {\n\n\t\treturn new Uniform( this.value.clone === undefined ? this.value : this.value.clone() );\n\n\t};\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction InstancedInterleavedBuffer( array, stride, meshPerAttribute ) {\n\n\t\tInterleavedBuffer.call( this, array, stride );\n\n\t\tthis.meshPerAttribute = meshPerAttribute || 1;\n\n\t}\n\n\tInstancedInterleavedBuffer.prototype = Object.assign( Object.create( InterleavedBuffer.prototype ), {\n\n\t\tconstructor: InstancedInterleavedBuffer,\n\n\t\tisInstancedInterleavedBuffer: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tInterleavedBuffer.prototype.copy.call( this, source );\n\n\t\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author bhouston / http://clara.io/\n\t * @author stephomi / http://stephaneginier.com/\n\t */\n\n\tfunction Raycaster( origin, direction, near, far ) {\n\n\t\tthis.ray = new Ray( origin, direction );\n\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\tthis.near = near || 0;\n\t\tthis.far = far || Infinity;\n\t\tthis.camera = null;\n\n\t\tthis.params = {\n\t\t\tMesh: {},\n\t\t\tLine: {},\n\t\t\tLOD: {},\n\t\t\tPoints: { threshold: 1 },\n\t\t\tSprite: {}\n\t\t};\n\n\t\tObject.defineProperties( this.params, {\n\t\t\tPointCloud: {\n\t\t\t\tget: function () {\n\n\t\t\t\t\tconsole.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );\n\t\t\t\t\treturn this.Points;\n\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\n\t}\n\n\tfunction ascSort( a, b ) {\n\n\t\treturn a.distance - b.distance;\n\n\t}\n\n\tfunction intersectObject( object, raycaster, intersects, recursive ) {\n\n\t\tif ( object.visible === false ) { return; }\n\n\t\tobject.raycast( raycaster, intersects );\n\n\t\tif ( recursive === true ) {\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tintersectObject( children[ i ], raycaster, intersects, true );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tObject.assign( Raycaster.prototype, {\n\n\t\tlinePrecision: 1,\n\n\t\tset: function ( origin, direction ) {\n\n\t\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\t\tthis.ray.set( origin, direction );\n\n\t\t},\n\n\t\tsetFromCamera: function ( coords, camera ) {\n\n\t\t\tif ( ( camera && camera.isPerspectiveCamera ) ) {\n\n\t\t\t\tthis.ray.origin.setFromMatrixPosition( camera.matrixWorld );\n\t\t\t\tthis.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();\n\t\t\t\tthis.camera = camera;\n\n\t\t\t} else if ( ( camera && camera.isOrthographicCamera ) ) {\n\n\t\t\t\tthis.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera\n\t\t\t\tthis.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );\n\t\t\t\tthis.camera = camera;\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( 'THREE.Raycaster: Unsupported camera type.' );\n\n\t\t\t}\n\n\t\t},\n\n\t\tintersectObject: function ( object, recursive, optionalTarget ) {\n\n\t\t\tvar intersects = optionalTarget || [];\n\n\t\t\tintersectObject( object, this, intersects, recursive );\n\n\t\t\tintersects.sort( ascSort );\n\n\t\t\treturn intersects;\n\n\t\t},\n\n\t\tintersectObjects: function ( objects, recursive, optionalTarget ) {\n\n\t\t\tvar intersects = optionalTarget || [];\n\n\t\t\tif ( Array.isArray( objects ) === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );\n\t\t\t\treturn intersects;\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0, l = objects.length; i < l; i ++ ) {\n\n\t\t\t\tintersectObject( objects[ i ], this, intersects, recursive );\n\n\t\t\t}\n\n\t\t\tintersects.sort( ascSort );\n\n\t\t\treturn intersects;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n\t *\n\t * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.\n\t * The azimuthal angle (theta) is measured from the positive z-axis.\n\t */\n\n\tfunction Spherical( radius, phi, theta ) {\n\n\t\tthis.radius = ( radius !== undefined ) ? radius : 1.0;\n\t\tthis.phi = ( phi !== undefined ) ? phi : 0; // polar angle\n\t\tthis.theta = ( theta !== undefined ) ? theta : 0; // azimuthal angle\n\n\t\treturn this;\n\n\t}\n\n\tObject.assign( Spherical.prototype, {\n\n\t\tset: function ( radius, phi, theta ) {\n\n\t\t\tthis.radius = radius;\n\t\t\tthis.phi = phi;\n\t\t\tthis.theta = theta;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( other ) {\n\n\t\t\tthis.radius = other.radius;\n\t\t\tthis.phi = other.phi;\n\t\t\tthis.theta = other.theta;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// restrict phi to be betwee EPS and PI-EPS\n\t\tmakeSafe: function () {\n\n\t\t\tvar EPS = 0.000001;\n\t\t\tthis.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromVector3: function ( v ) {\n\n\t\t\treturn this.setFromCartesianCoords( v.x, v.y, v.z );\n\n\t\t},\n\n\t\tsetFromCartesianCoords: function ( x, y, z ) {\n\n\t\t\tthis.radius = Math.sqrt( x * x + y * y + z * z );\n\n\t\t\tif ( this.radius === 0 ) {\n\n\t\t\t\tthis.theta = 0;\n\t\t\t\tthis.phi = 0;\n\n\t\t\t} else {\n\n\t\t\t\tthis.theta = Math.atan2( x, z );\n\t\t\t\tthis.phi = Math.acos( MathUtils.clamp( y / this.radius, - 1, 1 ) );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system\n\t *\n\t */\n\n\tfunction Cylindrical( radius, theta, y ) {\n\n\t\tthis.radius = ( radius !== undefined ) ? radius : 1.0; // distance from the origin to a point in the x-z plane\n\t\tthis.theta = ( theta !== undefined ) ? theta : 0; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis\n\t\tthis.y = ( y !== undefined ) ? y : 0; // height above the x-z plane\n\n\t\treturn this;\n\n\t}\n\n\tObject.assign( Cylindrical.prototype, {\n\n\t\tset: function ( radius, theta, y ) {\n\n\t\t\tthis.radius = radius;\n\t\t\tthis.theta = theta;\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( other ) {\n\n\t\t\tthis.radius = other.radius;\n\t\t\tthis.theta = other.theta;\n\t\t\tthis.y = other.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromVector3: function ( v ) {\n\n\t\t\treturn this.setFromCartesianCoords( v.x, v.y, v.z );\n\n\t\t},\n\n\t\tsetFromCartesianCoords: function ( x, y, z ) {\n\n\t\t\tthis.radius = Math.sqrt( x * x + z * z );\n\t\t\tthis.theta = Math.atan2( x, z );\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t */\n\n\tvar _vector$7 = new Vector2();\n\n\tfunction Box2( min, max ) {\n\n\t\tthis.min = ( min !== undefined ) ? min : new Vector2( + Infinity, + Infinity );\n\t\tthis.max = ( max !== undefined ) ? max : new Vector2( - Infinity, - Infinity );\n\n\t}\n\n\tObject.assign( Box2.prototype, {\n\n\t\tset: function ( min, max ) {\n\n\t\t\tthis.min.copy( min );\n\t\t\tthis.max.copy( max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tthis.makeEmpty();\n\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromCenterAndSize: function ( center, size ) {\n\n\t\t\tvar halfSize = _vector$7.copy( size ).multiplyScalar( 0.5 );\n\t\t\tthis.min.copy( center ).sub( halfSize );\n\t\t\tthis.max.copy( center ).add( halfSize );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( box ) {\n\n\t\t\tthis.min.copy( box.min );\n\t\t\tthis.max.copy( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeEmpty: function () {\n\n\t\t\tthis.min.x = this.min.y = + Infinity;\n\t\t\tthis.max.x = this.max.y = - Infinity;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tisEmpty: function () {\n\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\n\n\t\t},\n\n\t\tgetCenter: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box2: .getCenter() target is now required' );\n\t\t\t\ttarget = new Vector2();\n\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set( 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t\t},\n\n\t\tgetSize: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box2: .getSize() target is now required' );\n\t\t\t\ttarget = new Vector2();\n\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set( 0, 0 ) : target.subVectors( this.max, this.min );\n\n\t\t},\n\n\t\texpandByPoint: function ( point ) {\n\n\t\t\tthis.min.min( point );\n\t\t\tthis.max.max( point );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByVector: function ( vector ) {\n\n\t\t\tthis.min.sub( vector );\n\t\t\tthis.max.add( vector );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByScalar: function ( scalar ) {\n\n\t\t\tthis.min.addScalar( - scalar );\n\t\t\tthis.max.addScalar( scalar );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\treturn point.x < this.min.x || point.x > this.max.x ||\n\t\t\t\tpoint.y < this.min.y || point.y > this.max.y ? false : true;\n\n\t\t},\n\n\t\tcontainsBox: function ( box ) {\n\n\t\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\n\t\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y;\n\n\t\t},\n\n\t\tgetParameter: function ( point, target ) {\n\n\t\t\t// This can potentially have a divide by zero if the box\n\t\t\t// has a size dimension of 0.\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box2: .getParameter() target is now required' );\n\t\t\t\ttarget = new Vector2();\n\n\t\t\t}\n\n\t\t\treturn target.set(\n\t\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y )\n\t\t\t);\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\t// using 4 splitting planes to rule out intersections\n\n\t\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ? false : true;\n\n\t\t},\n\n\t\tclampPoint: function ( point, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box2: .clampPoint() target is now required' );\n\t\t\t\ttarget = new Vector2();\n\n\t\t\t}\n\n\t\t\treturn target.copy( point ).clamp( this.min, this.max );\n\n\t\t},\n\n\t\tdistanceToPoint: function ( point ) {\n\n\t\t\tvar clampedPoint = _vector$7.copy( point ).clamp( this.min, this.max );\n\t\t\treturn clampedPoint.sub( point ).length();\n\n\t\t},\n\n\t\tintersect: function ( box ) {\n\n\t\t\tthis.min.max( box.min );\n\t\t\tthis.max.min( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tunion: function ( box ) {\n\n\t\t\tthis.min.min( box.min );\n\t\t\tthis.max.max( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( offset ) {\n\n\t\t\tthis.min.add( offset );\n\t\t\tthis.max.add( offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( box ) {\n\n\t\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t */\n\n\tvar _startP = new Vector3();\n\tvar _startEnd = new Vector3();\n\n\tfunction Line3( start, end ) {\n\n\t\tthis.start = ( start !== undefined ) ? start : new Vector3();\n\t\tthis.end = ( end !== undefined ) ? end : new Vector3();\n\n\t}\n\n\tObject.assign( Line3.prototype, {\n\n\t\tset: function ( start, end ) {\n\n\t\t\tthis.start.copy( start );\n\t\t\tthis.end.copy( end );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( line ) {\n\n\t\t\tthis.start.copy( line.start );\n\t\t\tthis.end.copy( line.end );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetCenter: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Line3: .getCenter() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.addVectors( this.start, this.end ).multiplyScalar( 0.5 );\n\n\t\t},\n\n\t\tdelta: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Line3: .delta() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.subVectors( this.end, this.start );\n\n\t\t},\n\n\t\tdistanceSq: function () {\n\n\t\t\treturn this.start.distanceToSquared( this.end );\n\n\t\t},\n\n\t\tdistance: function () {\n\n\t\t\treturn this.start.distanceTo( this.end );\n\n\t\t},\n\n\t\tat: function ( t, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Line3: .at() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn this.delta( target ).multiplyScalar( t ).add( this.start );\n\n\t\t},\n\n\t\tclosestPointToPointParameter: function ( point, clampToLine ) {\n\n\t\t\t_startP.subVectors( point, this.start );\n\t\t\t_startEnd.subVectors( this.end, this.start );\n\n\t\t\tvar startEnd2 = _startEnd.dot( _startEnd );\n\t\t\tvar startEnd_startP = _startEnd.dot( _startP );\n\n\t\t\tvar t = startEnd_startP / startEnd2;\n\n\t\t\tif ( clampToLine ) {\n\n\t\t\t\tt = MathUtils.clamp( t, 0, 1 );\n\n\t\t\t}\n\n\t\t\treturn t;\n\n\t\t},\n\n\t\tclosestPointToPoint: function ( point, clampToLine, target ) {\n\n\t\t\tvar t = this.closestPointToPointParameter( point, clampToLine );\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Line3: .closestPointToPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn this.delta( target ).multiplyScalar( t ).add( this.start );\n\n\t\t},\n\n\t\tapplyMatrix4: function ( matrix ) {\n\n\t\t\tthis.start.applyMatrix4( matrix );\n\t\t\tthis.end.applyMatrix4( matrix );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( line ) {\n\n\t\t\treturn line.start.equals( this.start ) && line.end.equals( this.end );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction ImmediateRenderObject( material ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.material = material;\n\t\tthis.render = function ( /* renderCallback */ ) {};\n\n\t}\n\n\tImmediateRenderObject.prototype = Object.create( Object3D.prototype );\n\tImmediateRenderObject.prototype.constructor = ImmediateRenderObject;\n\n\tImmediateRenderObject.prototype.isImmediateRenderObject = true;\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tvar _vector$8 = new Vector3();\n\n\tfunction SpotLightHelper( light, color ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.color = color;\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tvar positions = [\n\t\t\t0, 0, 0, \t0, 0, 1,\n\t\t\t0, 0, 0, \t1, 0, 1,\n\t\t\t0, 0, 0,\t- 1, 0, 1,\n\t\t\t0, 0, 0, \t0, 1, 1,\n\t\t\t0, 0, 0, \t0, - 1, 1\n\t\t];\n\n\t\tfor ( var i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {\n\n\t\t\tvar p1 = ( i / l ) * Math.PI * 2;\n\t\t\tvar p2 = ( j / l ) * Math.PI * 2;\n\n\t\t\tpositions.push(\n\t\t\t\tMath.cos( p1 ), Math.sin( p1 ), 1,\n\t\t\t\tMath.cos( p2 ), Math.sin( p2 ), 1\n\t\t\t);\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { fog: false } );\n\n\t\tthis.cone = new LineSegments( geometry, material );\n\t\tthis.add( this.cone );\n\n\t\tthis.update();\n\n\t}\n\n\tSpotLightHelper.prototype = Object.create( Object3D.prototype );\n\tSpotLightHelper.prototype.constructor = SpotLightHelper;\n\n\tSpotLightHelper.prototype.dispose = function () {\n\n\t\tthis.cone.geometry.dispose();\n\t\tthis.cone.material.dispose();\n\n\t};\n\n\tSpotLightHelper.prototype.update = function () {\n\n\t\tthis.light.updateMatrixWorld();\n\n\t\tvar coneLength = this.light.distance ? this.light.distance : 1000;\n\t\tvar coneWidth = coneLength * Math.tan( this.light.angle );\n\n\t\tthis.cone.scale.set( coneWidth, coneWidth, coneLength );\n\n\t\t_vector$8.setFromMatrixPosition( this.light.target.matrixWorld );\n\n\t\tthis.cone.lookAt( _vector$8 );\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.cone.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.cone.material.color.copy( this.light.color );\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author Sean Griffin / http://twitter.com/sgrif\n\t * @author Michael Guerrero / http://realitymeltdown.com\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author ikerr / http://verold.com\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tvar _vector$9 = new Vector3();\n\tvar _boneMatrix = new Matrix4();\n\tvar _matrixWorldInv = new Matrix4();\n\n\tfunction getBoneList( object ) {\n\n\t\tvar boneList = [];\n\n\t\tif ( object && object.isBone ) {\n\n\t\t\tboneList.push( object );\n\n\t\t}\n\n\t\tfor ( var i = 0; i < object.children.length; i ++ ) {\n\n\t\t\tboneList.push.apply( boneList, getBoneList( object.children[ i ] ) );\n\n\t\t}\n\n\t\treturn boneList;\n\n\t}\n\n\tfunction SkeletonHelper( object ) {\n\n\t\tvar bones = getBoneList( object );\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tvar vertices = [];\n\t\tvar colors = [];\n\n\t\tvar color1 = new Color( 0, 0, 1 );\n\t\tvar color2 = new Color( 0, 1, 0 );\n\n\t\tfor ( var i = 0; i < bones.length; i ++ ) {\n\n\t\t\tvar bone = bones[ i ];\n\n\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\tvertices.push( 0, 0, 0 );\n\t\t\t\tvertices.push( 0, 0, 0 );\n\t\t\t\tcolors.push( color1.r, color1.g, color1.b );\n\t\t\t\tcolors.push( color2.r, color2.g, color2.b );\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { vertexColors: VertexColors, depthTest: false, depthWrite: false, transparent: true } );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t\tthis.root = object;\n\t\tthis.bones = bones;\n\n\t\tthis.matrix = object.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t}\n\n\tSkeletonHelper.prototype = Object.create( LineSegments.prototype );\n\tSkeletonHelper.prototype.constructor = SkeletonHelper;\n\n\tSkeletonHelper.prototype.updateMatrixWorld = function ( force ) {\n\n\t\tvar bones = this.bones;\n\n\t\tvar geometry = this.geometry;\n\t\tvar position = geometry.getAttribute( 'position' );\n\n\t\t_matrixWorldInv.getInverse( this.root.matrixWorld );\n\n\t\tfor ( var i = 0, j = 0; i < bones.length; i ++ ) {\n\n\t\t\tvar bone = bones[ i ];\n\n\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\t_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.matrixWorld );\n\t\t\t\t_vector$9.setFromMatrixPosition( _boneMatrix );\n\t\t\t\tposition.setXYZ( j, _vector$9.x, _vector$9.y, _vector$9.z );\n\n\t\t\t\t_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.parent.matrixWorld );\n\t\t\t\t_vector$9.setFromMatrixPosition( _boneMatrix );\n\t\t\t\tposition.setXYZ( j + 1, _vector$9.x, _vector$9.y, _vector$9.z );\n\n\t\t\t\tj += 2;\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeometry.getAttribute( 'position' ).needsUpdate = true;\n\n\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction PointLightHelper( light, sphereSize, color ) {\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.color = color;\n\n\t\tvar geometry = new SphereBufferGeometry( sphereSize, 4, 2 );\n\t\tvar material = new MeshBasicMaterial( { wireframe: true, fog: false } );\n\n\t\tMesh.call( this, geometry, material );\n\n\t\tthis.matrix = this.light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.update();\n\n\n\t\t/*\n\t\tvar distanceGeometry = new THREE.IcosahedronBufferGeometry( 1, 2 );\n\t\tvar distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n\n\t\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n\t\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n\n\t\tvar d = light.distance;\n\n\t\tif ( d === 0.0 ) {\n\n\t\t\tthis.lightDistance.visible = false;\n\n\t\t} else {\n\n\t\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t\t}\n\n\t\tthis.add( this.lightDistance );\n\t\t*/\n\n\t}\n\n\tPointLightHelper.prototype = Object.create( Mesh.prototype );\n\tPointLightHelper.prototype.constructor = PointLightHelper;\n\n\tPointLightHelper.prototype.dispose = function () {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t};\n\n\tPointLightHelper.prototype.update = function () {\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.material.color.copy( this.light.color );\n\n\t\t}\n\n\t\t/*\n\t\tvar d = this.light.distance;\n\n\t\tif ( d === 0.0 ) {\n\n\t\t\tthis.lightDistance.visible = false;\n\n\t\t} else {\n\n\t\t\tthis.lightDistance.visible = true;\n\t\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t\t}\n\t\t*/\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tvar _vector$a = new Vector3();\n\tvar _color1 = new Color();\n\tvar _color2 = new Color();\n\n\tfunction HemisphereLightHelper( light, size, color ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.color = color;\n\n\t\tvar geometry = new OctahedronBufferGeometry( size );\n\t\tgeometry.rotateY( Math.PI * 0.5 );\n\n\t\tthis.material = new MeshBasicMaterial( { wireframe: true, fog: false } );\n\t\tif ( this.color === undefined ) { this.material.vertexColors = VertexColors; }\n\n\t\tvar position = geometry.getAttribute( 'position' );\n\t\tvar colors = new Float32Array( position.count * 3 );\n\n\t\tgeometry.setAttribute( 'color', new BufferAttribute( colors, 3 ) );\n\n\t\tthis.add( new Mesh( geometry, this.material ) );\n\n\t\tthis.update();\n\n\t}\n\n\tHemisphereLightHelper.prototype = Object.create( Object3D.prototype );\n\tHemisphereLightHelper.prototype.constructor = HemisphereLightHelper;\n\n\tHemisphereLightHelper.prototype.dispose = function () {\n\n\t\tthis.children[ 0 ].geometry.dispose();\n\t\tthis.children[ 0 ].material.dispose();\n\n\t};\n\n\tHemisphereLightHelper.prototype.update = function () {\n\n\t\tvar mesh = this.children[ 0 ];\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tvar colors = mesh.geometry.getAttribute( 'color' );\n\n\t\t\t_color1.copy( this.light.color );\n\t\t\t_color2.copy( this.light.groundColor );\n\n\t\t\tfor ( var i = 0, l = colors.count; i < l; i ++ ) {\n\n\t\t\t\tvar color = ( i < ( l / 2 ) ) ? _color1 : _color2;\n\n\t\t\t\tcolors.setXYZ( i, color.r, color.g, color.b );\n\n\t\t\t}\n\n\t\t\tcolors.needsUpdate = true;\n\n\t\t}\n\n\t\tmesh.lookAt( _vector$a.setFromMatrixPosition( this.light.matrixWorld ).negate() );\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction GridHelper( size, divisions, color1, color2 ) {\n\n\t\tsize = size || 10;\n\t\tdivisions = divisions || 10;\n\t\tcolor1 = new Color( color1 !== undefined ? color1 : 0x444444 );\n\t\tcolor2 = new Color( color2 !== undefined ? color2 : 0x888888 );\n\n\t\tvar center = divisions / 2;\n\t\tvar step = size / divisions;\n\t\tvar halfSize = size / 2;\n\n\t\tvar vertices = [], colors = [];\n\n\t\tfor ( var i = 0, j = 0, k = - halfSize; i <= divisions; i ++, k += step ) {\n\n\t\t\tvertices.push( - halfSize, 0, k, halfSize, 0, k );\n\t\t\tvertices.push( k, 0, - halfSize, k, 0, halfSize );\n\n\t\t\tvar color = i === center ? color1 : color2;\n\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\n\t\t}\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t}\n\n\tGridHelper.prototype = Object.assign( Object.create( LineSegments.prototype ), {\n\n\t\tconstructor: GridHelper,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLineSegments.prototype.copy.call( this, source );\n\n\t\t\tthis.geometry.copy( source.geometry );\n\t\t\tthis.material.copy( source.material );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / http://github.com/Mugen87\n\t * @author Hectate / http://www.github.com/Hectate\n\t */\n\n\tfunction PolarGridHelper( radius, radials, circles, divisions, color1, color2 ) {\n\n\t\tradius = radius || 10;\n\t\tradials = radials || 16;\n\t\tcircles = circles || 8;\n\t\tdivisions = divisions || 64;\n\t\tcolor1 = new Color( color1 !== undefined ? color1 : 0x444444 );\n\t\tcolor2 = new Color( color2 !== undefined ? color2 : 0x888888 );\n\n\t\tvar vertices = [];\n\t\tvar colors = [];\n\n\t\tvar x, z;\n\t\tvar v, i, j, r, color;\n\n\t\t// create the radials\n\n\t\tfor ( i = 0; i <= radials; i ++ ) {\n\n\t\t\tv = ( i / radials ) * ( Math.PI * 2 );\n\n\t\t\tx = Math.sin( v ) * radius;\n\t\t\tz = Math.cos( v ) * radius;\n\n\t\t\tvertices.push( 0, 0, 0 );\n\t\t\tvertices.push( x, 0, z );\n\n\t\t\tcolor = ( i & 1 ) ? color1 : color2;\n\n\t\t\tcolors.push( color.r, color.g, color.b );\n\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t}\n\n\t\t// create the circles\n\n\t\tfor ( i = 0; i <= circles; i ++ ) {\n\n\t\t\tcolor = ( i & 1 ) ? color1 : color2;\n\n\t\t\tr = radius - ( radius / circles * i );\n\n\t\t\tfor ( j = 0; j < divisions; j ++ ) {\n\n\t\t\t\t// first vertex\n\n\t\t\t\tv = ( j / divisions ) * ( Math.PI * 2 );\n\n\t\t\t\tx = Math.sin( v ) * r;\n\t\t\t\tz = Math.cos( v ) * r;\n\n\t\t\t\tvertices.push( x, 0, z );\n\t\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\t\t// second vertex\n\n\t\t\t\tv = ( ( j + 1 ) / divisions ) * ( Math.PI * 2 );\n\n\t\t\t\tx = Math.sin( v ) * r;\n\t\t\t\tz = Math.cos( v ) * r;\n\n\t\t\t\tvertices.push( x, 0, z );\n\t\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t}\n\n\tPolarGridHelper.prototype = Object.create( LineSegments.prototype );\n\tPolarGridHelper.prototype.constructor = PolarGridHelper;\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tvar _v1$5 = new Vector3();\n\tvar _v2$3 = new Vector3();\n\tvar _v3$1 = new Vector3();\n\n\tfunction DirectionalLightHelper( light, size, color ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.color = color;\n\n\t\tif ( size === undefined ) { size = 1; }\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( [\n\t\t\t- size, size, 0,\n\t\t\tsize, size, 0,\n\t\t\tsize, - size, 0,\n\t\t\t- size, - size, 0,\n\t\t\t- size, size, 0\n\t\t], 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { fog: false } );\n\n\t\tthis.lightPlane = new Line( geometry, material );\n\t\tthis.add( this.lightPlane );\n\n\t\tgeometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );\n\n\t\tthis.targetLine = new Line( geometry, material );\n\t\tthis.add( this.targetLine );\n\n\t\tthis.update();\n\n\t}\n\n\tDirectionalLightHelper.prototype = Object.create( Object3D.prototype );\n\tDirectionalLightHelper.prototype.constructor = DirectionalLightHelper;\n\n\tDirectionalLightHelper.prototype.dispose = function () {\n\n\t\tthis.lightPlane.geometry.dispose();\n\t\tthis.lightPlane.material.dispose();\n\t\tthis.targetLine.geometry.dispose();\n\t\tthis.targetLine.material.dispose();\n\n\t};\n\n\tDirectionalLightHelper.prototype.update = function () {\n\n\t\t_v1$5.setFromMatrixPosition( this.light.matrixWorld );\n\t\t_v2$3.setFromMatrixPosition( this.light.target.matrixWorld );\n\t\t_v3$1.subVectors( _v2$3, _v1$5 );\n\n\t\tthis.lightPlane.lookAt( _v2$3 );\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.lightPlane.material.color.set( this.color );\n\t\t\tthis.targetLine.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.lightPlane.material.color.copy( this.light.color );\n\t\t\tthis.targetLine.material.color.copy( this.light.color );\n\n\t\t}\n\n\t\tthis.targetLine.lookAt( _v2$3 );\n\t\tthis.targetLine.scale.z = _v3$1.length();\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t *\t- shows frustum, line of sight and up of the camera\n\t *\t- suitable for fast updates\n\t * \t- based on frustum visualization in lightgl.js shadowmap example\n\t *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\n\t */\n\n\tvar _vector$b = new Vector3();\n\tvar _camera = new Camera();\n\n\tfunction CameraHelper( camera ) {\n\n\t\tvar geometry = new BufferGeometry();\n\t\tvar material = new LineBasicMaterial( { color: 0xffffff, vertexColors: FaceColors } );\n\n\t\tvar vertices = [];\n\t\tvar colors = [];\n\n\t\tvar pointMap = {};\n\n\t\t// colors\n\n\t\tvar colorFrustum = new Color( 0xffaa00 );\n\t\tvar colorCone = new Color( 0xff0000 );\n\t\tvar colorUp = new Color( 0x00aaff );\n\t\tvar colorTarget = new Color( 0xffffff );\n\t\tvar colorCross = new Color( 0x333333 );\n\n\t\t// near\n\n\t\taddLine( 'n1', 'n2', colorFrustum );\n\t\taddLine( 'n2', 'n4', colorFrustum );\n\t\taddLine( 'n4', 'n3', colorFrustum );\n\t\taddLine( 'n3', 'n1', colorFrustum );\n\n\t\t// far\n\n\t\taddLine( 'f1', 'f2', colorFrustum );\n\t\taddLine( 'f2', 'f4', colorFrustum );\n\t\taddLine( 'f4', 'f3', colorFrustum );\n\t\taddLine( 'f3', 'f1', colorFrustum );\n\n\t\t// sides\n\n\t\taddLine( 'n1', 'f1', colorFrustum );\n\t\taddLine( 'n2', 'f2', colorFrustum );\n\t\taddLine( 'n3', 'f3', colorFrustum );\n\t\taddLine( 'n4', 'f4', colorFrustum );\n\n\t\t// cone\n\n\t\taddLine( 'p', 'n1', colorCone );\n\t\taddLine( 'p', 'n2', colorCone );\n\t\taddLine( 'p', 'n3', colorCone );\n\t\taddLine( 'p', 'n4', colorCone );\n\n\t\t// up\n\n\t\taddLine( 'u1', 'u2', colorUp );\n\t\taddLine( 'u2', 'u3', colorUp );\n\t\taddLine( 'u3', 'u1', colorUp );\n\n\t\t// target\n\n\t\taddLine( 'c', 't', colorTarget );\n\t\taddLine( 'p', 'c', colorCross );\n\n\t\t// cross\n\n\t\taddLine( 'cn1', 'cn2', colorCross );\n\t\taddLine( 'cn3', 'cn4', colorCross );\n\n\t\taddLine( 'cf1', 'cf2', colorCross );\n\t\taddLine( 'cf3', 'cf4', colorCross );\n\n\t\tfunction addLine( a, b, color ) {\n\n\t\t\taddPoint( a, color );\n\t\t\taddPoint( b, color );\n\n\t\t}\n\n\t\tfunction addPoint( id, color ) {\n\n\t\t\tvertices.push( 0, 0, 0 );\n\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\tif ( pointMap[ id ] === undefined ) {\n\n\t\t\t\tpointMap[ id ] = [];\n\n\t\t\t}\n\n\t\t\tpointMap[ id ].push( ( vertices.length / 3 ) - 1 );\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t\tthis.camera = camera;\n\t\tif ( this.camera.updateProjectionMatrix ) { this.camera.updateProjectionMatrix(); }\n\n\t\tthis.matrix = camera.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.pointMap = pointMap;\n\n\t\tthis.update();\n\n\t}\n\n\tCameraHelper.prototype = Object.create( LineSegments.prototype );\n\tCameraHelper.prototype.constructor = CameraHelper;\n\n\tCameraHelper.prototype.update = function () {\n\n\t\tvar geometry = this.geometry;\n\t\tvar pointMap = this.pointMap;\n\n\t\tvar w = 1, h = 1;\n\n\t\t// we need just camera projection matrix inverse\n\t\t// world matrix must be identity\n\n\t\t_camera.projectionMatrixInverse.copy( this.camera.projectionMatrixInverse );\n\n\t\t// center / target\n\n\t\tsetPoint( 'c', pointMap, geometry, _camera, 0, 0, - 1 );\n\t\tsetPoint( 't', pointMap, geometry, _camera, 0, 0, 1 );\n\n\t\t// near\n\n\t\tsetPoint( 'n1', pointMap, geometry, _camera, - w, - h, - 1 );\n\t\tsetPoint( 'n2', pointMap, geometry, _camera, w, - h, - 1 );\n\t\tsetPoint( 'n3', pointMap, geometry, _camera, - w, h, - 1 );\n\t\tsetPoint( 'n4', pointMap, geometry, _camera, w, h, - 1 );\n\n\t\t// far\n\n\t\tsetPoint( 'f1', pointMap, geometry, _camera, - w, - h, 1 );\n\t\tsetPoint( 'f2', pointMap, geometry, _camera, w, - h, 1 );\n\t\tsetPoint( 'f3', pointMap, geometry, _camera, - w, h, 1 );\n\t\tsetPoint( 'f4', pointMap, geometry, _camera, w, h, 1 );\n\n\t\t// up\n\n\t\tsetPoint( 'u1', pointMap, geometry, _camera, w * 0.7, h * 1.1, - 1 );\n\t\tsetPoint( 'u2', pointMap, geometry, _camera, - w * 0.7, h * 1.1, - 1 );\n\t\tsetPoint( 'u3', pointMap, geometry, _camera, 0, h * 2, - 1 );\n\n\t\t// cross\n\n\t\tsetPoint( 'cf1', pointMap, geometry, _camera, - w, 0, 1 );\n\t\tsetPoint( 'cf2', pointMap, geometry, _camera, w, 0, 1 );\n\t\tsetPoint( 'cf3', pointMap, geometry, _camera, 0, - h, 1 );\n\t\tsetPoint( 'cf4', pointMap, geometry, _camera, 0, h, 1 );\n\n\t\tsetPoint( 'cn1', pointMap, geometry, _camera, - w, 0, - 1 );\n\t\tsetPoint( 'cn2', pointMap, geometry, _camera, w, 0, - 1 );\n\t\tsetPoint( 'cn3', pointMap, geometry, _camera, 0, - h, - 1 );\n\t\tsetPoint( 'cn4', pointMap, geometry, _camera, 0, h, - 1 );\n\n\t\tgeometry.getAttribute( 'position' ).needsUpdate = true;\n\n\t};\n\n\tfunction setPoint( point, pointMap, geometry, camera, x, y, z ) {\n\n\t\t_vector$b.set( x, y, z ).unproject( camera );\n\n\t\tvar points = pointMap[ point ];\n\n\t\tif ( points !== undefined ) {\n\n\t\t\tvar position = geometry.getAttribute( 'position' );\n\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tposition.setXYZ( points[ i ], _vector$b.x, _vector$b.y, _vector$b.z );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / http://github.com/Mugen87\n\t */\n\n\tvar _box$3 = new Box3();\n\n\tfunction BoxHelper( object, color ) {\n\n\t\tthis.object = object;\n\n\t\tif ( color === undefined ) { color = 0xffff00; }\n\n\t\tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\t\tvar positions = new Float32Array( 8 * 3 );\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n\t\tgeometry.setAttribute( 'position', new BufferAttribute( positions, 3 ) );\n\n\t\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );\n\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.update();\n\n\t}\n\n\tBoxHelper.prototype = Object.create( LineSegments.prototype );\n\tBoxHelper.prototype.constructor = BoxHelper;\n\n\tBoxHelper.prototype.update = function ( object ) {\n\n\t\tif ( object !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.BoxHelper: .update() has no longer arguments.' );\n\n\t\t}\n\n\t\tif ( this.object !== undefined ) {\n\n\t\t\t_box$3.setFromObject( this.object );\n\n\t\t}\n\n\t\tif ( _box$3.isEmpty() ) { return; }\n\n\t\tvar min = _box$3.min;\n\t\tvar max = _box$3.max;\n\n\t\t/*\n\t\t  5____4\n\t\t1/___0/|\n\t\t| 6__|_7\n\t\t2/___3/\n\n\t\t0: max.x, max.y, max.z\n\t\t1: min.x, max.y, max.z\n\t\t2: min.x, min.y, max.z\n\t\t3: max.x, min.y, max.z\n\t\t4: max.x, max.y, min.z\n\t\t5: min.x, max.y, min.z\n\t\t6: min.x, min.y, min.z\n\t\t7: max.x, min.y, min.z\n\t\t*/\n\n\t\tvar position = this.geometry.attributes.position;\n\t\tvar array = position.array;\n\n\t\tarray[ 0 ] = max.x; array[ 1 ] = max.y; array[ 2 ] = max.z;\n\t\tarray[ 3 ] = min.x; array[ 4 ] = max.y; array[ 5 ] = max.z;\n\t\tarray[ 6 ] = min.x; array[ 7 ] = min.y; array[ 8 ] = max.z;\n\t\tarray[ 9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;\n\t\tarray[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;\n\t\tarray[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;\n\t\tarray[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;\n\t\tarray[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;\n\n\t\tposition.needsUpdate = true;\n\n\t\tthis.geometry.computeBoundingSphere();\n\n\n\t};\n\n\tBoxHelper.prototype.setFromObject = function ( object ) {\n\n\t\tthis.object = object;\n\t\tthis.update();\n\n\t\treturn this;\n\n\t};\n\n\tBoxHelper.prototype.copy = function ( source ) {\n\n\t\tLineSegments.prototype.copy.call( this, source );\n\n\t\tthis.object = source.object;\n\n\t\treturn this;\n\n\t};\n\n\tBoxHelper.prototype.clone = function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction Box3Helper( box, color ) {\n\n\t\tthis.type = 'Box3Helper';\n\n\t\tthis.box = box;\n\n\t\tcolor = color || 0xffff00;\n\n\t\tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\n\t\tvar positions = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, - 1, - 1, 1, - 1, - 1, - 1, - 1, 1, - 1, - 1 ];\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\n\t\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );\n\n\t\tthis.geometry.computeBoundingSphere();\n\n\t}\n\n\tBox3Helper.prototype = Object.create( LineSegments.prototype );\n\tBox3Helper.prototype.constructor = Box3Helper;\n\n\tBox3Helper.prototype.updateMatrixWorld = function ( force ) {\n\n\t\tvar box = this.box;\n\n\t\tif ( box.isEmpty() ) { return; }\n\n\t\tbox.getCenter( this.position );\n\n\t\tbox.getSize( this.scale );\n\n\t\tthis.scale.multiplyScalar( 0.5 );\n\n\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction PlaneHelper( plane, size, hex ) {\n\n\t\tthis.type = 'PlaneHelper';\n\n\t\tthis.plane = plane;\n\n\t\tthis.size = ( size === undefined ) ? 1 : size;\n\n\t\tvar color = ( hex !== undefined ) ? hex : 0xffff00;\n\n\t\tvar positions = [ 1, - 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0 ];\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\t\tgeometry.computeBoundingSphere();\n\n\t\tLine.call( this, geometry, new LineBasicMaterial( { color: color } ) );\n\n\t\t//\n\n\t\tvar positions2 = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, - 1, 1, 1, - 1, 1 ];\n\n\t\tvar geometry2 = new BufferGeometry();\n\t\tgeometry2.setAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );\n\t\tgeometry2.computeBoundingSphere();\n\n\t\tthis.add( new Mesh( geometry2, new MeshBasicMaterial( { color: color, opacity: 0.2, transparent: true, depthWrite: false } ) ) );\n\n\t}\n\n\tPlaneHelper.prototype = Object.create( Line.prototype );\n\tPlaneHelper.prototype.constructor = PlaneHelper;\n\n\tPlaneHelper.prototype.updateMatrixWorld = function ( force ) {\n\n\t\tvar scale = - this.plane.constant;\n\n\t\tif ( Math.abs( scale ) < 1e-8 ) { scale = 1e-8; } // sign does not matter\n\n\t\tthis.scale.set( 0.5 * this.size, 0.5 * this.size, scale );\n\n\t\tthis.children[ 0 ].material.side = ( scale < 0 ) ? BackSide : FrontSide; // renderer flips side when determinant < 0; flipping not wanted here\n\n\t\tthis.lookAt( this.plane.normal );\n\n\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author zz85 / http://github.com/zz85\n\t * @author bhouston / http://clara.io\n\t *\n\t * Creates an arrow for visualizing directions\n\t *\n\t * Parameters:\n\t *  dir - Vector3\n\t *  origin - Vector3\n\t *  length - Number\n\t *  color - color in hex value\n\t *  headLength - Number\n\t *  headWidth - Number\n\t */\n\n\tvar _axis = new Vector3();\n\tvar _lineGeometry, _coneGeometry;\n\n\tfunction ArrowHelper( dir, origin, length, color, headLength, headWidth ) {\n\n\t\t// dir is assumed to be normalized\n\n\t\tObject3D.call( this );\n\n\t\tif ( dir === undefined ) { dir = new Vector3( 0, 0, 1 ); }\n\t\tif ( origin === undefined ) { origin = new Vector3( 0, 0, 0 ); }\n\t\tif ( length === undefined ) { length = 1; }\n\t\tif ( color === undefined ) { color = 0xffff00; }\n\t\tif ( headLength === undefined ) { headLength = 0.2 * length; }\n\t\tif ( headWidth === undefined ) { headWidth = 0.2 * headLength; }\n\n\t\tif ( _lineGeometry === undefined ) {\n\n\t\t\t_lineGeometry = new BufferGeometry();\n\t\t\t_lineGeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );\n\n\t\t\t_coneGeometry = new CylinderBufferGeometry( 0, 0.5, 1, 5, 1 );\n\t\t\t_coneGeometry.translate( 0, - 0.5, 0 );\n\n\t\t}\n\n\t\tthis.position.copy( origin );\n\n\t\tthis.line = new Line( _lineGeometry, new LineBasicMaterial( { color: color } ) );\n\t\tthis.line.matrixAutoUpdate = false;\n\t\tthis.add( this.line );\n\n\t\tthis.cone = new Mesh( _coneGeometry, new MeshBasicMaterial( { color: color } ) );\n\t\tthis.cone.matrixAutoUpdate = false;\n\t\tthis.add( this.cone );\n\n\t\tthis.setDirection( dir );\n\t\tthis.setLength( length, headLength, headWidth );\n\n\t}\n\n\tArrowHelper.prototype = Object.create( Object3D.prototype );\n\tArrowHelper.prototype.constructor = ArrowHelper;\n\n\tArrowHelper.prototype.setDirection = function ( dir ) {\n\n\t\t// dir is assumed to be normalized\n\n\t\tif ( dir.y > 0.99999 ) {\n\n\t\t\tthis.quaternion.set( 0, 0, 0, 1 );\n\n\t\t} else if ( dir.y < - 0.99999 ) {\n\n\t\t\tthis.quaternion.set( 1, 0, 0, 0 );\n\n\t\t} else {\n\n\t\t\t_axis.set( dir.z, 0, - dir.x ).normalize();\n\n\t\t\tvar radians = Math.acos( dir.y );\n\n\t\t\tthis.quaternion.setFromAxisAngle( _axis, radians );\n\n\t\t}\n\n\t};\n\n\tArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {\n\n\t\tif ( headLength === undefined ) { headLength = 0.2 * length; }\n\t\tif ( headWidth === undefined ) { headWidth = 0.2 * headLength; }\n\n\t\tthis.line.scale.set( 1, Math.max( 0.0001, length - headLength ), 1 ); // see #17458\n\t\tthis.line.updateMatrix();\n\n\t\tthis.cone.scale.set( headWidth, headLength, headWidth );\n\t\tthis.cone.position.y = length;\n\t\tthis.cone.updateMatrix();\n\n\t};\n\n\tArrowHelper.prototype.setColor = function ( color ) {\n\n\t\tthis.line.material.color.set( color );\n\t\tthis.cone.material.color.set( color );\n\n\t};\n\n\tArrowHelper.prototype.copy = function ( source ) {\n\n\t\tObject3D.prototype.copy.call( this, source, false );\n\n\t\tthis.line.copy( source.line );\n\t\tthis.cone.copy( source.cone );\n\n\t\treturn this;\n\n\t};\n\n\tArrowHelper.prototype.clone = function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t};\n\n\t/**\n\t * @author sroucheray / http://sroucheray.org/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction AxesHelper( size ) {\n\n\t\tsize = size || 1;\n\n\t\tvar vertices = [\n\t\t\t0, 0, 0,\tsize, 0, 0,\n\t\t\t0, 0, 0,\t0, size, 0,\n\t\t\t0, 0, 0,\t0, 0, size\n\t\t];\n\n\t\tvar colors = [\n\t\t\t1, 0, 0,\t1, 0.6, 0,\n\t\t\t0, 1, 0,\t0.6, 1, 0,\n\t\t\t0, 0, 1,\t0, 0.6, 1\n\t\t];\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t}\n\n\tAxesHelper.prototype = Object.create( LineSegments.prototype );\n\tAxesHelper.prototype.constructor = AxesHelper;\n\n\t/**\n\t * @author Emmett Lalish / elalish\n\t *\n\t * This class generates a Prefiltered, Mipmapped Radiance Environment Map\n\t * (PMREM) from a cubeMap environment texture. This allows different levels of\n\t * blur to be quickly accessed based on material roughness. It is packed into a\n\t * special CubeUV format that allows us to perform custom interpolation so that\n\t * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap\n\t * chain, it only goes down to the LOD_MIN level (above), and then creates extra\n\t * even more filtered 'mips' at the same LOD_MIN resolution, associated with\n\t * higher roughness levels. In this way we maintain resolution to smoothly\n\t * interpolate diffuse lighting while limiting sampling computation.\n\t */\n\n\tvar LOD_MIN = 4;\n\tvar LOD_MAX = 8;\n\tvar SIZE_MAX = Math.pow( 2, LOD_MAX );\n\t// The standard deviations (radians) associated with the extra mips. These are\n\t// chosen to approximate a Trowbridge-Reitz distribution function times the\n\t// geometric shadowing function. These sigma values squared must match the\n\t// variance #defines in cube_uv_reflection_fragment.glsl.js.\n\tvar EXTRA_LOD_SIGMA = [ 0.125, 0.215, 0.35, 0.446, 0.526, 0.582 ];\n\tvar TOTAL_LODS = LOD_MAX - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length;\n\t// The maximum length of the blur for loop. Smaller sigmas will use fewer\n\t// samples and exit early, but not recompile the shader.\n\tvar MAX_SAMPLES = 20;\n\tvar ENCODINGS = {};\n\tENCODINGS[ LinearEncoding ] = 0;\n\tENCODINGS[ sRGBEncoding ] = 1;\n\tENCODINGS[ RGBEEncoding ] = 2;\n\tENCODINGS[ RGBM7Encoding ] = 3;\n\tENCODINGS[ RGBM16Encoding ] = 4;\n\tENCODINGS[ RGBDEncoding ] = 5;\n\tENCODINGS[ GammaEncoding ] = 6;\n\n\tvar _flatCamera = new OrthographicCamera();\n\tvar _blurMaterial = _getBlurShader( MAX_SAMPLES );\n\tvar _equirectShader = null;\n\tvar _cubemapShader = null;\n\n\tvar ref = _createPlanes();\n\tvar _lodPlanes = ref._lodPlanes;\n\tvar _sizeLods = ref._sizeLods;\n\tvar _sigmas = ref._sigmas;\n\tvar _pingPongRenderTarget = null;\n\tvar _renderer = null;\n\n\tvar _oldTarget = null;\n\n\t// Golden Ratio\n\tvar PHI = ( 1 + Math.sqrt( 5 ) ) / 2;\n\tvar INV_PHI = 1 / PHI;\n\t// Vertices of a dodecahedron (except the opposites, which represent the\n\t// same axis), used as axis directions evenly spread on a sphere.\n\tvar _axisDirections = [\n\t\tnew Vector3( 1, 1, 1 ),\n\t\tnew Vector3( - 1, 1, 1 ),\n\t\tnew Vector3( 1, 1, - 1 ),\n\t\tnew Vector3( - 1, 1, - 1 ),\n\t\tnew Vector3( 0, PHI, INV_PHI ),\n\t\tnew Vector3( 0, PHI, - INV_PHI ),\n\t\tnew Vector3( INV_PHI, 0, PHI ),\n\t\tnew Vector3( - INV_PHI, 0, PHI ),\n\t\tnew Vector3( PHI, INV_PHI, 0 ),\n\t\tnew Vector3( - PHI, INV_PHI, 0 ) ];\n\n\tfunction PMREMGenerator( renderer ) {\n\n\t\t_renderer = renderer;\n\t\t_compileMaterial( _blurMaterial );\n\n\t}\n\n\tPMREMGenerator.prototype = {\n\n\t\tconstructor: PMREMGenerator,\n\n\t\t/**\n\t\t * Generates a PMREM from a supplied Scene, which can be faster than using an\n\t\t * image if networking bandwidth is low. Optional sigma specifies a blur radius\n\t\t * in radians to be applied to the scene before PMREM generation. Optional near\n\t\t * and far planes ensure the scene is rendered in its entirety (the cubeCamera\n\t\t * is placed at the origin).\n\t\t */\n\t\tfromScene: function ( scene, sigma, near, far ) {\n\t\t\tif ( sigma === void 0 ) sigma = 0;\n\t\t\tif ( near === void 0 ) near = 0.1;\n\t\t\tif ( far === void 0 ) far = 100;\n\n\n\t\t\t_oldTarget = _renderer.getRenderTarget();\n\t\t\tvar cubeUVRenderTarget = _allocateTargets();\n\t\t\t_sceneToCubeUV( scene, near, far, cubeUVRenderTarget );\n\t\t\tif ( sigma > 0 ) {\n\n\t\t\t\t_blur( cubeUVRenderTarget, 0, 0, sigma );\n\n\t\t\t}\n\t\t\t_applyPMREM( cubeUVRenderTarget );\n\t\t\t_cleanup( cubeUVRenderTarget );\n\n\t\t\treturn cubeUVRenderTarget;\n\n\t\t},\n\n\t\t/**\n\t\t * Generates a PMREM from an equirectangular texture, which can be either LDR\n\t\t * (RGBFormat) or HDR (RGBEFormat). The ideal input image size is 1k (1024 x 512),\n\t\t * as this matches best with the 256 x 256 cubemap output.\n\t\t */\n\t\tfromEquirectangular: function ( equirectangular ) {\n\n\t\t\tequirectangular.magFilter = NearestFilter;\n\t\t\tequirectangular.minFilter = NearestFilter;\n\t\t\tequirectangular.generateMipmaps = false;\n\n\t\t\treturn this.fromCubemap( equirectangular );\n\n\t\t},\n\n\t\t/**\n\t\t * Generates a PMREM from an cubemap texture, which can be either LDR\n\t\t * (RGBFormat) or HDR (RGBEFormat). The ideal input cube size is 256 x 256,\n\t\t * as this matches best with the 256 x 256 cubemap output.\n\t\t */\n\t\tfromCubemap: function ( cubemap ) {\n\n\t\t\t_oldTarget = _renderer.getRenderTarget();\n\t\t\tvar cubeUVRenderTarget = _allocateTargets( cubemap );\n\t\t\t_textureToCubeUV( cubemap, cubeUVRenderTarget );\n\t\t\t_applyPMREM( cubeUVRenderTarget );\n\t\t\t_cleanup( cubeUVRenderTarget );\n\n\t\t\treturn cubeUVRenderTarget;\n\n\t\t},\n\n\t\t/**\n\t\t * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during\n\t\t * your texture's network fetch for increased concurrency.\n\t\t */\n\t\tcompileCubemapShader: function () {\n\n\t\t\tif ( _cubemapShader == null ) {\n\n\t\t\t\t_cubemapShader = _getCubemapShader();\n\t\t\t\t_compileMaterial( _cubemapShader );\n\n\t\t\t}\n\n\t\t},\n\n\t\t/**\n\t\t * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during\n\t\t * your texture's network fetch for increased concurrency.\n\t\t */\n\t\tcompileEquirectangularShader: function () {\n\n\t\t\tif ( _equirectShader == null ) {\n\n\t\t\t\t_equirectShader = _getEquirectShader();\n\t\t\t\t_compileMaterial( _equirectShader );\n\n\t\t\t}\n\n\t\t},\n\n\t\t/**\n\t\t * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,\n\t\t * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on\n\t\t * one of them will cause any others to also become unusable.\n\t\t */\n\t\tdispose: function () {\n\n\t\t\t_blurMaterial.dispose();\n\n\t\t\tif ( _cubemapShader != null ) { _cubemapShader.dispose(); }\n\t\t\tif ( _equirectShader != null ) { _equirectShader.dispose(); }\n\n\t\t\tfor ( var i = 0; i < _lodPlanes.length; i ++ ) {\n\n\t\t\t\t_lodPlanes[ i ].dispose();\n\n\t\t\t}\n\n\t\t},\n\n\t};\n\n\tfunction _createPlanes() {\n\n\t\tvar _lodPlanes = [];\n\t\tvar _sizeLods = [];\n\t\tvar _sigmas = [];\n\n\t\tvar lod = LOD_MAX;\n\t\tfor ( var i = 0; i < TOTAL_LODS; i ++ ) {\n\n\t\t\tvar sizeLod = Math.pow( 2, lod );\n\t\t\t_sizeLods.push( sizeLod );\n\t\t\tvar sigma = 1.0 / sizeLod;\n\t\t\tif ( i > LOD_MAX - LOD_MIN ) {\n\n\t\t\t\tsigma = EXTRA_LOD_SIGMA[ i - LOD_MAX + LOD_MIN - 1 ];\n\n\t\t\t} else if ( i == 0 ) {\n\n\t\t\t\tsigma = 0;\n\n\t\t\t}\n\t\t\t_sigmas.push( sigma );\n\n\t\t\tvar texelSize = 1.0 / ( sizeLod - 1 );\n\t\t\tvar min = - texelSize / 2;\n\t\t\tvar max = 1 + texelSize / 2;\n\t\t\tvar uv1 = [ min, min, max, min, max, max, min, min, max, max, min, max ];\n\n\t\t\tvar cubeFaces = 6;\n\t\t\tvar vertices = 6;\n\t\t\tvar positionSize = 3;\n\t\t\tvar uvSize = 2;\n\t\t\tvar faceIndexSize = 1;\n\n\t\t\tvar position = new Float32Array( positionSize * vertices * cubeFaces );\n\t\t\tvar uv = new Float32Array( uvSize * vertices * cubeFaces );\n\t\t\tvar faceIndex = new Float32Array( faceIndexSize * vertices * cubeFaces );\n\n\t\t\tfor ( var face = 0; face < cubeFaces; face ++ ) {\n\n\t\t\t\tvar x = ( face % 3 ) * 2 / 3 - 1;\n\t\t\t\tvar y = face > 2 ? 0 : - 1;\n\t\t\t\tvar coordinates = [\n\t\t\t\t\tx, y, 0,\n\t\t\t\t\tx + 2 / 3, y, 0,\n\t\t\t\t\tx + 2 / 3, y + 1, 0,\n\t\t\t\t\tx, y, 0,\n\t\t\t\t\tx + 2 / 3, y + 1, 0,\n\t\t\t\t\tx, y + 1, 0\n\t\t\t\t];\n\t\t\t\tposition.set( coordinates, positionSize * vertices * face );\n\t\t\t\tuv.set( uv1, uvSize * vertices * face );\n\t\t\t\tvar fill = [ face, face, face, face, face, face ];\n\t\t\t\tfaceIndex.set( fill, faceIndexSize * vertices * face );\n\n\t\t\t}\n\t\t\tvar planes = new BufferGeometry();\n\t\t\tplanes.setAttribute( 'position', new BufferAttribute( position, positionSize ) );\n\t\t\tplanes.setAttribute( 'uv', new BufferAttribute( uv, uvSize ) );\n\t\t\tplanes.setAttribute( 'faceIndex', new BufferAttribute( faceIndex, faceIndexSize ) );\n\t\t\t_lodPlanes.push( planes );\n\n\t\t\tif ( lod > LOD_MIN ) {\n\n\t\t\t\tlod --;\n\n\t\t\t}\n\n\t\t}\n\t\treturn { _lodPlanes: _lodPlanes, _sizeLods: _sizeLods, _sigmas: _sigmas };\n\n\t}\n\n\tfunction _allocateTargets( equirectangular ) {\n\n\t\tvar params = {\n\t\t\tmagFilter: NearestFilter,\n\t\t\tminFilter: NearestFilter,\n\t\t\tgenerateMipmaps: false,\n\t\t\ttype: equirectangular ? equirectangular.type : UnsignedByteType,\n\t\t\tformat: equirectangular ? equirectangular.format : RGBEFormat,\n\t\t\tencoding: equirectangular ? equirectangular.encoding : RGBEEncoding,\n\t\t\tdepthBuffer: false,\n\t\t\tstencilBuffer: false\n\t\t};\n\t\tvar cubeUVRenderTarget = _createRenderTarget( params );\n\t\tcubeUVRenderTarget.depthBuffer = equirectangular ? false : true;\n\t\t_pingPongRenderTarget = _createRenderTarget( params );\n\t\treturn cubeUVRenderTarget;\n\n\t}\n\n\tfunction _cleanup( outputTarget ) {\n\n\t\t_pingPongRenderTarget.dispose();\n\t\t_renderer.setRenderTarget( _oldTarget );\n\t\toutputTarget.scissorTest = false;\n\t\t// reset viewport and scissor\n\t\toutputTarget.setSize( outputTarget.width, outputTarget.height );\n\n\t}\n\n\tfunction _sceneToCubeUV( scene, near, far, cubeUVRenderTarget ) {\n\n\t\tvar fov = 90;\n\t\tvar aspect = 1;\n\t\tvar cubeCamera = new PerspectiveCamera( fov, aspect, near, far );\n\t\tvar upSign = [ 1, 1, 1, 1, - 1, 1 ];\n\t\tvar forwardSign = [ 1, 1, - 1, - 1, - 1, 1 ];\n\n\t\tvar outputEncoding = _renderer.outputEncoding;\n\t\tvar toneMapping = _renderer.toneMapping;\n\t\tvar toneMappingExposure = _renderer.toneMappingExposure;\n\t\tvar clearColor = _renderer.getClearColor();\n\t\tvar clearAlpha = _renderer.getClearAlpha();\n\n\t\t_renderer.toneMapping = LinearToneMapping;\n\t\t_renderer.toneMappingExposure = 1.0;\n\t\t_renderer.outputEncoding = LinearEncoding;\n\t\tscene.scale.z *= - 1;\n\n\t\tvar background = scene.background;\n\t\tif ( background && background.isColor ) {\n\n\t\t\tbackground.convertSRGBToLinear();\n\t\t\t// Convert linear to RGBE\n\t\t\tvar maxComponent = Math.max( background.r, background.g, background.b );\n\t\t\tvar fExp = Math.min( Math.max( Math.ceil( Math.log2( maxComponent ) ), - 128.0 ), 127.0 );\n\t\t\tbackground = background.multiplyScalar( Math.pow( 2.0, - fExp ) );\n\t\t\tvar alpha = ( fExp + 128.0 ) / 255.0;\n\t\t\t_renderer.setClearColor( background, alpha );\n\t\t\tscene.background = null;\n\n\t\t}\n\n\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\tvar col = i % 3;\n\t\t\tif ( col == 0 ) {\n\n\t\t\t\tcubeCamera.up.set( 0, upSign[ i ], 0 );\n\t\t\t\tcubeCamera.lookAt( forwardSign[ i ], 0, 0 );\n\n\t\t\t} else if ( col == 1 ) {\n\n\t\t\t\tcubeCamera.up.set( 0, 0, upSign[ i ] );\n\t\t\t\tcubeCamera.lookAt( 0, forwardSign[ i ], 0 );\n\n\t\t\t} else {\n\n\t\t\t\tcubeCamera.up.set( 0, upSign[ i ], 0 );\n\t\t\t\tcubeCamera.lookAt( 0, 0, forwardSign[ i ] );\n\n\t\t\t}\n\t\t\t_setViewport( cubeUVRenderTarget,\n\t\t\t\tcol * SIZE_MAX, i > 2 ? SIZE_MAX : 0, SIZE_MAX, SIZE_MAX );\n\t\t\t_renderer.setRenderTarget( cubeUVRenderTarget );\n\t\t\t_renderer.render( scene, cubeCamera );\n\n\t\t}\n\n\t\t_renderer.toneMapping = toneMapping;\n\t\t_renderer.toneMappingExposure = toneMappingExposure;\n\t\t_renderer.outputEncoding = outputEncoding;\n\t\t_renderer.setClearColor( clearColor, clearAlpha );\n\t\tscene.scale.z *= - 1;\n\n\t}\n\n\tfunction _textureToCubeUV( texture, cubeUVRenderTarget ) {\n\n\t\tvar scene = new Scene();\n\t\tif ( texture.isCubeTexture ) {\n\n\t\t\tif ( _cubemapShader == null ) {\n\n\t\t\t\t_cubemapShader = _getCubemapShader();\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( _equirectShader == null ) {\n\n\t\t\t\t_equirectShader = _getEquirectShader();\n\n\t\t\t}\n\n\t\t}\n\t\tvar material = texture.isCubeTexture ? _cubemapShader : _equirectShader;\n\t\tscene.add( new Mesh( _lodPlanes[ 0 ], material ) );\n\t\tvar uniforms = material.uniforms;\n\n\t\tuniforms[ 'envMap' ].value = texture;\n\t\tif ( ! texture.isCubeTexture ) {\n\n\t\t\tuniforms[ 'texelSize' ].value.set( 1.0 / texture.image.width, 1.0 / texture.image.height );\n\n\t\t}\n\t\tuniforms[ 'inputEncoding' ].value = ENCODINGS[ texture.encoding ];\n\t\tuniforms[ 'outputEncoding' ].value = ENCODINGS[ texture.encoding ];\n\n\t\t_setViewport( cubeUVRenderTarget, 0, 0, 3 * SIZE_MAX, 2 * SIZE_MAX );\n\t\t_renderer.setRenderTarget( cubeUVRenderTarget );\n\t\t_renderer.render( scene, _flatCamera );\n\n\t}\n\n\tfunction _compileMaterial( material ) {\n\n\t\tvar tmpScene = new Scene();\n\t\ttmpScene.add( new Mesh( _lodPlanes[ 0 ], material ) );\n\t\t_renderer.compile( tmpScene, _flatCamera );\n\n\t}\n\n\tfunction _createRenderTarget( params ) {\n\n\t\tvar cubeUVRenderTarget = new WebGLRenderTarget( 3 * SIZE_MAX, 3 * SIZE_MAX, params );\n\t\tcubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;\n\t\tcubeUVRenderTarget.texture.name = 'PMREM.cubeUv';\n\t\tcubeUVRenderTarget.scissorTest = true;\n\t\treturn cubeUVRenderTarget;\n\n\t}\n\n\tfunction _setViewport( target, x, y, width, height ) {\n\n\t\ttarget.viewport.set( x, y, width, height );\n\t\ttarget.scissor.set( x, y, width, height );\n\n\t}\n\n\tfunction _applyPMREM( cubeUVRenderTarget ) {\n\n\t\tvar autoClear = _renderer.autoClear;\n\t\t_renderer.autoClear = false;\n\n\t\tfor ( var i = 1; i < TOTAL_LODS; i ++ ) {\n\n\t\t\tvar sigma = Math.sqrt(\n\t\t\t\t_sigmas[ i ] * _sigmas[ i ] -\n\t\t\t_sigmas[ i - 1 ] * _sigmas[ i - 1 ] );\n\t\t\tvar poleAxis =\n\t\t\t_axisDirections[ ( i - 1 ) % _axisDirections.length ];\n\t\t\t_blur( cubeUVRenderTarget, i - 1, i, sigma, poleAxis );\n\n\t\t}\n\n\t\t_renderer.autoClear = autoClear;\n\n\t}\n\n\t/**\n\t * This is a two-pass Gaussian blur for a cubemap. Normally this is done\n\t * vertically and horizontally, but this breaks down on a cube. Here we apply\n\t * the blur latitudinally (around the poles), and then longitudinally (towards\n\t * the poles) to approximate the orthogonally-separable blur. It is least\n\t * accurate at the poles, but still does a decent job.\n\t */\n\tfunction _blur( cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis ) {\n\n\t\t_halfBlur(\n\t\t\tcubeUVRenderTarget,\n\t\t\t_pingPongRenderTarget,\n\t\t\tlodIn,\n\t\t\tlodOut,\n\t\t\tsigma,\n\t\t\t'latitudinal',\n\t\t\tpoleAxis );\n\n\t\t_halfBlur(\n\t\t\t_pingPongRenderTarget,\n\t\t\tcubeUVRenderTarget,\n\t\t\tlodOut,\n\t\t\tlodOut,\n\t\t\tsigma,\n\t\t\t'longitudinal',\n\t\t\tpoleAxis );\n\n\t}\n\n\tfunction _halfBlur( targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis ) {\n\n\t\tif ( direction !== 'latitudinal' && direction !== 'longitudinal' ) {\n\n\t\t\tconsole.error(\n\t\t\t\t'blur direction must be either latitudinal or longitudinal!' );\n\n\t\t}\n\n\t\t// Number of standard deviations at which to cut off the discrete approximation.\n\t\tvar STANDARD_DEVIATIONS = 3;\n\n\t\tvar blurScene = new Scene();\n\t\tblurScene.add( new Mesh( _lodPlanes[ lodOut ], _blurMaterial ) );\n\t\tvar blurUniforms = _blurMaterial.uniforms;\n\n\t\tvar pixels = _sizeLods[ lodIn ] - 1;\n\t\tvar radiansPerPixel = isFinite( sigmaRadians ) ? Math.PI / ( 2 * pixels ) : 2 * Math.PI / ( 2 * MAX_SAMPLES - 1 );\n\t\tvar sigmaPixels = sigmaRadians / radiansPerPixel;\n\t\tvar samples = isFinite( sigmaRadians ) ? 1 + Math.floor( STANDARD_DEVIATIONS * sigmaPixels ) : MAX_SAMPLES;\n\n\t\tif ( samples > MAX_SAMPLES ) {\n\n\t\t\tconsole.warn( (\"sigmaRadians, \" + sigmaRadians + \", is too large and will clip, as it requested \" + samples + \" samples when the maximum is set to \" + MAX_SAMPLES) );\n\n\t\t}\n\n\t\tvar weights = [];\n\t\tvar sum = 0;\n\n\t\tfor ( var i = 0; i < MAX_SAMPLES; ++ i ) {\n\n\t\t\tvar x = i / sigmaPixels;\n\t\t\tvar weight = Math.exp( - x * x / 2 );\n\t\t\tweights.push( weight );\n\n\t\t\tif ( i == 0 ) {\n\n\t\t\t\tsum += weight;\n\n\t\t\t} else if ( i < samples ) {\n\n\t\t\t\tsum += 2 * weight;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( var i = 0; i < weights.length; i ++ ) {\n\n\t\t\tweights[ i ] = weights[ i ] / sum;\n\n\t\t}\n\n\t\tblurUniforms[ 'envMap' ].value = targetIn.texture;\n\t\tblurUniforms[ 'samples' ].value = samples;\n\t\tblurUniforms[ 'weights' ].value = weights;\n\t\tblurUniforms[ 'latitudinal' ].value = direction === 'latitudinal';\n\t\tif ( poleAxis ) {\n\n\t\t\tblurUniforms[ 'poleAxis' ].value = poleAxis;\n\n\t\t}\n\t\tblurUniforms[ 'dTheta' ].value = radiansPerPixel;\n\t\tblurUniforms[ 'mipInt' ].value = LOD_MAX - lodIn;\n\t\tblurUniforms[ 'inputEncoding' ].value = ENCODINGS[ targetIn.texture.encoding ];\n\t\tblurUniforms[ 'outputEncoding' ].value = ENCODINGS[ targetIn.texture.encoding ];\n\n\t\tvar outputSize = _sizeLods[ lodOut ];\n\t\tvar x = 3 * Math.max( 0, SIZE_MAX - 2 * outputSize );\n\t\tvar y = ( lodOut === 0 ? 0 : 2 * SIZE_MAX ) +\n\t\t2 * outputSize *\n\t\t\t( lodOut > LOD_MAX - LOD_MIN ? lodOut - LOD_MAX + LOD_MIN : 0 );\n\n\t\t_setViewport( targetOut, x, y, 3 * outputSize, 2 * outputSize );\n\t\t_renderer.setRenderTarget( targetOut );\n\t\t_renderer.render( blurScene, _flatCamera );\n\n\t}\n\n\tfunction _getBlurShader( maxSamples ) {\n\n\t\tvar weights = new Float32Array( maxSamples );\n\t\tvar poleAxis = new Vector3( 0, 1, 0 );\n\t\tvar shaderMaterial = new RawShaderMaterial( {\n\n\t\t\tdefines: { 'n': maxSamples },\n\n\t\t\tuniforms: {\n\t\t\t\t'envMap': { value: null },\n\t\t\t\t'samples': { value: 1 },\n\t\t\t\t'weights': { value: weights },\n\t\t\t\t'latitudinal': { value: false },\n\t\t\t\t'dTheta': { value: 0 },\n\t\t\t\t'mipInt': { value: 0 },\n\t\t\t\t'poleAxis': { value: poleAxis },\n\t\t\t\t'inputEncoding': { value: ENCODINGS[ LinearEncoding ] },\n\t\t\t\t'outputEncoding': { value: ENCODINGS[ LinearEncoding ] }\n\t\t\t},\n\n\t\t\tvertexShader: _getCommonVertexShader(),\n\n\t\t\tfragmentShader: (\"\\nprecision mediump float;\\nprecision mediump int;\\nvarying vec3 vOutputDirection;\\nuniform sampler2D envMap;\\nuniform int samples;\\nuniform float weights[n];\\nuniform bool latitudinal;\\nuniform float dTheta;\\nuniform float mipInt;\\nuniform vec3 poleAxis;\\n\\n\" + (_getEncodings()) + \"\\n\\n#define ENVMAP_TYPE_CUBE_UV\\n#include <cube_uv_reflection_fragment>\\n\\nvoid main() {\\n\\tgl_FragColor = vec4(0.0);\\n\\tfor (int i = 0; i < n; i++) {\\n\\t\\tif (i >= samples)\\n\\t\\t\\tbreak;\\n\\t\\tfor (int dir = -1; dir < 2; dir += 2) {\\n\\t\\t\\tif (i == 0 && dir == 1)\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\tvec3 axis = latitudinal ? poleAxis : cross(poleAxis, vOutputDirection);\\n\\t\\t\\tif (all(equal(axis, vec3(0.0))))\\n\\t\\t\\t\\taxis = cross(vec3(0.0, 1.0, 0.0), vOutputDirection);\\n\\t\\t\\taxis = normalize(axis);\\n\\t\\t\\tfloat theta = dTheta * float(dir * i);\\n\\t\\t\\tfloat cosTheta = cos(theta);\\n\\t\\t\\t// Rodrigues' axis-angle rotation\\n\\t\\t\\tvec3 sampleDirection = vOutputDirection * cosTheta\\n\\t\\t\\t\\t\\t+ cross(axis, vOutputDirection) * sin(theta)\\n\\t\\t\\t\\t\\t+ axis * dot(axis, vOutputDirection) * (1.0 - cosTheta);\\n\\t\\t\\tgl_FragColor.rgb +=\\n\\t\\t\\t\\t\\tweights[i] * bilinearCubeUV(envMap, sampleDirection, mipInt);\\n\\t\\t}\\n\\t}\\n\\tgl_FragColor = linearToOutputTexel(gl_FragColor);\\n}\\n\\t\\t\"),\n\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\n\t\t} );\n\n\t\tshaderMaterial.type = 'SphericalGaussianBlur';\n\n\t\treturn shaderMaterial;\n\n\t}\n\n\tfunction _getEquirectShader() {\n\n\t\tvar texelSize = new Vector2( 1, 1 );\n\t\tvar shaderMaterial = new RawShaderMaterial( {\n\n\t\t\tuniforms: {\n\t\t\t\t'envMap': { value: null },\n\t\t\t\t'texelSize': { value: texelSize },\n\t\t\t\t'inputEncoding': { value: ENCODINGS[ LinearEncoding ] },\n\t\t\t\t'outputEncoding': { value: ENCODINGS[ LinearEncoding ] }\n\t\t\t},\n\n\t\t\tvertexShader: _getCommonVertexShader(),\n\n\t\t\tfragmentShader: (\"\\nprecision mediump float;\\nprecision mediump int;\\nvarying vec3 vOutputDirection;\\nuniform sampler2D envMap;\\nuniform vec2 texelSize;\\n\\n\" + (_getEncodings()) + \"\\n\\n#define RECIPROCAL_PI 0.31830988618\\n#define RECIPROCAL_PI2 0.15915494\\n\\nvoid main() {\\n\\tgl_FragColor = vec4(0.0);\\n\\tvec3 outputDirection = normalize(vOutputDirection);\\n\\tvec2 uv;\\n\\tuv.y = asin(clamp(outputDirection.y, -1.0, 1.0)) * RECIPROCAL_PI + 0.5;\\n\\tuv.x = atan(outputDirection.z, outputDirection.x) * RECIPROCAL_PI2 + 0.5;\\n\\tvec2 f = fract(uv / texelSize - 0.5);\\n\\tuv -= f * texelSize;\\n\\tvec3 tl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\\n\\tuv.x += texelSize.x;\\n\\tvec3 tr = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\\n\\tuv.y += texelSize.y;\\n\\tvec3 br = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\\n\\tuv.x -= texelSize.x;\\n\\tvec3 bl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\\n\\tvec3 tm = mix(tl, tr, f.x);\\n\\tvec3 bm = mix(bl, br, f.x);\\n\\tgl_FragColor.rgb = mix(tm, bm, f.y);\\n\\tgl_FragColor = linearToOutputTexel(gl_FragColor);\\n}\\n\\t\\t\"),\n\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\n\t\t} );\n\n\t\tshaderMaterial.type = 'EquirectangularToCubeUV';\n\n\t\treturn shaderMaterial;\n\n\t}\n\n\tfunction _getCubemapShader() {\n\n\t\tvar shaderMaterial = new RawShaderMaterial( {\n\n\t\t\tuniforms: {\n\t\t\t\t'envMap': { value: null },\n\t\t\t\t'inputEncoding': { value: ENCODINGS[ LinearEncoding ] },\n\t\t\t\t'outputEncoding': { value: ENCODINGS[ LinearEncoding ] }\n\t\t\t},\n\n\t\t\tvertexShader: _getCommonVertexShader(),\n\n\t\t\tfragmentShader: (\"\\nprecision mediump float;\\nprecision mediump int;\\nvarying vec3 vOutputDirection;\\nuniform samplerCube envMap;\\n\\n\" + (_getEncodings()) + \"\\n\\nvoid main() {\\n\\tgl_FragColor = vec4(0.0);\\n\\tgl_FragColor.rgb = envMapTexelToLinear(textureCube(envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ))).rgb;\\n\\tgl_FragColor = linearToOutputTexel(gl_FragColor);\\n}\\n\\t\\t\"),\n\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\n\t\t} );\n\n\t\tshaderMaterial.type = 'CubemapToCubeUV';\n\n\t\treturn shaderMaterial;\n\n\t}\n\n\tfunction _getCommonVertexShader() {\n\n\t\treturn \"\\nprecision mediump float;\\nprecision mediump int;\\nattribute vec3 position;\\nattribute vec2 uv;\\nattribute float faceIndex;\\nvarying vec3 vOutputDirection;\\nvec3 getDirection(vec2 uv, float face) {\\n\\tuv = 2.0 * uv - 1.0;\\n\\tvec3 direction = vec3(uv, 1.0);\\n\\tif (face == 0.0) {\\n\\t\\tdirection = direction.zyx;\\n\\t\\tdirection.z *= -1.0;\\n\\t} else if (face == 1.0) {\\n\\t\\tdirection = direction.xzy;\\n\\t\\tdirection.z *= -1.0;\\n\\t} else if (face == 3.0) {\\n\\t\\tdirection = direction.zyx;\\n\\t\\tdirection.x *= -1.0;\\n\\t} else if (face == 4.0) {\\n\\t\\tdirection = direction.xzy;\\n\\t\\tdirection.y *= -1.0;\\n\\t} else if (face == 5.0) {\\n\\t\\tdirection.xz *= -1.0;\\n\\t}\\n\\treturn direction;\\n}\\nvoid main() {\\n\\tvOutputDirection = getDirection(uv, faceIndex);\\n\\tgl_Position = vec4( position, 1.0 );\\n}\\n\\t\";\n\n\t}\n\n\tfunction _getEncodings() {\n\n\t\treturn \"\\nuniform int inputEncoding;\\nuniform int outputEncoding;\\n\\n#include <encodings_pars_fragment>\\n\\nvec4 inputTexelToLinear(vec4 value){\\n\\tif(inputEncoding == 0){\\n\\t\\treturn value;\\n\\t}else if(inputEncoding == 1){\\n\\t\\treturn sRGBToLinear(value);\\n\\t}else if(inputEncoding == 2){\\n\\t\\treturn RGBEToLinear(value);\\n\\t}else if(inputEncoding == 3){\\n\\t\\treturn RGBMToLinear(value, 7.0);\\n\\t}else if(inputEncoding == 4){\\n\\t\\treturn RGBMToLinear(value, 16.0);\\n\\t}else if(inputEncoding == 5){\\n\\t\\treturn RGBDToLinear(value, 256.0);\\n\\t}else{\\n\\t\\treturn GammaToLinear(value, 2.2);\\n\\t}\\n}\\n\\nvec4 linearToOutputTexel(vec4 value){\\n\\tif(outputEncoding == 0){\\n\\t\\treturn value;\\n\\t}else if(outputEncoding == 1){\\n\\t\\treturn LinearTosRGB(value);\\n\\t}else if(outputEncoding == 2){\\n\\t\\treturn LinearToRGBE(value);\\n\\t}else if(outputEncoding == 3){\\n\\t\\treturn LinearToRGBM(value, 7.0);\\n\\t}else if(outputEncoding == 4){\\n\\t\\treturn LinearToRGBM(value, 16.0);\\n\\t}else if(outputEncoding == 5){\\n\\t\\treturn LinearToRGBD(value, 256.0);\\n\\t}else{\\n\\t\\treturn LinearToGamma(value, 2.2);\\n\\t}\\n}\\n\\nvec4 envMapTexelToLinear(vec4 color) {\\n\\treturn inputTexelToLinear(color);\\n}\\n\\t\";\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Face4( a, b, c, d, normal, color, materialIndex ) {\n\n\t\tconsole.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );\n\t\treturn new Face3( a, b, c, normal, color, materialIndex );\n\n\t}\n\n\tvar LineStrip = 0;\n\n\tvar LinePieces = 1;\n\n\tfunction MeshFaceMaterial( materials ) {\n\n\t\tconsole.warn( 'THREE.MeshFaceMaterial has been removed. Use an Array instead.' );\n\t\treturn materials;\n\n\t}\n\n\tfunction MultiMaterial( materials ) {\n\n\t\tif ( materials === undefined ) { materials = []; }\n\n\t\tconsole.warn( 'THREE.MultiMaterial has been removed. Use an Array instead.' );\n\t\tmaterials.isMultiMaterial = true;\n\t\tmaterials.materials = materials;\n\t\tmaterials.clone = function () {\n\n\t\t\treturn materials.slice();\n\n\t\t};\n\t\treturn materials;\n\n\t}\n\n\tfunction PointCloud( geometry, material ) {\n\n\t\tconsole.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );\n\t\treturn new Points( geometry, material );\n\n\t}\n\n\tfunction Particle( material ) {\n\n\t\tconsole.warn( 'THREE.Particle has been renamed to THREE.Sprite.' );\n\t\treturn new Sprite( material );\n\n\t}\n\n\tfunction ParticleSystem( geometry, material ) {\n\n\t\tconsole.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );\n\t\treturn new Points( geometry, material );\n\n\t}\n\n\tfunction PointCloudMaterial( parameters ) {\n\n\t\tconsole.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );\n\t\treturn new PointsMaterial( parameters );\n\n\t}\n\n\tfunction ParticleBasicMaterial( parameters ) {\n\n\t\tconsole.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );\n\t\treturn new PointsMaterial( parameters );\n\n\t}\n\n\tfunction ParticleSystemMaterial( parameters ) {\n\n\t\tconsole.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );\n\t\treturn new PointsMaterial( parameters );\n\n\t}\n\n\tfunction Vertex( x, y, z ) {\n\n\t\tconsole.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );\n\t\treturn new Vector3( x, y, z );\n\n\t}\n\n\t//\n\n\tfunction DynamicBufferAttribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setUsage( THREE.DynamicDrawUsage ) instead.' );\n\t\treturn new BufferAttribute( array, itemSize ).setUsage( DynamicDrawUsage );\n\n\t}\n\n\tfunction Int8Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.' );\n\t\treturn new Int8BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Uint8Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.' );\n\t\treturn new Uint8BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Uint8ClampedAttribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.' );\n\t\treturn new Uint8ClampedBufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Int16Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.' );\n\t\treturn new Int16BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Uint16Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.' );\n\t\treturn new Uint16BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Int32Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.' );\n\t\treturn new Int32BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Uint32Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.' );\n\t\treturn new Uint32BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Float32Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.' );\n\t\treturn new Float32BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Float64Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.' );\n\t\treturn new Float64BufferAttribute( array, itemSize );\n\n\t}\n\n\t//\n\n\tCurve.create = function ( construct, getPoint ) {\n\n\t\tconsole.log( 'THREE.Curve.create() has been deprecated' );\n\n\t\tconstruct.prototype = Object.create( Curve.prototype );\n\t\tconstruct.prototype.constructor = construct;\n\t\tconstruct.prototype.getPoint = getPoint;\n\n\t\treturn construct;\n\n\t};\n\n\t//\n\n\tObject.assign( CurvePath.prototype, {\n\n\t\tcreatePointsGeometry: function ( divisions ) {\n\n\t\t\tconsole.warn( 'THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\n\n\t\t\t// generate geometry from path points (for Line or Points objects)\n\n\t\t\tvar pts = this.getPoints( divisions );\n\t\t\treturn this.createGeometry( pts );\n\n\t\t},\n\n\t\tcreateSpacedPointsGeometry: function ( divisions ) {\n\n\t\t\tconsole.warn( 'THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\n\n\t\t\t// generate geometry from equidistant sampling along the path\n\n\t\t\tvar pts = this.getSpacedPoints( divisions );\n\t\t\treturn this.createGeometry( pts );\n\n\t\t},\n\n\t\tcreateGeometry: function ( points ) {\n\n\t\t\tconsole.warn( 'THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\n\n\t\t\tvar geometry = new Geometry();\n\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tvar point = points[ i ];\n\t\t\t\tgeometry.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );\n\n\t\t\t}\n\n\t\t\treturn geometry;\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.assign( Path.prototype, {\n\n\t\tfromPoints: function ( points ) {\n\n\t\t\tconsole.warn( 'THREE.Path: .fromPoints() has been renamed to .setFromPoints().' );\n\t\t\treturn this.setFromPoints( points );\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tfunction ClosedSplineCurve3( points ) {\n\n\t\tconsole.warn( 'THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );\n\n\t\tCatmullRomCurve3.call( this, points );\n\t\tthis.type = 'catmullrom';\n\t\tthis.closed = true;\n\n\t}\n\n\tClosedSplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );\n\n\t//\n\n\tfunction SplineCurve3( points ) {\n\n\t\tconsole.warn( 'THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );\n\n\t\tCatmullRomCurve3.call( this, points );\n\t\tthis.type = 'catmullrom';\n\n\t}\n\n\tSplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );\n\n\t//\n\n\tfunction Spline( points ) {\n\n\t\tconsole.warn( 'THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.' );\n\n\t\tCatmullRomCurve3.call( this, points );\n\t\tthis.type = 'catmullrom';\n\n\t}\n\n\tSpline.prototype = Object.create( CatmullRomCurve3.prototype );\n\n\tObject.assign( Spline.prototype, {\n\n\t\tinitFromArray: function ( /* a */ ) {\n\n\t\t\tconsole.error( 'THREE.Spline: .initFromArray() has been removed.' );\n\n\t\t},\n\t\tgetControlPointsArray: function ( /* optionalTarget */ ) {\n\n\t\t\tconsole.error( 'THREE.Spline: .getControlPointsArray() has been removed.' );\n\n\t\t},\n\t\treparametrizeByArcLength: function ( /* samplingCoef */ ) {\n\n\t\t\tconsole.error( 'THREE.Spline: .reparametrizeByArcLength() has been removed.' );\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tfunction AxisHelper( size ) {\n\n\t\tconsole.warn( 'THREE.AxisHelper has been renamed to THREE.AxesHelper.' );\n\t\treturn new AxesHelper( size );\n\n\t}\n\n\tfunction BoundingBoxHelper( object, color ) {\n\n\t\tconsole.warn( 'THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.' );\n\t\treturn new BoxHelper( object, color );\n\n\t}\n\n\tfunction EdgesHelper( object, hex ) {\n\n\t\tconsole.warn( 'THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.' );\n\t\treturn new LineSegments( new EdgesGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\n\n\t}\n\n\tGridHelper.prototype.setColors = function () {\n\n\t\tconsole.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );\n\n\t};\n\n\tSkeletonHelper.prototype.update = function () {\n\n\t\tconsole.error( 'THREE.SkeletonHelper: update() no longer needs to be called.' );\n\n\t};\n\n\tfunction WireframeHelper( object, hex ) {\n\n\t\tconsole.warn( 'THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.' );\n\t\treturn new LineSegments( new WireframeGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\n\n\t}\n\n\t//\n\n\tObject.assign( Loader.prototype, {\n\n\t\textractUrlBase: function ( url ) {\n\n\t\t\tconsole.warn( 'THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.' );\n\t\t\treturn LoaderUtils.extractUrlBase( url );\n\n\t\t}\n\n\t} );\n\n\tLoader.Handlers = {\n\n\t\tadd: function ( /* regex, loader */ ) {\n\n\t\t\tconsole.error( 'THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.' );\n\n\t\t},\n\n\t\tget: function ( /* file */ ) {\n\n\t\t\tconsole.error( 'THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.' );\n\n\t\t}\n\n\t};\n\n\tfunction XHRLoader( manager ) {\n\n\t\tconsole.warn( 'THREE.XHRLoader has been renamed to THREE.FileLoader.' );\n\t\treturn new FileLoader( manager );\n\n\t}\n\n\tfunction BinaryTextureLoader( manager ) {\n\n\t\tconsole.warn( 'THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.' );\n\t\treturn new DataTextureLoader( manager );\n\n\t}\n\n\tObject.assign( ObjectLoader.prototype, {\n\n\t\tsetTexturePath: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().' );\n\t\t\treturn this.setResourcePath( value );\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.assign( Box2.prototype, {\n\n\t\tcenter: function ( optionalTarget ) {\n\n\t\t\tconsole.warn( 'THREE.Box2: .center() has been renamed to .getCenter().' );\n\t\t\treturn this.getCenter( optionalTarget );\n\n\t\t},\n\t\tempty: function () {\n\n\t\t\tconsole.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );\n\t\t\treturn this.isEmpty();\n\n\t\t},\n\t\tisIntersectionBox: function ( box ) {\n\n\t\t\tconsole.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\t\treturn this.intersectsBox( box );\n\n\t\t},\n\t\tsize: function ( optionalTarget ) {\n\n\t\t\tconsole.warn( 'THREE.Box2: .size() has been renamed to .getSize().' );\n\t\t\treturn this.getSize( optionalTarget );\n\n\t\t}\n\t} );\n\n\tObject.assign( Box3.prototype, {\n\n\t\tcenter: function ( optionalTarget ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .center() has been renamed to .getCenter().' );\n\t\t\treturn this.getCenter( optionalTarget );\n\n\t\t},\n\t\tempty: function () {\n\n\t\t\tconsole.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );\n\t\t\treturn this.isEmpty();\n\n\t\t},\n\t\tisIntersectionBox: function ( box ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\t\treturn this.intersectsBox( box );\n\n\t\t},\n\t\tisIntersectionSphere: function ( sphere ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\t\t\treturn this.intersectsSphere( sphere );\n\n\t\t},\n\t\tsize: function ( optionalTarget ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .size() has been renamed to .getSize().' );\n\t\t\treturn this.getSize( optionalTarget );\n\n\t\t}\n\t} );\n\n\tFrustum.prototype.setFromMatrix = function ( m ) {\n\n\t\tconsole.warn( 'THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix().' );\n\t\treturn this.setFromProjectionMatrix( m );\n\n\t};\n\n\tLine3.prototype.center = function ( optionalTarget ) {\n\n\t\tconsole.warn( 'THREE.Line3: .center() has been renamed to .getCenter().' );\n\t\treturn this.getCenter( optionalTarget );\n\n\t};\n\n\tObject.assign( MathUtils, {\n\n\t\trandom16: function () {\n\n\t\t\tconsole.warn( 'THREE.Math: .random16() has been deprecated. Use Math.random() instead.' );\n\t\t\treturn Math.random();\n\n\t\t},\n\n\t\tnearestPowerOfTwo: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().' );\n\t\t\treturn MathUtils.floorPowerOfTwo( value );\n\n\t\t},\n\n\t\tnextPowerOfTwo: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().' );\n\t\t\treturn MathUtils.ceilPowerOfTwo( value );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Matrix3.prototype, {\n\n\t\tflattenToArrayOffset: function ( array, offset ) {\n\n\t\t\tconsole.warn( \"THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.\" );\n\t\t\treturn this.toArray( array, offset );\n\n\t\t},\n\t\tmultiplyVector3: function ( vector ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix3( this );\n\n\t\t},\n\t\tmultiplyVector3Array: function ( /* a */ ) {\n\n\t\t\tconsole.error( 'THREE.Matrix3: .multiplyVector3Array() has been removed.' );\n\n\t\t},\n\t\tapplyToBufferAttribute: function ( attribute ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead.' );\n\t\t\treturn attribute.applyMatrix3( this );\n\n\t\t},\n\t\tapplyToVector3Array: function ( /* array, offset, length */ ) {\n\n\t\t\tconsole.error( 'THREE.Matrix3: .applyToVector3Array() has been removed.' );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Matrix4.prototype, {\n\n\t\textractPosition: function ( m ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );\n\t\t\treturn this.copyPosition( m );\n\n\t\t},\n\t\tflattenToArrayOffset: function ( array, offset ) {\n\n\t\t\tconsole.warn( \"THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.\" );\n\t\t\treturn this.toArray( array, offset );\n\n\t\t},\n\t\tgetPosition: function () {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );\n\t\t\treturn new Vector3().setFromMatrixColumn( this, 3 );\n\n\t\t},\n\t\tsetRotationFromQuaternion: function ( q ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );\n\t\t\treturn this.makeRotationFromQuaternion( q );\n\n\t\t},\n\t\tmultiplyToArray: function () {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyToArray() has been removed.' );\n\n\t\t},\n\t\tmultiplyVector3: function ( vector ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix4( this );\n\n\t\t},\n\t\tmultiplyVector4: function ( vector ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix4( this );\n\n\t\t},\n\t\tmultiplyVector3Array: function ( /* a */ ) {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .multiplyVector3Array() has been removed.' );\n\n\t\t},\n\t\trotateAxis: function ( v ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );\n\t\t\tv.transformDirection( this );\n\n\t\t},\n\t\tcrossVector: function ( vector ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix4( this );\n\n\t\t},\n\t\ttranslate: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .translate() has been removed.' );\n\n\t\t},\n\t\trotateX: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateX() has been removed.' );\n\n\t\t},\n\t\trotateY: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateY() has been removed.' );\n\n\t\t},\n\t\trotateZ: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateZ() has been removed.' );\n\n\t\t},\n\t\trotateByAxis: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );\n\n\t\t},\n\t\tapplyToBufferAttribute: function ( attribute ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead.' );\n\t\t\treturn attribute.applyMatrix4( this );\n\n\t\t},\n\t\tapplyToVector3Array: function ( /* array, offset, length */ ) {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .applyToVector3Array() has been removed.' );\n\n\t\t},\n\t\tmakeFrustum: function ( left, right, bottom, top, near, far ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.' );\n\t\t\treturn this.makePerspective( left, right, top, bottom, near, far );\n\n\t\t}\n\n\t} );\n\n\tPlane.prototype.isIntersectionLine = function ( line ) {\n\n\t\tconsole.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );\n\t\treturn this.intersectsLine( line );\n\n\t};\n\n\tQuaternion.prototype.multiplyVector3 = function ( vector ) {\n\n\t\tconsole.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );\n\t\treturn vector.applyQuaternion( this );\n\n\t};\n\n\tObject.assign( Ray.prototype, {\n\n\t\tisIntersectionBox: function ( box ) {\n\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\t\treturn this.intersectsBox( box );\n\n\t\t},\n\t\tisIntersectionPlane: function ( plane ) {\n\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );\n\t\t\treturn this.intersectsPlane( plane );\n\n\t\t},\n\t\tisIntersectionSphere: function ( sphere ) {\n\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\t\t\treturn this.intersectsSphere( sphere );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Triangle.prototype, {\n\n\t\tarea: function () {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .area() has been renamed to .getArea().' );\n\t\t\treturn this.getArea();\n\n\t\t},\n\t\tbarycoordFromPoint: function ( point, target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );\n\t\t\treturn this.getBarycoord( point, target );\n\n\t\t},\n\t\tmidpoint: function ( target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .midpoint() has been renamed to .getMidpoint().' );\n\t\t\treturn this.getMidpoint( target );\n\n\t\t},\n\t\tnormal: function ( target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );\n\t\t\treturn this.getNormal( target );\n\n\t\t},\n\t\tplane: function ( target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .plane() has been renamed to .getPlane().' );\n\t\t\treturn this.getPlane( target );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Triangle, {\n\n\t\tbarycoordFromPoint: function ( point, a, b, c, target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );\n\t\t\treturn Triangle.getBarycoord( point, a, b, c, target );\n\n\t\t},\n\t\tnormal: function ( a, b, c, target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );\n\t\t\treturn Triangle.getNormal( a, b, c, target );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Shape.prototype, {\n\n\t\textractAllPoints: function ( divisions ) {\n\n\t\t\tconsole.warn( 'THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.' );\n\t\t\treturn this.extractPoints( divisions );\n\n\t\t},\n\t\textrude: function ( options ) {\n\n\t\t\tconsole.warn( 'THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.' );\n\t\t\treturn new ExtrudeGeometry( this, options );\n\n\t\t},\n\t\tmakeGeometry: function ( options ) {\n\n\t\t\tconsole.warn( 'THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.' );\n\t\t\treturn new ShapeGeometry( this, options );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Vector2.prototype, {\n\n\t\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\t\t\treturn this.fromBufferAttribute( attribute, index, offset );\n\n\t\t},\n\t\tdistanceToManhattan: function ( v ) {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );\n\t\t\treturn this.manhattanDistanceTo( v );\n\n\t\t},\n\t\tlengthManhattan: function () {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().' );\n\t\t\treturn this.manhattanLength();\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Vector3.prototype, {\n\n\t\tsetEulerFromRotationMatrix: function () {\n\n\t\t\tconsole.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );\n\n\t\t},\n\t\tsetEulerFromQuaternion: function () {\n\n\t\t\tconsole.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );\n\n\t\t},\n\t\tgetPositionFromMatrix: function ( m ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );\n\t\t\treturn this.setFromMatrixPosition( m );\n\n\t\t},\n\t\tgetScaleFromMatrix: function ( m ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );\n\t\t\treturn this.setFromMatrixScale( m );\n\n\t\t},\n\t\tgetColumnFromMatrix: function ( index, matrix ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );\n\t\t\treturn this.setFromMatrixColumn( matrix, index );\n\n\t\t},\n\t\tapplyProjection: function ( m ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.' );\n\t\t\treturn this.applyMatrix4( m );\n\n\t\t},\n\t\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\t\t\treturn this.fromBufferAttribute( attribute, index, offset );\n\n\t\t},\n\t\tdistanceToManhattan: function ( v ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );\n\t\t\treturn this.manhattanDistanceTo( v );\n\n\t\t},\n\t\tlengthManhattan: function () {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().' );\n\t\t\treturn this.manhattanLength();\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Vector4.prototype, {\n\n\t\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\t\tconsole.warn( 'THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\t\t\treturn this.fromBufferAttribute( attribute, index, offset );\n\n\t\t},\n\t\tlengthManhattan: function () {\n\n\t\t\tconsole.warn( 'THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().' );\n\t\t\treturn this.manhattanLength();\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.assign( Geometry.prototype, {\n\n\t\tcomputeTangents: function () {\n\n\t\t\tconsole.error( 'THREE.Geometry: .computeTangents() has been removed.' );\n\n\t\t},\n\t\tcomputeLineDistances: function () {\n\n\t\t\tconsole.error( 'THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.' );\n\n\t\t},\n\t\tapplyMatrix: function ( matrix ) {\n\n\t\t\tconsole.warn( 'THREE.Geometry: .applyMatrix() has been renamed to .applyMatrix4().' );\n\t\t\treturn this.applyMatrix4( matrix );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Object3D.prototype, {\n\n\t\tgetChildByName: function ( name ) {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );\n\t\t\treturn this.getObjectByName( name );\n\n\t\t},\n\t\trenderDepth: function () {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );\n\n\t\t},\n\t\ttranslate: function ( distance, axis ) {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );\n\t\t\treturn this.translateOnAxis( axis, distance );\n\n\t\t},\n\t\tgetWorldRotation: function () {\n\n\t\t\tconsole.error( 'THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.' );\n\n\t\t},\n\t\tapplyMatrix: function ( matrix ) {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4().' );\n\t\t\treturn this.applyMatrix4( matrix );\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( Object3D.prototype, {\n\n\t\teulerOrder: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t\t\t\treturn this.rotation.order;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t\t\t\tthis.rotation.order = value;\n\n\t\t\t}\n\t\t},\n\t\tuseQuaternion: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.assign( Mesh.prototype, {\n\n\t\tsetDrawMode: function () {\n\n\t\t\tconsole.error( 'THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.' );\n\n\t\t},\n\n\t} );\n\n\tObject.defineProperties( Mesh.prototype, {\n\n\t\tdrawMode: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.error( 'THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode.' );\n\t\t\t\treturn TrianglesDrawMode;\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.error( 'THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.' );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( LOD.prototype, {\n\n\t\tobjects: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.LOD: .objects has been renamed to .levels.' );\n\t\t\t\treturn this.levels;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperty( Skeleton.prototype, 'useVertexTexture', {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );\n\n\t\t}\n\n\t} );\n\n\tSkinnedMesh.prototype.initBones = function () {\n\n\t\tconsole.error( 'THREE.SkinnedMesh: initBones() has been removed.' );\n\n\t};\n\n\tObject.defineProperty( Curve.prototype, '__arcLengthDivisions', {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );\n\t\t\treturn this.arcLengthDivisions;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );\n\t\t\tthis.arcLengthDivisions = value;\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tPerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {\n\n\t\tconsole.warn( \"THREE.PerspectiveCamera.setLens is deprecated. \" +\n\t\t\t\t\"Use .setFocalLength and .filmGauge for a photographic setup.\" );\n\n\t\tif ( filmGauge !== undefined ) { this.filmGauge = filmGauge; }\n\t\tthis.setFocalLength( focalLength );\n\n\t};\n\n\t//\n\n\tObject.defineProperties( Light.prototype, {\n\t\tonlyShadow: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .onlyShadow has been removed.' );\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraFov: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );\n\t\t\t\tthis.shadow.camera.fov = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraLeft: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );\n\t\t\t\tthis.shadow.camera.left = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraRight: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );\n\t\t\t\tthis.shadow.camera.right = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraTop: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );\n\t\t\t\tthis.shadow.camera.top = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraBottom: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );\n\t\t\t\tthis.shadow.camera.bottom = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraNear: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );\n\t\t\t\tthis.shadow.camera.near = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraFar: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );\n\t\t\t\tthis.shadow.camera.far = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraVisible: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );\n\n\t\t\t}\n\t\t},\n\t\tshadowBias: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );\n\t\t\t\tthis.shadow.bias = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowDarkness: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowDarkness has been removed.' );\n\n\t\t\t}\n\t\t},\n\t\tshadowMapWidth: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );\n\t\t\t\tthis.shadow.mapSize.width = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowMapHeight: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );\n\t\t\t\tthis.shadow.mapSize.height = value;\n\n\t\t\t}\n\t\t}\n\t} );\n\n\t//\n\n\tObject.defineProperties( BufferAttribute.prototype, {\n\n\t\tlength: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute: .length has been deprecated. Use .count instead.' );\n\t\t\t\treturn this.array.length;\n\n\t\t\t}\n\t\t},\n\t\tdynamic: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.' );\n\t\t\t\treturn this.usage === DynamicDrawUsage;\n\n\t\t\t},\n\t\t\tset: function ( /* value */ ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.' );\n\t\t\t\tthis.setUsage( DynamicDrawUsage );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.assign( BufferAttribute.prototype, {\n\t\tsetDynamic: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead.' );\n\t\t\tthis.setUsage( value === true ? DynamicDrawUsage : StaticDrawUsage );\n\t\t\treturn this;\n\n\t\t},\n\t\tcopyIndicesArray: function ( /* indices */ ) {\n\n\t\t\tconsole.error( 'THREE.BufferAttribute: .copyIndicesArray() has been removed.' );\n\n\t\t},\n\t\tsetArray: function ( /* array */ ) {\n\n\t\t\tconsole.error( 'THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers' );\n\n\t\t}\n\t} );\n\n\tObject.assign( BufferGeometry.prototype, {\n\n\t\taddIndex: function ( index ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );\n\t\t\tthis.setIndex( index );\n\n\t\t},\n\t\taddAttribute: function ( name, attribute ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute().' );\n\n\t\t\tif ( ! ( attribute && attribute.isBufferAttribute ) && ! ( attribute && attribute.isInterleavedBufferAttribute ) ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );\n\n\t\t\t\treturn this.setAttribute( name, new BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );\n\n\t\t\t}\n\n\t\t\tif ( name === 'index' ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );\n\t\t\t\tthis.setIndex( attribute );\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\treturn this.setAttribute( name, attribute );\n\n\t\t},\n\t\taddDrawCall: function ( start, count, indexOffset ) {\n\n\t\t\tif ( indexOffset !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );\n\n\t\t\t}\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );\n\t\t\tthis.addGroup( start, count );\n\n\t\t},\n\t\tclearDrawCalls: function () {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );\n\t\t\tthis.clearGroups();\n\n\t\t},\n\t\tcomputeTangents: function () {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );\n\n\t\t},\n\t\tcomputeOffsets: function () {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );\n\n\t\t},\n\t\tremoveAttribute: function ( name ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute().' );\n\n\t\t\treturn this.deleteAttribute( name );\n\n\t\t},\n\t\tapplyMatrix: function ( matrix ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4().' );\n\t\t\treturn this.applyMatrix4( matrix );\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( BufferGeometry.prototype, {\n\n\t\tdrawcalls: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );\n\t\t\t\treturn this.groups;\n\n\t\t\t}\n\t\t},\n\t\toffsets: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );\n\t\t\t\treturn this.groups;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( InterleavedBuffer.prototype, {\n\n\t\tdynamic: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.' );\n\t\t\t\treturn this.usage === DynamicDrawUsage;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.' );\n\t\t\t\tthis.setUsage( value );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.assign( InterleavedBuffer.prototype, {\n\t\tsetDynamic: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead.' );\n\t\t\tthis.setUsage( value === true ? DynamicDrawUsage : StaticDrawUsage );\n\t\t\treturn this;\n\n\t\t},\n\t\tsetArray: function ( /* array */ ) {\n\n\t\t\tconsole.error( 'THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers' );\n\n\t\t}\n\t} );\n\n\t//\n\n\tObject.assign( ExtrudeBufferGeometry.prototype, {\n\n\t\tgetArrays: function () {\n\n\t\t\tconsole.error( 'THREE.ExtrudeBufferGeometry: .getArrays() has been removed.' );\n\n\t\t},\n\n\t\taddShapeList: function () {\n\n\t\t\tconsole.error( 'THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.' );\n\n\t\t},\n\n\t\taddShape: function () {\n\n\t\t\tconsole.error( 'THREE.ExtrudeBufferGeometry: .addShape() has been removed.' );\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.defineProperties( Uniform.prototype, {\n\n\t\tdynamic: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.' );\n\n\t\t\t}\n\t\t},\n\t\tonUpdate: {\n\t\t\tvalue: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.' );\n\t\t\t\treturn this;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.defineProperties( Material.prototype, {\n\n\t\twrapAround: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Material: .wrapAround has been removed.' );\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Material: .wrapAround has been removed.' );\n\n\t\t\t}\n\t\t},\n\n\t\toverdraw: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Material: .overdraw has been removed.' );\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Material: .overdraw has been removed.' );\n\n\t\t\t}\n\t\t},\n\n\t\twrapRGB: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Material: .wrapRGB has been removed.' );\n\t\t\t\treturn new Color();\n\n\t\t\t}\n\t\t},\n\n\t\tshading: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.error( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\n\t\t\t\tthis.flatShading = ( value === FlatShading );\n\n\t\t\t}\n\t\t},\n\n\t\tstencilMask: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.' );\n\t\t\t\treturn this.stencilFuncMask;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.' );\n\t\t\t\tthis.stencilFuncMask = value;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( MeshPhongMaterial.prototype, {\n\n\t\tmetal: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );\n\t\t\t\treturn false;\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( ShaderMaterial.prototype, {\n\n\t\tderivatives: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t\t\t\treturn this.extensions.derivatives;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t\t\t\tthis.extensions.derivatives = value;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.assign( WebGLRenderer.prototype, {\n\n\t\tclearTarget: function ( renderTarget, color, depth, stencil ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.' );\n\t\t\tthis.setRenderTarget( renderTarget );\n\t\t\tthis.clear( color, depth, stencil );\n\n\t\t},\n\t\tanimate: function ( callback ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .animate() is now .setAnimationLoop().' );\n\t\t\tthis.setAnimationLoop( callback );\n\n\t\t},\n\t\tgetCurrentRenderTarget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().' );\n\t\t\treturn this.getRenderTarget();\n\n\t\t},\n\t\tgetMaxAnisotropy: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().' );\n\t\t\treturn this.capabilities.getMaxAnisotropy();\n\n\t\t},\n\t\tgetPrecision: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.' );\n\t\t\treturn this.capabilities.precision;\n\n\t\t},\n\t\tresetGLState: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .resetGLState() is now .state.reset().' );\n\t\t\treturn this.state.reset();\n\n\t\t},\n\t\tsupportsFloatTextures: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).' );\n\t\t\treturn this.extensions.get( 'OES_texture_float' );\n\n\t\t},\n\t\tsupportsHalfFloatTextures: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).' );\n\t\t\treturn this.extensions.get( 'OES_texture_half_float' );\n\n\t\t},\n\t\tsupportsStandardDerivatives: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).' );\n\t\t\treturn this.extensions.get( 'OES_standard_derivatives' );\n\n\t\t},\n\t\tsupportsCompressedTextureS3TC: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).' );\n\t\t\treturn this.extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n\t\t},\n\t\tsupportsCompressedTexturePVRTC: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).' );\n\t\t\treturn this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n\t\t},\n\t\tsupportsBlendMinMax: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).' );\n\t\t\treturn this.extensions.get( 'EXT_blend_minmax' );\n\n\t\t},\n\t\tsupportsVertexTextures: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.' );\n\t\t\treturn this.capabilities.vertexTextures;\n\n\t\t},\n\t\tsupportsInstancedArrays: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).' );\n\t\t\treturn this.extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t},\n\t\tenableScissorTest: function ( boolean ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );\n\t\t\tthis.setScissorTest( boolean );\n\n\t\t},\n\t\tinitMaterial: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );\n\n\t\t},\n\t\taddPrePlugin: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );\n\n\t\t},\n\t\taddPostPlugin: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );\n\n\t\t},\n\t\tupdateShadowMap: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );\n\n\t\t},\n\t\tsetFaceCulling: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .setFaceCulling() has been removed.' );\n\n\t\t},\n\t\tallocTextureUnit: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .allocTextureUnit() has been removed.' );\n\n\t\t},\n\t\tsetTexture: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .setTexture() has been removed.' );\n\n\t\t},\n\t\tsetTexture2D: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .setTexture2D() has been removed.' );\n\n\t\t},\n\t\tsetTextureCube: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .setTextureCube() has been removed.' );\n\n\t\t},\n\t\tgetActiveMipMapLevel: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().' );\n\t\t\treturn this.getActiveMipmapLevel();\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( WebGLRenderer.prototype, {\n\n\t\tshadowMapEnabled: {\n\t\t\tget: function () {\n\n\t\t\t\treturn this.shadowMap.enabled;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );\n\t\t\t\tthis.shadowMap.enabled = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowMapType: {\n\t\t\tget: function () {\n\n\t\t\t\treturn this.shadowMap.type;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );\n\t\t\t\tthis.shadowMap.type = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowMapCullFace: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );\n\t\t\t\treturn undefined;\n\n\t\t\t},\n\t\t\tset: function ( /* value */ ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );\n\n\t\t\t}\n\t\t},\n\t\tcontext: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.' );\n\t\t\t\treturn this.getContext();\n\n\t\t\t}\n\t\t},\n\t\tvr: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .vr has been renamed to .xr' );\n\t\t\t\treturn this.xr;\n\n\t\t\t}\n\t\t},\n\t\tgammaInput: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.' );\n\t\t\t\treturn false;\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.' );\n\n\t\t\t}\n\t\t},\n\t\tgammaOutput: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.' );\n\t\t\t\treturn false;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.' );\n\t\t\t\tthis.outputEncoding = ( value === true ) ? sRGBEncoding : LinearEncoding;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( WebGLShadowMap.prototype, {\n\n\t\tcullFace: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );\n\t\t\t\treturn undefined;\n\n\t\t\t},\n\t\t\tset: function ( /* cullFace */ ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );\n\n\t\t\t}\n\t\t},\n\t\trenderReverseSided: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );\n\t\t\t\treturn undefined;\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );\n\n\t\t\t}\n\t\t},\n\t\trenderSingleSided: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );\n\t\t\t\treturn undefined;\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tfunction WebGLRenderTargetCube( width, height, options ) {\n\n\t\tconsole.warn( 'THREE.WebGLRenderTargetCube( width, height, options ) is now WebGLCubeRenderTarget( size, options ).' );\n\t\treturn new WebGLCubeRenderTarget( width, options );\n\n\t}\n\n\t//\n\n\tObject.defineProperties( WebGLRenderTarget.prototype, {\n\n\t\twrapS: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t\t\t\treturn this.texture.wrapS;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t\t\t\tthis.texture.wrapS = value;\n\n\t\t\t}\n\t\t},\n\t\twrapT: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t\t\t\treturn this.texture.wrapT;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t\t\t\tthis.texture.wrapT = value;\n\n\t\t\t}\n\t\t},\n\t\tmagFilter: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t\t\t\treturn this.texture.magFilter;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t\t\t\tthis.texture.magFilter = value;\n\n\t\t\t}\n\t\t},\n\t\tminFilter: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t\t\t\treturn this.texture.minFilter;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t\t\t\tthis.texture.minFilter = value;\n\n\t\t\t}\n\t\t},\n\t\tanisotropy: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t\t\t\treturn this.texture.anisotropy;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t\t\t\tthis.texture.anisotropy = value;\n\n\t\t\t}\n\t\t},\n\t\toffset: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t\t\t\treturn this.texture.offset;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t\t\t\tthis.texture.offset = value;\n\n\t\t\t}\n\t\t},\n\t\trepeat: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t\t\t\treturn this.texture.repeat;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t\t\t\tthis.texture.repeat = value;\n\n\t\t\t}\n\t\t},\n\t\tformat: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t\t\t\treturn this.texture.format;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t\t\t\tthis.texture.format = value;\n\n\t\t\t}\n\t\t},\n\t\ttype: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t\t\t\treturn this.texture.type;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t\t\t\tthis.texture.type = value;\n\n\t\t\t}\n\t\t},\n\t\tgenerateMipmaps: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t\t\t\treturn this.texture.generateMipmaps;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t\t\t\tthis.texture.generateMipmaps = value;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.defineProperties( Audio.prototype, {\n\n\t\tload: {\n\t\t\tvalue: function ( file ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.' );\n\t\t\t\tvar scope = this;\n\t\t\t\tvar audioLoader = new AudioLoader();\n\t\t\t\taudioLoader.load( file, function ( buffer ) {\n\n\t\t\t\t\tscope.setBuffer( buffer );\n\n\t\t\t\t} );\n\t\t\t\treturn this;\n\n\t\t\t}\n\t\t},\n\t\tstartTime: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: .startTime is now .play( delay ).' );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tAudioAnalyser.prototype.getData = function () {\n\n\t\tconsole.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );\n\t\treturn this.getFrequencyData();\n\n\t};\n\n\t//\n\n\tCubeCamera.prototype.updateCubeMap = function ( renderer, scene ) {\n\n\t\tconsole.warn( 'THREE.CubeCamera: .updateCubeMap() is now .update().' );\n\t\treturn this.update( renderer, scene );\n\n\t};\n\n\t//\n\n\tvar GeometryUtils = {\n\n\t\tmerge: function ( geometry1, geometry2, materialIndexOffset ) {\n\n\t\t\tconsole.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );\n\t\t\tvar matrix;\n\n\t\t\tif ( geometry2.isMesh ) {\n\n\t\t\t\tgeometry2.matrixAutoUpdate && geometry2.updateMatrix();\n\n\t\t\t\tmatrix = geometry2.matrix;\n\t\t\t\tgeometry2 = geometry2.geometry;\n\n\t\t\t}\n\n\t\t\tgeometry1.merge( geometry2, matrix, materialIndexOffset );\n\n\t\t},\n\n\t\tcenter: function ( geometry ) {\n\n\t\t\tconsole.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );\n\t\t\treturn geometry.center();\n\n\t\t}\n\n\t};\n\n\tImageUtils.crossOrigin = undefined;\n\n\tImageUtils.loadTexture = function ( url, mapping, onLoad, onError ) {\n\n\t\tconsole.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );\n\n\t\tvar loader = new TextureLoader();\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\tvar texture = loader.load( url, onLoad, undefined, onError );\n\n\t\tif ( mapping ) { texture.mapping = mapping; }\n\n\t\treturn texture;\n\n\t};\n\n\tImageUtils.loadTextureCube = function ( urls, mapping, onLoad, onError ) {\n\n\t\tconsole.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );\n\n\t\tvar loader = new CubeTextureLoader();\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\tvar texture = loader.load( urls, onLoad, undefined, onError );\n\n\t\tif ( mapping ) { texture.mapping = mapping; }\n\n\t\treturn texture;\n\n\t};\n\n\tImageUtils.loadCompressedTexture = function () {\n\n\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );\n\n\t};\n\n\tImageUtils.loadCompressedTextureCube = function () {\n\n\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );\n\n\t};\n\n\t//\n\n\tfunction CanvasRenderer() {\n\n\t\tconsole.error( 'THREE.CanvasRenderer has been removed' );\n\n\t}\n\n\t//\n\n\tfunction JSONLoader() {\n\n\t\tconsole.error( 'THREE.JSONLoader has been removed.' );\n\n\t}\n\n\t//\n\n\tvar SceneUtils = {\n\n\t\tcreateMultiMaterialObject: function ( /* geometry, materials */ ) {\n\n\t\t\tconsole.error( 'THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js' );\n\n\t\t},\n\n\t\tdetach: function ( /* child, parent, scene */ ) {\n\n\t\t\tconsole.error( 'THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js' );\n\n\t\t},\n\n\t\tattach: function ( /* child, scene, parent */ ) {\n\n\t\t\tconsole.error( 'THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js' );\n\n\t\t}\n\n\t};\n\n\t//\n\n\tfunction LensFlare() {\n\n\t\tconsole.error( 'THREE.LensFlare has been moved to /examples/js/objects/Lensflare.js' );\n\n\t}\n\n\tif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n\n\t\t/* eslint-disable no-undef */\n\t\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'register', { detail: {\n\t\t\trevision: REVISION,\n\t\t} } ) );\n\t\t/* eslint-enable no-undef */\n\n\t}\n\n\texports.ACESFilmicToneMapping = ACESFilmicToneMapping;\n\texports.AddEquation = AddEquation;\n\texports.AddOperation = AddOperation;\n\texports.AdditiveBlending = AdditiveBlending;\n\texports.AlphaFormat = AlphaFormat;\n\texports.AlwaysDepth = AlwaysDepth;\n\texports.AlwaysStencilFunc = AlwaysStencilFunc;\n\texports.AmbientLight = AmbientLight;\n\texports.AmbientLightProbe = AmbientLightProbe;\n\texports.AnimationClip = AnimationClip;\n\texports.AnimationLoader = AnimationLoader;\n\texports.AnimationMixer = AnimationMixer;\n\texports.AnimationObjectGroup = AnimationObjectGroup;\n\texports.AnimationUtils = AnimationUtils;\n\texports.ArcCurve = ArcCurve;\n\texports.ArrayCamera = ArrayCamera;\n\texports.ArrowHelper = ArrowHelper;\n\texports.Audio = Audio;\n\texports.AudioAnalyser = AudioAnalyser;\n\texports.AudioContext = AudioContext;\n\texports.AudioListener = AudioListener;\n\texports.AudioLoader = AudioLoader;\n\texports.AxesHelper = AxesHelper;\n\texports.AxisHelper = AxisHelper;\n\texports.BackSide = BackSide;\n\texports.BasicDepthPacking = BasicDepthPacking;\n\texports.BasicShadowMap = BasicShadowMap;\n\texports.BinaryTextureLoader = BinaryTextureLoader;\n\texports.Bone = Bone;\n\texports.BooleanKeyframeTrack = BooleanKeyframeTrack;\n\texports.BoundingBoxHelper = BoundingBoxHelper;\n\texports.Box2 = Box2;\n\texports.Box3 = Box3;\n\texports.Box3Helper = Box3Helper;\n\texports.BoxBufferGeometry = BoxBufferGeometry;\n\texports.BoxGeometry = BoxGeometry;\n\texports.BoxHelper = BoxHelper;\n\texports.BufferAttribute = BufferAttribute;\n\texports.BufferGeometry = BufferGeometry;\n\texports.BufferGeometryLoader = BufferGeometryLoader;\n\texports.ByteType = ByteType;\n\texports.Cache = Cache;\n\texports.Camera = Camera;\n\texports.CameraHelper = CameraHelper;\n\texports.CanvasRenderer = CanvasRenderer;\n\texports.CanvasTexture = CanvasTexture;\n\texports.CatmullRomCurve3 = CatmullRomCurve3;\n\texports.CineonToneMapping = CineonToneMapping;\n\texports.CircleBufferGeometry = CircleBufferGeometry;\n\texports.CircleGeometry = CircleGeometry;\n\texports.ClampToEdgeWrapping = ClampToEdgeWrapping;\n\texports.Clock = Clock;\n\texports.ClosedSplineCurve3 = ClosedSplineCurve3;\n\texports.Color = Color;\n\texports.ColorKeyframeTrack = ColorKeyframeTrack;\n\texports.CompressedTexture = CompressedTexture;\n\texports.CompressedTextureLoader = CompressedTextureLoader;\n\texports.ConeBufferGeometry = ConeBufferGeometry;\n\texports.ConeGeometry = ConeGeometry;\n\texports.CubeCamera = CubeCamera;\n\texports.CubeGeometry = BoxGeometry;\n\texports.CubeReflectionMapping = CubeReflectionMapping;\n\texports.CubeRefractionMapping = CubeRefractionMapping;\n\texports.CubeTexture = CubeTexture;\n\texports.CubeTextureLoader = CubeTextureLoader;\n\texports.CubeUVReflectionMapping = CubeUVReflectionMapping;\n\texports.CubeUVRefractionMapping = CubeUVRefractionMapping;\n\texports.CubicBezierCurve = CubicBezierCurve;\n\texports.CubicBezierCurve3 = CubicBezierCurve3;\n\texports.CubicInterpolant = CubicInterpolant;\n\texports.CullFaceBack = CullFaceBack;\n\texports.CullFaceFront = CullFaceFront;\n\texports.CullFaceFrontBack = CullFaceFrontBack;\n\texports.CullFaceNone = CullFaceNone;\n\texports.Curve = Curve;\n\texports.CurvePath = CurvePath;\n\texports.CustomBlending = CustomBlending;\n\texports.CylinderBufferGeometry = CylinderBufferGeometry;\n\texports.CylinderGeometry = CylinderGeometry;\n\texports.Cylindrical = Cylindrical;\n\texports.DataTexture = DataTexture;\n\texports.DataTexture2DArray = DataTexture2DArray;\n\texports.DataTexture3D = DataTexture3D;\n\texports.DataTextureLoader = DataTextureLoader;\n\texports.DecrementStencilOp = DecrementStencilOp;\n\texports.DecrementWrapStencilOp = DecrementWrapStencilOp;\n\texports.DefaultLoadingManager = DefaultLoadingManager;\n\texports.DepthFormat = DepthFormat;\n\texports.DepthStencilFormat = DepthStencilFormat;\n\texports.DepthTexture = DepthTexture;\n\texports.DirectionalLight = DirectionalLight;\n\texports.DirectionalLightHelper = DirectionalLightHelper;\n\texports.DirectionalLightShadow = DirectionalLightShadow;\n\texports.DiscreteInterpolant = DiscreteInterpolant;\n\texports.DodecahedronBufferGeometry = DodecahedronBufferGeometry;\n\texports.DodecahedronGeometry = DodecahedronGeometry;\n\texports.DoubleSide = DoubleSide;\n\texports.DstAlphaFactor = DstAlphaFactor;\n\texports.DstColorFactor = DstColorFactor;\n\texports.DynamicBufferAttribute = DynamicBufferAttribute;\n\texports.DynamicCopyUsage = DynamicCopyUsage;\n\texports.DynamicDrawUsage = DynamicDrawUsage;\n\texports.DynamicReadUsage = DynamicReadUsage;\n\texports.EdgesGeometry = EdgesGeometry;\n\texports.EdgesHelper = EdgesHelper;\n\texports.EllipseCurve = EllipseCurve;\n\texports.EqualDepth = EqualDepth;\n\texports.EqualStencilFunc = EqualStencilFunc;\n\texports.EquirectangularReflectionMapping = EquirectangularReflectionMapping;\n\texports.EquirectangularRefractionMapping = EquirectangularRefractionMapping;\n\texports.Euler = Euler;\n\texports.EventDispatcher = EventDispatcher;\n\texports.ExtrudeBufferGeometry = ExtrudeBufferGeometry;\n\texports.ExtrudeGeometry = ExtrudeGeometry;\n\texports.Face3 = Face3;\n\texports.Face4 = Face4;\n\texports.FaceColors = FaceColors;\n\texports.FileLoader = FileLoader;\n\texports.FlatShading = FlatShading;\n\texports.Float32Attribute = Float32Attribute;\n\texports.Float32BufferAttribute = Float32BufferAttribute;\n\texports.Float64Attribute = Float64Attribute;\n\texports.Float64BufferAttribute = Float64BufferAttribute;\n\texports.FloatType = FloatType;\n\texports.Fog = Fog;\n\texports.FogExp2 = FogExp2;\n\texports.Font = Font;\n\texports.FontLoader = FontLoader;\n\texports.FrontFaceDirectionCCW = FrontFaceDirectionCCW;\n\texports.FrontFaceDirectionCW = FrontFaceDirectionCW;\n\texports.FrontSide = FrontSide;\n\texports.Frustum = Frustum;\n\texports.GammaEncoding = GammaEncoding;\n\texports.Geometry = Geometry;\n\texports.GeometryUtils = GeometryUtils;\n\texports.GreaterDepth = GreaterDepth;\n\texports.GreaterEqualDepth = GreaterEqualDepth;\n\texports.GreaterEqualStencilFunc = GreaterEqualStencilFunc;\n\texports.GreaterStencilFunc = GreaterStencilFunc;\n\texports.GridHelper = GridHelper;\n\texports.Group = Group;\n\texports.HalfFloatType = HalfFloatType;\n\texports.HemisphereLight = HemisphereLight;\n\texports.HemisphereLightHelper = HemisphereLightHelper;\n\texports.HemisphereLightProbe = HemisphereLightProbe;\n\texports.IcosahedronBufferGeometry = IcosahedronBufferGeometry;\n\texports.IcosahedronGeometry = IcosahedronGeometry;\n\texports.ImageBitmapLoader = ImageBitmapLoader;\n\texports.ImageLoader = ImageLoader;\n\texports.ImageUtils = ImageUtils;\n\texports.ImmediateRenderObject = ImmediateRenderObject;\n\texports.IncrementStencilOp = IncrementStencilOp;\n\texports.IncrementWrapStencilOp = IncrementWrapStencilOp;\n\texports.InstancedBufferAttribute = InstancedBufferAttribute;\n\texports.InstancedBufferGeometry = InstancedBufferGeometry;\n\texports.InstancedInterleavedBuffer = InstancedInterleavedBuffer;\n\texports.InstancedMesh = InstancedMesh;\n\texports.Int16Attribute = Int16Attribute;\n\texports.Int16BufferAttribute = Int16BufferAttribute;\n\texports.Int32Attribute = Int32Attribute;\n\texports.Int32BufferAttribute = Int32BufferAttribute;\n\texports.Int8Attribute = Int8Attribute;\n\texports.Int8BufferAttribute = Int8BufferAttribute;\n\texports.IntType = IntType;\n\texports.InterleavedBuffer = InterleavedBuffer;\n\texports.InterleavedBufferAttribute = InterleavedBufferAttribute;\n\texports.Interpolant = Interpolant;\n\texports.InterpolateDiscrete = InterpolateDiscrete;\n\texports.InterpolateLinear = InterpolateLinear;\n\texports.InterpolateSmooth = InterpolateSmooth;\n\texports.InvertStencilOp = InvertStencilOp;\n\texports.JSONLoader = JSONLoader;\n\texports.KeepStencilOp = KeepStencilOp;\n\texports.KeyframeTrack = KeyframeTrack;\n\texports.LOD = LOD;\n\texports.LatheBufferGeometry = LatheBufferGeometry;\n\texports.LatheGeometry = LatheGeometry;\n\texports.Layers = Layers;\n\texports.LensFlare = LensFlare;\n\texports.LessDepth = LessDepth;\n\texports.LessEqualDepth = LessEqualDepth;\n\texports.LessEqualStencilFunc = LessEqualStencilFunc;\n\texports.LessStencilFunc = LessStencilFunc;\n\texports.Light = Light;\n\texports.LightProbe = LightProbe;\n\texports.LightShadow = LightShadow;\n\texports.Line = Line;\n\texports.Line3 = Line3;\n\texports.LineBasicMaterial = LineBasicMaterial;\n\texports.LineCurve = LineCurve;\n\texports.LineCurve3 = LineCurve3;\n\texports.LineDashedMaterial = LineDashedMaterial;\n\texports.LineLoop = LineLoop;\n\texports.LinePieces = LinePieces;\n\texports.LineSegments = LineSegments;\n\texports.LineStrip = LineStrip;\n\texports.LinearEncoding = LinearEncoding;\n\texports.LinearFilter = LinearFilter;\n\texports.LinearInterpolant = LinearInterpolant;\n\texports.LinearMipMapLinearFilter = LinearMipMapLinearFilter;\n\texports.LinearMipMapNearestFilter = LinearMipMapNearestFilter;\n\texports.LinearMipmapLinearFilter = LinearMipmapLinearFilter;\n\texports.LinearMipmapNearestFilter = LinearMipmapNearestFilter;\n\texports.LinearToneMapping = LinearToneMapping;\n\texports.Loader = Loader;\n\texports.LoaderUtils = LoaderUtils;\n\texports.LoadingManager = LoadingManager;\n\texports.LogLuvEncoding = LogLuvEncoding;\n\texports.LoopOnce = LoopOnce;\n\texports.LoopPingPong = LoopPingPong;\n\texports.LoopRepeat = LoopRepeat;\n\texports.LuminanceAlphaFormat = LuminanceAlphaFormat;\n\texports.LuminanceFormat = LuminanceFormat;\n\texports.MOUSE = MOUSE;\n\texports.Material = Material;\n\texports.MaterialLoader = MaterialLoader;\n\texports.Math = MathUtils;\n\texports.MathUtils = MathUtils;\n\texports.Matrix3 = Matrix3;\n\texports.Matrix4 = Matrix4;\n\texports.MaxEquation = MaxEquation;\n\texports.Mesh = Mesh;\n\texports.MeshBasicMaterial = MeshBasicMaterial;\n\texports.MeshDepthMaterial = MeshDepthMaterial;\n\texports.MeshDistanceMaterial = MeshDistanceMaterial;\n\texports.MeshFaceMaterial = MeshFaceMaterial;\n\texports.MeshLambertMaterial = MeshLambertMaterial;\n\texports.MeshMatcapMaterial = MeshMatcapMaterial;\n\texports.MeshNormalMaterial = MeshNormalMaterial;\n\texports.MeshPhongMaterial = MeshPhongMaterial;\n\texports.MeshPhysicalMaterial = MeshPhysicalMaterial;\n\texports.MeshStandardMaterial = MeshStandardMaterial;\n\texports.MeshToonMaterial = MeshToonMaterial;\n\texports.MinEquation = MinEquation;\n\texports.MirroredRepeatWrapping = MirroredRepeatWrapping;\n\texports.MixOperation = MixOperation;\n\texports.MultiMaterial = MultiMaterial;\n\texports.MultiplyBlending = MultiplyBlending;\n\texports.MultiplyOperation = MultiplyOperation;\n\texports.NearestFilter = NearestFilter;\n\texports.NearestMipMapLinearFilter = NearestMipMapLinearFilter;\n\texports.NearestMipMapNearestFilter = NearestMipMapNearestFilter;\n\texports.NearestMipmapLinearFilter = NearestMipmapLinearFilter;\n\texports.NearestMipmapNearestFilter = NearestMipmapNearestFilter;\n\texports.NeverDepth = NeverDepth;\n\texports.NeverStencilFunc = NeverStencilFunc;\n\texports.NoBlending = NoBlending;\n\texports.NoColors = NoColors;\n\texports.NoToneMapping = NoToneMapping;\n\texports.NormalBlending = NormalBlending;\n\texports.NotEqualDepth = NotEqualDepth;\n\texports.NotEqualStencilFunc = NotEqualStencilFunc;\n\texports.NumberKeyframeTrack = NumberKeyframeTrack;\n\texports.Object3D = Object3D;\n\texports.ObjectLoader = ObjectLoader;\n\texports.ObjectSpaceNormalMap = ObjectSpaceNormalMap;\n\texports.OctahedronBufferGeometry = OctahedronBufferGeometry;\n\texports.OctahedronGeometry = OctahedronGeometry;\n\texports.OneFactor = OneFactor;\n\texports.OneMinusDstAlphaFactor = OneMinusDstAlphaFactor;\n\texports.OneMinusDstColorFactor = OneMinusDstColorFactor;\n\texports.OneMinusSrcAlphaFactor = OneMinusSrcAlphaFactor;\n\texports.OneMinusSrcColorFactor = OneMinusSrcColorFactor;\n\texports.OrthographicCamera = OrthographicCamera;\n\texports.PCFShadowMap = PCFShadowMap;\n\texports.PCFSoftShadowMap = PCFSoftShadowMap;\n\texports.PMREMGenerator = PMREMGenerator;\n\texports.ParametricBufferGeometry = ParametricBufferGeometry;\n\texports.ParametricGeometry = ParametricGeometry;\n\texports.Particle = Particle;\n\texports.ParticleBasicMaterial = ParticleBasicMaterial;\n\texports.ParticleSystem = ParticleSystem;\n\texports.ParticleSystemMaterial = ParticleSystemMaterial;\n\texports.Path = Path;\n\texports.PerspectiveCamera = PerspectiveCamera;\n\texports.Plane = Plane;\n\texports.PlaneBufferGeometry = PlaneBufferGeometry;\n\texports.PlaneGeometry = PlaneGeometry;\n\texports.PlaneHelper = PlaneHelper;\n\texports.PointCloud = PointCloud;\n\texports.PointCloudMaterial = PointCloudMaterial;\n\texports.PointLight = PointLight;\n\texports.PointLightHelper = PointLightHelper;\n\texports.Points = Points;\n\texports.PointsMaterial = PointsMaterial;\n\texports.PolarGridHelper = PolarGridHelper;\n\texports.PolyhedronBufferGeometry = PolyhedronBufferGeometry;\n\texports.PolyhedronGeometry = PolyhedronGeometry;\n\texports.PositionalAudio = PositionalAudio;\n\texports.PropertyBinding = PropertyBinding;\n\texports.PropertyMixer = PropertyMixer;\n\texports.QuadraticBezierCurve = QuadraticBezierCurve;\n\texports.QuadraticBezierCurve3 = QuadraticBezierCurve3;\n\texports.Quaternion = Quaternion;\n\texports.QuaternionKeyframeTrack = QuaternionKeyframeTrack;\n\texports.QuaternionLinearInterpolant = QuaternionLinearInterpolant;\n\texports.REVISION = REVISION;\n\texports.RGBADepthPacking = RGBADepthPacking;\n\texports.RGBAFormat = RGBAFormat;\n\texports.RGBAIntegerFormat = RGBAIntegerFormat;\n\texports.RGBA_ASTC_10x10_Format = RGBA_ASTC_10x10_Format;\n\texports.RGBA_ASTC_10x5_Format = RGBA_ASTC_10x5_Format;\n\texports.RGBA_ASTC_10x6_Format = RGBA_ASTC_10x6_Format;\n\texports.RGBA_ASTC_10x8_Format = RGBA_ASTC_10x8_Format;\n\texports.RGBA_ASTC_12x10_Format = RGBA_ASTC_12x10_Format;\n\texports.RGBA_ASTC_12x12_Format = RGBA_ASTC_12x12_Format;\n\texports.RGBA_ASTC_4x4_Format = RGBA_ASTC_4x4_Format;\n\texports.RGBA_ASTC_5x4_Format = RGBA_ASTC_5x4_Format;\n\texports.RGBA_ASTC_5x5_Format = RGBA_ASTC_5x5_Format;\n\texports.RGBA_ASTC_6x5_Format = RGBA_ASTC_6x5_Format;\n\texports.RGBA_ASTC_6x6_Format = RGBA_ASTC_6x6_Format;\n\texports.RGBA_ASTC_8x5_Format = RGBA_ASTC_8x5_Format;\n\texports.RGBA_ASTC_8x6_Format = RGBA_ASTC_8x6_Format;\n\texports.RGBA_ASTC_8x8_Format = RGBA_ASTC_8x8_Format;\n\texports.RGBA_PVRTC_2BPPV1_Format = RGBA_PVRTC_2BPPV1_Format;\n\texports.RGBA_PVRTC_4BPPV1_Format = RGBA_PVRTC_4BPPV1_Format;\n\texports.RGBA_S3TC_DXT1_Format = RGBA_S3TC_DXT1_Format;\n\texports.RGBA_S3TC_DXT3_Format = RGBA_S3TC_DXT3_Format;\n\texports.RGBA_S3TC_DXT5_Format = RGBA_S3TC_DXT5_Format;\n\texports.RGBDEncoding = RGBDEncoding;\n\texports.RGBEEncoding = RGBEEncoding;\n\texports.RGBEFormat = RGBEFormat;\n\texports.RGBFormat = RGBFormat;\n\texports.RGBIntegerFormat = RGBIntegerFormat;\n\texports.RGBM16Encoding = RGBM16Encoding;\n\texports.RGBM7Encoding = RGBM7Encoding;\n\texports.RGB_ETC1_Format = RGB_ETC1_Format;\n\texports.RGB_PVRTC_2BPPV1_Format = RGB_PVRTC_2BPPV1_Format;\n\texports.RGB_PVRTC_4BPPV1_Format = RGB_PVRTC_4BPPV1_Format;\n\texports.RGB_S3TC_DXT1_Format = RGB_S3TC_DXT1_Format;\n\texports.RGFormat = RGFormat;\n\texports.RGIntegerFormat = RGIntegerFormat;\n\texports.RawShaderMaterial = RawShaderMaterial;\n\texports.Ray = Ray;\n\texports.Raycaster = Raycaster;\n\texports.RectAreaLight = RectAreaLight;\n\texports.RedFormat = RedFormat;\n\texports.RedIntegerFormat = RedIntegerFormat;\n\texports.ReinhardToneMapping = ReinhardToneMapping;\n\texports.RepeatWrapping = RepeatWrapping;\n\texports.ReplaceStencilOp = ReplaceStencilOp;\n\texports.ReverseSubtractEquation = ReverseSubtractEquation;\n\texports.RingBufferGeometry = RingBufferGeometry;\n\texports.RingGeometry = RingGeometry;\n\texports.Scene = Scene;\n\texports.SceneUtils = SceneUtils;\n\texports.ShaderChunk = ShaderChunk;\n\texports.ShaderLib = ShaderLib;\n\texports.ShaderMaterial = ShaderMaterial;\n\texports.ShadowMaterial = ShadowMaterial;\n\texports.Shape = Shape;\n\texports.ShapeBufferGeometry = ShapeBufferGeometry;\n\texports.ShapeGeometry = ShapeGeometry;\n\texports.ShapePath = ShapePath;\n\texports.ShapeUtils = ShapeUtils;\n\texports.ShortType = ShortType;\n\texports.Skeleton = Skeleton;\n\texports.SkeletonHelper = SkeletonHelper;\n\texports.SkinnedMesh = SkinnedMesh;\n\texports.SmoothShading = SmoothShading;\n\texports.Sphere = Sphere;\n\texports.SphereBufferGeometry = SphereBufferGeometry;\n\texports.SphereGeometry = SphereGeometry;\n\texports.Spherical = Spherical;\n\texports.SphericalHarmonics3 = SphericalHarmonics3;\n\texports.SphericalReflectionMapping = SphericalReflectionMapping;\n\texports.Spline = Spline;\n\texports.SplineCurve = SplineCurve;\n\texports.SplineCurve3 = SplineCurve3;\n\texports.SpotLight = SpotLight;\n\texports.SpotLightHelper = SpotLightHelper;\n\texports.SpotLightShadow = SpotLightShadow;\n\texports.Sprite = Sprite;\n\texports.SpriteMaterial = SpriteMaterial;\n\texports.SrcAlphaFactor = SrcAlphaFactor;\n\texports.SrcAlphaSaturateFactor = SrcAlphaSaturateFactor;\n\texports.SrcColorFactor = SrcColorFactor;\n\texports.StaticCopyUsage = StaticCopyUsage;\n\texports.StaticDrawUsage = StaticDrawUsage;\n\texports.StaticReadUsage = StaticReadUsage;\n\texports.StereoCamera = StereoCamera;\n\texports.StreamCopyUsage = StreamCopyUsage;\n\texports.StreamDrawUsage = StreamDrawUsage;\n\texports.StreamReadUsage = StreamReadUsage;\n\texports.StringKeyframeTrack = StringKeyframeTrack;\n\texports.SubtractEquation = SubtractEquation;\n\texports.SubtractiveBlending = SubtractiveBlending;\n\texports.TOUCH = TOUCH;\n\texports.TangentSpaceNormalMap = TangentSpaceNormalMap;\n\texports.TetrahedronBufferGeometry = TetrahedronBufferGeometry;\n\texports.TetrahedronGeometry = TetrahedronGeometry;\n\texports.TextBufferGeometry = TextBufferGeometry;\n\texports.TextGeometry = TextGeometry;\n\texports.Texture = Texture;\n\texports.TextureLoader = TextureLoader;\n\texports.TorusBufferGeometry = TorusBufferGeometry;\n\texports.TorusGeometry = TorusGeometry;\n\texports.TorusKnotBufferGeometry = TorusKnotBufferGeometry;\n\texports.TorusKnotGeometry = TorusKnotGeometry;\n\texports.Triangle = Triangle;\n\texports.TriangleFanDrawMode = TriangleFanDrawMode;\n\texports.TriangleStripDrawMode = TriangleStripDrawMode;\n\texports.TrianglesDrawMode = TrianglesDrawMode;\n\texports.TubeBufferGeometry = TubeBufferGeometry;\n\texports.TubeGeometry = TubeGeometry;\n\texports.UVMapping = UVMapping;\n\texports.Uint16Attribute = Uint16Attribute;\n\texports.Uint16BufferAttribute = Uint16BufferAttribute;\n\texports.Uint32Attribute = Uint32Attribute;\n\texports.Uint32BufferAttribute = Uint32BufferAttribute;\n\texports.Uint8Attribute = Uint8Attribute;\n\texports.Uint8BufferAttribute = Uint8BufferAttribute;\n\texports.Uint8ClampedAttribute = Uint8ClampedAttribute;\n\texports.Uint8ClampedBufferAttribute = Uint8ClampedBufferAttribute;\n\texports.Uncharted2ToneMapping = Uncharted2ToneMapping;\n\texports.Uniform = Uniform;\n\texports.UniformsLib = UniformsLib;\n\texports.UniformsUtils = UniformsUtils;\n\texports.UnsignedByteType = UnsignedByteType;\n\texports.UnsignedInt248Type = UnsignedInt248Type;\n\texports.UnsignedIntType = UnsignedIntType;\n\texports.UnsignedShort4444Type = UnsignedShort4444Type;\n\texports.UnsignedShort5551Type = UnsignedShort5551Type;\n\texports.UnsignedShort565Type = UnsignedShort565Type;\n\texports.UnsignedShortType = UnsignedShortType;\n\texports.VSMShadowMap = VSMShadowMap;\n\texports.Vector2 = Vector2;\n\texports.Vector3 = Vector3;\n\texports.Vector4 = Vector4;\n\texports.VectorKeyframeTrack = VectorKeyframeTrack;\n\texports.Vertex = Vertex;\n\texports.VertexColors = VertexColors;\n\texports.VideoTexture = VideoTexture;\n\texports.WebGLCubeRenderTarget = WebGLCubeRenderTarget;\n\texports.WebGLMultisampleRenderTarget = WebGLMultisampleRenderTarget;\n\texports.WebGLRenderTarget = WebGLRenderTarget;\n\texports.WebGLRenderTargetCube = WebGLRenderTargetCube;\n\texports.WebGLRenderer = WebGLRenderer;\n\texports.WebGLUtils = WebGLUtils;\n\texports.WireframeGeometry = WireframeGeometry;\n\texports.WireframeHelper = WireframeHelper;\n\texports.WrapAroundEnding = WrapAroundEnding;\n\texports.XHRLoader = XHRLoader;\n\texports.ZeroCurvatureEnding = ZeroCurvatureEnding;\n\texports.ZeroFactor = ZeroFactor;\n\texports.ZeroSlopeEnding = ZeroSlopeEnding;\n\texports.ZeroStencilOp = ZeroStencilOp;\n\texports.sRGBEncoding = sRGBEncoding;\n\n\tObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n","import { Scene, PerspectiveCamera, WebGLRenderer, BoxGeometry, MeshBasicMaterial, Mesh, Renderer, Camera, RedFormat } from 'three';\r\nimport { isWebGLAvailable, getWebGLErrorMessage } from './webgl-checker';\r\n\r\nif (!isWebGLAvailable()) {\r\n    let warning: HTMLDivElement = getWebGLErrorMessage();\r\n    document.body.appendChild(warning);\r\n    console.error(warning.innerText);\r\n}\r\n\r\nconst scene = new Scene();\r\nconst camera = new PerspectiveCamera(75, window.innerWidth / window.innerHeight,\r\n                                    0.1, 1000);\r\nconst renderer = new WebGLRenderer();\r\n\r\nlet geometry = new BoxGeometry();\r\nlet material = new MeshBasicMaterial({ color: 0xffff00 });\r\nlet cube = new Mesh(geometry, material);\r\n\r\nscene.add(cube);\r\n\r\ncamera.position.z = 5;\r\n\r\nrenderer.setSize(window.innerWidth, window.innerHeight);\r\ndocument.body.appendChild(renderer.domElement);\r\n\r\nfunction animate(): void {\r\n    requestAnimationFrame(animate);\r\n\r\n    cube.rotation.x += 0.05;\r\n    cube.rotation.y += 0.01\r\n\r\n    renderer.render(scene, camera);\r\n}\r\n\r\nfunction onWindowResize(): void {\r\n    camera.aspect = window.innerWidth / window.innerHeight;\r\n    camera.updateProjectionMatrix();\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n}\r\n\r\nwindow.addEventListener('resize', onWindowResize, false);\r\nanimate();\r\n","/**\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mr.doob / http://mrdoob.com/\r\n * @author Jack Wolfard\r\n */\r\n\r\nexport function isWebGLAvailable(): Boolean {\r\n\ttry {\r\n\t\tlet canvas = document.createElement('canvas');\r\n\t\treturn !!(window.WebGLRenderingContext\r\n\t\t\t\t\t&& (canvas.getContext('webgl') || canvas.getContext('experimental-webgl')));\r\n\t} catch (e) {\r\n\t\treturn false;\r\n\t}\r\n}\r\n\r\nexport function isWebGL2Available(): Boolean {\r\n\ttry {\r\n\t\tlet canvas = document.createElement('canvas');\r\n\t\treturn !!(window.WebGL2RenderingContext && canvas.getContext('webgl2'));\r\n\t} catch (e) {\r\n\t\treturn false;\r\n\t}\r\n}\r\n\r\nexport function getWebGLErrorMessage(): HTMLDivElement {\r\n\treturn getErrorMessage(1);\r\n}\r\n\r\nexport function getWebGL2ErrorMessage(): HTMLDivElement {\r\n\treturn getErrorMessage(2);\r\n}\r\n\r\n\r\nexport function getErrorMessage(version: number): HTMLDivElement {\r\n\tif (version > 2 || version <= 0) {\r\n\t\tconsole.error(\"Version should be 1 or 2\");\r\n\t}\r\n\r\n\tlet name: string = (version === 1) ? \"WebGL\" : \"WebGL 2\";\r\n\tlet context = (version === 1) ? window.WebGLRenderingContext : window.WebGL2RenderingContext;\r\n\tlet hw: string = (context) ? 'graphics card' : 'browser';\r\n\tlet message: string = `Your ${hw} does not seem to support <a href=\"http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation\" style=\"color:#000\">${name}</a>`;\r\n\tlet element: HTMLDivElement = document.createElement('div');\r\n\telement.id = 'webglmessage';\r\n\telement.style.fontFamily = 'monospace';\r\n\telement.style.fontSize = '13px';\r\n\telement.style.fontWeight = 'normal';\r\n\telement.style.textAlign = 'center';\r\n\telement.style.background = '#fff';\r\n\telement.style.color = '#000';\r\n\telement.style.padding = '1.5em';\r\n\telement.style.width = '400px';\r\n\telement.style.margin = '5em auto 0';\r\n\telement.innerHTML = message;\r\n\treturn element;\r\n}\r\n"]}